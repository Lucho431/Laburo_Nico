
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000358  080075b0  080075b0  000175b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007908  08007908  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08007908  08007908  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007908  08007908  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  200001ec  08007afc  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a4c  08007afc  00020a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f413  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027a7  00000000  00000000  0002f628  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ec0  00000000  00000000  00031dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d88  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000196f3  00000000  00000000  00033a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db51  00000000  00000000  0004d10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090e05  00000000  00000000  0005ac5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eba61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046f4  00000000  00000000  000ebadc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08007598 	.word	0x08007598

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08007598 	.word	0x08007598

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001036:	4a21      	ldr	r2, [pc, #132]	; (80010bc <MX_ADC1_Init+0x98>)
 8001038:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_ADC1_Init+0x94>)
 800103c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001040:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_ADC1_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001050:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001054:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001058:	2200      	movs	r2, #0
 800105a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800105c:	4b16      	ldr	r3, [pc, #88]	; (80010b8 <MX_ADC1_Init+0x94>)
 800105e:	2202      	movs	r2, #2
 8001060:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001062:	4815      	ldr	r0, [pc, #84]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001064:	f001 fb14 	bl	8002690 <HAL_ADC_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800106e:	f000 ff9d 	bl	8001fac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001076:	2301      	movs	r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800107a:	2307      	movs	r3, #7
 800107c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	480d      	ldr	r0, [pc, #52]	; (80010b8 <MX_ADC1_Init+0x94>)
 8001084:	f001 fd90 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800108e:	f000 ff8d 	bl	8001fac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001092:	2301      	movs	r3, #1
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001096:	2302      	movs	r3, #2
 8001098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_ADC1_Init+0x94>)
 80010a0:	f001 fd82 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010aa:	f000 ff7f 	bl	8001fac <Error_Handler>
  }

}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000244 	.word	0x20000244
 80010bc:	40012400 	.word	0x40012400

080010c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <HAL_ADC_MspInit+0xcc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d151      	bne.n	8001184 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 80010e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b28      	ldr	r3, [pc, #160]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b25      	ldr	r3, [pc, #148]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a24      	ldr	r2, [pc, #144]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_ADC_MspInit+0xd0>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001110:	2303      	movs	r3, #3
 8001112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001114:	2303      	movs	r3, #3
 8001116:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	4619      	mov	r1, r3
 800111e:	481d      	ldr	r0, [pc, #116]	; (8001194 <HAL_ADC_MspInit+0xd4>)
 8001120:	f002 fa40 	bl	80035a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001124:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001126:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_ADC_MspInit+0xdc>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001138:	2280      	movs	r2, #128	; 0x80
 800113a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 800113e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001142:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800114a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 800114e:	2220      	movs	r2, #32
 8001150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	480f      	ldr	r0, [pc, #60]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 800115a:	f002 f835 	bl	80031c8 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001164:	f000 ff22 	bl	8001fac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_ADC_MspInit+0xd8>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001174:	2200      	movs	r2, #0
 8001176:	2100      	movs	r1, #0
 8001178:	2012      	movs	r0, #18
 800117a:	f001 ffee 	bl	800315a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800117e:	2012      	movs	r0, #18
 8001180:	f002 f807 	bl	8003192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40012400 	.word	0x40012400
 8001190:	40021000 	.word	0x40021000
 8001194:	40010800 	.word	0x40010800
 8001198:	20000274 	.word	0x20000274
 800119c:	40020008 	.word	0x40020008

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_DMA_Init+0x38>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <MX_DMA_Init+0x38>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_DMA_Init+0x38>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	200b      	movs	r0, #11
 80011c4:	f001 ffc9 	bl	800315a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011c8:	200b      	movs	r0, #11
 80011ca:	f001 ffe2 	bl	8003192 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f0:	4b51      	ldr	r3, [pc, #324]	; (8001338 <MX_GPIO_Init+0x15c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a50      	ldr	r2, [pc, #320]	; (8001338 <MX_GPIO_Init+0x15c>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b4e      	ldr	r3, [pc, #312]	; (8001338 <MX_GPIO_Init+0x15c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0310 	and.w	r3, r3, #16
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <MX_GPIO_Init+0x15c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <MX_GPIO_Init+0x15c>)
 800120e:	f043 0320 	orr.w	r3, r3, #32
 8001212:	6193      	str	r3, [r2, #24]
 8001214:	4b48      	ldr	r3, [pc, #288]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	f003 0320 	and.w	r3, r3, #32
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b45      	ldr	r3, [pc, #276]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a44      	ldr	r2, [pc, #272]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001226:	f043 0304 	orr.w	r3, r3, #4
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b42      	ldr	r3, [pc, #264]	; (8001338 <MX_GPIO_Init+0x15c>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001238:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <MX_GPIO_Init+0x15c>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a3e      	ldr	r2, [pc, #248]	; (8001338 <MX_GPIO_Init+0x15c>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6193      	str	r3, [r2, #24]
 8001244:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <MX_GPIO_Init+0x15c>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001256:	4839      	ldr	r0, [pc, #228]	; (800133c <MX_GPIO_Init+0x160>)
 8001258:	f002 fb15 	bl	8003886 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 800125c:	2200      	movs	r2, #0
 800125e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8001262:	4837      	ldr	r0, [pc, #220]	; (8001340 <MX_GPIO_Init+0x164>)
 8001264:	f002 fb0f 	bl	8003886 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800126e:	4835      	ldr	r0, [pc, #212]	; (8001344 <MX_GPIO_Init+0x168>)
 8001270:	f002 fb09 	bl	8003886 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_onBoard_Pin;
 8001274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001278:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2302      	movs	r3, #2
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_onBoard_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 0310 	add.w	r3, r7, #16
 800128a:	4619      	mov	r1, r3
 800128c:	482b      	ldr	r0, [pc, #172]	; (800133c <MX_GPIO_Init+0x160>)
 800128e:	f002 f989 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Pul_hab_Vo_Pin|Pul_hab_Io_Pin;
 8001292:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800129c:	2301      	movs	r3, #1
 800129e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0310 	add.w	r3, r7, #16
 80012a4:	4619      	mov	r1, r3
 80012a6:	4825      	ldr	r0, [pc, #148]	; (800133c <MX_GPIO_Init+0x160>)
 80012a8:	f002 f97c 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Rep_Pote_Vo_Pin|Rep_Pote_Io_Pin|P_Temp_Vo_Pin|P_Temp_Io_Pin;
 80012ac:	23f0      	movs	r3, #240	; 0xf0
 80012ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_GPIO_Init+0x168>)
 80012c0:	f002 f970 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = P_OL_Vo_Pin|P_OL_Io_Pin;
 80012c4:	2303      	movs	r3, #3
 80012c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	481a      	ldr	r0, [pc, #104]	; (8001340 <MX_GPIO_Init+0x164>)
 80012d8:	f002 f964 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 80012dc:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 80012e0:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0310 	add.w	r3, r7, #16
 80012f2:	4619      	mov	r1, r3
 80012f4:	4812      	ldr	r0, [pc, #72]	; (8001340 <MX_GPIO_Init+0x164>)
 80012f6:	f002 f955 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 80012fa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012fe:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2302      	movs	r3, #2
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_GPIO_Init+0x168>)
 8001314:	f002 f946 	bl	80035a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Rango_Io_A_Pin|Rango_Io_B_Pin|Rango_Io_C_Pin;
 8001318:	2338      	movs	r3, #56	; 0x38
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0310 	add.w	r3, r7, #16
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_GPIO_Init+0x164>)
 800132c:	f002 f93a 	bl	80035a4 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000
 800133c:	40011000 	.word	0x40011000
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40010800 	.word	0x40010800

08001348 <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	4819      	ldr	r0, [pc, #100]	; (80013b8 <LCD_Init+0x70>)
 8001354:	f002 fa97 	bl	8003886 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800135e:	4817      	ldr	r0, [pc, #92]	; (80013bc <LCD_Init+0x74>)
 8001360:	f002 fa91 	bl	8003886 <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8001364:	2010      	movs	r0, #16
 8001366:	f001 f971 	bl	800264c <HAL_Delay>
	LCD_SendNibble(0x03);
 800136a:	2003      	movs	r0, #3
 800136c:	f000 f828 	bl	80013c0 <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8001370:	2005      	movs	r0, #5
 8001372:	f001 f96b 	bl	800264c <HAL_Delay>
	LCD_SendNibble(0x03);
 8001376:	2003      	movs	r0, #3
 8001378:	f000 f822 	bl	80013c0 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 800137c:	2001      	movs	r0, #1
 800137e:	f001 f965 	bl	800264c <HAL_Delay>
	LCD_SendNibble(0x03);
 8001382:	2003      	movs	r0, #3
 8001384:	f000 f81c 	bl	80013c0 <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8001388:	2002      	movs	r0, #2
 800138a:	f000 f819 	bl	80013c0 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 800138e:	2001      	movs	r0, #1
 8001390:	f001 f95c 	bl	800264c <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8001394:	2028      	movs	r0, #40	; 0x28
 8001396:	f000 f891 	bl	80014bc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 800139a:	2008      	movs	r0, #8
 800139c:	f000 f88e 	bl	80014bc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 80013a0:	2001      	movs	r0, #1
 80013a2:	f000 f88b 	bl	80014bc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 80013a6:	2006      	movs	r0, #6
 80013a8:	f000 f888 	bl	80014bc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 80013ac:	200c      	movs	r0, #12
 80013ae:	f000 f885 	bl	80014bc <LCD_SendInstruction>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40010c00 	.word	0x40010c00
 80013bc:	40010800 	.word	0x40010800

080013c0 <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <LCD_SendNibble+0x22>
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013da:	482b      	ldr	r0, [pc, #172]	; (8001488 <LCD_SendNibble+0xc8>)
 80013dc:	f002 fa53 	bl	8003886 <HAL_GPIO_WritePin>
 80013e0:	e005      	b.n	80013ee <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e8:	4827      	ldr	r0, [pc, #156]	; (8001488 <LCD_SendNibble+0xc8>)
 80013ea:	f002 fa4c 	bl	8003886 <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d006      	beq.n	8001406 <LCD_SendNibble+0x46>
 80013f8:	2201      	movs	r2, #1
 80013fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013fe:	4822      	ldr	r0, [pc, #136]	; (8001488 <LCD_SendNibble+0xc8>)
 8001400:	f002 fa41 	bl	8003886 <HAL_GPIO_WritePin>
 8001404:	e005      	b.n	8001412 <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800140c:	481e      	ldr	r0, [pc, #120]	; (8001488 <LCD_SendNibble+0xc8>)
 800140e:	f002 fa3a 	bl	8003886 <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <LCD_SendNibble+0x6a>
 800141c:	2201      	movs	r2, #1
 800141e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001422:	4819      	ldr	r0, [pc, #100]	; (8001488 <LCD_SendNibble+0xc8>)
 8001424:	f002 fa2f 	bl	8003886 <HAL_GPIO_WritePin>
 8001428:	e005      	b.n	8001436 <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001430:	4815      	ldr	r0, [pc, #84]	; (8001488 <LCD_SendNibble+0xc8>)
 8001432:	f002 fa28 	bl	8003886 <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 0308 	and.w	r3, r3, #8
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <LCD_SendNibble+0x8e>
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <LCD_SendNibble+0xc8>)
 8001448:	f002 fa1d 	bl	8003886 <HAL_GPIO_WritePin>
 800144c:	e005      	b.n	800145a <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001454:	480c      	ldr	r0, [pc, #48]	; (8001488 <LCD_SendNibble+0xc8>)
 8001456:	f002 fa16 	bl	8003886 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001460:	4809      	ldr	r0, [pc, #36]	; (8001488 <LCD_SendNibble+0xc8>)
 8001462:	f002 fa10 	bl	8003886 <HAL_GPIO_WritePin>
		HAL_Delay(1);//LCD_usDelay(5);
 8001466:	2001      	movs	r0, #1
 8001468:	f001 f8f0 	bl	800264c <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <LCD_SendNibble+0xc8>)
 8001474:	f002 fa07 	bl	8003886 <HAL_GPIO_WritePin>
	HAL_Delay(1);//LCD_usDelay(5);
 8001478:	2001      	movs	r0, #1
 800147a:	f001 f8e7 	bl	800264c <HAL_Delay>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800

0800148c <LCD_SendChar>:


/* Envía un caracter al display */
void LCD_SendChar(char theChar)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 1);//LCD_PORT->SET = LCD_RS;
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <LCD_SendChar+0x2c>)
 800149e:	f002 f9f2 	bl	8003886 <HAL_GPIO_WritePin>

	LCD_SendByte(theChar);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f829 	bl	80014fc <LCD_SendByte>

	HAL_Delay(1);//LCD_usDelay(50);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f001 f8ce 	bl	800264c <HAL_Delay>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40010c00 	.word	0x40010c00

080014bc <LCD_SendInstruction>:


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014cc:	480a      	ldr	r0, [pc, #40]	; (80014f8 <LCD_SendInstruction+0x3c>)
 80014ce:	f002 f9da 	bl	8003886 <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 f811 	bl	80014fc <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d103      	bne.n	80014e8 <LCD_SendInstruction+0x2c>
		HAL_Delay(2);//LCD_usDelay(2000);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f001 f8b3 	bl	800264c <HAL_Delay>
	else
		HAL_Delay(1);//LCD_usDelay(50);
}
 80014e6:	e002      	b.n	80014ee <LCD_SendInstruction+0x32>
		HAL_Delay(1);//LCD_usDelay(50);
 80014e8:	2001      	movs	r0, #1
 80014ea:	f001 f8af 	bl	800264c <HAL_Delay>
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40010c00 	.word	0x40010c00

080014fc <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff57 	bl	80013c0 <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff53 	bl	80013c0 <LCD_SendNibble>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <LCD_GoToxy>:


/* Posiciona el cursor en la columna x - fila y */
void LCD_GoToxy(uint8_t x, uint8_t y)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	460a      	mov	r2, r1
 800152c:	71fb      	strb	r3, [r7, #7]
 800152e:	4613      	mov	r3, r2
 8001530:	71bb      	strb	r3, [r7, #6]
	if (y == 0)
 8001532:	79bb      	ldrb	r3, [r7, #6]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d106      	bne.n	8001546 <LCD_GoToxy+0x24>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	3b80      	subs	r3, #128	; 0x80
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ffbc 	bl	80014bc <LCD_SendInstruction>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
    else if (y == 2)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
    else if (y == 3)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
}
 8001544:	e01c      	b.n	8001580 <LCD_GoToxy+0x5e>
    else if (y == 1)
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d106      	bne.n	800155a <LCD_GoToxy+0x38>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	3b40      	subs	r3, #64	; 0x40
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ffb2 	bl	80014bc <LCD_SendInstruction>
}
 8001558:	e012      	b.n	8001580 <LCD_GoToxy+0x5e>
    else if (y == 2)
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d106      	bne.n	800156e <LCD_GoToxy+0x4c>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	3b6c      	subs	r3, #108	; 0x6c
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffa8 	bl	80014bc <LCD_SendInstruction>
}
 800156c:	e008      	b.n	8001580 <LCD_GoToxy+0x5e>
    else if (y == 3)
 800156e:	79bb      	ldrb	r3, [r7, #6]
 8001570:	2b03      	cmp	r3, #3
 8001572:	d105      	bne.n	8001580 <LCD_GoToxy+0x5e>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	3b2c      	subs	r3, #44	; 0x2c
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff ff9e 	bl	80014bc <LCD_SendInstruction>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <LCD_Print>:


/* Envía un string al display */
void LCD_Print(char *p)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	while(*p != 0){
 8001590:	e007      	b.n	80015a2 <LCD_Print+0x1a>
		LCD_SendChar(*p);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff78 	bl	800148c <LCD_SendChar>
		p++;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3301      	adds	r3, #1
 80015a0:	607b      	str	r3, [r7, #4]
	while(*p != 0){
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f3      	bne.n	8001592 <LCD_Print+0xa>
	}
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	0000      	movs	r0, r0
 80015b4:	0000      	movs	r0, r0
	...

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 ffe3 	bl	8002588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 fab9 	bl	8001b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff fe09 	bl	80011dc <MX_GPIO_Init>
  MX_DMA_Init();
 80015ca:	f7ff fde9 	bl	80011a0 <MX_DMA_Init>
  MX_ADC1_Init();
 80015ce:	f7ff fd29 	bl	8001024 <MX_ADC1_Init>
  MX_TIM3_Init();
 80015d2:	f000 fdff 	bl	80021d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015d6:	f000 fe49 	bl	800226c <MX_TIM4_Init>
  MX_TIM2_Init();
 80015da:	f000 fdad 	bl	8002138 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80015de:	f000 ff39 	bl	8002454 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 80015e2:	486e      	ldr	r0, [pc, #440]	; (800179c <main+0x1e4>)
 80015e4:	f002 fe8a 	bl	80042fc <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80015e8:	2100      	movs	r1, #0
 80015ea:	486c      	ldr	r0, [pc, #432]	; (800179c <main+0x1e4>)
 80015ec:	f002 ff7a 	bl	80044e4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 80015f0:	2108      	movs	r1, #8
 80015f2:	486a      	ldr	r0, [pc, #424]	; (800179c <main+0x1e4>)
 80015f4:	f002 ff76 	bl	80044e4 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 80015f8:	4869      	ldr	r0, [pc, #420]	; (80017a0 <main+0x1e8>)
 80015fa:	f002 fe7f 	bl	80042fc <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, muestras, sizeof(muestras));
 80015fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001602:	4968      	ldr	r1, [pc, #416]	; (80017a4 <main+0x1ec>)
 8001604:	4868      	ldr	r0, [pc, #416]	; (80017a8 <main+0x1f0>)
 8001606:	f001 f91b 	bl	8002840 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2); //desborda cada 10 ms.
 800160a:	4868      	ldr	r0, [pc, #416]	; (80017ac <main+0x1f4>)
 800160c:	f002 fec0 	bl	8004390 <HAL_TIM_Base_Start_IT>

  LCD_Init();
 8001610:	f7ff fe9a 	bl	8001348 <LCD_Init>

  LCD_GoToxy(8, 1);
 8001614:	2101      	movs	r1, #1
 8001616:	2008      	movs	r0, #8
 8001618:	f7ff ff83 	bl	8001522 <LCD_GoToxy>
  sprintf(texto, "OLEC");
 800161c:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <main+0x1f8>)
 800161e:	4a65      	ldr	r2, [pc, #404]	; (80017b4 <main+0x1fc>)
 8001620:	6810      	ldr	r0, [r2, #0]
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	7912      	ldrb	r2, [r2, #4]
 8001626:	711a      	strb	r2, [r3, #4]
  LCD_Print(texto);
 8001628:	4861      	ldr	r0, [pc, #388]	; (80017b0 <main+0x1f8>)
 800162a:	f7ff ffad 	bl	8001588 <LCD_Print>
  LCD_GoToxy(3, 2);
 800162e:	2102      	movs	r1, #2
 8001630:	2003      	movs	r0, #3
 8001632:	f7ff ff76 	bl	8001522 <LCD_GoToxy>
  sprintf(texto, "CAJA DE CARGA");
 8001636:	4a5e      	ldr	r2, [pc, #376]	; (80017b0 <main+0x1f8>)
 8001638:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <main+0x200>)
 800163a:	4614      	mov	r4, r2
 800163c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800163e:	6020      	str	r0, [r4, #0]
 8001640:	6061      	str	r1, [r4, #4]
 8001642:	60a2      	str	r2, [r4, #8]
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	81a3      	strh	r3, [r4, #12]
  LCD_Print(texto);
 8001648:	4859      	ldr	r0, [pc, #356]	; (80017b0 <main+0x1f8>)
 800164a:	f7ff ff9d 	bl	8001588 <LCD_Print>

  HAL_Delay(5000);
 800164e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001652:	f000 fffb 	bl	800264c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (status_adc) {
 8001656:	4b59      	ldr	r3, [pc, #356]	; (80017bc <main+0x204>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d003      	beq.n	8001666 <main+0xae>
 800165e:	2b02      	cmp	r3, #2
 8001660:	f000 8098 	beq.w	8001794 <main+0x1dc>
			  acumulaI = 0;

			  status_adc = 0;

		  default:
		  break;
 8001664:	e156      	b.n	8001914 <main+0x35c>
			  for (uint16_t i = 0; i < 200; i+=2){
 8001666:	2300      	movs	r3, #0
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	e022      	b.n	80016b2 <main+0xfa>
				  acumulaV += muestras[i]*muestras[i];
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	4a4d      	ldr	r2, [pc, #308]	; (80017a4 <main+0x1ec>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	88fa      	ldrh	r2, [r7, #6]
 8001676:	494b      	ldr	r1, [pc, #300]	; (80017a4 <main+0x1ec>)
 8001678:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <main+0x208>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4413      	add	r3, r2
 8001686:	4a4e      	ldr	r2, [pc, #312]	; (80017c0 <main+0x208>)
 8001688:	6013      	str	r3, [r2, #0]
				  acumulaI += muestras[i+1]*muestras[i+1];
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	3301      	adds	r3, #1
 800168e:	4a45      	ldr	r2, [pc, #276]	; (80017a4 <main+0x1ec>)
 8001690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001694:	88fa      	ldrh	r2, [r7, #6]
 8001696:	3201      	adds	r2, #1
 8001698:	4942      	ldr	r1, [pc, #264]	; (80017a4 <main+0x1ec>)
 800169a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800169e:	fb02 f203 	mul.w	r2, r2, r3
 80016a2:	4b48      	ldr	r3, [pc, #288]	; (80017c4 <main+0x20c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <main+0x20c>)
 80016aa:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 80016ac:	88fb      	ldrh	r3, [r7, #6]
 80016ae:	3302      	adds	r3, #2
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	2bc7      	cmp	r3, #199	; 0xc7
 80016b6:	d9d9      	bls.n	800166c <main+0xb4>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 80016b8:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <main+0x208>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fe91 	bl	80003e4 <__aeabi_ui2d>
 80016c2:	4603      	mov	r3, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	4618      	mov	r0, r3
 80016c8:	4621      	mov	r1, r4
 80016ca:	f005 fe63 	bl	8007394 <sqrt>
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	4b3d      	ldr	r3, [pc, #244]	; (80017c8 <main+0x210>)
 80016d4:	f7ff f82a 	bl	800072c <__aeabi_ddiv>
 80016d8:	4603      	mov	r3, r0
 80016da:	460c      	mov	r4, r1
 80016dc:	4618      	mov	r0, r3
 80016de:	4621      	mov	r1, r4
 80016e0:	f7ff f9d2 	bl	8000a88 <__aeabi_d2uiz>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b39      	ldr	r3, [pc, #228]	; (80017cc <main+0x214>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a37      	ldr	r2, [pc, #220]	; (80017cc <main+0x214>)
 80016ee:	6013      	str	r3, [r2, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 80016f0:	4b34      	ldr	r3, [pc, #208]	; (80017c4 <main+0x20c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe fe75 	bl	80003e4 <__aeabi_ui2d>
 80016fa:	4603      	mov	r3, r0
 80016fc:	460c      	mov	r4, r1
 80016fe:	4618      	mov	r0, r3
 8001700:	4621      	mov	r1, r4
 8001702:	f005 fe47 	bl	8007394 <sqrt>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <main+0x210>)
 800170c:	f7ff f80e 	bl	800072c <__aeabi_ddiv>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f9b6 	bl	8000a88 <__aeabi_d2uiz>
 800171c:	4602      	mov	r2, r0
 800171e:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <main+0x218>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <main+0x218>)
 8001726:	6013      	str	r3, [r2, #0]
			  cuenta_RMS_samplesV++;
 8001728:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <main+0x21c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	b2da      	uxtb	r2, r3
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <main+0x21c>)
 8001732:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <main+0x220>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <main+0x220>)
 800173e:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 8001740:	4b24      	ldr	r3, [pc, #144]	; (80017d4 <main+0x21c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b0a      	cmp	r3, #10
 8001746:	d11b      	bne.n	8001780 <main+0x1c8>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <main+0x214>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <main+0x224>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	08db      	lsrs	r3, r3, #3
 8001754:	4a22      	ldr	r2, [pc, #136]	; (80017e0 <main+0x228>)
 8001756:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <main+0x218>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <main+0x224>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	08db      	lsrs	r3, r3, #3
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <main+0x22c>)
 8001766:	6013      	str	r3, [r2, #0]
				  cuenta_RMS_samplesV = 0;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <main+0x21c>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <main+0x214>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <main+0x220>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <main+0x218>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <main+0x208>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <main+0x20c>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <main+0x204>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
		  break;
 8001792:	e0c0      	b.n	8001916 <main+0x35e>
			  for (uint16_t i = 200; i < 400; i+=2){
 8001794:	23c8      	movs	r3, #200	; 0xc8
 8001796:	80bb      	strh	r3, [r7, #4]
 8001798:	e049      	b.n	800182e <main+0x276>
 800179a:	bf00      	nop
 800179c:	20000928 	.word	0x20000928
 80017a0:	20000970 	.word	0x20000970
 80017a4:	200002d8 	.word	0x200002d8
 80017a8:	20000244 	.word	0x20000244
 80017ac:	200009b8 	.word	0x200009b8
 80017b0:	200002b8 	.word	0x200002b8
 80017b4:	080075b0 	.word	0x080075b0
 80017b8:	080075b8 	.word	0x080075b8
 80017bc:	20000224 	.word	0x20000224
 80017c0:	20000208 	.word	0x20000208
 80017c4:	2000020c 	.word	0x2000020c
 80017c8:	40240000 	.word	0x40240000
 80017cc:	20000210 	.word	0x20000210
 80017d0:	20000214 	.word	0x20000214
 80017d4:	20000218 	.word	0x20000218
 80017d8:	20000219 	.word	0x20000219
 80017dc:	cccccccd 	.word	0xcccccccd
 80017e0:	2000021c 	.word	0x2000021c
 80017e4:	20000220 	.word	0x20000220
				  acumulaV += muestras[i]*muestras[i];
 80017e8:	88bb      	ldrh	r3, [r7, #4]
 80017ea:	4ab7      	ldr	r2, [pc, #732]	; (8001ac8 <main+0x510>)
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	88ba      	ldrh	r2, [r7, #4]
 80017f2:	49b5      	ldr	r1, [pc, #724]	; (8001ac8 <main+0x510>)
 80017f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017f8:	fb02 f203 	mul.w	r2, r2, r3
 80017fc:	4bb3      	ldr	r3, [pc, #716]	; (8001acc <main+0x514>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4413      	add	r3, r2
 8001802:	4ab2      	ldr	r2, [pc, #712]	; (8001acc <main+0x514>)
 8001804:	6013      	str	r3, [r2, #0]
				  acumulaI += muestras[i+1]*muestras[i+1];
 8001806:	88bb      	ldrh	r3, [r7, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	4aaf      	ldr	r2, [pc, #700]	; (8001ac8 <main+0x510>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	88ba      	ldrh	r2, [r7, #4]
 8001812:	3201      	adds	r2, #1
 8001814:	49ac      	ldr	r1, [pc, #688]	; (8001ac8 <main+0x510>)
 8001816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800181a:	fb02 f203 	mul.w	r2, r2, r3
 800181e:	4bac      	ldr	r3, [pc, #688]	; (8001ad0 <main+0x518>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4aaa      	ldr	r2, [pc, #680]	; (8001ad0 <main+0x518>)
 8001826:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	3302      	adds	r3, #2
 800182c:	80bb      	strh	r3, [r7, #4]
 800182e:	88bb      	ldrh	r3, [r7, #4]
 8001830:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001834:	d3d8      	bcc.n	80017e8 <main+0x230>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 8001836:	4ba5      	ldr	r3, [pc, #660]	; (8001acc <main+0x514>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe fdd2 	bl	80003e4 <__aeabi_ui2d>
 8001840:	4603      	mov	r3, r0
 8001842:	460c      	mov	r4, r1
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	f005 fda4 	bl	8007394 <sqrt>
 800184c:	f04f 0200 	mov.w	r2, #0
 8001850:	4ba0      	ldr	r3, [pc, #640]	; (8001ad4 <main+0x51c>)
 8001852:	f7fe ff6b 	bl	800072c <__aeabi_ddiv>
 8001856:	4603      	mov	r3, r0
 8001858:	460c      	mov	r4, r1
 800185a:	4618      	mov	r0, r3
 800185c:	4621      	mov	r1, r4
 800185e:	f7ff f913 	bl	8000a88 <__aeabi_d2uiz>
 8001862:	4602      	mov	r2, r0
 8001864:	4b9c      	ldr	r3, [pc, #624]	; (8001ad8 <main+0x520>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4413      	add	r3, r2
 800186a:	4a9b      	ldr	r2, [pc, #620]	; (8001ad8 <main+0x520>)
 800186c:	6013      	str	r3, [r2, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 800186e:	4b98      	ldr	r3, [pc, #608]	; (8001ad0 <main+0x518>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fdb6 	bl	80003e4 <__aeabi_ui2d>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4618      	mov	r0, r3
 800187e:	4621      	mov	r1, r4
 8001880:	f005 fd88 	bl	8007394 <sqrt>
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <main+0x51c>)
 800188a:	f7fe ff4f 	bl	800072c <__aeabi_ddiv>
 800188e:	4603      	mov	r3, r0
 8001890:	460c      	mov	r4, r1
 8001892:	4618      	mov	r0, r3
 8001894:	4621      	mov	r1, r4
 8001896:	f7ff f8f7 	bl	8000a88 <__aeabi_d2uiz>
 800189a:	4602      	mov	r2, r0
 800189c:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <main+0x524>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	4a8e      	ldr	r2, [pc, #568]	; (8001adc <main+0x524>)
 80018a4:	6013      	str	r3, [r2, #0]
			  cuenta_RMS_samplesV++;
 80018a6:	4b8e      	ldr	r3, [pc, #568]	; (8001ae0 <main+0x528>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b8c      	ldr	r3, [pc, #560]	; (8001ae0 <main+0x528>)
 80018b0:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 80018b2:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <main+0x52c>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b8a      	ldr	r3, [pc, #552]	; (8001ae4 <main+0x52c>)
 80018bc:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 80018be:	4b88      	ldr	r3, [pc, #544]	; (8001ae0 <main+0x528>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d11d      	bne.n	8001902 <main+0x34a>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 80018c6:	4b84      	ldr	r3, [pc, #528]	; (8001ad8 <main+0x520>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a87      	ldr	r2, [pc, #540]	; (8001ae8 <main+0x530>)
 80018cc:	fba2 2303 	umull	r2, r3, r2, r3
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	4a86      	ldr	r2, [pc, #536]	; (8001aec <main+0x534>)
 80018d4:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 80018d6:	4b81      	ldr	r3, [pc, #516]	; (8001adc <main+0x524>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a83      	ldr	r2, [pc, #524]	; (8001ae8 <main+0x530>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	4a83      	ldr	r2, [pc, #524]	; (8001af0 <main+0x538>)
 80018e4:	6013      	str	r3, [r2, #0]
				  valor_mediciones ();
 80018e6:	f000 f983 	bl	8001bf0 <valor_mediciones>
				  cuenta_RMS_samplesV = 0;
 80018ea:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <main+0x528>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 80018f0:	4b79      	ldr	r3, [pc, #484]	; (8001ad8 <main+0x520>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 80018f6:	4b7b      	ldr	r3, [pc, #492]	; (8001ae4 <main+0x52c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 80018fc:	4b77      	ldr	r3, [pc, #476]	; (8001adc <main+0x524>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 8001902:	4b72      	ldr	r3, [pc, #456]	; (8001acc <main+0x514>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 8001908:	4b71      	ldr	r3, [pc, #452]	; (8001ad0 <main+0x518>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 800190e:	4b79      	ldr	r3, [pc, #484]	; (8001af4 <main+0x53c>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
		  break;
 8001914:	bf00      	nop
	  } //fin switch(status_adc)


	  if (cuenta_fase == 5){
 8001916:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <main+0x540>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d13b      	bne.n	8001996 <main+0x3de>

		  if (acum_fase > 4500){ //mayor que 180 grados.
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <main+0x544>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f241 1294 	movw	r2, #4500	; 0x1194
 8001926:	4293      	cmp	r3, r2
 8001928:	d91c      	bls.n	8001964 <main+0x3ac>
			  valor_fase = (float) (acum_fase * 0.04 - 360.0);
 800192a:	4b74      	ldr	r3, [pc, #464]	; (8001afc <main+0x544>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fd58 	bl	80003e4 <__aeabi_ui2d>
 8001934:	a362      	add	r3, pc, #392	; (adr r3, 8001ac0 <main+0x508>)
 8001936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193a:	f7fe fdcd 	bl	80004d8 <__aeabi_dmul>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	4618      	mov	r0, r3
 8001944:	4621      	mov	r1, r4
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <main+0x548>)
 800194c:	f7fe fc0c 	bl	8000168 <__aeabi_dsub>
 8001950:	4603      	mov	r3, r0
 8001952:	460c      	mov	r4, r1
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	f7ff f8b6 	bl	8000ac8 <__aeabi_d2f>
 800195c:	4602      	mov	r2, r0
 800195e:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <main+0x54c>)
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e012      	b.n	800198a <main+0x3d2>
		  }else{
			  valor_fase = (float) (acum_fase * 0.04);
 8001964:	4b65      	ldr	r3, [pc, #404]	; (8001afc <main+0x544>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7fe fd3b 	bl	80003e4 <__aeabi_ui2d>
 800196e:	a354      	add	r3, pc, #336	; (adr r3, 8001ac0 <main+0x508>)
 8001970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001974:	f7fe fdb0 	bl	80004d8 <__aeabi_dmul>
 8001978:	4603      	mov	r3, r0
 800197a:	460c      	mov	r4, r1
 800197c:	4618      	mov	r0, r3
 800197e:	4621      	mov	r1, r4
 8001980:	f7ff f8a2 	bl	8000ac8 <__aeabi_d2f>
 8001984:	4602      	mov	r2, r0
 8001986:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <main+0x54c>)
 8001988:	601a      	str	r2, [r3, #0]
		  }

		  acum_fase = 0;
 800198a:	4b5c      	ldr	r3, [pc, #368]	; (8001afc <main+0x544>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
		  cuenta_fase = 0;
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <main+0x540>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
	  } //fin if cuenta_fase



	  switch (flag_protecV){
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <main+0x550>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <main+0x3f0>
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db3f      	blt.n	8001a22 <main+0x46a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	dc3d      	bgt.n	8001a22 <main+0x46a>
 80019a6:	e021      	b.n	80019ec <main+0x434>
		  case 0:
			  if (HAL_GPIO_ReadPin(P_Temp_Vo_GPIO_Port, P_Temp_Vo_Pin) != 0){
 80019a8:	2140      	movs	r1, #64	; 0x40
 80019aa:	4858      	ldr	r0, [pc, #352]	; (8001b0c <main+0x554>)
 80019ac:	f001 ff54 	bl	8003858 <HAL_GPIO_ReadPin>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <main+0x412>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_OFF);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019bc:	4854      	ldr	r0, [pc, #336]	; (8001b10 <main+0x558>)
 80019be:	f001 ff62 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecV = 1;
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <main+0x550>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
			  }else if (HAL_GPIO_ReadPin(P_OL_Vo_GPIO_Port, P_OL_Vo_Pin) != 0){
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_OFF);
				  flag_protecV = 2;
			  }
		  break;
 80019c8:	e02d      	b.n	8001a26 <main+0x46e>
			  }else if (HAL_GPIO_ReadPin(P_OL_Vo_GPIO_Port, P_OL_Vo_Pin) != 0){
 80019ca:	2101      	movs	r1, #1
 80019cc:	4850      	ldr	r0, [pc, #320]	; (8001b10 <main+0x558>)
 80019ce:	f001 ff43 	bl	8003858 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d026      	beq.n	8001a26 <main+0x46e>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_OFF);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019de:	484c      	ldr	r0, [pc, #304]	; (8001b10 <main+0x558>)
 80019e0:	f001 ff51 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecV = 2;
 80019e4:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <main+0x550>)
 80019e6:	2202      	movs	r2, #2
 80019e8:	701a      	strb	r2, [r3, #0]
		  break;
 80019ea:	e01c      	b.n	8001a26 <main+0x46e>
		  case 1:
		  case 2:
			  if (!PROTEC_V) break;
 80019ec:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <main+0x554>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80019f4:	4b46      	ldr	r3, [pc, #280]	; (8001b10 <main+0x558>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	4313      	orrs	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d013      	beq.n	8001a2a <main+0x472>

			  if (HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin) == (GPIO_PinState)SIGNAL_ON){
 8001a02:	2110      	movs	r1, #16
 8001a04:	4841      	ldr	r0, [pc, #260]	; (8001b0c <main+0x554>)
 8001a06:	f001 ff27 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <main+0x46a>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_ON);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a16:	483e      	ldr	r0, [pc, #248]	; (8001b10 <main+0x558>)
 8001a18:	f001 ff35 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecV = 0;
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <main+0x550>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
			  }
		  default:
		  break;
 8001a22:	bf00      	nop
 8001a24:	e002      	b.n	8001a2c <main+0x474>
		  break;
 8001a26:	bf00      	nop
 8001a28:	e000      	b.n	8001a2c <main+0x474>
			  if (!PROTEC_V) break;
 8001a2a:	bf00      	nop
	  } //fin switch flag_protecV



	  switch (flag_protecI){
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <main+0x55c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <main+0x486>
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db3f      	blt.n	8001ab8 <main+0x500>
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	dc3d      	bgt.n	8001ab8 <main+0x500>
 8001a3c:	e021      	b.n	8001a82 <main+0x4ca>
		  case 0:
			  if (HAL_GPIO_ReadPin(P_Temp_Io_GPIO_Port, P_Temp_Io_Pin) != 0){
 8001a3e:	2180      	movs	r1, #128	; 0x80
 8001a40:	4832      	ldr	r0, [pc, #200]	; (8001b0c <main+0x554>)
 8001a42:	f001 ff09 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <main+0x4a8>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_OFF);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a52:	482f      	ldr	r0, [pc, #188]	; (8001b10 <main+0x558>)
 8001a54:	f001 ff17 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecI = 1;
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <main+0x55c>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
			  }else if (HAL_GPIO_ReadPin(P_OL_Io_GPIO_Port, P_OL_Io_Pin) != 0){
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_OFF);
				  flag_protecI = 1;
			  }
		  break;
 8001a5e:	e05b      	b.n	8001b18 <main+0x560>
			  }else if (HAL_GPIO_ReadPin(P_OL_Io_GPIO_Port, P_OL_Io_Pin) != 0){
 8001a60:	2102      	movs	r1, #2
 8001a62:	482b      	ldr	r0, [pc, #172]	; (8001b10 <main+0x558>)
 8001a64:	f001 fef8 	bl	8003858 <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d054      	beq.n	8001b18 <main+0x560>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_OFF);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a74:	4826      	ldr	r0, [pc, #152]	; (8001b10 <main+0x558>)
 8001a76:	f001 ff06 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecI = 1;
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <main+0x55c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
		  break;
 8001a80:	e04a      	b.n	8001b18 <main+0x560>
		  case 1:
		  case 2:
			  if (!PROTEC_A) break;
 8001a82:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <main+0x554>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001a8a:	4b21      	ldr	r3, [pc, #132]	; (8001b10 <main+0x558>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	4313      	orrs	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d041      	beq.n	8001b1c <main+0x564>

			  if (HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin) == (GPIO_PinState)SIGNAL_ON){
 8001a98:	2120      	movs	r1, #32
 8001a9a:	481c      	ldr	r0, [pc, #112]	; (8001b0c <main+0x554>)
 8001a9c:	f001 fedc 	bl	8003858 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d108      	bne.n	8001ab8 <main+0x500>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_ON);
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aac:	4818      	ldr	r0, [pc, #96]	; (8001b10 <main+0x558>)
 8001aae:	f001 feea 	bl	8003886 <HAL_GPIO_WritePin>
				  flag_protecI = 0;
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <main+0x55c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
			  }
		  default:
		  break;
 8001ab8:	bf00      	nop
 8001aba:	e030      	b.n	8001b1e <main+0x566>
 8001abc:	f3af 8000 	nop.w
 8001ac0:	47ae147b 	.word	0x47ae147b
 8001ac4:	3fa47ae1 	.word	0x3fa47ae1
 8001ac8:	200002d8 	.word	0x200002d8
 8001acc:	20000208 	.word	0x20000208
 8001ad0:	2000020c 	.word	0x2000020c
 8001ad4:	40240000 	.word	0x40240000
 8001ad8:	20000210 	.word	0x20000210
 8001adc:	20000214 	.word	0x20000214
 8001ae0:	20000218 	.word	0x20000218
 8001ae4:	20000219 	.word	0x20000219
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	2000021c 	.word	0x2000021c
 8001af0:	20000220 	.word	0x20000220
 8001af4:	20000224 	.word	0x20000224
 8001af8:	2000022c 	.word	0x2000022c
 8001afc:	20000228 	.word	0x20000228
 8001b00:	40768000 	.word	0x40768000
 8001b04:	20000230 	.word	0x20000230
 8001b08:	20000235 	.word	0x20000235
 8001b0c:	40010800 	.word	0x40010800
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	20000236 	.word	0x20000236
		  break;
 8001b18:	bf00      	nop
 8001b1a:	e000      	b.n	8001b1e <main+0x566>
			  if (!PROTEC_A) break;
 8001b1c:	bf00      	nop
	  } //fin switch flag_protecI

	  if (flag_tim2 != 0){ //desborda cada 10 ms
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <main+0x57c>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f43f ad97 	beq.w	8001656 <main+0x9e>

		  imprimePantalla();
 8001b28:	f000 f910 	bl	8001d4c <imprimePantalla>

		  flag_tim2 = 0;
 8001b2c:	4b01      	ldr	r3, [pc, #4]	; (8001b34 <main+0x57c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	  switch (status_adc) {
 8001b32:	e590      	b.n	8001656 <main+0x9e>
 8001b34:	20000234 	.word	0x20000234

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b42:	2228      	movs	r2, #40	; 0x28
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 fbe0 	bl	800530c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b76:	2301      	movs	r3, #1
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b84:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f001 fe92 	bl	80038b8 <HAL_RCC_OscConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b9a:	f000 fa07 	bl	8001fac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9e:	230f      	movs	r3, #15
 8001ba0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f002 f8fc 	bl	8003db8 <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bc6:	f000 f9f1 	bl	8001fac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f002 fa8a 	bl	80040f0 <HAL_RCCEx_PeriphCLKConfig>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001be2:	f000 f9e3 	bl	8001fac <Error_Handler>
  }
}
 8001be6:	bf00      	nop
 8001be8:	3750      	adds	r7, #80	; 0x50
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <valor_mediciones>:

/* USER CODE BEGIN 4 */
void valor_mediciones (void){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

	switch (RANGO_I){
 8001bf4:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <valor_mediciones+0x100>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	2b06      	cmp	r3, #6
 8001c02:	d841      	bhi.n	8001c88 <valor_mediciones+0x98>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <valor_mediciones+0x1c>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c29 	.word	0x08001c29
 8001c10:	08001c37 	.word	0x08001c37
 8001c14:	08001c45 	.word	0x08001c45
 8001c18:	08001c53 	.word	0x08001c53
 8001c1c:	08001c61 	.word	0x08001c61
 8001c20:	08001c6f 	.word	0x08001c6f
 8001c24:	08001c7d 	.word	0x08001c7d

		case 1:
			//convierte a float 500mA
			coefRango_Io = 0.3272;
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <valor_mediciones+0x104>)
 8001c2a:	4a33      	ldr	r2, [pc, #204]	; (8001cf8 <valor_mediciones+0x108>)
 8001c2c:	601a      	str	r2, [r3, #0]
			Imax = 670.00;
 8001c2e:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <valor_mediciones+0x10c>)
 8001c30:	4a33      	ldr	r2, [pc, #204]	; (8001d00 <valor_mediciones+0x110>)
 8001c32:	601a      	str	r2, [r3, #0]
		break;
 8001c34:	e029      	b.n	8001c8a <valor_mediciones+0x9a>
		case 2:
			//convierte a float 1A
			coefRango_Io = 0.0006545;
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <valor_mediciones+0x104>)
 8001c38:	4a32      	ldr	r2, [pc, #200]	; (8001d04 <valor_mediciones+0x114>)
 8001c3a:	601a      	str	r2, [r3, #0]
			Imax = 1.34;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	; (8001cfc <valor_mediciones+0x10c>)
 8001c3e:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <valor_mediciones+0x118>)
 8001c40:	601a      	str	r2, [r3, #0]
		break;
 8001c42:	e022      	b.n	8001c8a <valor_mediciones+0x9a>
		case 3:
			//convierte a float 2A
			coefRango_Io = 0.001309;
 8001c44:	4b2b      	ldr	r3, [pc, #172]	; (8001cf4 <valor_mediciones+0x104>)
 8001c46:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <valor_mediciones+0x11c>)
 8001c48:	601a      	str	r2, [r3, #0]
			Imax = 2.68;
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <valor_mediciones+0x10c>)
 8001c4c:	4a30      	ldr	r2, [pc, #192]	; (8001d10 <valor_mediciones+0x120>)
 8001c4e:	601a      	str	r2, [r3, #0]
		break;
 8001c50:	e01b      	b.n	8001c8a <valor_mediciones+0x9a>
		case 4:
			//convierte a float 5A
			coefRango_Io = 0.003273;
 8001c52:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <valor_mediciones+0x104>)
 8001c54:	4a2f      	ldr	r2, [pc, #188]	; (8001d14 <valor_mediciones+0x124>)
 8001c56:	601a      	str	r2, [r3, #0]
			Imax = 6.7;
 8001c58:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <valor_mediciones+0x10c>)
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <valor_mediciones+0x128>)
 8001c5c:	601a      	str	r2, [r3, #0]
		break;
 8001c5e:	e014      	b.n	8001c8a <valor_mediciones+0x9a>
		case 5:
			//convierte a float 10A
			coefRango_Io = 0.006546;
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <valor_mediciones+0x104>)
 8001c62:	4a2e      	ldr	r2, [pc, #184]	; (8001d1c <valor_mediciones+0x12c>)
 8001c64:	601a      	str	r2, [r3, #0]
			Imax = 13.4;
 8001c66:	4b25      	ldr	r3, [pc, #148]	; (8001cfc <valor_mediciones+0x10c>)
 8001c68:	4a2d      	ldr	r2, [pc, #180]	; (8001d20 <valor_mediciones+0x130>)
 8001c6a:	601a      	str	r2, [r3, #0]
		break;
 8001c6c:	e00d      	b.n	8001c8a <valor_mediciones+0x9a>
		case 6:
			//convierte a float 20A
			coefRango_Io = 0.01309;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <valor_mediciones+0x104>)
 8001c70:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <valor_mediciones+0x134>)
 8001c72:	601a      	str	r2, [r3, #0]
			Imax = 26.8;
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <valor_mediciones+0x10c>)
 8001c76:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <valor_mediciones+0x138>)
 8001c78:	601a      	str	r2, [r3, #0]
		break;
 8001c7a:	e006      	b.n	8001c8a <valor_mediciones+0x9a>
		case 7:
			//convierte a float 50A
			coefRango_Io = 0.032725;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <valor_mediciones+0x104>)
 8001c7e:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <valor_mediciones+0x13c>)
 8001c80:	601a      	str	r2, [r3, #0]
			Imax = 67.0;
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <valor_mediciones+0x10c>)
 8001c84:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <valor_mediciones+0x140>)
 8001c86:	601a      	str	r2, [r3, #0]
		default:
		break;
 8001c88:	bf00      	nop

	} //fin switch RANG_I

	valor_Io = (float) (RMS_samplesI * coefRango_Io - Imax);
 8001c8a:	4b2a      	ldr	r3, [pc, #168]	; (8001d34 <valor_mediciones+0x144>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff f820 	bl	8000cd4 <__aeabi_ui2f>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <valor_mediciones+0x104>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff f871 	bl	8000d84 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <valor_mediciones+0x10c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4619      	mov	r1, r3
 8001cac:	4610      	mov	r0, r2
 8001cae:	f7fe ff5f 	bl	8000b70 <__aeabi_fsub>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <valor_mediciones+0x148>)
 8001cb8:	601a      	str	r2, [r3, #0]
	valor_Vo = (float) (RMS_samplesV * coefRango_Vo - Vmax);
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <valor_mediciones+0x14c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f808 	bl	8000cd4 <__aeabi_ui2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <valor_mediciones+0x150>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff f859 	bl	8000d84 <__aeabi_fmul>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <valor_mediciones+0x154>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4610      	mov	r0, r2
 8001cde:	f7fe ff47 	bl	8000b70 <__aeabi_fsub>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <valor_mediciones+0x158>)
 8001ce8:	601a      	str	r2, [r3, #0]

} //fin valor_mediciones()
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40010c00 	.word	0x40010c00
 8001cf4:	20000918 	.word	0x20000918
 8001cf8:	3ea786c2 	.word	0x3ea786c2
 8001cfc:	2000091c 	.word	0x2000091c
 8001d00:	44278000 	.word	0x44278000
 8001d04:	3a2b92c0 	.word	0x3a2b92c0
 8001d08:	3fab851f 	.word	0x3fab851f
 8001d0c:	3aab92c0 	.word	0x3aab92c0
 8001d10:	402b851f 	.word	0x402b851f
 8001d14:	3b567fd4 	.word	0x3b567fd4
 8001d18:	40d66666 	.word	0x40d66666
 8001d1c:	3bd67fd4 	.word	0x3bd67fd4
 8001d20:	41566666 	.word	0x41566666
 8001d24:	3c567770 	.word	0x3c567770
 8001d28:	41d66666 	.word	0x41d66666
 8001d2c:	3d060aa6 	.word	0x3d060aa6
 8001d30:	42860000 	.word	0x42860000
 8001d34:	20000220 	.word	0x20000220
 8001d38:	20000920 	.word	0x20000920
 8001d3c:	2000021c 	.word	0x2000021c
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000924 	.word	0x20000924

08001d4c <imprimePantalla>:

void imprimePantalla(void) {
 8001d4c:	b5b0      	push	{r4, r5, r7, lr}
 8001d4e:	af00      	add	r7, sp, #0

	if (refrescaPantalla != 0) {
 8001d50:	4b58      	ldr	r3, [pc, #352]	; (8001eb4 <imprimePantalla+0x168>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d006      	beq.n	8001d66 <imprimePantalla+0x1a>

		refrescaPantalla--;
 8001d58:	4b56      	ldr	r3, [pc, #344]	; (8001eb4 <imprimePantalla+0x168>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <imprimePantalla+0x168>)
 8001d62:	701a      	strb	r2, [r3, #0]

		refrescaPantalla = 25;

	} //fin if refrescaPantalla

} //fin imprimePantalla ()
 8001d64:	e0a3      	b.n	8001eae <imprimePantalla+0x162>
		valor_mediciones();
 8001d66:	f7ff ff43 	bl	8001bf0 <valor_mediciones>
		LCD_GoToxy(0, 0);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f7ff fbd8 	bl	8001522 <LCD_GoToxy>
		LCD_Print("Título");
 8001d72:	4851      	ldr	r0, [pc, #324]	; (8001eb8 <imprimePantalla+0x16c>)
 8001d74:	f7ff fc08 	bl	8001588 <LCD_Print>
		LCD_GoToxy(0, 1);
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fbd1 	bl	8001522 <LCD_GoToxy>
		switch (flag_protecV) {
 8001d80:	4b4e      	ldr	r3, [pc, #312]	; (8001ebc <imprimePantalla+0x170>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d011      	beq.n	8001dac <imprimePantalla+0x60>
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d01e      	beq.n	8001dca <imprimePantalla+0x7e>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d128      	bne.n	8001de2 <imprimePantalla+0x96>
				sprintf(texto, "Tension: %3.2f [V]", valor_Vo);
 8001d90:	4b4b      	ldr	r3, [pc, #300]	; (8001ec0 <imprimePantalla+0x174>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb47 	bl	8000428 <__aeabi_f2d>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	460c      	mov	r4, r1
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	4948      	ldr	r1, [pc, #288]	; (8001ec4 <imprimePantalla+0x178>)
 8001da4:	4848      	ldr	r0, [pc, #288]	; (8001ec8 <imprimePantalla+0x17c>)
 8001da6:	f003 ff09 	bl	8005bbc <siprintf>
			break;
 8001daa:	e01a      	b.n	8001de2 <imprimePantalla+0x96>
				sprintf(texto, "Sobretemp. Tension");
 8001dac:	4a46      	ldr	r2, [pc, #280]	; (8001ec8 <imprimePantalla+0x17c>)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <imprimePantalla+0x180>)
 8001db0:	4615      	mov	r5, r2
 8001db2:	461c      	mov	r4, r3
 8001db4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db6:	6028      	str	r0, [r5, #0]
 8001db8:	6069      	str	r1, [r5, #4]
 8001dba:	60aa      	str	r2, [r5, #8]
 8001dbc:	60eb      	str	r3, [r5, #12]
 8001dbe:	8823      	ldrh	r3, [r4, #0]
 8001dc0:	78a2      	ldrb	r2, [r4, #2]
 8001dc2:	822b      	strh	r3, [r5, #16]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	74ab      	strb	r3, [r5, #18]
			break;
 8001dc8:	e00b      	b.n	8001de2 <imprimePantalla+0x96>
				sprintf(texto, "Tension Maxima");
 8001dca:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <imprimePantalla+0x17c>)
 8001dcc:	4b40      	ldr	r3, [pc, #256]	; (8001ed0 <imprimePantalla+0x184>)
 8001dce:	4614      	mov	r4, r2
 8001dd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001dd2:	6020      	str	r0, [r4, #0]
 8001dd4:	6061      	str	r1, [r4, #4]
 8001dd6:	60a2      	str	r2, [r4, #8]
 8001dd8:	881a      	ldrh	r2, [r3, #0]
 8001dda:	789b      	ldrb	r3, [r3, #2]
 8001ddc:	81a2      	strh	r2, [r4, #12]
 8001dde:	73a3      	strb	r3, [r4, #14]
			break;
 8001de0:	bf00      	nop
		LCD_Print(texto);
 8001de2:	4839      	ldr	r0, [pc, #228]	; (8001ec8 <imprimePantalla+0x17c>)
 8001de4:	f7ff fbd0 	bl	8001588 <LCD_Print>
		LCD_GoToxy(0, 2);
 8001de8:	2102      	movs	r1, #2
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff fb99 	bl	8001522 <LCD_GoToxy>
		switch (flag_protecI) {
 8001df0:	4b38      	ldr	r3, [pc, #224]	; (8001ed4 <imprimePantalla+0x188>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d026      	beq.n	8001e46 <imprimePantalla+0xfa>
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d032      	beq.n	8001e62 <imprimePantalla+0x116>
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d13c      	bne.n	8001e7a <imprimePantalla+0x12e>
				if (RANGO_I == 1)
 8001e00:	4b35      	ldr	r3, [pc, #212]	; (8001ed8 <imprimePantalla+0x18c>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d10d      	bne.n	8001e2a <imprimePantalla+0xde>
					sprintf(texto, "Corriente: %5.2f[mA]", valor_Io);
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <imprimePantalla+0x190>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb08 	bl	8000428 <__aeabi_f2d>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	492f      	ldr	r1, [pc, #188]	; (8001ee0 <imprimePantalla+0x194>)
 8001e22:	4829      	ldr	r0, [pc, #164]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e24:	f003 feca 	bl	8005bbc <siprintf>
			break;
 8001e28:	e027      	b.n	8001e7a <imprimePantalla+0x12e>
					sprintf(texto, "Corriente: %4.2f [A]", valor_Io);
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	; (8001edc <imprimePantalla+0x190>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fafa 	bl	8000428 <__aeabi_f2d>
 8001e34:	4603      	mov	r3, r0
 8001e36:	460c      	mov	r4, r1
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	4929      	ldr	r1, [pc, #164]	; (8001ee4 <imprimePantalla+0x198>)
 8001e3e:	4822      	ldr	r0, [pc, #136]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e40:	f003 febc 	bl	8005bbc <siprintf>
			break;
 8001e44:	e019      	b.n	8001e7a <imprimePantalla+0x12e>
				sprintf(texto, "Sobretemp. Corriente");
 8001e46:	4a20      	ldr	r2, [pc, #128]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e48:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <imprimePantalla+0x19c>)
 8001e4a:	4615      	mov	r5, r2
 8001e4c:	461c      	mov	r4, r3
 8001e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e50:	6028      	str	r0, [r5, #0]
 8001e52:	6069      	str	r1, [r5, #4]
 8001e54:	60aa      	str	r2, [r5, #8]
 8001e56:	60eb      	str	r3, [r5, #12]
 8001e58:	6820      	ldr	r0, [r4, #0]
 8001e5a:	6128      	str	r0, [r5, #16]
 8001e5c:	7923      	ldrb	r3, [r4, #4]
 8001e5e:	752b      	strb	r3, [r5, #20]
			break;
 8001e60:	e00b      	b.n	8001e7a <imprimePantalla+0x12e>
				sprintf(texto, "Corriente Maxima");
 8001e62:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <imprimePantalla+0x1a0>)
 8001e66:	4615      	mov	r5, r2
 8001e68:	461c      	mov	r4, r3
 8001e6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e6c:	6028      	str	r0, [r5, #0]
 8001e6e:	6069      	str	r1, [r5, #4]
 8001e70:	60aa      	str	r2, [r5, #8]
 8001e72:	60eb      	str	r3, [r5, #12]
 8001e74:	7823      	ldrb	r3, [r4, #0]
 8001e76:	742b      	strb	r3, [r5, #16]
			break;
 8001e78:	bf00      	nop
		LCD_Print(texto);
 8001e7a:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e7c:	f7ff fb84 	bl	8001588 <LCD_Print>
		LCD_GoToxy(0, 3);
 8001e80:	2103      	movs	r1, #3
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fb4d 	bl	8001522 <LCD_GoToxy>
		sprintf(texto, "Angulo: %4.1f [°]", valor_fase);
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <imprimePantalla+0x1a4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe facb 	bl	8000428 <__aeabi_f2d>
 8001e92:	4603      	mov	r3, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	4916      	ldr	r1, [pc, #88]	; (8001ef4 <imprimePantalla+0x1a8>)
 8001e9c:	480a      	ldr	r0, [pc, #40]	; (8001ec8 <imprimePantalla+0x17c>)
 8001e9e:	f003 fe8d 	bl	8005bbc <siprintf>
		LCD_Print(texto);
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <imprimePantalla+0x17c>)
 8001ea4:	f7ff fb70 	bl	8001588 <LCD_Print>
		refrescaPantalla = 25;
 8001ea8:	4b02      	ldr	r3, [pc, #8]	; (8001eb4 <imprimePantalla+0x168>)
 8001eaa:	2219      	movs	r2, #25
 8001eac:	701a      	strb	r2, [r3, #0]
} //fin imprimePantalla ()
 8001eae:	bf00      	nop
 8001eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	080075c8 	.word	0x080075c8
 8001ebc:	20000235 	.word	0x20000235
 8001ec0:	20000924 	.word	0x20000924
 8001ec4:	080075d0 	.word	0x080075d0
 8001ec8:	200002b8 	.word	0x200002b8
 8001ecc:	080075e4 	.word	0x080075e4
 8001ed0:	080075f8 	.word	0x080075f8
 8001ed4:	20000236 	.word	0x20000236
 8001ed8:	40010c00 	.word	0x40010c00
 8001edc:	20000920 	.word	0x20000920
 8001ee0:	08007608 	.word	0x08007608
 8001ee4:	08007620 	.word	0x08007620
 8001ee8:	08007638 	.word	0x08007638
 8001eec:	08007650 	.word	0x08007650
 8001ef0:	20000230 	.word	0x20000230
 8001ef4:	08007664 	.word	0x08007664

08001ef8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
	status_adc = 1;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	701a      	strb	r2, [r3, #0]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr
 8001f10:	20000224 	.word	0x20000224

08001f14 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	status_adc = 2;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_ADC_ConvCpltCallback+0x18>)
 8001f1e:	2202      	movs	r2, #2
 8001f20:	701a      	strb	r2, [r3, #0]
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000224 	.word	0x20000224

08001f30 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7f1b      	ldrb	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d103      	bne.n	8001f48 <HAL_TIM_IC_CaptureCallback+0x18>

		__HAL_TIM_SET_COUNTER (&htim4, 0);
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 descendente
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	7f1b      	ldrb	r3, [r3, #28]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d10d      	bne.n	8001f6c <HAL_TIM_IC_CaptureCallback+0x3c>

		acum_fase += __HAL_TIM_GET_COUNTER (&htim4);
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001f5e:	6013      	str	r3, [r2, #0]
		cuenta_fase++;
 8001f60:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001f6a:	701a      	strb	r2, [r3, #0]

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

} //fin HAL_TIM_IC_CaptureCallback()
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000928 	.word	0x20000928
 8001f7c:	20000228 	.word	0x20000228
 8001f80:	2000022c 	.word	0x2000022c

08001f84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d102      	bne.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
	}
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000234 	.word	0x20000234

08001fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x5c>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x5c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_MspInit+0x60>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_MspInit+0x60>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <HardFault_Handler+0x4>

0800202e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <BusFault_Handler+0x4>

0800203a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 fad4 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <DMA1_Channel1_IRQHandler+0x10>)
 8002076:	f001 f961 	bl	800333c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000274 	.word	0x20000274

08002084 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <ADC1_2_IRQHandler+0x10>)
 800208a:	f000 fcb7 	bl	80029fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000244 	.word	0x20000244

08002098 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <TIM2_IRQHandler+0x10>)
 800209e:	f002 fb27 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200009b8 	.word	0x200009b8

080020ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <TIM4_IRQHandler+0x10>)
 80020b2:	f002 fb1d 	bl	80046f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000928 	.word	0x20000928

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f003 f8e2 	bl	80052b8 <__errno>
 80020f4:	4602      	mov	r2, r0
 80020f6:	230c      	movs	r3, #12
 80020f8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20005000 	.word	0x20005000
 8002120:	00000400 	.word	0x00000400
 8002124:	20000238 	.word	0x20000238
 8002128:	20000a50 	.word	0x20000a50

0800212c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800213e:	f107 0308 	add.w	r3, r7, #8
 8002142:	2200      	movs	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	609a      	str	r2, [r3, #8]
 800214a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800214c:	463b      	mov	r3, r7
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_TIM2_Init+0x98>)
 8002156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800215a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM2_Init+0x98>)
 800215e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002162:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM2_Init+0x98>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_TIM2_Init+0x98>)
 800216c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002170:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_TIM2_Init+0x98>)
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_TIM2_Init+0x98>)
 800217a:	2200      	movs	r2, #0
 800217c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800217e:	4814      	ldr	r0, [pc, #80]	; (80021d0 <MX_TIM2_Init+0x98>)
 8002180:	f002 f86c 	bl	800425c <HAL_TIM_Base_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800218a:	f7ff ff0f 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800218e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4619      	mov	r1, r3
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <MX_TIM2_Init+0x98>)
 800219c:	f002 fc44 	bl	8004a28 <HAL_TIM_ConfigClockSource>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021a6:	f7ff ff01 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM2_Init+0x98>)
 80021b8:	f002 ff32 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021c2:	f7ff fef3 	bl	8001fac <Error_Handler>
  }

}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200009b8 	.word	0x200009b8

080021d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	463b      	mov	r3, r7
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80021f0:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <MX_TIM3_Init+0x90>)
 80021f2:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <MX_TIM3_Init+0x94>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80021f6:	4b1b      	ldr	r3, [pc, #108]	; (8002264 <MX_TIM3_Init+0x90>)
 80021f8:	2247      	movs	r2, #71	; 0x47
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <MX_TIM3_Init+0x90>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <MX_TIM3_Init+0x90>)
 8002204:	2263      	movs	r2, #99	; 0x63
 8002206:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002208:	4b16      	ldr	r3, [pc, #88]	; (8002264 <MX_TIM3_Init+0x90>)
 800220a:	2200      	movs	r2, #0
 800220c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <MX_TIM3_Init+0x90>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002214:	4813      	ldr	r0, [pc, #76]	; (8002264 <MX_TIM3_Init+0x90>)
 8002216:	f002 f821 	bl	800425c <HAL_TIM_Base_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002220:	f7ff fec4 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002228:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4619      	mov	r1, r3
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <MX_TIM3_Init+0x90>)
 8002232:	f002 fbf9 	bl	8004a28 <HAL_TIM_ConfigClockSource>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800223c:	f7ff feb6 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002240:	2320      	movs	r3, #32
 8002242:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	4619      	mov	r1, r3
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM3_Init+0x90>)
 800224e:	f002 fee7 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002258:	f7ff fea8 	bl	8001fac <Error_Handler>
  }

}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000970 	.word	0x20000970
 8002268:	40000400 	.word	0x40000400

0800226c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002272:	f107 0318 	add.w	r3, r7, #24
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002280:	f107 0310 	add.w	r3, r7, #16
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800228a:	463b      	mov	r3, r7
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <MX_TIM4_Init+0xf4>)
 8002298:	4a32      	ldr	r2, [pc, #200]	; (8002364 <MX_TIM4_Init+0xf8>)
 800229a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 800229c:	4b30      	ldr	r3, [pc, #192]	; (8002360 <MX_TIM4_Init+0xf4>)
 800229e:	f240 321f 	movw	r2, #799	; 0x31f
 80022a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b2e      	ldr	r3, [pc, #184]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80022b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80022be:	4828      	ldr	r0, [pc, #160]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022c0:	f001 ffcc 	bl	800425c <HAL_TIM_Base_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 80022ca:	f7ff fe6f 	bl	8001fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80022d4:	f107 0318 	add.w	r3, r7, #24
 80022d8:	4619      	mov	r1, r3
 80022da:	4821      	ldr	r0, [pc, #132]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022dc:	f002 fba4 	bl	8004a28 <HAL_TIM_ConfigClockSource>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80022e6:	f7ff fe61 	bl	8001fac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80022ea:	481d      	ldr	r0, [pc, #116]	; (8002360 <MX_TIM4_Init+0xf4>)
 80022ec:	f002 f8a2 	bl	8004434 <HAL_TIM_IC_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80022f6:	f7ff fe59 	bl	8001fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002302:	f107 0310 	add.w	r3, r7, #16
 8002306:	4619      	mov	r1, r3
 8002308:	4815      	ldr	r0, [pc, #84]	; (8002360 <MX_TIM4_Init+0xf4>)
 800230a:	f002 fe89 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002314:	f7ff fe4a 	bl	8001fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002318:	2300      	movs	r3, #0
 800231a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800231c:	2301      	movs	r3, #1
 800231e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	2200      	movs	r2, #0
 800232c:	4619      	mov	r1, r3
 800232e:	480c      	ldr	r0, [pc, #48]	; (8002360 <MX_TIM4_Init+0xf4>)
 8002330:	f002 fae6 	bl	8004900 <HAL_TIM_IC_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800233a:	f7ff fe37 	bl	8001fac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800233e:	2302      	movs	r3, #2
 8002340:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002342:	463b      	mov	r3, r7
 8002344:	2208      	movs	r2, #8
 8002346:	4619      	mov	r1, r3
 8002348:	4805      	ldr	r0, [pc, #20]	; (8002360 <MX_TIM4_Init+0xf4>)
 800234a:	f002 fad9 	bl	8004900 <HAL_TIM_IC_ConfigChannel>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002354:	f7ff fe2a 	bl	8001fac <Error_Handler>
  }

}
 8002358:	bf00      	nop
 800235a:	3728      	adds	r7, #40	; 0x28
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000928 	.word	0x20000928
 8002364:	40000800 	.word	0x40000800

08002368 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d114      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002388:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	201c      	movs	r0, #28
 80023a6:	f000 fed8 	bl	800315a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023aa:	201c      	movs	r0, #28
 80023ac:	f000 fef1 	bl	8003192 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023b0:	e043      	b.n	800243a <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a24      	ldr	r2, [pc, #144]	; (8002448 <HAL_TIM_Base_MspInit+0xe0>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d10c      	bne.n	80023d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	4a20      	ldr	r2, [pc, #128]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	61d3      	str	r3, [r2, #28]
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	e031      	b.n	800243a <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM4)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <HAL_TIM_Base_MspInit+0xe4>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d12c      	bne.n	800243a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023e2:	69db      	ldr	r3, [r3, #28]
 80023e4:	4a17      	ldr	r2, [pc, #92]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023e6:	f043 0304 	orr.w	r3, r3, #4
 80023ea:	61d3      	str	r3, [r2, #28]
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a11      	ldr	r2, [pc, #68]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 80023fe:	f043 0308 	orr.w	r3, r3, #8
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_TIM_Base_MspInit+0xdc>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002410:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800241a:	2301      	movs	r3, #1
 800241c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	4619      	mov	r1, r3
 8002424:	480a      	ldr	r0, [pc, #40]	; (8002450 <HAL_TIM_Base_MspInit+0xe8>)
 8002426:	f001 f8bd 	bl	80035a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	201e      	movs	r0, #30
 8002430:	f000 fe93 	bl	800315a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002434:	201e      	movs	r0, #30
 8002436:	f000 feac 	bl	8003192 <HAL_NVIC_EnableIRQ>
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40000400 	.word	0x40000400
 800244c:	40000800 	.word	0x40000800
 8002450:	40010c00 	.word	0x40010c00

08002454 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <MX_USART2_UART_Init+0x50>)
 800245c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 8002460:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800246c:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002472:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 800247a:	220c      	movs	r2, #12
 800247c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 8002480:	2200      	movs	r2, #0
 8002482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 8002486:	2200      	movs	r2, #0
 8002488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <MX_USART2_UART_Init+0x4c>)
 800248c:	f002 fe38 	bl	8005100 <HAL_UART_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002496:	f7ff fd89 	bl	8001fac <Error_Handler>
  }

}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000a00 	.word	0x20000a00
 80024a4:	40004400 	.word	0x40004400

080024a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_UART_MspInit+0x88>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d12f      	bne.n	8002528 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024d2:	61d3      	str	r3, [r2, #28]
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4a13      	ldr	r2, [pc, #76]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024e6:	f043 0304 	orr.w	r3, r3, #4
 80024ea:	6193      	str	r3, [r2, #24]
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_UART_MspInit+0x8c>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f8:	2304      	movs	r3, #4
 80024fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fc:	2302      	movs	r3, #2
 80024fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4619      	mov	r1, r3
 800250a:	480b      	ldr	r0, [pc, #44]	; (8002538 <HAL_UART_MspInit+0x90>)
 800250c:	f001 f84a 	bl	80035a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002510:	2308      	movs	r3, #8
 8002512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251c:	f107 0310 	add.w	r3, r7, #16
 8002520:	4619      	mov	r1, r3
 8002522:	4805      	ldr	r0, [pc, #20]	; (8002538 <HAL_UART_MspInit+0x90>)
 8002524:	f001 f83e 	bl	80035a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002528:	bf00      	nop
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40004400 	.word	0x40004400
 8002534:	40021000 	.word	0x40021000
 8002538:	40010800 	.word	0x40010800

0800253c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	; (8002570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	; (800257c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	; (8002580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002562:	f7ff fde3 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f002 fead 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800256a:	f7ff f825 	bl	80015b8 <main>
  bx lr
 800256e:	4770      	bx	lr
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002578:	08007910 	.word	0x08007910
  ldr r2, =_sbss
 800257c:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002580:	20000a4c 	.word	0x20000a4c

08002584 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <CAN1_RX1_IRQHandler>
	...

08002588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_Init+0x28>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <HAL_Init+0x28>)
 8002592:	f043 0310 	orr.w	r3, r3, #16
 8002596:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002598:	2003      	movs	r0, #3
 800259a:	f000 fdd3 	bl	8003144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800259e:	2000      	movs	r0, #0
 80025a0:	f000 f808 	bl	80025b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025a4:	f7ff fd08 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000

080025b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_InitTick+0x54>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <HAL_InitTick+0x58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fdeb 	bl	80031ae <HAL_SYSTICK_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e00e      	b.n	8002600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b0f      	cmp	r3, #15
 80025e6:	d80a      	bhi.n	80025fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025e8:	2200      	movs	r2, #0
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	f000 fdb3 	bl	800315a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025f4:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_InitTick+0x5c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e000      	b.n	8002600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000000c 	.word	0x2000000c
 800260c:	20000014 	.word	0x20000014
 8002610:	20000010 	.word	0x20000010

08002614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_IncTick+0x1c>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_IncTick+0x20>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_IncTick+0x20>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	20000014 	.word	0x20000014
 8002634:	20000a44 	.word	0x20000a44

08002638 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return uwTick;
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <HAL_GetTick+0x10>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr
 8002648:	20000a44 	.word	0x20000a44

0800264c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002654:	f7ff fff0 	bl	8002638 <HAL_GetTick>
 8002658:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002664:	d005      	beq.n	8002672 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002666:	4b09      	ldr	r3, [pc, #36]	; (800268c <HAL_Delay+0x40>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4413      	add	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002672:	bf00      	nop
 8002674:	f7ff ffe0 	bl	8002638 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	429a      	cmp	r2, r3
 8002682:	d8f7      	bhi.n	8002674 <HAL_Delay+0x28>
  {
  }
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000014 	.word	0x20000014

08002690 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e0be      	b.n	8002830 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fcf6 	bl	80010c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 fbb9 	bl	8002e4c <ADC_ConversionStop_Disable>
 80026da:	4603      	mov	r3, r0
 80026dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8099 	bne.w	800281e <HAL_ADC_Init+0x18e>
 80026ec:	7dfb      	ldrb	r3, [r7, #23]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f040 8095 	bne.w	800281e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026fc:	f023 0302 	bic.w	r3, r3, #2
 8002700:	f043 0202 	orr.w	r2, r3, #2
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002710:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	7b1b      	ldrb	r3, [r3, #12]
 8002716:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002718:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	4313      	orrs	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002728:	d003      	beq.n	8002732 <HAL_ADC_Init+0xa2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_ADC_Init+0xa8>
 8002732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002736:	e000      	b.n	800273a <HAL_ADC_Init+0xaa>
 8002738:	2300      	movs	r3, #0
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7d1b      	ldrb	r3, [r3, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d119      	bne.n	800277c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	7b1b      	ldrb	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	3b01      	subs	r3, #1
 8002756:	035a      	lsls	r2, r3, #13
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	e00b      	b.n	800277c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f043 0201 	orr.w	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_ADC_Init+0x1a8>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	430b      	orrs	r3, r1
 80027a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ac:	d003      	beq.n	80027b6 <HAL_ADC_Init+0x126>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d104      	bne.n	80027c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_ADC_Init+0x1ac>)
 80027dc:	4013      	ands	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d10b      	bne.n	80027fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027fa:	e018      	b.n	800282e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	f023 0312 	bic.w	r3, r3, #18
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800281c:	e007      	b.n	800282e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800282e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	ffe1f7fd 	.word	0xffe1f7fd
 800283c:	ff1f0efe 	.word	0xff1f0efe

08002840 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a64      	ldr	r2, [pc, #400]	; (80029e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_ADC_Start_DMA+0x24>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a63      	ldr	r2, [pc, #396]	; (80029ec <HAL_ADC_Start_DMA+0x1ac>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d106      	bne.n	8002872 <HAL_ADC_Start_DMA+0x32>
 8002864:	4b60      	ldr	r3, [pc, #384]	; (80029e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800286c:	2b00      	cmp	r3, #0
 800286e:	f040 80b3 	bne.w	80029d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_ADC_Start_DMA+0x40>
 800287c:	2302      	movs	r3, #2
 800287e:	e0ae      	b.n	80029de <HAL_ADC_Start_DMA+0x19e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fa85 	bl	8002d98 <ADC_Enable>
 800288e:	4603      	mov	r3, r0
 8002890:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002892:	7dfb      	ldrb	r3, [r7, #23]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 809a 	bne.w	80029ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <HAL_ADC_Start_DMA+0x1ac>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_Start_DMA+0x84>
 80028b8:	4b4b      	ldr	r3, [pc, #300]	; (80029e8 <HAL_ADC_Start_DMA+0x1a8>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d115      	bne.n	80028f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d026      	beq.n	800292c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028e6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ee:	e01d      	b.n	800292c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a39      	ldr	r2, [pc, #228]	; (80029e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d004      	beq.n	8002910 <HAL_ADC_Start_DMA+0xd0>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_ADC_Start_DMA+0x1ac>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d10d      	bne.n	800292c <HAL_ADC_Start_DMA+0xec>
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_ADC_Start_DMA+0x1a8>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002924:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d006      	beq.n	8002946 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	f023 0206 	bic.w	r2, r3, #6
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
 8002944:	e002      	b.n	800294c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <HAL_ADC_Start_DMA+0x1b0>)
 800295a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <HAL_ADC_Start_DMA+0x1b4>)
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	4a23      	ldr	r2, [pc, #140]	; (80029f8 <HAL_ADC_Start_DMA+0x1b8>)
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002984:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a18      	ldr	r0, [r3, #32]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	334c      	adds	r3, #76	; 0x4c
 8002990:	4619      	mov	r1, r3
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f000 fc71 	bl	800327c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029a4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029a8:	d108      	bne.n	80029bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029ba:	e00f      	b.n	80029dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029cc:	e006      	b.n	80029dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80029d6:	e001      	b.n	80029dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40012400 	.word	0x40012400
 80029ec:	40012800 	.word	0x40012800
 80029f0:	08002ecf 	.word	0x08002ecf
 80029f4:	08002f4b 	.word	0x08002f4b
 80029f8:	08002f67 	.word	0x08002f67

080029fc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d140      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d139      	bne.n	8002a94 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002a42:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002a46:	d11d      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d119      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0220 	bic.w	r2, r2, #32
 8002a5e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f043 0201 	orr.w	r2, r3, #1
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fa45 	bl	8001f14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0212 	mvn.w	r2, #18
 8002a92:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	2b80      	cmp	r3, #128	; 0x80
 8002aa0:	d14f      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d148      	bne.n	8002b42 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d105      	bne.n	8002ac8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002ad2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002ad6:	d012      	beq.n	8002afe <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d125      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002af0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002af4:	d11d      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d119      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa31 	bl	8002f9a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f06f 020c 	mvn.w	r2, #12
 8002b40:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d114      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10d      	bne.n	8002b7a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f809 	bl	8002b82 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f06f 0201 	mvn.w	r2, #1
 8002b78:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
	...

08002ba8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x20>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	e0dc      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1da>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d81c      	bhi.n	8002c12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b05      	subs	r3, #5
 8002bea:	221f      	movs	r2, #31
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	4019      	ands	r1, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	3b05      	subs	r3, #5
 8002c04:	fa00 f203 	lsl.w	r2, r0, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8002c10:	e03c      	b.n	8002c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d81c      	bhi.n	8002c54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b23      	subs	r3, #35	; 0x23
 8002c2c:	221f      	movs	r2, #31
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43db      	mvns	r3, r3
 8002c34:	4019      	ands	r1, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b23      	subs	r3, #35	; 0x23
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
 8002c52:	e01b      	b.n	8002c8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	3b41      	subs	r3, #65	; 0x41
 8002c66:	221f      	movs	r2, #31
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	4019      	ands	r1, r3
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3b41      	subs	r3, #65	; 0x41
 8002c80:	fa00 f203 	lsl.w	r2, r0, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b09      	cmp	r3, #9
 8002c92:	d91c      	bls.n	8002cce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68d9      	ldr	r1, [r3, #12]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b1e      	subs	r3, #30
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	43db      	mvns	r3, r3
 8002cae:	4019      	ands	r1, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6898      	ldr	r0, [r3, #8]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3b1e      	subs	r3, #30
 8002cc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e019      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6919      	ldr	r1, [r3, #16]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	2207      	movs	r2, #7
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	4019      	ands	r1, r3
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	6898      	ldr	r0, [r3, #8]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d003      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d0e:	2b11      	cmp	r3, #17
 8002d10:	d132      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_ADC_ConfigChannel+0x1e4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d125      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d126      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d38:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d11a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <HAL_ADC_ConfigChannel+0x1ec>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9a      	lsrs	r2, r3, #18
 8002d4e:	4613      	mov	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4413      	add	r3, r2
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d58:	e002      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f9      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1b2>
 8002d66:	e007      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	40012400 	.word	0x40012400
 8002d90:	2000000c 	.word	0x2000000c
 8002d94:	431bde83 	.word	0x431bde83

08002d98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d040      	beq.n	8002e38 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0201 	orr.w	r2, r2, #1
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dc6:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <ADC_Enable+0xac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <ADC_Enable+0xb0>)
 8002dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd0:	0c9b      	lsrs	r3, r3, #18
 8002dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dd4:	e002      	b.n	8002ddc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002de2:	f7ff fc29 	bl	8002638 <HAL_GetTick>
 8002de6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002de8:	e01f      	b.n	8002e2a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002dea:	f7ff fc25 	bl	8002638 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d918      	bls.n	8002e2a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d011      	beq.n	8002e2a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f043 0210 	orr.w	r2, r3, #16
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e007      	b.n	8002e3a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d1d8      	bne.n	8002dea <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	2000000c 	.word	0x2000000c
 8002e48:	431bde83 	.word	0x431bde83

08002e4c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d12e      	bne.n	8002ec4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e76:	f7ff fbdf 	bl	8002638 <HAL_GetTick>
 8002e7a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e7c:	e01b      	b.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e7e:	f7ff fbdb 	bl	8002638 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d914      	bls.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f043 0210 	orr.w	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f043 0201 	orr.w	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e007      	b.n	8002ec6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d0dc      	beq.n	8002e7e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d127      	bne.n	8002f38 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002efe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f02:	d115      	bne.n	8002f30 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d111      	bne.n	8002f30 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	f043 0201 	orr.w	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7fe ffef 	bl	8001f14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002f36:	e004      	b.n	8002f42 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b084      	sub	sp, #16
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f7fe ffcd 	bl	8001ef8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b084      	sub	sp, #16
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f7ff fe01 	bl	8002b94 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fde:	4a04      	ldr	r2, [pc, #16]	; (8002ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	60d3      	str	r3, [r2, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__NVIC_GetPriorityGrouping+0x18>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	0a1b      	lsrs	r3, r3, #8
 8002ffe:	f003 0307 	and.w	r3, r3, #7
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0b      	blt.n	800303a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	f003 021f 	and.w	r2, r3, #31
 8003028:	4906      	ldr	r1, [pc, #24]	; (8003044 <__NVIC_EnableIRQ+0x34>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	2001      	movs	r0, #1
 8003032:	fa00 f202 	lsl.w	r2, r0, r2
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	e000e100 	.word	0xe000e100

08003048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	6039      	str	r1, [r7, #0]
 8003052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003058:	2b00      	cmp	r3, #0
 800305a:	db0a      	blt.n	8003072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	b2da      	uxtb	r2, r3
 8003060:	490c      	ldr	r1, [pc, #48]	; (8003094 <__NVIC_SetPriority+0x4c>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	0112      	lsls	r2, r2, #4
 8003068:	b2d2      	uxtb	r2, r2
 800306a:	440b      	add	r3, r1
 800306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003070:	e00a      	b.n	8003088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	4908      	ldr	r1, [pc, #32]	; (8003098 <__NVIC_SetPriority+0x50>)
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	3b04      	subs	r3, #4
 8003080:	0112      	lsls	r2, r2, #4
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	440b      	add	r3, r1
 8003086:	761a      	strb	r2, [r3, #24]
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	e000e100 	.word	0xe000e100
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f1c3 0307 	rsb	r3, r3, #7
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	bf28      	it	cs
 80030ba:	2304      	movcs	r3, #4
 80030bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3304      	adds	r3, #4
 80030c2:	2b06      	cmp	r3, #6
 80030c4:	d902      	bls.n	80030cc <NVIC_EncodePriority+0x30>
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3b03      	subs	r3, #3
 80030ca:	e000      	b.n	80030ce <NVIC_EncodePriority+0x32>
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43da      	mvns	r2, r3
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	401a      	ands	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43d9      	mvns	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f4:	4313      	orrs	r3, r2
         );
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3724      	adds	r7, #36	; 0x24
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d301      	bcc.n	8003116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003112:	2301      	movs	r3, #1
 8003114:	e00f      	b.n	8003136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003116:	4a0a      	ldr	r2, [pc, #40]	; (8003140 <SysTick_Config+0x40>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311e:	210f      	movs	r1, #15
 8003120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003124:	f7ff ff90 	bl	8003048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <SysTick_Config+0x40>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x40>)
 8003130:	2207      	movs	r2, #7
 8003132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff ff2d 	bl	8002fac <__NVIC_SetPriorityGrouping>
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800315a:	b580      	push	{r7, lr}
 800315c:	b086      	sub	sp, #24
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800316c:	f7ff ff42 	bl	8002ff4 <__NVIC_GetPriorityGrouping>
 8003170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6978      	ldr	r0, [r7, #20]
 8003178:	f7ff ff90 	bl	800309c <NVIC_EncodePriority>
 800317c:	4602      	mov	r2, r0
 800317e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003182:	4611      	mov	r1, r2
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff5f 	bl	8003048 <__NVIC_SetPriority>
}
 800318a:	bf00      	nop
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff ff35 	bl	8003010 <__NVIC_EnableIRQ>
}
 80031a6:	bf00      	nop
 80031a8:	3708      	adds	r7, #8
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff ffa2 	bl	8003100 <SysTick_Config>
 80031bc:	4603      	mov	r3, r0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e043      	b.n	8003266 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b22      	ldr	r3, [pc, #136]	; (8003270 <HAL_DMA_Init+0xa8>)
 80031e6:	4413      	add	r3, r2
 80031e8:	4a22      	ldr	r2, [pc, #136]	; (8003274 <HAL_DMA_Init+0xac>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	009a      	lsls	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_DMA_Init+0xb0>)
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003212:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800322c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	bffdfff8 	.word	0xbffdfff8
 8003274:	cccccccd 	.word	0xcccccccd
 8003278:	40020000 	.word	0x40020000

0800327c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_DMA_Start_IT+0x20>
 8003298:	2302      	movs	r3, #2
 800329a:	e04a      	b.n	8003332 <HAL_DMA_Start_IT+0xb6>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d13a      	bne.n	8003324 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2202      	movs	r2, #2
 80032b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f938 	bl	8003548 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 020e 	orr.w	r2, r2, #14
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e00f      	b.n	8003312 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0204 	bic.w	r2, r2, #4
 8003300:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 020a 	orr.w	r2, r2, #10
 8003310:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e005      	b.n	8003330 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003330:	7dfb      	ldrb	r3, [r7, #23]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2204      	movs	r2, #4
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d04f      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc8>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d04a      	beq.n	8003404 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d107      	bne.n	800338c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0204 	bic.w	r2, r2, #4
 800338a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a66      	ldr	r2, [pc, #408]	; (800352c <HAL_DMA_IRQHandler+0x1f0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d029      	beq.n	80033ea <HAL_DMA_IRQHandler+0xae>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_DMA_IRQHandler+0x1f4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_IRQHandler+0xaa>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a63      	ldr	r2, [pc, #396]	; (8003534 <HAL_DMA_IRQHandler+0x1f8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xa4>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a62      	ldr	r2, [pc, #392]	; (8003538 <HAL_DMA_IRQHandler+0x1fc>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d012      	beq.n	80033da <HAL_DMA_IRQHandler+0x9e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a60      	ldr	r2, [pc, #384]	; (800353c <HAL_DMA_IRQHandler+0x200>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x98>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a5f      	ldr	r2, [pc, #380]	; (8003540 <HAL_DMA_IRQHandler+0x204>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d102      	bne.n	80033ce <HAL_DMA_IRQHandler+0x92>
 80033c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033cc:	e00e      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80033d2:	e00b      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80033d8:	e008      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033de:	e005      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033e4:	e002      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033e6:	2340      	movs	r3, #64	; 0x40
 80033e8:	e000      	b.n	80033ec <HAL_DMA_IRQHandler+0xb0>
 80033ea:	2304      	movs	r3, #4
 80033ec:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_DMA_IRQHandler+0x208>)
 80033ee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8094 	beq.w	8003522 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003402:	e08e      	b.n	8003522 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003408:	2202      	movs	r2, #2
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d056      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x186>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d051      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020a 	bic.w	r2, r2, #10
 800343a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a38      	ldr	r2, [pc, #224]	; (800352c <HAL_DMA_IRQHandler+0x1f0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d029      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x166>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a37      	ldr	r2, [pc, #220]	; (8003530 <HAL_DMA_IRQHandler+0x1f4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d022      	beq.n	800349e <HAL_DMA_IRQHandler+0x162>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a35      	ldr	r2, [pc, #212]	; (8003534 <HAL_DMA_IRQHandler+0x1f8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x15c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a34      	ldr	r2, [pc, #208]	; (8003538 <HAL_DMA_IRQHandler+0x1fc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d012      	beq.n	8003492 <HAL_DMA_IRQHandler+0x156>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a32      	ldr	r2, [pc, #200]	; (800353c <HAL_DMA_IRQHandler+0x200>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00a      	beq.n	800348c <HAL_DMA_IRQHandler+0x150>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a31      	ldr	r2, [pc, #196]	; (8003540 <HAL_DMA_IRQHandler+0x204>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d102      	bne.n	8003486 <HAL_DMA_IRQHandler+0x14a>
 8003480:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003484:	e00e      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 8003486:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800348a:	e00b      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 800348c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003490:	e008      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 8003492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003496:	e005      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	e002      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 800349e:	2320      	movs	r3, #32
 80034a0:	e000      	b.n	80034a4 <HAL_DMA_IRQHandler+0x168>
 80034a2:	2302      	movs	r3, #2
 80034a4:	4a27      	ldr	r2, [pc, #156]	; (8003544 <HAL_DMA_IRQHandler+0x208>)
 80034a6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d034      	beq.n	8003522 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80034c0:	e02f      	b.n	8003522 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2208      	movs	r2, #8
 80034c8:	409a      	lsls	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d028      	beq.n	8003524 <HAL_DMA_IRQHandler+0x1e8>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0308 	and.w	r3, r3, #8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d023      	beq.n	8003524 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020e 	bic.w	r2, r2, #14
 80034ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f202 	lsl.w	r2, r1, r2
 80034fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
    }
  }
  return;
 8003522:	bf00      	nop
 8003524:	bf00      	nop
}
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40020008 	.word	0x40020008
 8003530:	4002001c 	.word	0x4002001c
 8003534:	40020030 	.word	0x40020030
 8003538:	40020044 	.word	0x40020044
 800353c:	40020058 	.word	0x40020058
 8003540:	4002006c 	.word	0x4002006c
 8003544:	40020000 	.word	0x40020000

08003548 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b10      	cmp	r3, #16
 8003574:	d108      	bne.n	8003588 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003586:	e007      	b.n	8003598 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	60da      	str	r2, [r3, #12]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr
	...

080035a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b08b      	sub	sp, #44	; 0x2c
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035ae:	2300      	movs	r3, #0
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035b2:	2300      	movs	r3, #0
 80035b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b6:	e127      	b.n	8003808 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035b8:	2201      	movs	r2, #1
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	f040 8116 	bne.w	8003802 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b12      	cmp	r3, #18
 80035dc:	d034      	beq.n	8003648 <HAL_GPIO_Init+0xa4>
 80035de:	2b12      	cmp	r3, #18
 80035e0:	d80d      	bhi.n	80035fe <HAL_GPIO_Init+0x5a>
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d02b      	beq.n	800363e <HAL_GPIO_Init+0x9a>
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d804      	bhi.n	80035f4 <HAL_GPIO_Init+0x50>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d031      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d01c      	beq.n	800362c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035f2:	e048      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d043      	beq.n	8003680 <HAL_GPIO_Init+0xdc>
 80035f8:	2b11      	cmp	r3, #17
 80035fa:	d01b      	beq.n	8003634 <HAL_GPIO_Init+0x90>
          break;
 80035fc:	e043      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035fe:	4a89      	ldr	r2, [pc, #548]	; (8003824 <HAL_GPIO_Init+0x280>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d026      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003604:	4a87      	ldr	r2, [pc, #540]	; (8003824 <HAL_GPIO_Init+0x280>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d806      	bhi.n	8003618 <HAL_GPIO_Init+0x74>
 800360a:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_GPIO_Init+0x284>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d020      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003610:	4a86      	ldr	r2, [pc, #536]	; (800382c <HAL_GPIO_Init+0x288>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01d      	beq.n	8003652 <HAL_GPIO_Init+0xae>
          break;
 8003616:	e036      	b.n	8003686 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003618:	4a85      	ldr	r2, [pc, #532]	; (8003830 <HAL_GPIO_Init+0x28c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d019      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 800361e:	4a85      	ldr	r2, [pc, #532]	; (8003834 <HAL_GPIO_Init+0x290>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d016      	beq.n	8003652 <HAL_GPIO_Init+0xae>
 8003624:	4a84      	ldr	r2, [pc, #528]	; (8003838 <HAL_GPIO_Init+0x294>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_GPIO_Init+0xae>
          break;
 800362a:	e02c      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	623b      	str	r3, [r7, #32]
          break;
 8003632:	e028      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	3304      	adds	r3, #4
 800363a:	623b      	str	r3, [r7, #32]
          break;
 800363c:	e023      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	3308      	adds	r3, #8
 8003644:	623b      	str	r3, [r7, #32]
          break;
 8003646:	e01e      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	330c      	adds	r3, #12
 800364e:	623b      	str	r3, [r7, #32]
          break;
 8003650:	e019      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d102      	bne.n	8003660 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800365a:	2304      	movs	r3, #4
 800365c:	623b      	str	r3, [r7, #32]
          break;
 800365e:	e012      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003668:	2308      	movs	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	611a      	str	r2, [r3, #16]
          break;
 8003672:	e008      	b.n	8003686 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003674:	2308      	movs	r3, #8
 8003676:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	615a      	str	r2, [r3, #20]
          break;
 800367e:	e002      	b.n	8003686 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
          break;
 8003684:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2bff      	cmp	r3, #255	; 0xff
 800368a:	d801      	bhi.n	8003690 <HAL_GPIO_Init+0xec>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	e001      	b.n	8003694 <HAL_GPIO_Init+0xf0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2bff      	cmp	r3, #255	; 0xff
 800369a:	d802      	bhi.n	80036a2 <HAL_GPIO_Init+0xfe>
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_Init+0x104>
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	3b08      	subs	r3, #8
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	210f      	movs	r1, #15
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	401a      	ands	r2, r3
 80036ba:	6a39      	ldr	r1, [r7, #32]
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	fa01 f303 	lsl.w	r3, r1, r3
 80036c2:	431a      	orrs	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 8096 	beq.w	8003802 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036d6:	4b59      	ldr	r3, [pc, #356]	; (800383c <HAL_GPIO_Init+0x298>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	4a58      	ldr	r2, [pc, #352]	; (800383c <HAL_GPIO_Init+0x298>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6193      	str	r3, [r2, #24]
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <HAL_GPIO_Init+0x298>)
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	60bb      	str	r3, [r7, #8]
 80036ec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036ee:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_GPIO_Init+0x29c>)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	089b      	lsrs	r3, r3, #2
 80036f4:	3302      	adds	r3, #2
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	220f      	movs	r2, #15
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <HAL_GPIO_Init+0x2a0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x19e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4a      	ldr	r2, [pc, #296]	; (8003848 <HAL_GPIO_Init+0x2a4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x19a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a49      	ldr	r2, [pc, #292]	; (800384c <HAL_GPIO_Init+0x2a8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x196>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a48      	ldr	r2, [pc, #288]	; (8003850 <HAL_GPIO_Init+0x2ac>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x192>
 8003732:	2303      	movs	r3, #3
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 8003736:	2304      	movs	r3, #4
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x1a0>
 8003742:	2300      	movs	r3, #0
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	f002 0203 	and.w	r2, r2, #3
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	4093      	lsls	r3, r2
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003754:	493a      	ldr	r1, [pc, #232]	; (8003840 <HAL_GPIO_Init+0x29c>)
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4938      	ldr	r1, [pc, #224]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	e006      	b.n	800378a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800377c:	4b35      	ldr	r3, [pc, #212]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	43db      	mvns	r3, r3
 8003784:	4933      	ldr	r1, [pc, #204]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003786:	4013      	ands	r3, r2
 8003788:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003796:	4b2f      	ldr	r3, [pc, #188]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	492e      	ldr	r1, [pc, #184]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	604b      	str	r3, [r1, #4]
 80037a2:	e006      	b.n	80037b2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	4929      	ldr	r1, [pc, #164]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d006      	beq.n	80037cc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4924      	ldr	r1, [pc, #144]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
 80037ca:	e006      	b.n	80037da <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	491f      	ldr	r1, [pc, #124]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	491a      	ldr	r1, [pc, #104]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60cb      	str	r3, [r1, #12]
 80037f2:	e006      	b.n	8003802 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037f4:	4b17      	ldr	r3, [pc, #92]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	43db      	mvns	r3, r3
 80037fc:	4915      	ldr	r1, [pc, #84]	; (8003854 <HAL_GPIO_Init+0x2b0>)
 80037fe:	4013      	ands	r3, r2
 8003800:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	3301      	adds	r3, #1
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	fa22 f303 	lsr.w	r3, r2, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	f47f aed0 	bne.w	80035b8 <HAL_GPIO_Init+0x14>
  }
}
 8003818:	bf00      	nop
 800381a:	372c      	adds	r7, #44	; 0x2c
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	10210000 	.word	0x10210000
 8003828:	10110000 	.word	0x10110000
 800382c:	10120000 	.word	0x10120000
 8003830:	10310000 	.word	0x10310000
 8003834:	10320000 	.word	0x10320000
 8003838:	10220000 	.word	0x10220000
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	40010800 	.word	0x40010800
 8003848:	40010c00 	.word	0x40010c00
 800384c:	40011000 	.word	0x40011000
 8003850:	40011400 	.word	0x40011400
 8003854:	40010400 	.word	0x40010400

08003858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	807b      	strh	r3, [r7, #2]
 8003892:	4613      	mov	r3, r2
 8003894:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003896:	787b      	ldrb	r3, [r7, #1]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800389c:	887a      	ldrh	r2, [r7, #2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80038a2:	e003      	b.n	80038ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	611a      	str	r2, [r3, #16]
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bc80      	pop	{r7}
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e26c      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8087 	beq.w	80039e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038d8:	4b92      	ldr	r3, [pc, #584]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 030c 	and.w	r3, r3, #12
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d00c      	beq.n	80038fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038e4:	4b8f      	ldr	r3, [pc, #572]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 030c 	and.w	r3, r3, #12
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d112      	bne.n	8003916 <HAL_RCC_OscConfig+0x5e>
 80038f0:	4b8c      	ldr	r3, [pc, #560]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d10b      	bne.n	8003916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038fe:	4b89      	ldr	r3, [pc, #548]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d06c      	beq.n	80039e4 <HAL_RCC_OscConfig+0x12c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d168      	bne.n	80039e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e246      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d106      	bne.n	800392e <HAL_RCC_OscConfig+0x76>
 8003920:	4b80      	ldr	r3, [pc, #512]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7f      	ldr	r2, [pc, #508]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	e02e      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x98>
 8003936:	4b7b      	ldr	r3, [pc, #492]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	4b78      	ldr	r3, [pc, #480]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a77      	ldr	r2, [pc, #476]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e01d      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0xbc>
 800395a:	4b72      	ldr	r3, [pc, #456]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a71      	ldr	r2, [pc, #452]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	4b6f      	ldr	r3, [pc, #444]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a6e      	ldr	r2, [pc, #440]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800396c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0xd4>
 8003974:	4b6b      	ldr	r3, [pc, #428]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a6a      	ldr	r2, [pc, #424]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	4b68      	ldr	r3, [pc, #416]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a67      	ldr	r2, [pc, #412]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800398a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d013      	beq.n	80039bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe fe50 	bl	8002638 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800399c:	f7fe fe4c 	bl	8002638 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1fa      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0xe4>
 80039ba:	e014      	b.n	80039e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fe fe3c 	bl	8002638 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c4:	f7fe fe38 	bl	8002638 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b64      	cmp	r3, #100	; 0x64
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e1e6      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d6:	4b53      	ldr	r3, [pc, #332]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x10c>
 80039e2:	e000      	b.n	80039e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d063      	beq.n	8003aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039f2:	4b4c      	ldr	r3, [pc, #304]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039fe:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d11c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x18c>
 8003a0a:	4b46      	ldr	r3, [pc, #280]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d116      	bne.n	8003a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a16:	4b43      	ldr	r3, [pc, #268]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d005      	beq.n	8003a2e <HAL_RCC_OscConfig+0x176>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e1ba      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a2e:	4b3d      	ldr	r3, [pc, #244]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4939      	ldr	r1, [pc, #228]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	e03a      	b.n	8003aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d020      	beq.n	8003a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fdf1 	bl	8002638 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fded 	bl	8002638 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e19b      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f0      	beq.n	8003a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a78:	4b2a      	ldr	r3, [pc, #168]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4927      	ldr	r1, [pc, #156]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	600b      	str	r3, [r1, #0]
 8003a8c:	e015      	b.n	8003aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_RCC_OscConfig+0x270>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a94:	f7fe fdd0 	bl	8002638 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fdcc 	bl	8002638 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e17a      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aae:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d03a      	beq.n	8003b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d019      	beq.n	8003b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fdb0 	bl	8002638 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003adc:	f7fe fdac 	bl	8002638 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e15a      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aee:	4b0d      	ldr	r3, [pc, #52]	; (8003b24 <HAL_RCC_OscConfig+0x26c>)
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f000 fada 	bl	80040b4 <RCC_Delay>
 8003b00:	e01c      	b.n	8003b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <HAL_RCC_OscConfig+0x274>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fe fd96 	bl	8002638 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b0e:	e00f      	b.n	8003b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b10:	f7fe fd92 	bl	8002638 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d908      	bls.n	8003b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e140      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000
 8003b28:	42420000 	.word	0x42420000
 8003b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b30:	4b9e      	ldr	r3, [pc, #632]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1e9      	bne.n	8003b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a6 	beq.w	8003c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b4e:	4b97      	ldr	r3, [pc, #604]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5a:	4b94      	ldr	r3, [pc, #592]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	4a93      	ldr	r2, [pc, #588]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	61d3      	str	r3, [r2, #28]
 8003b66:	4b91      	ldr	r3, [pc, #580]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	4b8e      	ldr	r3, [pc, #568]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d118      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b82:	4b8b      	ldr	r3, [pc, #556]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a8a      	ldr	r2, [pc, #552]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b8e:	f7fe fd53 	bl	8002638 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b96:	f7fe fd4f 	bl	8002638 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	; 0x64
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e0fd      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	4b81      	ldr	r3, [pc, #516]	; (8003db0 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d106      	bne.n	8003bca <HAL_RCC_OscConfig+0x312>
 8003bbc:	4b7b      	ldr	r3, [pc, #492]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	e02d      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10c      	bne.n	8003bec <HAL_RCC_OscConfig+0x334>
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bd8:	f023 0301 	bic.w	r3, r3, #1
 8003bdc:	6213      	str	r3, [r2, #32]
 8003bde:	4b73      	ldr	r3, [pc, #460]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a72      	ldr	r2, [pc, #456]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003be4:	f023 0304 	bic.w	r3, r3, #4
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	e01c      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b05      	cmp	r3, #5
 8003bf2:	d10c      	bne.n	8003c0e <HAL_RCC_OscConfig+0x356>
 8003bf4:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003bfa:	f043 0304 	orr.w	r3, r3, #4
 8003bfe:	6213      	str	r3, [r2, #32]
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4a69      	ldr	r2, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	f043 0301 	orr.w	r3, r3, #1
 8003c0a:	6213      	str	r3, [r2, #32]
 8003c0c:	e00b      	b.n	8003c26 <HAL_RCC_OscConfig+0x36e>
 8003c0e:	4b67      	ldr	r3, [pc, #412]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	4a66      	ldr	r2, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	6213      	str	r3, [r2, #32]
 8003c1a:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	f023 0304 	bic.w	r3, r3, #4
 8003c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe fd03 	bl	8002638 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fe fcff 	bl	8002638 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e0ab      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCC_OscConfig+0x37e>
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fced 	bl	8002638 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fe fce9 	bl	8002638 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e095      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c78:	4b4c      	ldr	r3, [pc, #304]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ee      	bne.n	8003c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d105      	bne.n	8003c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c8a:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	4a47      	ldr	r2, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8081 	beq.w	8003da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ca0:	4b42      	ldr	r3, [pc, #264]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d061      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d146      	bne.n	8003d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b3f      	ldr	r3, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7fe fcbd 	bl	8002638 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe fcb9 	bl	8002638 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e067      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce8:	d108      	bne.n	8003cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cea:	4b30      	ldr	r3, [pc, #192]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	492d      	ldr	r1, [pc, #180]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a19      	ldr	r1, [r3, #32]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	4927      	ldr	r1, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fc8d 	bl	8002638 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe fc89 	bl	8002638 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e037      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d34:	4b1d      	ldr	r3, [pc, #116]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x46a>
 8003d40:	e02f      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_RCC_OscConfig+0x4fc>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fc76 	bl	8002638 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fe fc72 	bl	8002638 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e020      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d62:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x498>
 8003d6e:	e018      	b.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e013      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d106      	bne.n	8003d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42420060 	.word	0x42420060

08003db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0d0      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dcc:	4b6a      	ldr	r3, [pc, #424]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d910      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 0207 	bic.w	r2, r3, #7
 8003de2:	4965      	ldr	r1, [pc, #404]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d001      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0b8      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d020      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e14:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4a52      	ldr	r2, [pc, #328]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b50      	ldr	r3, [pc, #320]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	494d      	ldr	r1, [pc, #308]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d040      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d107      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b47      	ldr	r3, [pc, #284]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d115      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e07f      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d107      	bne.n	8003e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b41      	ldr	r3, [pc, #260]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e073      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e06b      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f023 0203 	bic.w	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	4936      	ldr	r1, [pc, #216]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea8:	f7fe fbc6 	bl	8002638 <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	e00a      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb0:	f7fe fbc2 	bl	8002638 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e053      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f003 020c 	and.w	r2, r3, #12
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d1eb      	bne.n	8003eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d210      	bcs.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 0207 	bic.w	r2, r3, #7
 8003eee:	4922      	ldr	r1, [pc, #136]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b20      	ldr	r3, [pc, #128]	; (8003f78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d001      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e032      	b.n	8003f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f14:	4b19      	ldr	r3, [pc, #100]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	4916      	ldr	r1, [pc, #88]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	490e      	ldr	r1, [pc, #56]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f46:	f000 f821 	bl	8003f8c <HAL_RCC_GetSysClockFreq>
 8003f4a:	4601      	mov	r1, r0
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <HAL_RCC_ClockConfig+0x1c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	5cd3      	ldrb	r3, [r2, r3]
 8003f5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <HAL_RCC_ClockConfig+0x1cc>)
 8003f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_ClockConfig+0x1d0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe fb24 	bl	80025b4 <HAL_InitTick>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40022000 	.word	0x40022000
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0800768c 	.word	0x0800768c
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	20000010 	.word	0x20000010

08003f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f8c:	b490      	push	{r4, r7}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f92:	4b2a      	ldr	r3, [pc, #168]	; (800403c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f94:	1d3c      	adds	r4, r7, #4
 8003f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f9c:	4b28      	ldr	r3, [pc, #160]	; (8004040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fb6:	4b23      	ldr	r3, [pc, #140]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d002      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x40>
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003fca:	e02d      	b.n	8004028 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fcc:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fce:	623b      	str	r3, [r7, #32]
      break;
 8003fd0:	e02d      	b.n	800402e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	0c9b      	lsrs	r3, r3, #18
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003fde:	4413      	add	r3, r2
 8003fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003fe4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	0c5b      	lsrs	r3, r3, #17
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ffe:	4413      	add	r3, r2
 8004000:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004004:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	4a0f      	ldr	r2, [pc, #60]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800400a:	fb02 f203 	mul.w	r2, r2, r3
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	fbb2 f3f3 	udiv	r3, r2, r3
 8004014:	627b      	str	r3, [r7, #36]	; 0x24
 8004016:	e004      	b.n	8004022 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	4a0c      	ldr	r2, [pc, #48]	; (800404c <HAL_RCC_GetSysClockFreq+0xc0>)
 800401c:	fb02 f303 	mul.w	r3, r2, r3
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004024:	623b      	str	r3, [r7, #32]
      break;
 8004026:	e002      	b.n	800402e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800402a:	623b      	str	r3, [r7, #32]
      break;
 800402c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402e:	6a3b      	ldr	r3, [r7, #32]
}
 8004030:	4618      	mov	r0, r3
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc90      	pop	{r4, r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	08007678 	.word	0x08007678
 8004040:	08007688 	.word	0x08007688
 8004044:	40021000 	.word	0x40021000
 8004048:	007a1200 	.word	0x007a1200
 800404c:	003d0900 	.word	0x003d0900

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b02      	ldr	r3, [pc, #8]	; (8004060 <HAL_RCC_GetHCLKFreq+0x10>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr
 8004060:	2000000c 	.word	0x2000000c

08004064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004068:	f7ff fff2 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 800406c:	4601      	mov	r1, r0
 800406e:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	4a03      	ldr	r2, [pc, #12]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	0800769c 	.word	0x0800769c

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004090:	f7ff ffde 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004094:	4601      	mov	r1, r0
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	0adb      	lsrs	r3, r3, #11
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	4a03      	ldr	r2, [pc, #12]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	40021000 	.word	0x40021000
 80040b0:	0800769c 	.word	0x0800769c

080040b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040bc:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <RCC_Delay+0x34>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <RCC_Delay+0x38>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0a5b      	lsrs	r3, r3, #9
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040d0:	bf00      	nop
  }
  while (Delay --);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	1e5a      	subs	r2, r3, #1
 80040d6:	60fa      	str	r2, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f9      	bne.n	80040d0 <RCC_Delay+0x1c>
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c
 80040ec:	10624dd3 	.word	0x10624dd3

080040f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d07d      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800410c:	2300      	movs	r3, #0
 800410e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004110:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10d      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800411c:	4b4c      	ldr	r3, [pc, #304]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	4a4b      	ldr	r2, [pc, #300]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	61d3      	str	r3, [r2, #28]
 8004128:	4b49      	ldr	r3, [pc, #292]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004134:	2301      	movs	r3, #1
 8004136:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d118      	bne.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a42      	ldr	r2, [pc, #264]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004150:	f7fe fa72 	bl	8002638 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004158:	f7fe fa6e 	bl	8002638 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e06d      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416a:	4b3a      	ldr	r3, [pc, #232]	; (8004254 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004176:	4b36      	ldr	r3, [pc, #216]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d02e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d027      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004194:	4b2e      	ldr	r3, [pc, #184]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800419e:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041a4:	4b2c      	ldr	r3, [pc, #176]	; (8004258 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041aa:	4a29      	ldr	r2, [pc, #164]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d014      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fe fa3d 	bl	8002638 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fe fa39 	bl	8002638 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e036      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e4:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4917      	ldr	r1, [pc, #92]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004206:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	490b      	ldr	r1, [pc, #44]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	4313      	orrs	r3, r2
 8004224:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d008      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004232:	4b07      	ldr	r3, [pc, #28]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	4904      	ldr	r1, [pc, #16]	; (8004250 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004240:	4313      	orrs	r3, r2
 8004242:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40021000 	.word	0x40021000
 8004254:	40007000 	.word	0x40007000
 8004258:	42420440 	.word	0x42420440

0800425c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e041      	b.n	80042f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7fe f870 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f000 fc96 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
	...

080042fc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d001      	beq.n	8004314 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_TIM_Base_Start+0x88>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00e      	beq.n	8004344 <HAL_TIM_Base_Start+0x48>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800432e:	d009      	beq.n	8004344 <HAL_TIM_Base_Start+0x48>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <HAL_TIM_Base_Start+0x8c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <HAL_TIM_Base_Start+0x48>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a13      	ldr	r2, [pc, #76]	; (800438c <HAL_TIM_Base_Start+0x90>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d111      	bne.n	8004368 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b06      	cmp	r3, #6
 8004354:	d010      	beq.n	8004378 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 0201 	orr.w	r2, r2, #1
 8004364:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004366:	e007      	b.n	8004378 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0201 	orr.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	bc80      	pop	{r7}
 8004382:	4770      	bx	lr
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800

08004390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e03a      	b.n	800441e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <HAL_TIM_Base_Start_IT+0x98>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x58>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d009      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x58>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <HAL_TIM_Base_Start_IT+0x9c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_TIM_Base_Start_IT+0x58>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <HAL_TIM_Base_Start_IT+0xa0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d111      	bne.n	800440c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b06      	cmp	r3, #6
 80043f8:	d010      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0201 	orr.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800440a:	e007      	b.n	800441c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f042 0201 	orr.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00
 800442c:	40000400 	.word	0x40000400
 8004430:	40000800 	.word	0x40000800

08004434 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e041      	b.n	80044ca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f839 	bl	80044d2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2202      	movs	r2, #2
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3304      	adds	r3, #4
 8004470:	4619      	mov	r1, r3
 8004472:	4610      	mov	r0, r2
 8004474:	f000 fbaa 	bl	8004bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0x1a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	e013      	b.n	8004526 <HAL_TIM_IC_Start_IT+0x42>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d104      	bne.n	800450e <HAL_TIM_IC_Start_IT+0x2a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e00b      	b.n	8004526 <HAL_TIM_IC_Start_IT+0x42>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b08      	cmp	r3, #8
 8004512:	d104      	bne.n	800451e <HAL_TIM_IC_Start_IT+0x3a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800451a:	b2db      	uxtb	r3, r3
 800451c:	e003      	b.n	8004526 <HAL_TIM_IC_Start_IT+0x42>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004524:	b2db      	uxtb	r3, r3
 8004526:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_TIM_IC_Start_IT+0x54>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004534:	b2db      	uxtb	r3, r3
 8004536:	e013      	b.n	8004560 <HAL_TIM_IC_Start_IT+0x7c>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d104      	bne.n	8004548 <HAL_TIM_IC_Start_IT+0x64>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004544:	b2db      	uxtb	r3, r3
 8004546:	e00b      	b.n	8004560 <HAL_TIM_IC_Start_IT+0x7c>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b08      	cmp	r3, #8
 800454c:	d104      	bne.n	8004558 <HAL_TIM_IC_Start_IT+0x74>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004554:	b2db      	uxtb	r3, r3
 8004556:	e003      	b.n	8004560 <HAL_TIM_IC_Start_IT+0x7c>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800455e:	b2db      	uxtb	r3, r3
 8004560:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d102      	bne.n	800456e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004568:	7bbb      	ldrb	r3, [r7, #14]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d001      	beq.n	8004572 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e0b3      	b.n	80046da <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d104      	bne.n	8004582 <HAL_TIM_IC_Start_IT+0x9e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004580:	e013      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xc6>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d104      	bne.n	8004592 <HAL_TIM_IC_Start_IT+0xae>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	e00b      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xc6>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_IC_Start_IT+0xbe>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a0:	e003      	b.n	80045aa <HAL_TIM_IC_Start_IT+0xc6>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_TIM_IC_Start_IT+0xd6>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	e013      	b.n	80045e2 <HAL_TIM_IC_Start_IT+0xfe>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d104      	bne.n	80045ca <HAL_TIM_IC_Start_IT+0xe6>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045c8:	e00b      	b.n	80045e2 <HAL_TIM_IC_Start_IT+0xfe>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d104      	bne.n	80045da <HAL_TIM_IC_Start_IT+0xf6>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d8:	e003      	b.n	80045e2 <HAL_TIM_IC_Start_IT+0xfe>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2202      	movs	r2, #2
 80045de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	2b0c      	cmp	r3, #12
 80045e6:	d841      	bhi.n	800466c <HAL_TIM_IC_Start_IT+0x188>
 80045e8:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_TIM_IC_Start_IT+0x10c>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004625 	.word	0x08004625
 80045f4:	0800466d 	.word	0x0800466d
 80045f8:	0800466d 	.word	0x0800466d
 80045fc:	0800466d 	.word	0x0800466d
 8004600:	08004637 	.word	0x08004637
 8004604:	0800466d 	.word	0x0800466d
 8004608:	0800466d 	.word	0x0800466d
 800460c:	0800466d 	.word	0x0800466d
 8004610:	08004649 	.word	0x08004649
 8004614:	0800466d 	.word	0x0800466d
 8004618:	0800466d 	.word	0x0800466d
 800461c:	0800466d 	.word	0x0800466d
 8004620:	0800465b 	.word	0x0800465b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0202 	orr.w	r2, r2, #2
 8004632:	60da      	str	r2, [r3, #12]
      break;
 8004634:	e01b      	b.n	800466e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f042 0204 	orr.w	r2, r2, #4
 8004644:	60da      	str	r2, [r3, #12]
      break;
 8004646:	e012      	b.n	800466e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0208 	orr.w	r2, r2, #8
 8004656:	60da      	str	r2, [r3, #12]
      break;
 8004658:	e009      	b.n	800466e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0210 	orr.w	r2, r2, #16
 8004668:	60da      	str	r2, [r3, #12]
      break;
 800466a:	e000      	b.n	800466e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800466c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fcad 	bl	8004fd6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a18      	ldr	r2, [pc, #96]	; (80046e4 <HAL_TIM_IC_Start_IT+0x200>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00e      	beq.n	80046a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d009      	beq.n	80046a4 <HAL_TIM_IC_Start_IT+0x1c0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a14      	ldr	r2, [pc, #80]	; (80046e8 <HAL_TIM_IC_Start_IT+0x204>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d004      	beq.n	80046a4 <HAL_TIM_IC_Start_IT+0x1c0>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a13      	ldr	r2, [pc, #76]	; (80046ec <HAL_TIM_IC_Start_IT+0x208>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d111      	bne.n	80046c8 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b06      	cmp	r3, #6
 80046b4:	d010      	beq.n	80046d8 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f042 0201 	orr.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c6:	e007      	b.n	80046d8 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40012c00 	.word	0x40012c00
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800

080046f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b02      	cmp	r3, #2
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0202 	mvn.w	r2, #2
 800471c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7fd fbfc 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa2b 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 fa31 	bl	8004ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b04      	cmp	r3, #4
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0204 	mvn.w	r2, #4
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fd fbd2 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa01 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fa07 	bl	8004ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b08      	cmp	r3, #8
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0208 	mvn.w	r2, #8
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2204      	movs	r2, #4
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd fba8 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f9d7 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f9dd 	bl	8004ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b10      	cmp	r3, #16
 8004800:	d122      	bne.n	8004848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b10      	cmp	r3, #16
 800480e:	d11b      	bne.n	8004848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0210 	mvn.w	r2, #16
 8004818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2208      	movs	r2, #8
 800481e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fd fb7e 	bl	8001f30 <HAL_TIM_IC_CaptureCallback>
 8004834:	e005      	b.n	8004842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f9ad 	bl	8004b96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f9b3 	bl	8004ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b01      	cmp	r3, #1
 8004854:	d10e      	bne.n	8004874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b01      	cmp	r3, #1
 8004862:	d107      	bne.n	8004874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f06f 0201 	mvn.w	r2, #1
 800486c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fb88 	bl	8001f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d10e      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488c:	2b80      	cmp	r3, #128	; 0x80
 800488e:	d107      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fc27 	bl	80050ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048aa:	2b40      	cmp	r3, #64	; 0x40
 80048ac:	d10e      	bne.n	80048cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	d107      	bne.n	80048cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f977 	bl	8004bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b20      	cmp	r3, #32
 80048d8:	d10e      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d107      	bne.n	80048f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f06f 0220 	mvn.w	r2, #32
 80048f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fbf2 	bl	80050dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048f8:	bf00      	nop
 80048fa:	3708      	adds	r7, #8
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d101      	bne.n	800491a <HAL_TIM_IC_ConfigChannel+0x1a>
 8004916:	2302      	movs	r3, #2
 8004918:	e082      	b.n	8004a20 <HAL_TIM_IC_ConfigChannel+0x120>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11b      	bne.n	8004960 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f000 f9aa 	bl	8004c90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 020c 	bic.w	r2, r2, #12
 800494a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6999      	ldr	r1, [r3, #24]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	619a      	str	r2, [r3, #24]
 800495e:	e05a      	b.n	8004a16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b04      	cmp	r3, #4
 8004964:	d11c      	bne.n	80049a0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6818      	ldr	r0, [r3, #0]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f000 fa13 	bl	8004da0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004988:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6999      	ldr	r1, [r3, #24]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	021a      	lsls	r2, r3, #8
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	619a      	str	r2, [r3, #24]
 800499e:	e03a      	b.n	8004a16 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b08      	cmp	r3, #8
 80049a4:	d11b      	bne.n	80049de <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6818      	ldr	r0, [r3, #0]
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6819      	ldr	r1, [r3, #0]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f000 fa5e 	bl	8004e76 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f022 020c 	bic.w	r2, r2, #12
 80049c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69d9      	ldr	r1, [r3, #28]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	61da      	str	r2, [r3, #28]
 80049dc:	e01b      	b.n	8004a16 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6818      	ldr	r0, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	6819      	ldr	r1, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f000 fa7d 	bl	8004eec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69da      	ldr	r2, [r3, #28]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69d9      	ldr	r1, [r3, #28]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	021a      	lsls	r2, r3, #8
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_ConfigClockSource+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e0a6      	b.n	8004b8e <HAL_TIM_ConfigClockSource+0x166>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b40      	cmp	r3, #64	; 0x40
 8004a76:	d067      	beq.n	8004b48 <HAL_TIM_ConfigClockSource+0x120>
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d80b      	bhi.n	8004a94 <HAL_TIM_ConfigClockSource+0x6c>
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d073      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0x140>
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d802      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x62>
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d06f      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004a88:	e078      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a8a:	2b20      	cmp	r3, #32
 8004a8c:	d06c      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0x140>
 8004a8e:	2b30      	cmp	r3, #48	; 0x30
 8004a90:	d06a      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004a92:	e073      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a94:	2b70      	cmp	r3, #112	; 0x70
 8004a96:	d00d      	beq.n	8004ab4 <HAL_TIM_ConfigClockSource+0x8c>
 8004a98:	2b70      	cmp	r3, #112	; 0x70
 8004a9a:	d804      	bhi.n	8004aa6 <HAL_TIM_ConfigClockSource+0x7e>
 8004a9c:	2b50      	cmp	r3, #80	; 0x50
 8004a9e:	d033      	beq.n	8004b08 <HAL_TIM_ConfigClockSource+0xe0>
 8004aa0:	2b60      	cmp	r3, #96	; 0x60
 8004aa2:	d041      	beq.n	8004b28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004aa4:	e06a      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aaa:	d066      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x152>
 8004aac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ab0:	d017      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004ab2:	e063      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6899      	ldr	r1, [r3, #8]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f000 fa68 	bl	8004f98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	609a      	str	r2, [r3, #8]
      break;
 8004ae0:	e04c      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	6899      	ldr	r1, [r3, #8]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f000 fa51 	bl	8004f98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b04:	609a      	str	r2, [r3, #8]
      break;
 8004b06:	e039      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6818      	ldr	r0, [r3, #0]
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	461a      	mov	r2, r3
 8004b16:	f000 f915 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2150      	movs	r1, #80	; 0x50
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fa1f 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004b26:	e029      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6818      	ldr	r0, [r3, #0]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	461a      	mov	r2, r3
 8004b36:	f000 f96f 	bl	8004e18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2160      	movs	r1, #96	; 0x60
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fa0f 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004b46:	e019      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	6859      	ldr	r1, [r3, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	461a      	mov	r2, r3
 8004b56:	f000 f8f5 	bl	8004d44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2140      	movs	r1, #64	; 0x40
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f9ff 	bl	8004f64 <TIM_ITRx_SetConfig>
      break;
 8004b66:	e009      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4619      	mov	r1, r3
 8004b72:	4610      	mov	r0, r2
 8004b74:	f000 f9f6 	bl	8004f64 <TIM_ITRx_SetConfig>
        break;
 8004b78:	e000      	b.n	8004b7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004b7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b96:	b480      	push	{r7}
 8004b98:	b083      	sub	sp, #12
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a29      	ldr	r2, [pc, #164]	; (8004c84 <TIM_Base_SetConfig+0xb8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d00b      	beq.n	8004bfc <TIM_Base_SetConfig+0x30>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bea:	d007      	beq.n	8004bfc <TIM_Base_SetConfig+0x30>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a26      	ldr	r2, [pc, #152]	; (8004c88 <TIM_Base_SetConfig+0xbc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d003      	beq.n	8004bfc <TIM_Base_SetConfig+0x30>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a25      	ldr	r2, [pc, #148]	; (8004c8c <TIM_Base_SetConfig+0xc0>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d108      	bne.n	8004c0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a1c      	ldr	r2, [pc, #112]	; (8004c84 <TIM_Base_SetConfig+0xb8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0x62>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0x62>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <TIM_Base_SetConfig+0xbc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0x62>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <TIM_Base_SetConfig+0xc0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a07      	ldr	r2, [pc, #28]	; (8004c84 <TIM_Base_SetConfig+0xb8>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr
 8004c84:	40012c00 	.word	0x40012c00
 8004c88:	40000400 	.word	0x40000400
 8004c8c:	40000800 	.word	0x40000800

08004c90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f023 0201 	bic.w	r2, r3, #1
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <TIM_TI1_SetConfig+0xa8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00b      	beq.n	8004cd6 <TIM_TI1_SetConfig+0x46>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc4:	d007      	beq.n	8004cd6 <TIM_TI1_SetConfig+0x46>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a1c      	ldr	r2, [pc, #112]	; (8004d3c <TIM_TI1_SetConfig+0xac>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d003      	beq.n	8004cd6 <TIM_TI1_SetConfig+0x46>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <TIM_TI1_SetConfig+0xb0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d101      	bne.n	8004cda <TIM_TI1_SetConfig+0x4a>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <TIM_TI1_SetConfig+0x4c>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0303 	bic.w	r3, r3, #3
 8004ce6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ce8:	697a      	ldr	r2, [r7, #20]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	e003      	b.n	8004cfa <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	f043 0301 	orr.w	r3, r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f023 030a 	bic.w	r3, r3, #10
 8004d14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 030a 	and.w	r3, r3, #10
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	621a      	str	r2, [r3, #32]
}
 8004d2e:	bf00      	nop
 8004d30:	371c      	adds	r7, #28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bc80      	pop	{r7}
 8004d36:	4770      	bx	lr
 8004d38:	40012c00 	.word	0x40012c00
 8004d3c:	40000400 	.word	0x40000400
 8004d40:	40000800 	.word	0x40000800

08004d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0201 	bic.w	r2, r3, #1
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	f023 030a 	bic.w	r3, r3, #10
 8004d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	621a      	str	r2, [r3, #32]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr

08004da0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 0210 	bic.w	r2, r3, #16
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dde:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	031b      	lsls	r3, r3, #12
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004df2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	011b      	lsls	r3, r3, #4
 8004df8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 0210 	bic.w	r2, r3, #16
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	031b      	lsls	r3, r3, #12
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bc80      	pop	{r7}
 8004e74:	4770      	bx	lr

08004e76 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 0303 	bic.w	r3, r3, #3
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	011b      	lsls	r3, r3, #4
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	021b      	lsls	r3, r3, #8
 8004ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	621a      	str	r2, [r3, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	371c      	adds	r7, #28
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	031b      	lsls	r3, r3, #12
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	031b      	lsls	r3, r3, #12
 8004f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f043 0307 	orr.w	r3, r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	609a      	str	r2, [r3, #8]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr

08004f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	021a      	lsls	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b087      	sub	sp, #28
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f003 031f 	and.w	r3, r3, #31
 8004fe8:	2201      	movs	r2, #1
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a1a      	ldr	r2, [r3, #32]
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	401a      	ands	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr
	...

08005020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e046      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d009      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a10      	ldr	r2, [pc, #64]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10c      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bc80      	pop	{r7}
 80050ce:	4770      	bx	lr
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800

080050dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bc80      	pop	{r7}
 80050fe:	4770      	bx	lr

08005100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e03f      	b.n	8005192 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fd f9be 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2224      	movs	r2, #36	; 0x24
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f829 	bl	800519c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80051d6:	f023 030c 	bic.w	r3, r3, #12
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6812      	ldr	r2, [r2, #0]
 80051de:	68b9      	ldr	r1, [r7, #8]
 80051e0:	430b      	orrs	r3, r1
 80051e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	430a      	orrs	r2, r1
 80051f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a2c      	ldr	r2, [pc, #176]	; (80052b0 <UART_SetConfig+0x114>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d103      	bne.n	800520c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe ff42 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	e002      	b.n	8005212 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800520c:	f7fe ff2a 	bl	8004064 <HAL_RCC_GetPCLK1Freq>
 8005210:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <UART_SetConfig+0x118>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	0119      	lsls	r1, r3, #4
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	009a      	lsls	r2, r3, #2
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	fbb2 f2f3 	udiv	r2, r2, r3
 8005248:	4b1a      	ldr	r3, [pc, #104]	; (80052b4 <UART_SetConfig+0x118>)
 800524a:	fba3 0302 	umull	r0, r3, r3, r2
 800524e:	095b      	lsrs	r3, r3, #5
 8005250:	2064      	movs	r0, #100	; 0x64
 8005252:	fb00 f303 	mul.w	r3, r0, r3
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	3332      	adds	r3, #50	; 0x32
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <UART_SetConfig+0x118>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005268:	4419      	add	r1, r3
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	009a      	lsls	r2, r3, #2
 8005274:	441a      	add	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <UART_SetConfig+0x118>)
 8005282:	fba3 0302 	umull	r0, r3, r3, r2
 8005286:	095b      	lsrs	r3, r3, #5
 8005288:	2064      	movs	r0, #100	; 0x64
 800528a:	fb00 f303 	mul.w	r3, r0, r3
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	3332      	adds	r3, #50	; 0x32
 8005294:	4a07      	ldr	r2, [pc, #28]	; (80052b4 <UART_SetConfig+0x118>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	f003 020f 	and.w	r2, r3, #15
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	440a      	add	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052a8:	bf00      	nop
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40013800 	.word	0x40013800
 80052b4:	51eb851f 	.word	0x51eb851f

080052b8 <__errno>:
 80052b8:	4b01      	ldr	r3, [pc, #4]	; (80052c0 <__errno+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000018 	.word	0x20000018

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	2500      	movs	r5, #0
 80052c8:	4e0c      	ldr	r6, [pc, #48]	; (80052fc <__libc_init_array+0x38>)
 80052ca:	4c0d      	ldr	r4, [pc, #52]	; (8005300 <__libc_init_array+0x3c>)
 80052cc:	1ba4      	subs	r4, r4, r6
 80052ce:	10a4      	asrs	r4, r4, #2
 80052d0:	42a5      	cmp	r5, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	f002 f960 	bl	8007598 <_init>
 80052d8:	2500      	movs	r5, #0
 80052da:	4e0a      	ldr	r6, [pc, #40]	; (8005304 <__libc_init_array+0x40>)
 80052dc:	4c0a      	ldr	r4, [pc, #40]	; (8005308 <__libc_init_array+0x44>)
 80052de:	1ba4      	subs	r4, r4, r6
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	42a5      	cmp	r5, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ec:	4798      	blx	r3
 80052ee:	3501      	adds	r5, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052f6:	4798      	blx	r3
 80052f8:	3501      	adds	r5, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	08007908 	.word	0x08007908
 8005300:	08007908 	.word	0x08007908
 8005304:	08007908 	.word	0x08007908
 8005308:	0800790c 	.word	0x0800790c

0800530c <memset>:
 800530c:	4603      	mov	r3, r0
 800530e:	4402      	add	r2, r0
 8005310:	4293      	cmp	r3, r2
 8005312:	d100      	bne.n	8005316 <memset+0xa>
 8005314:	4770      	bx	lr
 8005316:	f803 1b01 	strb.w	r1, [r3], #1
 800531a:	e7f9      	b.n	8005310 <memset+0x4>

0800531c <__cvt>:
 800531c:	2b00      	cmp	r3, #0
 800531e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005322:	461e      	mov	r6, r3
 8005324:	bfbb      	ittet	lt
 8005326:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800532a:	461e      	movlt	r6, r3
 800532c:	2300      	movge	r3, #0
 800532e:	232d      	movlt	r3, #45	; 0x2d
 8005330:	b088      	sub	sp, #32
 8005332:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005334:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005338:	f027 0720 	bic.w	r7, r7, #32
 800533c:	2f46      	cmp	r7, #70	; 0x46
 800533e:	4614      	mov	r4, r2
 8005340:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005342:	700b      	strb	r3, [r1, #0]
 8005344:	d004      	beq.n	8005350 <__cvt+0x34>
 8005346:	2f45      	cmp	r7, #69	; 0x45
 8005348:	d100      	bne.n	800534c <__cvt+0x30>
 800534a:	3501      	adds	r5, #1
 800534c:	2302      	movs	r3, #2
 800534e:	e000      	b.n	8005352 <__cvt+0x36>
 8005350:	2303      	movs	r3, #3
 8005352:	aa07      	add	r2, sp, #28
 8005354:	9204      	str	r2, [sp, #16]
 8005356:	aa06      	add	r2, sp, #24
 8005358:	e9cd a202 	strd	sl, r2, [sp, #8]
 800535c:	e9cd 3500 	strd	r3, r5, [sp]
 8005360:	4622      	mov	r2, r4
 8005362:	4633      	mov	r3, r6
 8005364:	f000 fcd8 	bl	8005d18 <_dtoa_r>
 8005368:	2f47      	cmp	r7, #71	; 0x47
 800536a:	4680      	mov	r8, r0
 800536c:	d102      	bne.n	8005374 <__cvt+0x58>
 800536e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005370:	07db      	lsls	r3, r3, #31
 8005372:	d526      	bpl.n	80053c2 <__cvt+0xa6>
 8005374:	2f46      	cmp	r7, #70	; 0x46
 8005376:	eb08 0905 	add.w	r9, r8, r5
 800537a:	d111      	bne.n	80053a0 <__cvt+0x84>
 800537c:	f898 3000 	ldrb.w	r3, [r8]
 8005380:	2b30      	cmp	r3, #48	; 0x30
 8005382:	d10a      	bne.n	800539a <__cvt+0x7e>
 8005384:	2200      	movs	r2, #0
 8005386:	2300      	movs	r3, #0
 8005388:	4620      	mov	r0, r4
 800538a:	4631      	mov	r1, r6
 800538c:	f7fb fb0c 	bl	80009a8 <__aeabi_dcmpeq>
 8005390:	b918      	cbnz	r0, 800539a <__cvt+0x7e>
 8005392:	f1c5 0501 	rsb	r5, r5, #1
 8005396:	f8ca 5000 	str.w	r5, [sl]
 800539a:	f8da 3000 	ldr.w	r3, [sl]
 800539e:	4499      	add	r9, r3
 80053a0:	2200      	movs	r2, #0
 80053a2:	2300      	movs	r3, #0
 80053a4:	4620      	mov	r0, r4
 80053a6:	4631      	mov	r1, r6
 80053a8:	f7fb fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80053ac:	b938      	cbnz	r0, 80053be <__cvt+0xa2>
 80053ae:	2230      	movs	r2, #48	; 0x30
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	454b      	cmp	r3, r9
 80053b4:	d205      	bcs.n	80053c2 <__cvt+0xa6>
 80053b6:	1c59      	adds	r1, r3, #1
 80053b8:	9107      	str	r1, [sp, #28]
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e7f8      	b.n	80053b0 <__cvt+0x94>
 80053be:	f8cd 901c 	str.w	r9, [sp, #28]
 80053c2:	4640      	mov	r0, r8
 80053c4:	9b07      	ldr	r3, [sp, #28]
 80053c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053c8:	eba3 0308 	sub.w	r3, r3, r8
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	b008      	add	sp, #32
 80053d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080053d4 <__exponent>:
 80053d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d6:	2900      	cmp	r1, #0
 80053d8:	bfb4      	ite	lt
 80053da:	232d      	movlt	r3, #45	; 0x2d
 80053dc:	232b      	movge	r3, #43	; 0x2b
 80053de:	4604      	mov	r4, r0
 80053e0:	bfb8      	it	lt
 80053e2:	4249      	neglt	r1, r1
 80053e4:	2909      	cmp	r1, #9
 80053e6:	f804 2b02 	strb.w	r2, [r4], #2
 80053ea:	7043      	strb	r3, [r0, #1]
 80053ec:	dd21      	ble.n	8005432 <__exponent+0x5e>
 80053ee:	f10d 0307 	add.w	r3, sp, #7
 80053f2:	461f      	mov	r7, r3
 80053f4:	260a      	movs	r6, #10
 80053f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80053fa:	fb06 1115 	mls	r1, r6, r5, r1
 80053fe:	2d09      	cmp	r5, #9
 8005400:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005404:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005408:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800540c:	4629      	mov	r1, r5
 800540e:	dc09      	bgt.n	8005424 <__exponent+0x50>
 8005410:	3130      	adds	r1, #48	; 0x30
 8005412:	3b02      	subs	r3, #2
 8005414:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005418:	42bb      	cmp	r3, r7
 800541a:	4622      	mov	r2, r4
 800541c:	d304      	bcc.n	8005428 <__exponent+0x54>
 800541e:	1a10      	subs	r0, r2, r0
 8005420:	b003      	add	sp, #12
 8005422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005424:	4613      	mov	r3, r2
 8005426:	e7e6      	b.n	80053f6 <__exponent+0x22>
 8005428:	f813 2b01 	ldrb.w	r2, [r3], #1
 800542c:	f804 2b01 	strb.w	r2, [r4], #1
 8005430:	e7f2      	b.n	8005418 <__exponent+0x44>
 8005432:	2330      	movs	r3, #48	; 0x30
 8005434:	4419      	add	r1, r3
 8005436:	7083      	strb	r3, [r0, #2]
 8005438:	1d02      	adds	r2, r0, #4
 800543a:	70c1      	strb	r1, [r0, #3]
 800543c:	e7ef      	b.n	800541e <__exponent+0x4a>
	...

08005440 <_printf_float>:
 8005440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005444:	b091      	sub	sp, #68	; 0x44
 8005446:	460c      	mov	r4, r1
 8005448:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800544a:	4693      	mov	fp, r2
 800544c:	461e      	mov	r6, r3
 800544e:	4605      	mov	r5, r0
 8005450:	f001 fa16 	bl	8006880 <_localeconv_r>
 8005454:	6803      	ldr	r3, [r0, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	f7fa fe79 	bl	8000150 <strlen>
 800545e:	2300      	movs	r3, #0
 8005460:	930e      	str	r3, [sp, #56]	; 0x38
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	900a      	str	r0, [sp, #40]	; 0x28
 8005466:	3307      	adds	r3, #7
 8005468:	f023 0307 	bic.w	r3, r3, #7
 800546c:	f103 0208 	add.w	r2, r3, #8
 8005470:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005474:	f8d4 a000 	ldr.w	sl, [r4]
 8005478:	603a      	str	r2, [r7, #0]
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005482:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005486:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800548a:	930b      	str	r3, [sp, #44]	; 0x2c
 800548c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005490:	4ba6      	ldr	r3, [pc, #664]	; (800572c <_printf_float+0x2ec>)
 8005492:	4638      	mov	r0, r7
 8005494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005496:	f7fb fab9 	bl	8000a0c <__aeabi_dcmpun>
 800549a:	bb68      	cbnz	r0, 80054f8 <_printf_float+0xb8>
 800549c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a0:	4ba2      	ldr	r3, [pc, #648]	; (800572c <_printf_float+0x2ec>)
 80054a2:	4638      	mov	r0, r7
 80054a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054a6:	f7fb fa93 	bl	80009d0 <__aeabi_dcmple>
 80054aa:	bb28      	cbnz	r0, 80054f8 <_printf_float+0xb8>
 80054ac:	2200      	movs	r2, #0
 80054ae:	2300      	movs	r3, #0
 80054b0:	4638      	mov	r0, r7
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb fa82 	bl	80009bc <__aeabi_dcmplt>
 80054b8:	b110      	cbz	r0, 80054c0 <_printf_float+0x80>
 80054ba:	232d      	movs	r3, #45	; 0x2d
 80054bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054c0:	4f9b      	ldr	r7, [pc, #620]	; (8005730 <_printf_float+0x2f0>)
 80054c2:	4b9c      	ldr	r3, [pc, #624]	; (8005734 <_printf_float+0x2f4>)
 80054c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054c8:	bf98      	it	ls
 80054ca:	461f      	movls	r7, r3
 80054cc:	2303      	movs	r3, #3
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	f02a 0304 	bic.w	r3, sl, #4
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	9600      	str	r6, [sp, #0]
 80054dc:	465b      	mov	r3, fp
 80054de:	aa0f      	add	r2, sp, #60	; 0x3c
 80054e0:	4621      	mov	r1, r4
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 f9e2 	bl	80058ac <_printf_common>
 80054e8:	3001      	adds	r0, #1
 80054ea:	f040 8090 	bne.w	800560e <_printf_float+0x1ce>
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054f2:	b011      	add	sp, #68	; 0x44
 80054f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f8:	463a      	mov	r2, r7
 80054fa:	464b      	mov	r3, r9
 80054fc:	4638      	mov	r0, r7
 80054fe:	4649      	mov	r1, r9
 8005500:	f7fb fa84 	bl	8000a0c <__aeabi_dcmpun>
 8005504:	b110      	cbz	r0, 800550c <_printf_float+0xcc>
 8005506:	4f8c      	ldr	r7, [pc, #560]	; (8005738 <_printf_float+0x2f8>)
 8005508:	4b8c      	ldr	r3, [pc, #560]	; (800573c <_printf_float+0x2fc>)
 800550a:	e7db      	b.n	80054c4 <_printf_float+0x84>
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	a80d      	add	r0, sp, #52	; 0x34
 8005516:	a90e      	add	r1, sp, #56	; 0x38
 8005518:	d140      	bne.n	800559c <_printf_float+0x15c>
 800551a:	2306      	movs	r3, #6
 800551c:	6063      	str	r3, [r4, #4]
 800551e:	f04f 0c00 	mov.w	ip, #0
 8005522:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005526:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800552a:	6863      	ldr	r3, [r4, #4]
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	463a      	mov	r2, r7
 8005536:	464b      	mov	r3, r9
 8005538:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800553c:	4628      	mov	r0, r5
 800553e:	f7ff feed 	bl	800531c <__cvt>
 8005542:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005546:	2b47      	cmp	r3, #71	; 0x47
 8005548:	4607      	mov	r7, r0
 800554a:	d109      	bne.n	8005560 <_printf_float+0x120>
 800554c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800554e:	1cd8      	adds	r0, r3, #3
 8005550:	db02      	blt.n	8005558 <_printf_float+0x118>
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	4293      	cmp	r3, r2
 8005556:	dd47      	ble.n	80055e8 <_printf_float+0x1a8>
 8005558:	f1a8 0802 	sub.w	r8, r8, #2
 800555c:	fa5f f888 	uxtb.w	r8, r8
 8005560:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005566:	d824      	bhi.n	80055b2 <_printf_float+0x172>
 8005568:	3901      	subs	r1, #1
 800556a:	4642      	mov	r2, r8
 800556c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005570:	910d      	str	r1, [sp, #52]	; 0x34
 8005572:	f7ff ff2f 	bl	80053d4 <__exponent>
 8005576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005578:	4681      	mov	r9, r0
 800557a:	1813      	adds	r3, r2, r0
 800557c:	2a01      	cmp	r2, #1
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	dc02      	bgt.n	8005588 <_printf_float+0x148>
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	07d1      	lsls	r1, r2, #31
 8005586:	d501      	bpl.n	800558c <_printf_float+0x14c>
 8005588:	3301      	adds	r3, #1
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0a2      	beq.n	80054da <_printf_float+0x9a>
 8005594:	232d      	movs	r3, #45	; 0x2d
 8005596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559a:	e79e      	b.n	80054da <_printf_float+0x9a>
 800559c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80055a0:	f000 816e 	beq.w	8005880 <_printf_float+0x440>
 80055a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055a8:	d1b9      	bne.n	800551e <_printf_float+0xde>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1b7      	bne.n	800551e <_printf_float+0xde>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e7b4      	b.n	800551c <_printf_float+0xdc>
 80055b2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80055b6:	d119      	bne.n	80055ec <_printf_float+0x1ac>
 80055b8:	2900      	cmp	r1, #0
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	dd0c      	ble.n	80055d8 <_printf_float+0x198>
 80055be:	6121      	str	r1, [r4, #16]
 80055c0:	b913      	cbnz	r3, 80055c8 <_printf_float+0x188>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	07d2      	lsls	r2, r2, #31
 80055c6:	d502      	bpl.n	80055ce <_printf_float+0x18e>
 80055c8:	3301      	adds	r3, #1
 80055ca:	440b      	add	r3, r1
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055d0:	f04f 0900 	mov.w	r9, #0
 80055d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80055d6:	e7d9      	b.n	800558c <_printf_float+0x14c>
 80055d8:	b913      	cbnz	r3, 80055e0 <_printf_float+0x1a0>
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	07d0      	lsls	r0, r2, #31
 80055de:	d501      	bpl.n	80055e4 <_printf_float+0x1a4>
 80055e0:	3302      	adds	r3, #2
 80055e2:	e7f3      	b.n	80055cc <_printf_float+0x18c>
 80055e4:	2301      	movs	r3, #1
 80055e6:	e7f1      	b.n	80055cc <_printf_float+0x18c>
 80055e8:	f04f 0867 	mov.w	r8, #103	; 0x67
 80055ec:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80055f0:	4293      	cmp	r3, r2
 80055f2:	db05      	blt.n	8005600 <_printf_float+0x1c0>
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	07d1      	lsls	r1, r2, #31
 80055fa:	d5e8      	bpl.n	80055ce <_printf_float+0x18e>
 80055fc:	3301      	adds	r3, #1
 80055fe:	e7e5      	b.n	80055cc <_printf_float+0x18c>
 8005600:	2b00      	cmp	r3, #0
 8005602:	bfcc      	ite	gt
 8005604:	2301      	movgt	r3, #1
 8005606:	f1c3 0302 	rsble	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	e7de      	b.n	80055cc <_printf_float+0x18c>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	055a      	lsls	r2, r3, #21
 8005612:	d407      	bmi.n	8005624 <_printf_float+0x1e4>
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	463a      	mov	r2, r7
 8005618:	4659      	mov	r1, fp
 800561a:	4628      	mov	r0, r5
 800561c:	47b0      	blx	r6
 800561e:	3001      	adds	r0, #1
 8005620:	d129      	bne.n	8005676 <_printf_float+0x236>
 8005622:	e764      	b.n	80054ee <_printf_float+0xae>
 8005624:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005628:	f240 80d7 	bls.w	80057da <_printf_float+0x39a>
 800562c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	f7fb f9b8 	bl	80009a8 <__aeabi_dcmpeq>
 8005638:	b388      	cbz	r0, 800569e <_printf_float+0x25e>
 800563a:	2301      	movs	r3, #1
 800563c:	4a40      	ldr	r2, [pc, #256]	; (8005740 <_printf_float+0x300>)
 800563e:	4659      	mov	r1, fp
 8005640:	4628      	mov	r0, r5
 8005642:	47b0      	blx	r6
 8005644:	3001      	adds	r0, #1
 8005646:	f43f af52 	beq.w	80054ee <_printf_float+0xae>
 800564a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800564e:	429a      	cmp	r2, r3
 8005650:	db02      	blt.n	8005658 <_printf_float+0x218>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	07d8      	lsls	r0, r3, #31
 8005656:	d50e      	bpl.n	8005676 <_printf_float+0x236>
 8005658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800565c:	4659      	mov	r1, fp
 800565e:	4628      	mov	r0, r5
 8005660:	47b0      	blx	r6
 8005662:	3001      	adds	r0, #1
 8005664:	f43f af43 	beq.w	80054ee <_printf_float+0xae>
 8005668:	2700      	movs	r7, #0
 800566a:	f104 081a 	add.w	r8, r4, #26
 800566e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005670:	3b01      	subs	r3, #1
 8005672:	42bb      	cmp	r3, r7
 8005674:	dc09      	bgt.n	800568a <_printf_float+0x24a>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	079f      	lsls	r7, r3, #30
 800567a:	f100 80fd 	bmi.w	8005878 <_printf_float+0x438>
 800567e:	68e0      	ldr	r0, [r4, #12]
 8005680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005682:	4298      	cmp	r0, r3
 8005684:	bfb8      	it	lt
 8005686:	4618      	movlt	r0, r3
 8005688:	e733      	b.n	80054f2 <_printf_float+0xb2>
 800568a:	2301      	movs	r3, #1
 800568c:	4642      	mov	r2, r8
 800568e:	4659      	mov	r1, fp
 8005690:	4628      	mov	r0, r5
 8005692:	47b0      	blx	r6
 8005694:	3001      	adds	r0, #1
 8005696:	f43f af2a 	beq.w	80054ee <_printf_float+0xae>
 800569a:	3701      	adds	r7, #1
 800569c:	e7e7      	b.n	800566e <_printf_float+0x22e>
 800569e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dc2b      	bgt.n	80056fc <_printf_float+0x2bc>
 80056a4:	2301      	movs	r3, #1
 80056a6:	4a26      	ldr	r2, [pc, #152]	; (8005740 <_printf_float+0x300>)
 80056a8:	4659      	mov	r1, fp
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b0      	blx	r6
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af1d 	beq.w	80054ee <_printf_float+0xae>
 80056b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056b6:	b923      	cbnz	r3, 80056c2 <_printf_float+0x282>
 80056b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ba:	b913      	cbnz	r3, 80056c2 <_printf_float+0x282>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07d9      	lsls	r1, r3, #31
 80056c0:	d5d9      	bpl.n	8005676 <_printf_float+0x236>
 80056c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c6:	4659      	mov	r1, fp
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	3001      	adds	r0, #1
 80056ce:	f43f af0e 	beq.w	80054ee <_printf_float+0xae>
 80056d2:	f04f 0800 	mov.w	r8, #0
 80056d6:	f104 091a 	add.w	r9, r4, #26
 80056da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056dc:	425b      	negs	r3, r3
 80056de:	4543      	cmp	r3, r8
 80056e0:	dc01      	bgt.n	80056e6 <_printf_float+0x2a6>
 80056e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e4:	e797      	b.n	8005616 <_printf_float+0x1d6>
 80056e6:	2301      	movs	r3, #1
 80056e8:	464a      	mov	r2, r9
 80056ea:	4659      	mov	r1, fp
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	3001      	adds	r0, #1
 80056f2:	f43f aefc 	beq.w	80054ee <_printf_float+0xae>
 80056f6:	f108 0801 	add.w	r8, r8, #1
 80056fa:	e7ee      	b.n	80056da <_printf_float+0x29a>
 80056fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005700:	429a      	cmp	r2, r3
 8005702:	bfa8      	it	ge
 8005704:	461a      	movge	r2, r3
 8005706:	2a00      	cmp	r2, #0
 8005708:	4690      	mov	r8, r2
 800570a:	dd07      	ble.n	800571c <_printf_float+0x2dc>
 800570c:	4613      	mov	r3, r2
 800570e:	4659      	mov	r1, fp
 8005710:	463a      	mov	r2, r7
 8005712:	4628      	mov	r0, r5
 8005714:	47b0      	blx	r6
 8005716:	3001      	adds	r0, #1
 8005718:	f43f aee9 	beq.w	80054ee <_printf_float+0xae>
 800571c:	f104 031a 	add.w	r3, r4, #26
 8005720:	f04f 0a00 	mov.w	sl, #0
 8005724:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005728:	930b      	str	r3, [sp, #44]	; 0x2c
 800572a:	e015      	b.n	8005758 <_printf_float+0x318>
 800572c:	7fefffff 	.word	0x7fefffff
 8005730:	080076a8 	.word	0x080076a8
 8005734:	080076a4 	.word	0x080076a4
 8005738:	080076b0 	.word	0x080076b0
 800573c:	080076ac 	.word	0x080076ac
 8005740:	080076b4 	.word	0x080076b4
 8005744:	2301      	movs	r3, #1
 8005746:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005748:	4659      	mov	r1, fp
 800574a:	4628      	mov	r0, r5
 800574c:	47b0      	blx	r6
 800574e:	3001      	adds	r0, #1
 8005750:	f43f aecd 	beq.w	80054ee <_printf_float+0xae>
 8005754:	f10a 0a01 	add.w	sl, sl, #1
 8005758:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800575c:	eba9 0308 	sub.w	r3, r9, r8
 8005760:	4553      	cmp	r3, sl
 8005762:	dcef      	bgt.n	8005744 <_printf_float+0x304>
 8005764:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005768:	429a      	cmp	r2, r3
 800576a:	444f      	add	r7, r9
 800576c:	db14      	blt.n	8005798 <_printf_float+0x358>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	07da      	lsls	r2, r3, #31
 8005772:	d411      	bmi.n	8005798 <_printf_float+0x358>
 8005774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005776:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005778:	eba3 0209 	sub.w	r2, r3, r9
 800577c:	eba3 0901 	sub.w	r9, r3, r1
 8005780:	4591      	cmp	r9, r2
 8005782:	bfa8      	it	ge
 8005784:	4691      	movge	r9, r2
 8005786:	f1b9 0f00 	cmp.w	r9, #0
 800578a:	dc0d      	bgt.n	80057a8 <_printf_float+0x368>
 800578c:	2700      	movs	r7, #0
 800578e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005792:	f104 081a 	add.w	r8, r4, #26
 8005796:	e018      	b.n	80057ca <_printf_float+0x38a>
 8005798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800579c:	4659      	mov	r1, fp
 800579e:	4628      	mov	r0, r5
 80057a0:	47b0      	blx	r6
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1e6      	bne.n	8005774 <_printf_float+0x334>
 80057a6:	e6a2      	b.n	80054ee <_printf_float+0xae>
 80057a8:	464b      	mov	r3, r9
 80057aa:	463a      	mov	r2, r7
 80057ac:	4659      	mov	r1, fp
 80057ae:	4628      	mov	r0, r5
 80057b0:	47b0      	blx	r6
 80057b2:	3001      	adds	r0, #1
 80057b4:	d1ea      	bne.n	800578c <_printf_float+0x34c>
 80057b6:	e69a      	b.n	80054ee <_printf_float+0xae>
 80057b8:	2301      	movs	r3, #1
 80057ba:	4642      	mov	r2, r8
 80057bc:	4659      	mov	r1, fp
 80057be:	4628      	mov	r0, r5
 80057c0:	47b0      	blx	r6
 80057c2:	3001      	adds	r0, #1
 80057c4:	f43f ae93 	beq.w	80054ee <_printf_float+0xae>
 80057c8:	3701      	adds	r7, #1
 80057ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	eba3 0309 	sub.w	r3, r3, r9
 80057d4:	42bb      	cmp	r3, r7
 80057d6:	dcef      	bgt.n	80057b8 <_printf_float+0x378>
 80057d8:	e74d      	b.n	8005676 <_printf_float+0x236>
 80057da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057dc:	2a01      	cmp	r2, #1
 80057de:	dc01      	bgt.n	80057e4 <_printf_float+0x3a4>
 80057e0:	07db      	lsls	r3, r3, #31
 80057e2:	d538      	bpl.n	8005856 <_printf_float+0x416>
 80057e4:	2301      	movs	r3, #1
 80057e6:	463a      	mov	r2, r7
 80057e8:	4659      	mov	r1, fp
 80057ea:	4628      	mov	r0, r5
 80057ec:	47b0      	blx	r6
 80057ee:	3001      	adds	r0, #1
 80057f0:	f43f ae7d 	beq.w	80054ee <_printf_float+0xae>
 80057f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057f8:	4659      	mov	r1, fp
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b0      	blx	r6
 80057fe:	3001      	adds	r0, #1
 8005800:	f107 0701 	add.w	r7, r7, #1
 8005804:	f43f ae73 	beq.w	80054ee <_printf_float+0xae>
 8005808:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800580c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800580e:	2200      	movs	r2, #0
 8005810:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005814:	2300      	movs	r3, #0
 8005816:	f7fb f8c7 	bl	80009a8 <__aeabi_dcmpeq>
 800581a:	b9c0      	cbnz	r0, 800584e <_printf_float+0x40e>
 800581c:	4643      	mov	r3, r8
 800581e:	463a      	mov	r2, r7
 8005820:	4659      	mov	r1, fp
 8005822:	4628      	mov	r0, r5
 8005824:	47b0      	blx	r6
 8005826:	3001      	adds	r0, #1
 8005828:	d10d      	bne.n	8005846 <_printf_float+0x406>
 800582a:	e660      	b.n	80054ee <_printf_float+0xae>
 800582c:	2301      	movs	r3, #1
 800582e:	4642      	mov	r2, r8
 8005830:	4659      	mov	r1, fp
 8005832:	4628      	mov	r0, r5
 8005834:	47b0      	blx	r6
 8005836:	3001      	adds	r0, #1
 8005838:	f43f ae59 	beq.w	80054ee <_printf_float+0xae>
 800583c:	3701      	adds	r7, #1
 800583e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005840:	3b01      	subs	r3, #1
 8005842:	42bb      	cmp	r3, r7
 8005844:	dcf2      	bgt.n	800582c <_printf_float+0x3ec>
 8005846:	464b      	mov	r3, r9
 8005848:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800584c:	e6e4      	b.n	8005618 <_printf_float+0x1d8>
 800584e:	2700      	movs	r7, #0
 8005850:	f104 081a 	add.w	r8, r4, #26
 8005854:	e7f3      	b.n	800583e <_printf_float+0x3fe>
 8005856:	2301      	movs	r3, #1
 8005858:	e7e1      	b.n	800581e <_printf_float+0x3de>
 800585a:	2301      	movs	r3, #1
 800585c:	4642      	mov	r2, r8
 800585e:	4659      	mov	r1, fp
 8005860:	4628      	mov	r0, r5
 8005862:	47b0      	blx	r6
 8005864:	3001      	adds	r0, #1
 8005866:	f43f ae42 	beq.w	80054ee <_printf_float+0xae>
 800586a:	3701      	adds	r7, #1
 800586c:	68e3      	ldr	r3, [r4, #12]
 800586e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	42bb      	cmp	r3, r7
 8005874:	dcf1      	bgt.n	800585a <_printf_float+0x41a>
 8005876:	e702      	b.n	800567e <_printf_float+0x23e>
 8005878:	2700      	movs	r7, #0
 800587a:	f104 0819 	add.w	r8, r4, #25
 800587e:	e7f5      	b.n	800586c <_printf_float+0x42c>
 8005880:	2b00      	cmp	r3, #0
 8005882:	f43f ae94 	beq.w	80055ae <_printf_float+0x16e>
 8005886:	f04f 0c00 	mov.w	ip, #0
 800588a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800588e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005898:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	463a      	mov	r2, r7
 80058a0:	464b      	mov	r3, r9
 80058a2:	4628      	mov	r0, r5
 80058a4:	f7ff fd3a 	bl	800531c <__cvt>
 80058a8:	4607      	mov	r7, r0
 80058aa:	e64f      	b.n	800554c <_printf_float+0x10c>

080058ac <_printf_common>:
 80058ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b0:	4691      	mov	r9, r2
 80058b2:	461f      	mov	r7, r3
 80058b4:	688a      	ldr	r2, [r1, #8]
 80058b6:	690b      	ldr	r3, [r1, #16]
 80058b8:	4606      	mov	r6, r0
 80058ba:	4293      	cmp	r3, r2
 80058bc:	bfb8      	it	lt
 80058be:	4613      	movlt	r3, r2
 80058c0:	f8c9 3000 	str.w	r3, [r9]
 80058c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058c8:	460c      	mov	r4, r1
 80058ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058ce:	b112      	cbz	r2, 80058d6 <_printf_common+0x2a>
 80058d0:	3301      	adds	r3, #1
 80058d2:	f8c9 3000 	str.w	r3, [r9]
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	0699      	lsls	r1, r3, #26
 80058da:	bf42      	ittt	mi
 80058dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80058e0:	3302      	addmi	r3, #2
 80058e2:	f8c9 3000 	strmi.w	r3, [r9]
 80058e6:	6825      	ldr	r5, [r4, #0]
 80058e8:	f015 0506 	ands.w	r5, r5, #6
 80058ec:	d107      	bne.n	80058fe <_printf_common+0x52>
 80058ee:	f104 0a19 	add.w	sl, r4, #25
 80058f2:	68e3      	ldr	r3, [r4, #12]
 80058f4:	f8d9 2000 	ldr.w	r2, [r9]
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	42ab      	cmp	r3, r5
 80058fc:	dc29      	bgt.n	8005952 <_printf_common+0xa6>
 80058fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005902:	6822      	ldr	r2, [r4, #0]
 8005904:	3300      	adds	r3, #0
 8005906:	bf18      	it	ne
 8005908:	2301      	movne	r3, #1
 800590a:	0692      	lsls	r2, r2, #26
 800590c:	d42e      	bmi.n	800596c <_printf_common+0xc0>
 800590e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005912:	4639      	mov	r1, r7
 8005914:	4630      	mov	r0, r6
 8005916:	47c0      	blx	r8
 8005918:	3001      	adds	r0, #1
 800591a:	d021      	beq.n	8005960 <_printf_common+0xb4>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	68e5      	ldr	r5, [r4, #12]
 8005920:	f003 0306 	and.w	r3, r3, #6
 8005924:	2b04      	cmp	r3, #4
 8005926:	bf18      	it	ne
 8005928:	2500      	movne	r5, #0
 800592a:	f8d9 2000 	ldr.w	r2, [r9]
 800592e:	f04f 0900 	mov.w	r9, #0
 8005932:	bf08      	it	eq
 8005934:	1aad      	subeq	r5, r5, r2
 8005936:	68a3      	ldr	r3, [r4, #8]
 8005938:	6922      	ldr	r2, [r4, #16]
 800593a:	bf08      	it	eq
 800593c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005940:	4293      	cmp	r3, r2
 8005942:	bfc4      	itt	gt
 8005944:	1a9b      	subgt	r3, r3, r2
 8005946:	18ed      	addgt	r5, r5, r3
 8005948:	341a      	adds	r4, #26
 800594a:	454d      	cmp	r5, r9
 800594c:	d11a      	bne.n	8005984 <_printf_common+0xd8>
 800594e:	2000      	movs	r0, #0
 8005950:	e008      	b.n	8005964 <_printf_common+0xb8>
 8005952:	2301      	movs	r3, #1
 8005954:	4652      	mov	r2, sl
 8005956:	4639      	mov	r1, r7
 8005958:	4630      	mov	r0, r6
 800595a:	47c0      	blx	r8
 800595c:	3001      	adds	r0, #1
 800595e:	d103      	bne.n	8005968 <_printf_common+0xbc>
 8005960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005968:	3501      	adds	r5, #1
 800596a:	e7c2      	b.n	80058f2 <_printf_common+0x46>
 800596c:	2030      	movs	r0, #48	; 0x30
 800596e:	18e1      	adds	r1, r4, r3
 8005970:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800597a:	4422      	add	r2, r4
 800597c:	3302      	adds	r3, #2
 800597e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005982:	e7c4      	b.n	800590e <_printf_common+0x62>
 8005984:	2301      	movs	r3, #1
 8005986:	4622      	mov	r2, r4
 8005988:	4639      	mov	r1, r7
 800598a:	4630      	mov	r0, r6
 800598c:	47c0      	blx	r8
 800598e:	3001      	adds	r0, #1
 8005990:	d0e6      	beq.n	8005960 <_printf_common+0xb4>
 8005992:	f109 0901 	add.w	r9, r9, #1
 8005996:	e7d8      	b.n	800594a <_printf_common+0x9e>

08005998 <_printf_i>:
 8005998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800599c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80059a0:	460c      	mov	r4, r1
 80059a2:	7e09      	ldrb	r1, [r1, #24]
 80059a4:	b085      	sub	sp, #20
 80059a6:	296e      	cmp	r1, #110	; 0x6e
 80059a8:	4617      	mov	r7, r2
 80059aa:	4606      	mov	r6, r0
 80059ac:	4698      	mov	r8, r3
 80059ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059b0:	f000 80b3 	beq.w	8005b1a <_printf_i+0x182>
 80059b4:	d822      	bhi.n	80059fc <_printf_i+0x64>
 80059b6:	2963      	cmp	r1, #99	; 0x63
 80059b8:	d036      	beq.n	8005a28 <_printf_i+0x90>
 80059ba:	d80a      	bhi.n	80059d2 <_printf_i+0x3a>
 80059bc:	2900      	cmp	r1, #0
 80059be:	f000 80b9 	beq.w	8005b34 <_printf_i+0x19c>
 80059c2:	2958      	cmp	r1, #88	; 0x58
 80059c4:	f000 8083 	beq.w	8005ace <_printf_i+0x136>
 80059c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80059d0:	e032      	b.n	8005a38 <_printf_i+0xa0>
 80059d2:	2964      	cmp	r1, #100	; 0x64
 80059d4:	d001      	beq.n	80059da <_printf_i+0x42>
 80059d6:	2969      	cmp	r1, #105	; 0x69
 80059d8:	d1f6      	bne.n	80059c8 <_printf_i+0x30>
 80059da:	6820      	ldr	r0, [r4, #0]
 80059dc:	6813      	ldr	r3, [r2, #0]
 80059de:	0605      	lsls	r5, r0, #24
 80059e0:	f103 0104 	add.w	r1, r3, #4
 80059e4:	d52a      	bpl.n	8005a3c <_printf_i+0xa4>
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6011      	str	r1, [r2, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da03      	bge.n	80059f6 <_printf_i+0x5e>
 80059ee:	222d      	movs	r2, #45	; 0x2d
 80059f0:	425b      	negs	r3, r3
 80059f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80059f6:	486f      	ldr	r0, [pc, #444]	; (8005bb4 <_printf_i+0x21c>)
 80059f8:	220a      	movs	r2, #10
 80059fa:	e039      	b.n	8005a70 <_printf_i+0xd8>
 80059fc:	2973      	cmp	r1, #115	; 0x73
 80059fe:	f000 809d 	beq.w	8005b3c <_printf_i+0x1a4>
 8005a02:	d808      	bhi.n	8005a16 <_printf_i+0x7e>
 8005a04:	296f      	cmp	r1, #111	; 0x6f
 8005a06:	d020      	beq.n	8005a4a <_printf_i+0xb2>
 8005a08:	2970      	cmp	r1, #112	; 0x70
 8005a0a:	d1dd      	bne.n	80059c8 <_printf_i+0x30>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	f043 0320 	orr.w	r3, r3, #32
 8005a12:	6023      	str	r3, [r4, #0]
 8005a14:	e003      	b.n	8005a1e <_printf_i+0x86>
 8005a16:	2975      	cmp	r1, #117	; 0x75
 8005a18:	d017      	beq.n	8005a4a <_printf_i+0xb2>
 8005a1a:	2978      	cmp	r1, #120	; 0x78
 8005a1c:	d1d4      	bne.n	80059c8 <_printf_i+0x30>
 8005a1e:	2378      	movs	r3, #120	; 0x78
 8005a20:	4865      	ldr	r0, [pc, #404]	; (8005bb8 <_printf_i+0x220>)
 8005a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a26:	e055      	b.n	8005ad4 <_printf_i+0x13c>
 8005a28:	6813      	ldr	r3, [r2, #0]
 8005a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a2e:	1d19      	adds	r1, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6011      	str	r1, [r2, #0]
 8005a34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e08c      	b.n	8005b56 <_printf_i+0x1be>
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a42:	6011      	str	r1, [r2, #0]
 8005a44:	bf18      	it	ne
 8005a46:	b21b      	sxthne	r3, r3
 8005a48:	e7cf      	b.n	80059ea <_printf_i+0x52>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	6825      	ldr	r5, [r4, #0]
 8005a4e:	1d18      	adds	r0, r3, #4
 8005a50:	6010      	str	r0, [r2, #0]
 8005a52:	0628      	lsls	r0, r5, #24
 8005a54:	d501      	bpl.n	8005a5a <_printf_i+0xc2>
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	e002      	b.n	8005a60 <_printf_i+0xc8>
 8005a5a:	0668      	lsls	r0, r5, #25
 8005a5c:	d5fb      	bpl.n	8005a56 <_printf_i+0xbe>
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	296f      	cmp	r1, #111	; 0x6f
 8005a62:	bf14      	ite	ne
 8005a64:	220a      	movne	r2, #10
 8005a66:	2208      	moveq	r2, #8
 8005a68:	4852      	ldr	r0, [pc, #328]	; (8005bb4 <_printf_i+0x21c>)
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a70:	6865      	ldr	r5, [r4, #4]
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	60a5      	str	r5, [r4, #8]
 8005a76:	f2c0 8095 	blt.w	8005ba4 <_printf_i+0x20c>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	f021 0104 	bic.w	r1, r1, #4
 8005a80:	6021      	str	r1, [r4, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d13d      	bne.n	8005b02 <_printf_i+0x16a>
 8005a86:	2d00      	cmp	r5, #0
 8005a88:	f040 808e 	bne.w	8005ba8 <_printf_i+0x210>
 8005a8c:	4665      	mov	r5, ip
 8005a8e:	2a08      	cmp	r2, #8
 8005a90:	d10b      	bne.n	8005aaa <_printf_i+0x112>
 8005a92:	6823      	ldr	r3, [r4, #0]
 8005a94:	07db      	lsls	r3, r3, #31
 8005a96:	d508      	bpl.n	8005aaa <_printf_i+0x112>
 8005a98:	6923      	ldr	r3, [r4, #16]
 8005a9a:	6862      	ldr	r2, [r4, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	bfde      	ittt	le
 8005aa0:	2330      	movle	r3, #48	; 0x30
 8005aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005aa6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005aaa:	ebac 0305 	sub.w	r3, ip, r5
 8005aae:	6123      	str	r3, [r4, #16]
 8005ab0:	f8cd 8000 	str.w	r8, [sp]
 8005ab4:	463b      	mov	r3, r7
 8005ab6:	aa03      	add	r2, sp, #12
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff fef6 	bl	80058ac <_printf_common>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d14d      	bne.n	8005b60 <_printf_i+0x1c8>
 8005ac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ac8:	b005      	add	sp, #20
 8005aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ace:	4839      	ldr	r0, [pc, #228]	; (8005bb4 <_printf_i+0x21c>)
 8005ad0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005ad4:	6813      	ldr	r3, [r2, #0]
 8005ad6:	6821      	ldr	r1, [r4, #0]
 8005ad8:	1d1d      	adds	r5, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6015      	str	r5, [r2, #0]
 8005ade:	060a      	lsls	r2, r1, #24
 8005ae0:	d50b      	bpl.n	8005afa <_printf_i+0x162>
 8005ae2:	07ca      	lsls	r2, r1, #31
 8005ae4:	bf44      	itt	mi
 8005ae6:	f041 0120 	orrmi.w	r1, r1, #32
 8005aea:	6021      	strmi	r1, [r4, #0]
 8005aec:	b91b      	cbnz	r3, 8005af6 <_printf_i+0x15e>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	f022 0220 	bic.w	r2, r2, #32
 8005af4:	6022      	str	r2, [r4, #0]
 8005af6:	2210      	movs	r2, #16
 8005af8:	e7b7      	b.n	8005a6a <_printf_i+0xd2>
 8005afa:	064d      	lsls	r5, r1, #25
 8005afc:	bf48      	it	mi
 8005afe:	b29b      	uxthmi	r3, r3
 8005b00:	e7ef      	b.n	8005ae2 <_printf_i+0x14a>
 8005b02:	4665      	mov	r5, ip
 8005b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b08:	fb02 3311 	mls	r3, r2, r1, r3
 8005b0c:	5cc3      	ldrb	r3, [r0, r3]
 8005b0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005b12:	460b      	mov	r3, r1
 8005b14:	2900      	cmp	r1, #0
 8005b16:	d1f5      	bne.n	8005b04 <_printf_i+0x16c>
 8005b18:	e7b9      	b.n	8005a8e <_printf_i+0xf6>
 8005b1a:	6813      	ldr	r3, [r2, #0]
 8005b1c:	6825      	ldr	r5, [r4, #0]
 8005b1e:	1d18      	adds	r0, r3, #4
 8005b20:	6961      	ldr	r1, [r4, #20]
 8005b22:	6010      	str	r0, [r2, #0]
 8005b24:	0628      	lsls	r0, r5, #24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	d501      	bpl.n	8005b2e <_printf_i+0x196>
 8005b2a:	6019      	str	r1, [r3, #0]
 8005b2c:	e002      	b.n	8005b34 <_printf_i+0x19c>
 8005b2e:	066a      	lsls	r2, r5, #25
 8005b30:	d5fb      	bpl.n	8005b2a <_printf_i+0x192>
 8005b32:	8019      	strh	r1, [r3, #0]
 8005b34:	2300      	movs	r3, #0
 8005b36:	4665      	mov	r5, ip
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	e7b9      	b.n	8005ab0 <_printf_i+0x118>
 8005b3c:	6813      	ldr	r3, [r2, #0]
 8005b3e:	1d19      	adds	r1, r3, #4
 8005b40:	6011      	str	r1, [r2, #0]
 8005b42:	681d      	ldr	r5, [r3, #0]
 8005b44:	6862      	ldr	r2, [r4, #4]
 8005b46:	2100      	movs	r1, #0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	f000 feaf 	bl	80068ac <memchr>
 8005b4e:	b108      	cbz	r0, 8005b54 <_printf_i+0x1bc>
 8005b50:	1b40      	subs	r0, r0, r5
 8005b52:	6060      	str	r0, [r4, #4]
 8005b54:	6863      	ldr	r3, [r4, #4]
 8005b56:	6123      	str	r3, [r4, #16]
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b5e:	e7a7      	b.n	8005ab0 <_printf_i+0x118>
 8005b60:	6923      	ldr	r3, [r4, #16]
 8005b62:	462a      	mov	r2, r5
 8005b64:	4639      	mov	r1, r7
 8005b66:	4630      	mov	r0, r6
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d0aa      	beq.n	8005ac4 <_printf_i+0x12c>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	079b      	lsls	r3, r3, #30
 8005b72:	d413      	bmi.n	8005b9c <_printf_i+0x204>
 8005b74:	68e0      	ldr	r0, [r4, #12]
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	4298      	cmp	r0, r3
 8005b7a:	bfb8      	it	lt
 8005b7c:	4618      	movlt	r0, r3
 8005b7e:	e7a3      	b.n	8005ac8 <_printf_i+0x130>
 8005b80:	2301      	movs	r3, #1
 8005b82:	464a      	mov	r2, r9
 8005b84:	4639      	mov	r1, r7
 8005b86:	4630      	mov	r0, r6
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d09a      	beq.n	8005ac4 <_printf_i+0x12c>
 8005b8e:	3501      	adds	r5, #1
 8005b90:	68e3      	ldr	r3, [r4, #12]
 8005b92:	9a03      	ldr	r2, [sp, #12]
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	42ab      	cmp	r3, r5
 8005b98:	dcf2      	bgt.n	8005b80 <_printf_i+0x1e8>
 8005b9a:	e7eb      	b.n	8005b74 <_printf_i+0x1dc>
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	f104 0919 	add.w	r9, r4, #25
 8005ba2:	e7f5      	b.n	8005b90 <_printf_i+0x1f8>
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1ac      	bne.n	8005b02 <_printf_i+0x16a>
 8005ba8:	7803      	ldrb	r3, [r0, #0]
 8005baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005bb2:	e76c      	b.n	8005a8e <_printf_i+0xf6>
 8005bb4:	080076b6 	.word	0x080076b6
 8005bb8:	080076c7 	.word	0x080076c7

08005bbc <siprintf>:
 8005bbc:	b40e      	push	{r1, r2, r3}
 8005bbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bc2:	b500      	push	{lr}
 8005bc4:	b09c      	sub	sp, #112	; 0x70
 8005bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8005bc8:	9002      	str	r0, [sp, #8]
 8005bca:	9006      	str	r0, [sp, #24]
 8005bcc:	9107      	str	r1, [sp, #28]
 8005bce:	9104      	str	r1, [sp, #16]
 8005bd0:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <siprintf+0x38>)
 8005bd2:	4909      	ldr	r1, [pc, #36]	; (8005bf8 <siprintf+0x3c>)
 8005bd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd8:	9105      	str	r1, [sp, #20]
 8005bda:	6800      	ldr	r0, [r0, #0]
 8005bdc:	a902      	add	r1, sp, #8
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	f001 fa68 	bl	80070b4 <_svfiprintf_r>
 8005be4:	2200      	movs	r2, #0
 8005be6:	9b02      	ldr	r3, [sp, #8]
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	b01c      	add	sp, #112	; 0x70
 8005bec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bf0:	b003      	add	sp, #12
 8005bf2:	4770      	bx	lr
 8005bf4:	20000018 	.word	0x20000018
 8005bf8:	ffff0208 	.word	0xffff0208

08005bfc <quorem>:
 8005bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c00:	6903      	ldr	r3, [r0, #16]
 8005c02:	690c      	ldr	r4, [r1, #16]
 8005c04:	4680      	mov	r8, r0
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	f2c0 8084 	blt.w	8005d14 <quorem+0x118>
 8005c0c:	3c01      	subs	r4, #1
 8005c0e:	f101 0714 	add.w	r7, r1, #20
 8005c12:	f100 0614 	add.w	r6, r0, #20
 8005c16:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005c1a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005c1e:	3501      	adds	r5, #1
 8005c20:	fbb0 f5f5 	udiv	r5, r0, r5
 8005c24:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005c28:	eb06 030c 	add.w	r3, r6, ip
 8005c2c:	eb07 090c 	add.w	r9, r7, ip
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	b39d      	cbz	r5, 8005c9c <quorem+0xa0>
 8005c34:	f04f 0a00 	mov.w	sl, #0
 8005c38:	4638      	mov	r0, r7
 8005c3a:	46b6      	mov	lr, r6
 8005c3c:	46d3      	mov	fp, sl
 8005c3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c42:	b293      	uxth	r3, r2
 8005c44:	fb05 a303 	mla	r3, r5, r3, sl
 8005c48:	0c12      	lsrs	r2, r2, #16
 8005c4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c4e:	fb05 a202 	mla	r2, r5, r2, sl
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	ebab 0303 	sub.w	r3, fp, r3
 8005c58:	f8de b000 	ldr.w	fp, [lr]
 8005c5c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005c60:	fa1f fb8b 	uxth.w	fp, fp
 8005c64:	445b      	add	r3, fp
 8005c66:	fa1f fb82 	uxth.w	fp, r2
 8005c6a:	f8de 2000 	ldr.w	r2, [lr]
 8005c6e:	4581      	cmp	r9, r0
 8005c70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005c74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c7e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005c82:	f84e 3b04 	str.w	r3, [lr], #4
 8005c86:	d2da      	bcs.n	8005c3e <quorem+0x42>
 8005c88:	f856 300c 	ldr.w	r3, [r6, ip]
 8005c8c:	b933      	cbnz	r3, 8005c9c <quorem+0xa0>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	429e      	cmp	r6, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	d331      	bcc.n	8005cfc <quorem+0x100>
 8005c98:	f8c8 4010 	str.w	r4, [r8, #16]
 8005c9c:	4640      	mov	r0, r8
 8005c9e:	f001 f833 	bl	8006d08 <__mcmp>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	db26      	blt.n	8005cf4 <quorem+0xf8>
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	f04f 0c00 	mov.w	ip, #0
 8005cac:	3501      	adds	r5, #1
 8005cae:	f857 1b04 	ldr.w	r1, [r7], #4
 8005cb2:	f8d0 e000 	ldr.w	lr, [r0]
 8005cb6:	b28b      	uxth	r3, r1
 8005cb8:	ebac 0303 	sub.w	r3, ip, r3
 8005cbc:	fa1f f28e 	uxth.w	r2, lr
 8005cc0:	4413      	add	r3, r2
 8005cc2:	0c0a      	lsrs	r2, r1, #16
 8005cc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cd2:	45b9      	cmp	r9, r7
 8005cd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cd8:	f840 3b04 	str.w	r3, [r0], #4
 8005cdc:	d2e7      	bcs.n	8005cae <quorem+0xb2>
 8005cde:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005ce2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005ce6:	b92a      	cbnz	r2, 8005cf4 <quorem+0xf8>
 8005ce8:	3b04      	subs	r3, #4
 8005cea:	429e      	cmp	r6, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	d30b      	bcc.n	8005d08 <quorem+0x10c>
 8005cf0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	b003      	add	sp, #12
 8005cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	3b04      	subs	r3, #4
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	d1c9      	bne.n	8005c98 <quorem+0x9c>
 8005d04:	3c01      	subs	r4, #1
 8005d06:	e7c4      	b.n	8005c92 <quorem+0x96>
 8005d08:	6812      	ldr	r2, [r2, #0]
 8005d0a:	3b04      	subs	r3, #4
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	d1ef      	bne.n	8005cf0 <quorem+0xf4>
 8005d10:	3c01      	subs	r4, #1
 8005d12:	e7ea      	b.n	8005cea <quorem+0xee>
 8005d14:	2000      	movs	r0, #0
 8005d16:	e7ee      	b.n	8005cf6 <quorem+0xfa>

08005d18 <_dtoa_r>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	461f      	mov	r7, r3
 8005d20:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d22:	b095      	sub	sp, #84	; 0x54
 8005d24:	4604      	mov	r4, r0
 8005d26:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005d2a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d2e:	b93d      	cbnz	r5, 8005d40 <_dtoa_r+0x28>
 8005d30:	2010      	movs	r0, #16
 8005d32:	f000 fdb3 	bl	800689c <malloc>
 8005d36:	6260      	str	r0, [r4, #36]	; 0x24
 8005d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d3c:	6005      	str	r5, [r0, #0]
 8005d3e:	60c5      	str	r5, [r0, #12]
 8005d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d42:	6819      	ldr	r1, [r3, #0]
 8005d44:	b151      	cbz	r1, 8005d5c <_dtoa_r+0x44>
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4093      	lsls	r3, r2
 8005d4c:	604a      	str	r2, [r1, #4]
 8005d4e:	608b      	str	r3, [r1, #8]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fdf8 	bl	8006946 <_Bfree>
 8005d56:	2200      	movs	r2, #0
 8005d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	1e3b      	subs	r3, r7, #0
 8005d5e:	bfaf      	iteee	ge
 8005d60:	2300      	movge	r3, #0
 8005d62:	2201      	movlt	r2, #1
 8005d64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	9303      	strlt	r3, [sp, #12]
 8005d6a:	bfac      	ite	ge
 8005d6c:	f8c8 3000 	strge.w	r3, [r8]
 8005d70:	f8c8 2000 	strlt.w	r2, [r8]
 8005d74:	4bae      	ldr	r3, [pc, #696]	; (8006030 <_dtoa_r+0x318>)
 8005d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005d7a:	ea33 0308 	bics.w	r3, r3, r8
 8005d7e:	d11b      	bne.n	8005db8 <_dtoa_r+0xa0>
 8005d80:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	9b02      	ldr	r3, [sp, #8]
 8005d8a:	b923      	cbnz	r3, 8005d96 <_dtoa_r+0x7e>
 8005d8c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f000 8545 	beq.w	8006820 <_dtoa_r+0xb08>
 8005d96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d98:	b953      	cbnz	r3, 8005db0 <_dtoa_r+0x98>
 8005d9a:	4ba6      	ldr	r3, [pc, #664]	; (8006034 <_dtoa_r+0x31c>)
 8005d9c:	e021      	b.n	8005de2 <_dtoa_r+0xca>
 8005d9e:	4ba6      	ldr	r3, [pc, #664]	; (8006038 <_dtoa_r+0x320>)
 8005da0:	9306      	str	r3, [sp, #24]
 8005da2:	3308      	adds	r3, #8
 8005da4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	9806      	ldr	r0, [sp, #24]
 8005daa:	b015      	add	sp, #84	; 0x54
 8005dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db0:	4ba0      	ldr	r3, [pc, #640]	; (8006034 <_dtoa_r+0x31c>)
 8005db2:	9306      	str	r3, [sp, #24]
 8005db4:	3303      	adds	r3, #3
 8005db6:	e7f5      	b.n	8005da4 <_dtoa_r+0x8c>
 8005db8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fdf0 	bl	80009a8 <__aeabi_dcmpeq>
 8005dc8:	4682      	mov	sl, r0
 8005dca:	b160      	cbz	r0, 8005de6 <_dtoa_r+0xce>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005dd0:	6013      	str	r3, [r2, #0]
 8005dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8520 	beq.w	800681a <_dtoa_r+0xb02>
 8005dda:	4b98      	ldr	r3, [pc, #608]	; (800603c <_dtoa_r+0x324>)
 8005ddc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005dde:	6013      	str	r3, [r2, #0]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	9306      	str	r3, [sp, #24]
 8005de4:	e7e0      	b.n	8005da8 <_dtoa_r+0x90>
 8005de6:	ab12      	add	r3, sp, #72	; 0x48
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	ab13      	add	r3, sp, #76	; 0x4c
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4632      	mov	r2, r6
 8005df0:	463b      	mov	r3, r7
 8005df2:	4620      	mov	r0, r4
 8005df4:	f001 f800 	bl	8006df8 <__d2b>
 8005df8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005dfc:	4683      	mov	fp, r0
 8005dfe:	2d00      	cmp	r5, #0
 8005e00:	d07d      	beq.n	8005efe <_dtoa_r+0x1e6>
 8005e02:	46b0      	mov	r8, r6
 8005e04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005e08:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005e0c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005e10:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e14:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005e18:	2200      	movs	r2, #0
 8005e1a:	4b89      	ldr	r3, [pc, #548]	; (8006040 <_dtoa_r+0x328>)
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa f9a2 	bl	8000168 <__aeabi_dsub>
 8005e24:	a37c      	add	r3, pc, #496	; (adr r3, 8006018 <_dtoa_r+0x300>)
 8005e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2a:	f7fa fb55 	bl	80004d8 <__aeabi_dmul>
 8005e2e:	a37c      	add	r3, pc, #496	; (adr r3, 8006020 <_dtoa_r+0x308>)
 8005e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e34:	f7fa f99a 	bl	800016c <__adddf3>
 8005e38:	4606      	mov	r6, r0
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	f7fa fae1 	bl	8000404 <__aeabi_i2d>
 8005e42:	a379      	add	r3, pc, #484	; (adr r3, 8006028 <_dtoa_r+0x310>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa fb46 	bl	80004d8 <__aeabi_dmul>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	f7fa f98a 	bl	800016c <__adddf3>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	460f      	mov	r7, r1
 8005e5c:	f7fa fdec 	bl	8000a38 <__aeabi_d2iz>
 8005e60:	2200      	movs	r2, #0
 8005e62:	4682      	mov	sl, r0
 8005e64:	2300      	movs	r3, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	f7fa fda7 	bl	80009bc <__aeabi_dcmplt>
 8005e6e:	b148      	cbz	r0, 8005e84 <_dtoa_r+0x16c>
 8005e70:	4650      	mov	r0, sl
 8005e72:	f7fa fac7 	bl	8000404 <__aeabi_i2d>
 8005e76:	4632      	mov	r2, r6
 8005e78:	463b      	mov	r3, r7
 8005e7a:	f7fa fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8005e7e:	b908      	cbnz	r0, 8005e84 <_dtoa_r+0x16c>
 8005e80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005e84:	f1ba 0f16 	cmp.w	sl, #22
 8005e88:	d85a      	bhi.n	8005f40 <_dtoa_r+0x228>
 8005e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e8e:	496d      	ldr	r1, [pc, #436]	; (8006044 <_dtoa_r+0x32c>)
 8005e90:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e98:	f7fa fdae 	bl	80009f8 <__aeabi_dcmpgt>
 8005e9c:	2800      	cmp	r0, #0
 8005e9e:	d051      	beq.n	8005f44 <_dtoa_r+0x22c>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005ea6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005eaa:	1b5d      	subs	r5, r3, r5
 8005eac:	1e6b      	subs	r3, r5, #1
 8005eae:	9307      	str	r3, [sp, #28]
 8005eb0:	bf43      	ittte	mi
 8005eb2:	2300      	movmi	r3, #0
 8005eb4:	f1c5 0901 	rsbmi	r9, r5, #1
 8005eb8:	9307      	strmi	r3, [sp, #28]
 8005eba:	f04f 0900 	movpl.w	r9, #0
 8005ebe:	f1ba 0f00 	cmp.w	sl, #0
 8005ec2:	db41      	blt.n	8005f48 <_dtoa_r+0x230>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005eca:	4453      	add	r3, sl
 8005ecc:	9307      	str	r3, [sp, #28]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	9308      	str	r3, [sp, #32]
 8005ed2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ed4:	2b09      	cmp	r3, #9
 8005ed6:	f200 808f 	bhi.w	8005ff8 <_dtoa_r+0x2e0>
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	bfc4      	itt	gt
 8005ede:	3b04      	subgt	r3, #4
 8005ee0:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005ee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005ee4:	bfc8      	it	gt
 8005ee6:	2500      	movgt	r5, #0
 8005ee8:	f1a3 0302 	sub.w	r3, r3, #2
 8005eec:	bfd8      	it	le
 8005eee:	2501      	movle	r5, #1
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	f200 808d 	bhi.w	8006010 <_dtoa_r+0x2f8>
 8005ef6:	e8df f003 	tbb	[pc, r3]
 8005efa:	7d7b      	.short	0x7d7b
 8005efc:	6f2f      	.short	0x6f2f
 8005efe:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f02:	441d      	add	r5, r3
 8005f04:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005f08:	2820      	cmp	r0, #32
 8005f0a:	dd13      	ble.n	8005f34 <_dtoa_r+0x21c>
 8005f0c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005f10:	9b02      	ldr	r3, [sp, #8]
 8005f12:	fa08 f800 	lsl.w	r8, r8, r0
 8005f16:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005f1a:	fa23 f000 	lsr.w	r0, r3, r0
 8005f1e:	ea48 0000 	orr.w	r0, r8, r0
 8005f22:	f7fa fa5f 	bl	80003e4 <__aeabi_ui2d>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4680      	mov	r8, r0
 8005f2a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005f2e:	3d01      	subs	r5, #1
 8005f30:	9310      	str	r3, [sp, #64]	; 0x40
 8005f32:	e771      	b.n	8005e18 <_dtoa_r+0x100>
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	f1c0 0020 	rsb	r0, r0, #32
 8005f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005f3e:	e7f0      	b.n	8005f22 <_dtoa_r+0x20a>
 8005f40:	2301      	movs	r3, #1
 8005f42:	e7b0      	b.n	8005ea6 <_dtoa_r+0x18e>
 8005f44:	900d      	str	r0, [sp, #52]	; 0x34
 8005f46:	e7af      	b.n	8005ea8 <_dtoa_r+0x190>
 8005f48:	f1ca 0300 	rsb	r3, sl, #0
 8005f4c:	9308      	str	r3, [sp, #32]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	eba9 090a 	sub.w	r9, r9, sl
 8005f54:	930c      	str	r3, [sp, #48]	; 0x30
 8005f56:	e7bc      	b.n	8005ed2 <_dtoa_r+0x1ba>
 8005f58:	2301      	movs	r3, #1
 8005f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd74      	ble.n	800604c <_dtoa_r+0x334>
 8005f62:	4698      	mov	r8, r3
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	2200      	movs	r2, #0
 8005f68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f6a:	6072      	str	r2, [r6, #4]
 8005f6c:	2204      	movs	r2, #4
 8005f6e:	f102 0014 	add.w	r0, r2, #20
 8005f72:	4298      	cmp	r0, r3
 8005f74:	6871      	ldr	r1, [r6, #4]
 8005f76:	d96e      	bls.n	8006056 <_dtoa_r+0x33e>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 fcb0 	bl	80068de <_Balloc>
 8005f7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f80:	6030      	str	r0, [r6, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f1b8 0f0e 	cmp.w	r8, #14
 8005f88:	9306      	str	r3, [sp, #24]
 8005f8a:	f200 80ed 	bhi.w	8006168 <_dtoa_r+0x450>
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	f000 80ea 	beq.w	8006168 <_dtoa_r+0x450>
 8005f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f98:	f1ba 0f00 	cmp.w	sl, #0
 8005f9c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005fa0:	dd77      	ble.n	8006092 <_dtoa_r+0x37a>
 8005fa2:	4a28      	ldr	r2, [pc, #160]	; (8006044 <_dtoa_r+0x32c>)
 8005fa4:	f00a 030f 	and.w	r3, sl, #15
 8005fa8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005fac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005fb0:	06f0      	lsls	r0, r6, #27
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005fba:	d568      	bpl.n	800608e <_dtoa_r+0x376>
 8005fbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <_dtoa_r+0x330>)
 8005fc2:	2503      	movs	r5, #3
 8005fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005fc8:	f7fa fbb0 	bl	800072c <__aeabi_ddiv>
 8005fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fd0:	f006 060f 	and.w	r6, r6, #15
 8005fd4:	4f1c      	ldr	r7, [pc, #112]	; (8006048 <_dtoa_r+0x330>)
 8005fd6:	e04f      	b.n	8006078 <_dtoa_r+0x360>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	9309      	str	r3, [sp, #36]	; 0x24
 8005fdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fde:	4453      	add	r3, sl
 8005fe0:	f103 0801 	add.w	r8, r3, #1
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	4643      	mov	r3, r8
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bfb8      	it	lt
 8005fec:	2301      	movlt	r3, #1
 8005fee:	e7ba      	b.n	8005f66 <_dtoa_r+0x24e>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e7b2      	b.n	8005f5a <_dtoa_r+0x242>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	e7f0      	b.n	8005fda <_dtoa_r+0x2c2>
 8005ff8:	2501      	movs	r5, #1
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	9509      	str	r5, [sp, #36]	; 0x24
 8005ffe:	931e      	str	r3, [sp, #120]	; 0x78
 8006000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006004:	2200      	movs	r2, #0
 8006006:	9304      	str	r3, [sp, #16]
 8006008:	4698      	mov	r8, r3
 800600a:	2312      	movs	r3, #18
 800600c:	921f      	str	r2, [sp, #124]	; 0x7c
 800600e:	e7aa      	b.n	8005f66 <_dtoa_r+0x24e>
 8006010:	2301      	movs	r3, #1
 8006012:	9309      	str	r3, [sp, #36]	; 0x24
 8006014:	e7f4      	b.n	8006000 <_dtoa_r+0x2e8>
 8006016:	bf00      	nop
 8006018:	636f4361 	.word	0x636f4361
 800601c:	3fd287a7 	.word	0x3fd287a7
 8006020:	8b60c8b3 	.word	0x8b60c8b3
 8006024:	3fc68a28 	.word	0x3fc68a28
 8006028:	509f79fb 	.word	0x509f79fb
 800602c:	3fd34413 	.word	0x3fd34413
 8006030:	7ff00000 	.word	0x7ff00000
 8006034:	080076e1 	.word	0x080076e1
 8006038:	080076d8 	.word	0x080076d8
 800603c:	080076b5 	.word	0x080076b5
 8006040:	3ff80000 	.word	0x3ff80000
 8006044:	08007710 	.word	0x08007710
 8006048:	080076e8 	.word	0x080076e8
 800604c:	2301      	movs	r3, #1
 800604e:	9304      	str	r3, [sp, #16]
 8006050:	4698      	mov	r8, r3
 8006052:	461a      	mov	r2, r3
 8006054:	e7da      	b.n	800600c <_dtoa_r+0x2f4>
 8006056:	3101      	adds	r1, #1
 8006058:	6071      	str	r1, [r6, #4]
 800605a:	0052      	lsls	r2, r2, #1
 800605c:	e787      	b.n	8005f6e <_dtoa_r+0x256>
 800605e:	07f1      	lsls	r1, r6, #31
 8006060:	d508      	bpl.n	8006074 <_dtoa_r+0x35c>
 8006062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006066:	e9d7 2300 	ldrd	r2, r3, [r7]
 800606a:	f7fa fa35 	bl	80004d8 <__aeabi_dmul>
 800606e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006072:	3501      	adds	r5, #1
 8006074:	1076      	asrs	r6, r6, #1
 8006076:	3708      	adds	r7, #8
 8006078:	2e00      	cmp	r6, #0
 800607a:	d1f0      	bne.n	800605e <_dtoa_r+0x346>
 800607c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006084:	f7fa fb52 	bl	800072c <__aeabi_ddiv>
 8006088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800608c:	e01b      	b.n	80060c6 <_dtoa_r+0x3ae>
 800608e:	2502      	movs	r5, #2
 8006090:	e7a0      	b.n	8005fd4 <_dtoa_r+0x2bc>
 8006092:	f000 80a4 	beq.w	80061de <_dtoa_r+0x4c6>
 8006096:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800609a:	f1ca 0600 	rsb	r6, sl, #0
 800609e:	4ba0      	ldr	r3, [pc, #640]	; (8006320 <_dtoa_r+0x608>)
 80060a0:	f006 020f 	and.w	r2, r6, #15
 80060a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ac:	f7fa fa14 	bl	80004d8 <__aeabi_dmul>
 80060b0:	2502      	movs	r5, #2
 80060b2:	2300      	movs	r3, #0
 80060b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060b8:	4f9a      	ldr	r7, [pc, #616]	; (8006324 <_dtoa_r+0x60c>)
 80060ba:	1136      	asrs	r6, r6, #4
 80060bc:	2e00      	cmp	r6, #0
 80060be:	f040 8083 	bne.w	80061c8 <_dtoa_r+0x4b0>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e0      	bne.n	8006088 <_dtoa_r+0x370>
 80060c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 808a 	beq.w	80061e2 <_dtoa_r+0x4ca>
 80060ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060d2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80060d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060da:	2200      	movs	r2, #0
 80060dc:	4b92      	ldr	r3, [pc, #584]	; (8006328 <_dtoa_r+0x610>)
 80060de:	f7fa fc6d 	bl	80009bc <__aeabi_dcmplt>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d07d      	beq.n	80061e2 <_dtoa_r+0x4ca>
 80060e6:	f1b8 0f00 	cmp.w	r8, #0
 80060ea:	d07a      	beq.n	80061e2 <_dtoa_r+0x4ca>
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dd36      	ble.n	8006160 <_dtoa_r+0x448>
 80060f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060f6:	2200      	movs	r2, #0
 80060f8:	4b8c      	ldr	r3, [pc, #560]	; (800632c <_dtoa_r+0x614>)
 80060fa:	f7fa f9ed 	bl	80004d8 <__aeabi_dmul>
 80060fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006102:	9e04      	ldr	r6, [sp, #16]
 8006104:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006108:	3501      	adds	r5, #1
 800610a:	4628      	mov	r0, r5
 800610c:	f7fa f97a 	bl	8000404 <__aeabi_i2d>
 8006110:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006114:	f7fa f9e0 	bl	80004d8 <__aeabi_dmul>
 8006118:	2200      	movs	r2, #0
 800611a:	4b85      	ldr	r3, [pc, #532]	; (8006330 <_dtoa_r+0x618>)
 800611c:	f7fa f826 	bl	800016c <__adddf3>
 8006120:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006124:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006128:	950b      	str	r5, [sp, #44]	; 0x2c
 800612a:	2e00      	cmp	r6, #0
 800612c:	d15c      	bne.n	80061e8 <_dtoa_r+0x4d0>
 800612e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006132:	2200      	movs	r2, #0
 8006134:	4b7f      	ldr	r3, [pc, #508]	; (8006334 <_dtoa_r+0x61c>)
 8006136:	f7fa f817 	bl	8000168 <__aeabi_dsub>
 800613a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800613c:	462b      	mov	r3, r5
 800613e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006142:	f7fa fc59 	bl	80009f8 <__aeabi_dcmpgt>
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8281 	bne.w	800664e <_dtoa_r+0x936>
 800614c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006152:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006156:	f7fa fc31 	bl	80009bc <__aeabi_dcmplt>
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 8275 	bne.w	800664a <_dtoa_r+0x932>
 8006160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006164:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006168:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f2c0 814b 	blt.w	8006406 <_dtoa_r+0x6ee>
 8006170:	f1ba 0f0e 	cmp.w	sl, #14
 8006174:	f300 8147 	bgt.w	8006406 <_dtoa_r+0x6ee>
 8006178:	4b69      	ldr	r3, [pc, #420]	; (8006320 <_dtoa_r+0x608>)
 800617a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006186:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006188:	2b00      	cmp	r3, #0
 800618a:	f280 80d7 	bge.w	800633c <_dtoa_r+0x624>
 800618e:	f1b8 0f00 	cmp.w	r8, #0
 8006192:	f300 80d3 	bgt.w	800633c <_dtoa_r+0x624>
 8006196:	f040 8257 	bne.w	8006648 <_dtoa_r+0x930>
 800619a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800619e:	2200      	movs	r2, #0
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <_dtoa_r+0x61c>)
 80061a2:	f7fa f999 	bl	80004d8 <__aeabi_dmul>
 80061a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061aa:	f7fa fc1b 	bl	80009e4 <__aeabi_dcmpge>
 80061ae:	4646      	mov	r6, r8
 80061b0:	4647      	mov	r7, r8
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f040 822d 	bne.w	8006612 <_dtoa_r+0x8fa>
 80061b8:	9b06      	ldr	r3, [sp, #24]
 80061ba:	9a06      	ldr	r2, [sp, #24]
 80061bc:	1c5d      	adds	r5, r3, #1
 80061be:	2331      	movs	r3, #49	; 0x31
 80061c0:	f10a 0a01 	add.w	sl, sl, #1
 80061c4:	7013      	strb	r3, [r2, #0]
 80061c6:	e228      	b.n	800661a <_dtoa_r+0x902>
 80061c8:	07f2      	lsls	r2, r6, #31
 80061ca:	d505      	bpl.n	80061d8 <_dtoa_r+0x4c0>
 80061cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d0:	f7fa f982 	bl	80004d8 <__aeabi_dmul>
 80061d4:	2301      	movs	r3, #1
 80061d6:	3501      	adds	r5, #1
 80061d8:	1076      	asrs	r6, r6, #1
 80061da:	3708      	adds	r7, #8
 80061dc:	e76e      	b.n	80060bc <_dtoa_r+0x3a4>
 80061de:	2502      	movs	r5, #2
 80061e0:	e771      	b.n	80060c6 <_dtoa_r+0x3ae>
 80061e2:	4657      	mov	r7, sl
 80061e4:	4646      	mov	r6, r8
 80061e6:	e790      	b.n	800610a <_dtoa_r+0x3f2>
 80061e8:	4b4d      	ldr	r3, [pc, #308]	; (8006320 <_dtoa_r+0x608>)
 80061ea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80061ee:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80061f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d048      	beq.n	800628a <_dtoa_r+0x572>
 80061f8:	4602      	mov	r2, r0
 80061fa:	460b      	mov	r3, r1
 80061fc:	2000      	movs	r0, #0
 80061fe:	494e      	ldr	r1, [pc, #312]	; (8006338 <_dtoa_r+0x620>)
 8006200:	f7fa fa94 	bl	800072c <__aeabi_ddiv>
 8006204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006208:	f7f9 ffae 	bl	8000168 <__aeabi_dsub>
 800620c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006210:	9d06      	ldr	r5, [sp, #24]
 8006212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006216:	f7fa fc0f 	bl	8000a38 <__aeabi_d2iz>
 800621a:	9011      	str	r0, [sp, #68]	; 0x44
 800621c:	f7fa f8f2 	bl	8000404 <__aeabi_i2d>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	f7f9 ff9e 	bl	8000168 <__aeabi_dsub>
 800622c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800622e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006232:	3330      	adds	r3, #48	; 0x30
 8006234:	f805 3b01 	strb.w	r3, [r5], #1
 8006238:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800623c:	f7fa fbbe 	bl	80009bc <__aeabi_dcmplt>
 8006240:	2800      	cmp	r0, #0
 8006242:	d163      	bne.n	800630c <_dtoa_r+0x5f4>
 8006244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006248:	2000      	movs	r0, #0
 800624a:	4937      	ldr	r1, [pc, #220]	; (8006328 <_dtoa_r+0x610>)
 800624c:	f7f9 ff8c 	bl	8000168 <__aeabi_dsub>
 8006250:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006254:	f7fa fbb2 	bl	80009bc <__aeabi_dcmplt>
 8006258:	2800      	cmp	r0, #0
 800625a:	f040 80b5 	bne.w	80063c8 <_dtoa_r+0x6b0>
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	1aeb      	subs	r3, r5, r3
 8006262:	429e      	cmp	r6, r3
 8006264:	f77f af7c 	ble.w	8006160 <_dtoa_r+0x448>
 8006268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800626c:	2200      	movs	r2, #0
 800626e:	4b2f      	ldr	r3, [pc, #188]	; (800632c <_dtoa_r+0x614>)
 8006270:	f7fa f932 	bl	80004d8 <__aeabi_dmul>
 8006274:	2200      	movs	r2, #0
 8006276:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800627a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800627e:	4b2b      	ldr	r3, [pc, #172]	; (800632c <_dtoa_r+0x614>)
 8006280:	f7fa f92a 	bl	80004d8 <__aeabi_dmul>
 8006284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006288:	e7c3      	b.n	8006212 <_dtoa_r+0x4fa>
 800628a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800628e:	f7fa f923 	bl	80004d8 <__aeabi_dmul>
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006298:	199d      	adds	r5, r3, r6
 800629a:	461e      	mov	r6, r3
 800629c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a0:	f7fa fbca 	bl	8000a38 <__aeabi_d2iz>
 80062a4:	9011      	str	r0, [sp, #68]	; 0x44
 80062a6:	f7fa f8ad 	bl	8000404 <__aeabi_i2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	f7f9 ff59 	bl	8000168 <__aeabi_dsub>
 80062b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062bc:	3330      	adds	r3, #48	; 0x30
 80062be:	f806 3b01 	strb.w	r3, [r6], #1
 80062c2:	42ae      	cmp	r6, r5
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	d124      	bne.n	8006314 <_dtoa_r+0x5fc>
 80062ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <_dtoa_r+0x620>)
 80062d0:	f7f9 ff4c 	bl	800016c <__adddf3>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062dc:	f7fa fb8c 	bl	80009f8 <__aeabi_dcmpgt>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d171      	bne.n	80063c8 <_dtoa_r+0x6b0>
 80062e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80062e8:	2000      	movs	r0, #0
 80062ea:	4913      	ldr	r1, [pc, #76]	; (8006338 <_dtoa_r+0x620>)
 80062ec:	f7f9 ff3c 	bl	8000168 <__aeabi_dsub>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f8:	f7fa fb60 	bl	80009bc <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f43f af2f 	beq.w	8006160 <_dtoa_r+0x448>
 8006302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006306:	1e6a      	subs	r2, r5, #1
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	d001      	beq.n	8006310 <_dtoa_r+0x5f8>
 800630c:	46ba      	mov	sl, r7
 800630e:	e04a      	b.n	80063a6 <_dtoa_r+0x68e>
 8006310:	4615      	mov	r5, r2
 8006312:	e7f6      	b.n	8006302 <_dtoa_r+0x5ea>
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <_dtoa_r+0x614>)
 8006316:	f7fa f8df 	bl	80004d8 <__aeabi_dmul>
 800631a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800631e:	e7bd      	b.n	800629c <_dtoa_r+0x584>
 8006320:	08007710 	.word	0x08007710
 8006324:	080076e8 	.word	0x080076e8
 8006328:	3ff00000 	.word	0x3ff00000
 800632c:	40240000 	.word	0x40240000
 8006330:	401c0000 	.word	0x401c0000
 8006334:	40140000 	.word	0x40140000
 8006338:	3fe00000 	.word	0x3fe00000
 800633c:	9d06      	ldr	r5, [sp, #24]
 800633e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006342:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006346:	4630      	mov	r0, r6
 8006348:	4639      	mov	r1, r7
 800634a:	f7fa f9ef 	bl	800072c <__aeabi_ddiv>
 800634e:	f7fa fb73 	bl	8000a38 <__aeabi_d2iz>
 8006352:	4681      	mov	r9, r0
 8006354:	f7fa f856 	bl	8000404 <__aeabi_i2d>
 8006358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800635c:	f7fa f8bc 	bl	80004d8 <__aeabi_dmul>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	4630      	mov	r0, r6
 8006366:	4639      	mov	r1, r7
 8006368:	f7f9 fefe 	bl	8000168 <__aeabi_dsub>
 800636c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006370:	f805 6b01 	strb.w	r6, [r5], #1
 8006374:	9e06      	ldr	r6, [sp, #24]
 8006376:	4602      	mov	r2, r0
 8006378:	1bae      	subs	r6, r5, r6
 800637a:	45b0      	cmp	r8, r6
 800637c:	460b      	mov	r3, r1
 800637e:	d135      	bne.n	80063ec <_dtoa_r+0x6d4>
 8006380:	f7f9 fef4 	bl	800016c <__adddf3>
 8006384:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006388:	4606      	mov	r6, r0
 800638a:	460f      	mov	r7, r1
 800638c:	f7fa fb34 	bl	80009f8 <__aeabi_dcmpgt>
 8006390:	b9c8      	cbnz	r0, 80063c6 <_dtoa_r+0x6ae>
 8006392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006396:	4630      	mov	r0, r6
 8006398:	4639      	mov	r1, r7
 800639a:	f7fa fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800639e:	b110      	cbz	r0, 80063a6 <_dtoa_r+0x68e>
 80063a0:	f019 0f01 	tst.w	r9, #1
 80063a4:	d10f      	bne.n	80063c6 <_dtoa_r+0x6ae>
 80063a6:	4659      	mov	r1, fp
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 facc 	bl	8006946 <_Bfree>
 80063ae:	2300      	movs	r3, #0
 80063b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063b2:	702b      	strb	r3, [r5, #0]
 80063b4:	f10a 0301 	add.w	r3, sl, #1
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f43f acf3 	beq.w	8005da8 <_dtoa_r+0x90>
 80063c2:	601d      	str	r5, [r3, #0]
 80063c4:	e4f0      	b.n	8005da8 <_dtoa_r+0x90>
 80063c6:	4657      	mov	r7, sl
 80063c8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063cc:	1e6b      	subs	r3, r5, #1
 80063ce:	2a39      	cmp	r2, #57	; 0x39
 80063d0:	d106      	bne.n	80063e0 <_dtoa_r+0x6c8>
 80063d2:	9a06      	ldr	r2, [sp, #24]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d107      	bne.n	80063e8 <_dtoa_r+0x6d0>
 80063d8:	2330      	movs	r3, #48	; 0x30
 80063da:	7013      	strb	r3, [r2, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	3701      	adds	r7, #1
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	3201      	adds	r2, #1
 80063e4:	701a      	strb	r2, [r3, #0]
 80063e6:	e791      	b.n	800630c <_dtoa_r+0x5f4>
 80063e8:	461d      	mov	r5, r3
 80063ea:	e7ed      	b.n	80063c8 <_dtoa_r+0x6b0>
 80063ec:	2200      	movs	r2, #0
 80063ee:	4b99      	ldr	r3, [pc, #612]	; (8006654 <_dtoa_r+0x93c>)
 80063f0:	f7fa f872 	bl	80004d8 <__aeabi_dmul>
 80063f4:	2200      	movs	r2, #0
 80063f6:	2300      	movs	r3, #0
 80063f8:	4606      	mov	r6, r0
 80063fa:	460f      	mov	r7, r1
 80063fc:	f7fa fad4 	bl	80009a8 <__aeabi_dcmpeq>
 8006400:	2800      	cmp	r0, #0
 8006402:	d09e      	beq.n	8006342 <_dtoa_r+0x62a>
 8006404:	e7cf      	b.n	80063a6 <_dtoa_r+0x68e>
 8006406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006408:	2a00      	cmp	r2, #0
 800640a:	f000 8088 	beq.w	800651e <_dtoa_r+0x806>
 800640e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006410:	2a01      	cmp	r2, #1
 8006412:	dc6d      	bgt.n	80064f0 <_dtoa_r+0x7d8>
 8006414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006416:	2a00      	cmp	r2, #0
 8006418:	d066      	beq.n	80064e8 <_dtoa_r+0x7d0>
 800641a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800641e:	464d      	mov	r5, r9
 8006420:	9e08      	ldr	r6, [sp, #32]
 8006422:	9a07      	ldr	r2, [sp, #28]
 8006424:	2101      	movs	r1, #1
 8006426:	441a      	add	r2, r3
 8006428:	4620      	mov	r0, r4
 800642a:	4499      	add	r9, r3
 800642c:	9207      	str	r2, [sp, #28]
 800642e:	f000 fb2a 	bl	8006a86 <__i2b>
 8006432:	4607      	mov	r7, r0
 8006434:	2d00      	cmp	r5, #0
 8006436:	dd0b      	ble.n	8006450 <_dtoa_r+0x738>
 8006438:	9b07      	ldr	r3, [sp, #28]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd08      	ble.n	8006450 <_dtoa_r+0x738>
 800643e:	42ab      	cmp	r3, r5
 8006440:	bfa8      	it	ge
 8006442:	462b      	movge	r3, r5
 8006444:	9a07      	ldr	r2, [sp, #28]
 8006446:	eba9 0903 	sub.w	r9, r9, r3
 800644a:	1aed      	subs	r5, r5, r3
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	9307      	str	r3, [sp, #28]
 8006450:	9b08      	ldr	r3, [sp, #32]
 8006452:	b1eb      	cbz	r3, 8006490 <_dtoa_r+0x778>
 8006454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d065      	beq.n	8006526 <_dtoa_r+0x80e>
 800645a:	b18e      	cbz	r6, 8006480 <_dtoa_r+0x768>
 800645c:	4639      	mov	r1, r7
 800645e:	4632      	mov	r2, r6
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fbaf 	bl	8006bc4 <__pow5mult>
 8006466:	465a      	mov	r2, fp
 8006468:	4601      	mov	r1, r0
 800646a:	4607      	mov	r7, r0
 800646c:	4620      	mov	r0, r4
 800646e:	f000 fb13 	bl	8006a98 <__multiply>
 8006472:	4659      	mov	r1, fp
 8006474:	900a      	str	r0, [sp, #40]	; 0x28
 8006476:	4620      	mov	r0, r4
 8006478:	f000 fa65 	bl	8006946 <_Bfree>
 800647c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800647e:	469b      	mov	fp, r3
 8006480:	9b08      	ldr	r3, [sp, #32]
 8006482:	1b9a      	subs	r2, r3, r6
 8006484:	d004      	beq.n	8006490 <_dtoa_r+0x778>
 8006486:	4659      	mov	r1, fp
 8006488:	4620      	mov	r0, r4
 800648a:	f000 fb9b 	bl	8006bc4 <__pow5mult>
 800648e:	4683      	mov	fp, r0
 8006490:	2101      	movs	r1, #1
 8006492:	4620      	mov	r0, r4
 8006494:	f000 faf7 	bl	8006a86 <__i2b>
 8006498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800649a:	4606      	mov	r6, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 81c6 	beq.w	800682e <_dtoa_r+0xb16>
 80064a2:	461a      	mov	r2, r3
 80064a4:	4601      	mov	r1, r0
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 fb8c 	bl	8006bc4 <__pow5mult>
 80064ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ae:	4606      	mov	r6, r0
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	dc3e      	bgt.n	8006532 <_dtoa_r+0x81a>
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d137      	bne.n	800652a <_dtoa_r+0x812>
 80064ba:	9b03      	ldr	r3, [sp, #12]
 80064bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d134      	bne.n	800652e <_dtoa_r+0x816>
 80064c4:	9b03      	ldr	r3, [sp, #12]
 80064c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ca:	0d1b      	lsrs	r3, r3, #20
 80064cc:	051b      	lsls	r3, r3, #20
 80064ce:	b12b      	cbz	r3, 80064dc <_dtoa_r+0x7c4>
 80064d0:	9b07      	ldr	r3, [sp, #28]
 80064d2:	f109 0901 	add.w	r9, r9, #1
 80064d6:	3301      	adds	r3, #1
 80064d8:	9307      	str	r3, [sp, #28]
 80064da:	2301      	movs	r3, #1
 80064dc:	9308      	str	r3, [sp, #32]
 80064de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d128      	bne.n	8006536 <_dtoa_r+0x81e>
 80064e4:	2001      	movs	r0, #1
 80064e6:	e02e      	b.n	8006546 <_dtoa_r+0x82e>
 80064e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80064ee:	e796      	b.n	800641e <_dtoa_r+0x706>
 80064f0:	9b08      	ldr	r3, [sp, #32]
 80064f2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80064f6:	42b3      	cmp	r3, r6
 80064f8:	bfb7      	itett	lt
 80064fa:	9b08      	ldrlt	r3, [sp, #32]
 80064fc:	1b9e      	subge	r6, r3, r6
 80064fe:	1af2      	sublt	r2, r6, r3
 8006500:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006502:	bfbf      	itttt	lt
 8006504:	9608      	strlt	r6, [sp, #32]
 8006506:	189b      	addlt	r3, r3, r2
 8006508:	930c      	strlt	r3, [sp, #48]	; 0x30
 800650a:	2600      	movlt	r6, #0
 800650c:	f1b8 0f00 	cmp.w	r8, #0
 8006510:	bfb9      	ittee	lt
 8006512:	eba9 0508 	sublt.w	r5, r9, r8
 8006516:	2300      	movlt	r3, #0
 8006518:	464d      	movge	r5, r9
 800651a:	4643      	movge	r3, r8
 800651c:	e781      	b.n	8006422 <_dtoa_r+0x70a>
 800651e:	9e08      	ldr	r6, [sp, #32]
 8006520:	464d      	mov	r5, r9
 8006522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006524:	e786      	b.n	8006434 <_dtoa_r+0x71c>
 8006526:	9a08      	ldr	r2, [sp, #32]
 8006528:	e7ad      	b.n	8006486 <_dtoa_r+0x76e>
 800652a:	2300      	movs	r3, #0
 800652c:	e7d6      	b.n	80064dc <_dtoa_r+0x7c4>
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	e7d4      	b.n	80064dc <_dtoa_r+0x7c4>
 8006532:	2300      	movs	r3, #0
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	6933      	ldr	r3, [r6, #16]
 8006538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800653c:	6918      	ldr	r0, [r3, #16]
 800653e:	f000 fa54 	bl	80069ea <__hi0bits>
 8006542:	f1c0 0020 	rsb	r0, r0, #32
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	4418      	add	r0, r3
 800654a:	f010 001f 	ands.w	r0, r0, #31
 800654e:	d047      	beq.n	80065e0 <_dtoa_r+0x8c8>
 8006550:	f1c0 0320 	rsb	r3, r0, #32
 8006554:	2b04      	cmp	r3, #4
 8006556:	dd3b      	ble.n	80065d0 <_dtoa_r+0x8b8>
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	f1c0 001c 	rsb	r0, r0, #28
 800655e:	4481      	add	r9, r0
 8006560:	4405      	add	r5, r0
 8006562:	4403      	add	r3, r0
 8006564:	9307      	str	r3, [sp, #28]
 8006566:	f1b9 0f00 	cmp.w	r9, #0
 800656a:	dd05      	ble.n	8006578 <_dtoa_r+0x860>
 800656c:	4659      	mov	r1, fp
 800656e:	464a      	mov	r2, r9
 8006570:	4620      	mov	r0, r4
 8006572:	f000 fb75 	bl	8006c60 <__lshift>
 8006576:	4683      	mov	fp, r0
 8006578:	9b07      	ldr	r3, [sp, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	dd05      	ble.n	800658a <_dtoa_r+0x872>
 800657e:	4631      	mov	r1, r6
 8006580:	461a      	mov	r2, r3
 8006582:	4620      	mov	r0, r4
 8006584:	f000 fb6c 	bl	8006c60 <__lshift>
 8006588:	4606      	mov	r6, r0
 800658a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800658c:	b353      	cbz	r3, 80065e4 <_dtoa_r+0x8cc>
 800658e:	4631      	mov	r1, r6
 8006590:	4658      	mov	r0, fp
 8006592:	f000 fbb9 	bl	8006d08 <__mcmp>
 8006596:	2800      	cmp	r0, #0
 8006598:	da24      	bge.n	80065e4 <_dtoa_r+0x8cc>
 800659a:	2300      	movs	r3, #0
 800659c:	4659      	mov	r1, fp
 800659e:	220a      	movs	r2, #10
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 f9e7 	bl	8006974 <__multadd>
 80065a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80065ac:	4683      	mov	fp, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8144 	beq.w	800683c <_dtoa_r+0xb24>
 80065b4:	2300      	movs	r3, #0
 80065b6:	4639      	mov	r1, r7
 80065b8:	220a      	movs	r2, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f9da 	bl	8006974 <__multadd>
 80065c0:	9b04      	ldr	r3, [sp, #16]
 80065c2:	4607      	mov	r7, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dc4d      	bgt.n	8006664 <_dtoa_r+0x94c>
 80065c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	dd4a      	ble.n	8006664 <_dtoa_r+0x94c>
 80065ce:	e011      	b.n	80065f4 <_dtoa_r+0x8dc>
 80065d0:	d0c9      	beq.n	8006566 <_dtoa_r+0x84e>
 80065d2:	9a07      	ldr	r2, [sp, #28]
 80065d4:	331c      	adds	r3, #28
 80065d6:	441a      	add	r2, r3
 80065d8:	4499      	add	r9, r3
 80065da:	441d      	add	r5, r3
 80065dc:	4613      	mov	r3, r2
 80065de:	e7c1      	b.n	8006564 <_dtoa_r+0x84c>
 80065e0:	4603      	mov	r3, r0
 80065e2:	e7f6      	b.n	80065d2 <_dtoa_r+0x8ba>
 80065e4:	f1b8 0f00 	cmp.w	r8, #0
 80065e8:	dc36      	bgt.n	8006658 <_dtoa_r+0x940>
 80065ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	dd33      	ble.n	8006658 <_dtoa_r+0x940>
 80065f0:	f8cd 8010 	str.w	r8, [sp, #16]
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	b963      	cbnz	r3, 8006612 <_dtoa_r+0x8fa>
 80065f8:	4631      	mov	r1, r6
 80065fa:	2205      	movs	r2, #5
 80065fc:	4620      	mov	r0, r4
 80065fe:	f000 f9b9 	bl	8006974 <__multadd>
 8006602:	4601      	mov	r1, r0
 8006604:	4606      	mov	r6, r0
 8006606:	4658      	mov	r0, fp
 8006608:	f000 fb7e 	bl	8006d08 <__mcmp>
 800660c:	2800      	cmp	r0, #0
 800660e:	f73f add3 	bgt.w	80061b8 <_dtoa_r+0x4a0>
 8006612:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006614:	9d06      	ldr	r5, [sp, #24]
 8006616:	ea6f 0a03 	mvn.w	sl, r3
 800661a:	f04f 0900 	mov.w	r9, #0
 800661e:	4631      	mov	r1, r6
 8006620:	4620      	mov	r0, r4
 8006622:	f000 f990 	bl	8006946 <_Bfree>
 8006626:	2f00      	cmp	r7, #0
 8006628:	f43f aebd 	beq.w	80063a6 <_dtoa_r+0x68e>
 800662c:	f1b9 0f00 	cmp.w	r9, #0
 8006630:	d005      	beq.n	800663e <_dtoa_r+0x926>
 8006632:	45b9      	cmp	r9, r7
 8006634:	d003      	beq.n	800663e <_dtoa_r+0x926>
 8006636:	4649      	mov	r1, r9
 8006638:	4620      	mov	r0, r4
 800663a:	f000 f984 	bl	8006946 <_Bfree>
 800663e:	4639      	mov	r1, r7
 8006640:	4620      	mov	r0, r4
 8006642:	f000 f980 	bl	8006946 <_Bfree>
 8006646:	e6ae      	b.n	80063a6 <_dtoa_r+0x68e>
 8006648:	2600      	movs	r6, #0
 800664a:	4637      	mov	r7, r6
 800664c:	e7e1      	b.n	8006612 <_dtoa_r+0x8fa>
 800664e:	46ba      	mov	sl, r7
 8006650:	4637      	mov	r7, r6
 8006652:	e5b1      	b.n	80061b8 <_dtoa_r+0x4a0>
 8006654:	40240000 	.word	0x40240000
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	f8cd 8010 	str.w	r8, [sp, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	f000 80f3 	beq.w	800684a <_dtoa_r+0xb32>
 8006664:	2d00      	cmp	r5, #0
 8006666:	dd05      	ble.n	8006674 <_dtoa_r+0x95c>
 8006668:	4639      	mov	r1, r7
 800666a:	462a      	mov	r2, r5
 800666c:	4620      	mov	r0, r4
 800666e:	f000 faf7 	bl	8006c60 <__lshift>
 8006672:	4607      	mov	r7, r0
 8006674:	9b08      	ldr	r3, [sp, #32]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d04c      	beq.n	8006714 <_dtoa_r+0x9fc>
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	4620      	mov	r0, r4
 800667e:	f000 f92e 	bl	80068de <_Balloc>
 8006682:	4605      	mov	r5, r0
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	f107 010c 	add.w	r1, r7, #12
 800668a:	3202      	adds	r2, #2
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	300c      	adds	r0, #12
 8006690:	f000 f91a 	bl	80068c8 <memcpy>
 8006694:	2201      	movs	r2, #1
 8006696:	4629      	mov	r1, r5
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fae1 	bl	8006c60 <__lshift>
 800669e:	46b9      	mov	r9, r7
 80066a0:	4607      	mov	r7, r0
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	9307      	str	r3, [sp, #28]
 80066a6:	9b02      	ldr	r3, [sp, #8]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	9308      	str	r3, [sp, #32]
 80066ae:	4631      	mov	r1, r6
 80066b0:	4658      	mov	r0, fp
 80066b2:	f7ff faa3 	bl	8005bfc <quorem>
 80066b6:	4649      	mov	r1, r9
 80066b8:	4605      	mov	r5, r0
 80066ba:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80066be:	4658      	mov	r0, fp
 80066c0:	f000 fb22 	bl	8006d08 <__mcmp>
 80066c4:	463a      	mov	r2, r7
 80066c6:	9002      	str	r0, [sp, #8]
 80066c8:	4631      	mov	r1, r6
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 fb36 	bl	8006d3c <__mdiff>
 80066d0:	68c3      	ldr	r3, [r0, #12]
 80066d2:	4602      	mov	r2, r0
 80066d4:	bb03      	cbnz	r3, 8006718 <_dtoa_r+0xa00>
 80066d6:	4601      	mov	r1, r0
 80066d8:	9009      	str	r0, [sp, #36]	; 0x24
 80066da:	4658      	mov	r0, fp
 80066dc:	f000 fb14 	bl	8006d08 <__mcmp>
 80066e0:	4603      	mov	r3, r0
 80066e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066e4:	4611      	mov	r1, r2
 80066e6:	4620      	mov	r0, r4
 80066e8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ea:	f000 f92c 	bl	8006946 <_Bfree>
 80066ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f0:	b9a3      	cbnz	r3, 800671c <_dtoa_r+0xa04>
 80066f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066f4:	b992      	cbnz	r2, 800671c <_dtoa_r+0xa04>
 80066f6:	9a08      	ldr	r2, [sp, #32]
 80066f8:	b982      	cbnz	r2, 800671c <_dtoa_r+0xa04>
 80066fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80066fe:	d029      	beq.n	8006754 <_dtoa_r+0xa3c>
 8006700:	9b02      	ldr	r3, [sp, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	dd01      	ble.n	800670a <_dtoa_r+0x9f2>
 8006706:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800670a:	9b07      	ldr	r3, [sp, #28]
 800670c:	1c5d      	adds	r5, r3, #1
 800670e:	f883 8000 	strb.w	r8, [r3]
 8006712:	e784      	b.n	800661e <_dtoa_r+0x906>
 8006714:	4638      	mov	r0, r7
 8006716:	e7c2      	b.n	800669e <_dtoa_r+0x986>
 8006718:	2301      	movs	r3, #1
 800671a:	e7e3      	b.n	80066e4 <_dtoa_r+0x9cc>
 800671c:	9a02      	ldr	r2, [sp, #8]
 800671e:	2a00      	cmp	r2, #0
 8006720:	db04      	blt.n	800672c <_dtoa_r+0xa14>
 8006722:	d123      	bne.n	800676c <_dtoa_r+0xa54>
 8006724:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006726:	bb0a      	cbnz	r2, 800676c <_dtoa_r+0xa54>
 8006728:	9a08      	ldr	r2, [sp, #32]
 800672a:	b9fa      	cbnz	r2, 800676c <_dtoa_r+0xa54>
 800672c:	2b00      	cmp	r3, #0
 800672e:	ddec      	ble.n	800670a <_dtoa_r+0x9f2>
 8006730:	4659      	mov	r1, fp
 8006732:	2201      	movs	r2, #1
 8006734:	4620      	mov	r0, r4
 8006736:	f000 fa93 	bl	8006c60 <__lshift>
 800673a:	4631      	mov	r1, r6
 800673c:	4683      	mov	fp, r0
 800673e:	f000 fae3 	bl	8006d08 <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	dc03      	bgt.n	800674e <_dtoa_r+0xa36>
 8006746:	d1e0      	bne.n	800670a <_dtoa_r+0x9f2>
 8006748:	f018 0f01 	tst.w	r8, #1
 800674c:	d0dd      	beq.n	800670a <_dtoa_r+0x9f2>
 800674e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006752:	d1d8      	bne.n	8006706 <_dtoa_r+0x9ee>
 8006754:	9b07      	ldr	r3, [sp, #28]
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	1c5d      	adds	r5, r3, #1
 800675a:	2339      	movs	r3, #57	; 0x39
 800675c:	7013      	strb	r3, [r2, #0]
 800675e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006762:	1e6a      	subs	r2, r5, #1
 8006764:	2b39      	cmp	r3, #57	; 0x39
 8006766:	d04d      	beq.n	8006804 <_dtoa_r+0xaec>
 8006768:	3301      	adds	r3, #1
 800676a:	e052      	b.n	8006812 <_dtoa_r+0xafa>
 800676c:	9a07      	ldr	r2, [sp, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f102 0501 	add.w	r5, r2, #1
 8006774:	dd06      	ble.n	8006784 <_dtoa_r+0xa6c>
 8006776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800677a:	d0eb      	beq.n	8006754 <_dtoa_r+0xa3c>
 800677c:	f108 0801 	add.w	r8, r8, #1
 8006780:	9b07      	ldr	r3, [sp, #28]
 8006782:	e7c4      	b.n	800670e <_dtoa_r+0x9f6>
 8006784:	9b06      	ldr	r3, [sp, #24]
 8006786:	9a04      	ldr	r2, [sp, #16]
 8006788:	1aeb      	subs	r3, r5, r3
 800678a:	4293      	cmp	r3, r2
 800678c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006790:	d021      	beq.n	80067d6 <_dtoa_r+0xabe>
 8006792:	4659      	mov	r1, fp
 8006794:	2300      	movs	r3, #0
 8006796:	220a      	movs	r2, #10
 8006798:	4620      	mov	r0, r4
 800679a:	f000 f8eb 	bl	8006974 <__multadd>
 800679e:	45b9      	cmp	r9, r7
 80067a0:	4683      	mov	fp, r0
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	f04f 020a 	mov.w	r2, #10
 80067aa:	4649      	mov	r1, r9
 80067ac:	4620      	mov	r0, r4
 80067ae:	d105      	bne.n	80067bc <_dtoa_r+0xaa4>
 80067b0:	f000 f8e0 	bl	8006974 <__multadd>
 80067b4:	4681      	mov	r9, r0
 80067b6:	4607      	mov	r7, r0
 80067b8:	9507      	str	r5, [sp, #28]
 80067ba:	e778      	b.n	80066ae <_dtoa_r+0x996>
 80067bc:	f000 f8da 	bl	8006974 <__multadd>
 80067c0:	4639      	mov	r1, r7
 80067c2:	4681      	mov	r9, r0
 80067c4:	2300      	movs	r3, #0
 80067c6:	220a      	movs	r2, #10
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 f8d3 	bl	8006974 <__multadd>
 80067ce:	4607      	mov	r7, r0
 80067d0:	e7f2      	b.n	80067b8 <_dtoa_r+0xaa0>
 80067d2:	f04f 0900 	mov.w	r9, #0
 80067d6:	4659      	mov	r1, fp
 80067d8:	2201      	movs	r2, #1
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fa40 	bl	8006c60 <__lshift>
 80067e0:	4631      	mov	r1, r6
 80067e2:	4683      	mov	fp, r0
 80067e4:	f000 fa90 	bl	8006d08 <__mcmp>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	dcb8      	bgt.n	800675e <_dtoa_r+0xa46>
 80067ec:	d102      	bne.n	80067f4 <_dtoa_r+0xadc>
 80067ee:	f018 0f01 	tst.w	r8, #1
 80067f2:	d1b4      	bne.n	800675e <_dtoa_r+0xa46>
 80067f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80067f8:	1e6a      	subs	r2, r5, #1
 80067fa:	2b30      	cmp	r3, #48	; 0x30
 80067fc:	f47f af0f 	bne.w	800661e <_dtoa_r+0x906>
 8006800:	4615      	mov	r5, r2
 8006802:	e7f7      	b.n	80067f4 <_dtoa_r+0xadc>
 8006804:	9b06      	ldr	r3, [sp, #24]
 8006806:	4293      	cmp	r3, r2
 8006808:	d105      	bne.n	8006816 <_dtoa_r+0xafe>
 800680a:	2331      	movs	r3, #49	; 0x31
 800680c:	9a06      	ldr	r2, [sp, #24]
 800680e:	f10a 0a01 	add.w	sl, sl, #1
 8006812:	7013      	strb	r3, [r2, #0]
 8006814:	e703      	b.n	800661e <_dtoa_r+0x906>
 8006816:	4615      	mov	r5, r2
 8006818:	e7a1      	b.n	800675e <_dtoa_r+0xa46>
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <_dtoa_r+0xb60>)
 800681c:	f7ff bae1 	b.w	8005de2 <_dtoa_r+0xca>
 8006820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006822:	2b00      	cmp	r3, #0
 8006824:	f47f aabb 	bne.w	8005d9e <_dtoa_r+0x86>
 8006828:	4b14      	ldr	r3, [pc, #80]	; (800687c <_dtoa_r+0xb64>)
 800682a:	f7ff bada 	b.w	8005de2 <_dtoa_r+0xca>
 800682e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006830:	2b01      	cmp	r3, #1
 8006832:	f77f ae3f 	ble.w	80064b4 <_dtoa_r+0x79c>
 8006836:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006838:	9308      	str	r3, [sp, #32]
 800683a:	e653      	b.n	80064e4 <_dtoa_r+0x7cc>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	dc03      	bgt.n	800684a <_dtoa_r+0xb32>
 8006842:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006844:	2b02      	cmp	r3, #2
 8006846:	f73f aed5 	bgt.w	80065f4 <_dtoa_r+0x8dc>
 800684a:	9d06      	ldr	r5, [sp, #24]
 800684c:	4631      	mov	r1, r6
 800684e:	4658      	mov	r0, fp
 8006850:	f7ff f9d4 	bl	8005bfc <quorem>
 8006854:	9b06      	ldr	r3, [sp, #24]
 8006856:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800685a:	f805 8b01 	strb.w	r8, [r5], #1
 800685e:	9a04      	ldr	r2, [sp, #16]
 8006860:	1aeb      	subs	r3, r5, r3
 8006862:	429a      	cmp	r2, r3
 8006864:	ddb5      	ble.n	80067d2 <_dtoa_r+0xaba>
 8006866:	4659      	mov	r1, fp
 8006868:	2300      	movs	r3, #0
 800686a:	220a      	movs	r2, #10
 800686c:	4620      	mov	r0, r4
 800686e:	f000 f881 	bl	8006974 <__multadd>
 8006872:	4683      	mov	fp, r0
 8006874:	e7ea      	b.n	800684c <_dtoa_r+0xb34>
 8006876:	bf00      	nop
 8006878:	080076b4 	.word	0x080076b4
 800687c:	080076d8 	.word	0x080076d8

08006880 <_localeconv_r>:
 8006880:	4b04      	ldr	r3, [pc, #16]	; (8006894 <_localeconv_r+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6a18      	ldr	r0, [r3, #32]
 8006886:	4b04      	ldr	r3, [pc, #16]	; (8006898 <_localeconv_r+0x18>)
 8006888:	2800      	cmp	r0, #0
 800688a:	bf08      	it	eq
 800688c:	4618      	moveq	r0, r3
 800688e:	30f0      	adds	r0, #240	; 0xf0
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	20000018 	.word	0x20000018
 8006898:	2000007c 	.word	0x2000007c

0800689c <malloc>:
 800689c:	4b02      	ldr	r3, [pc, #8]	; (80068a8 <malloc+0xc>)
 800689e:	4601      	mov	r1, r0
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	f000 bb53 	b.w	8006f4c <_malloc_r>
 80068a6:	bf00      	nop
 80068a8:	20000018 	.word	0x20000018

080068ac <memchr>:
 80068ac:	b510      	push	{r4, lr}
 80068ae:	b2c9      	uxtb	r1, r1
 80068b0:	4402      	add	r2, r0
 80068b2:	4290      	cmp	r0, r2
 80068b4:	4603      	mov	r3, r0
 80068b6:	d101      	bne.n	80068bc <memchr+0x10>
 80068b8:	2300      	movs	r3, #0
 80068ba:	e003      	b.n	80068c4 <memchr+0x18>
 80068bc:	781c      	ldrb	r4, [r3, #0]
 80068be:	3001      	adds	r0, #1
 80068c0:	428c      	cmp	r4, r1
 80068c2:	d1f6      	bne.n	80068b2 <memchr+0x6>
 80068c4:	4618      	mov	r0, r3
 80068c6:	bd10      	pop	{r4, pc}

080068c8 <memcpy>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	1e43      	subs	r3, r0, #1
 80068cc:	440a      	add	r2, r1
 80068ce:	4291      	cmp	r1, r2
 80068d0:	d100      	bne.n	80068d4 <memcpy+0xc>
 80068d2:	bd10      	pop	{r4, pc}
 80068d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068dc:	e7f7      	b.n	80068ce <memcpy+0x6>

080068de <_Balloc>:
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80068e2:	4604      	mov	r4, r0
 80068e4:	460e      	mov	r6, r1
 80068e6:	b93d      	cbnz	r5, 80068f8 <_Balloc+0x1a>
 80068e8:	2010      	movs	r0, #16
 80068ea:	f7ff ffd7 	bl	800689c <malloc>
 80068ee:	6260      	str	r0, [r4, #36]	; 0x24
 80068f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80068f4:	6005      	str	r5, [r0, #0]
 80068f6:	60c5      	str	r5, [r0, #12]
 80068f8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80068fa:	68eb      	ldr	r3, [r5, #12]
 80068fc:	b183      	cbz	r3, 8006920 <_Balloc+0x42>
 80068fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006906:	b9b8      	cbnz	r0, 8006938 <_Balloc+0x5a>
 8006908:	2101      	movs	r1, #1
 800690a:	fa01 f506 	lsl.w	r5, r1, r6
 800690e:	1d6a      	adds	r2, r5, #5
 8006910:	0092      	lsls	r2, r2, #2
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fabf 	bl	8006e96 <_calloc_r>
 8006918:	b160      	cbz	r0, 8006934 <_Balloc+0x56>
 800691a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800691e:	e00e      	b.n	800693e <_Balloc+0x60>
 8006920:	2221      	movs	r2, #33	; 0x21
 8006922:	2104      	movs	r1, #4
 8006924:	4620      	mov	r0, r4
 8006926:	f000 fab6 	bl	8006e96 <_calloc_r>
 800692a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800692c:	60e8      	str	r0, [r5, #12]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e4      	bne.n	80068fe <_Balloc+0x20>
 8006934:	2000      	movs	r0, #0
 8006936:	bd70      	pop	{r4, r5, r6, pc}
 8006938:	6802      	ldr	r2, [r0, #0]
 800693a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800693e:	2300      	movs	r3, #0
 8006940:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006944:	e7f7      	b.n	8006936 <_Balloc+0x58>

08006946 <_Bfree>:
 8006946:	b570      	push	{r4, r5, r6, lr}
 8006948:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800694a:	4606      	mov	r6, r0
 800694c:	460d      	mov	r5, r1
 800694e:	b93c      	cbnz	r4, 8006960 <_Bfree+0x1a>
 8006950:	2010      	movs	r0, #16
 8006952:	f7ff ffa3 	bl	800689c <malloc>
 8006956:	6270      	str	r0, [r6, #36]	; 0x24
 8006958:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800695c:	6004      	str	r4, [r0, #0]
 800695e:	60c4      	str	r4, [r0, #12]
 8006960:	b13d      	cbz	r5, 8006972 <_Bfree+0x2c>
 8006962:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006964:	686a      	ldr	r2, [r5, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800696c:	6029      	str	r1, [r5, #0]
 800696e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006972:	bd70      	pop	{r4, r5, r6, pc}

08006974 <__multadd>:
 8006974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006978:	461f      	mov	r7, r3
 800697a:	4606      	mov	r6, r0
 800697c:	460c      	mov	r4, r1
 800697e:	2300      	movs	r3, #0
 8006980:	690d      	ldr	r5, [r1, #16]
 8006982:	f101 0c14 	add.w	ip, r1, #20
 8006986:	f8dc 0000 	ldr.w	r0, [ip]
 800698a:	3301      	adds	r3, #1
 800698c:	b281      	uxth	r1, r0
 800698e:	fb02 7101 	mla	r1, r2, r1, r7
 8006992:	0c00      	lsrs	r0, r0, #16
 8006994:	0c0f      	lsrs	r7, r1, #16
 8006996:	fb02 7000 	mla	r0, r2, r0, r7
 800699a:	b289      	uxth	r1, r1
 800699c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80069a0:	429d      	cmp	r5, r3
 80069a2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80069a6:	f84c 1b04 	str.w	r1, [ip], #4
 80069aa:	dcec      	bgt.n	8006986 <__multadd+0x12>
 80069ac:	b1d7      	cbz	r7, 80069e4 <__multadd+0x70>
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	42ab      	cmp	r3, r5
 80069b2:	dc12      	bgt.n	80069da <__multadd+0x66>
 80069b4:	6861      	ldr	r1, [r4, #4]
 80069b6:	4630      	mov	r0, r6
 80069b8:	3101      	adds	r1, #1
 80069ba:	f7ff ff90 	bl	80068de <_Balloc>
 80069be:	4680      	mov	r8, r0
 80069c0:	6922      	ldr	r2, [r4, #16]
 80069c2:	f104 010c 	add.w	r1, r4, #12
 80069c6:	3202      	adds	r2, #2
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	300c      	adds	r0, #12
 80069cc:	f7ff ff7c 	bl	80068c8 <memcpy>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ffb7 	bl	8006946 <_Bfree>
 80069d8:	4644      	mov	r4, r8
 80069da:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069de:	3501      	adds	r5, #1
 80069e0:	615f      	str	r7, [r3, #20]
 80069e2:	6125      	str	r5, [r4, #16]
 80069e4:	4620      	mov	r0, r4
 80069e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080069ea <__hi0bits>:
 80069ea:	0c02      	lsrs	r2, r0, #16
 80069ec:	0412      	lsls	r2, r2, #16
 80069ee:	4603      	mov	r3, r0
 80069f0:	b9b2      	cbnz	r2, 8006a20 <__hi0bits+0x36>
 80069f2:	0403      	lsls	r3, r0, #16
 80069f4:	2010      	movs	r0, #16
 80069f6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80069fa:	bf04      	itt	eq
 80069fc:	021b      	lsleq	r3, r3, #8
 80069fe:	3008      	addeq	r0, #8
 8006a00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006a04:	bf04      	itt	eq
 8006a06:	011b      	lsleq	r3, r3, #4
 8006a08:	3004      	addeq	r0, #4
 8006a0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006a0e:	bf04      	itt	eq
 8006a10:	009b      	lsleq	r3, r3, #2
 8006a12:	3002      	addeq	r0, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	db06      	blt.n	8006a26 <__hi0bits+0x3c>
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	d503      	bpl.n	8006a24 <__hi0bits+0x3a>
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	4770      	bx	lr
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7e8      	b.n	80069f6 <__hi0bits+0xc>
 8006a24:	2020      	movs	r0, #32
 8006a26:	4770      	bx	lr

08006a28 <__lo0bits>:
 8006a28:	6803      	ldr	r3, [r0, #0]
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	f013 0207 	ands.w	r2, r3, #7
 8006a30:	d00b      	beq.n	8006a4a <__lo0bits+0x22>
 8006a32:	07da      	lsls	r2, r3, #31
 8006a34:	d423      	bmi.n	8006a7e <__lo0bits+0x56>
 8006a36:	0798      	lsls	r0, r3, #30
 8006a38:	bf49      	itett	mi
 8006a3a:	085b      	lsrmi	r3, r3, #1
 8006a3c:	089b      	lsrpl	r3, r3, #2
 8006a3e:	2001      	movmi	r0, #1
 8006a40:	600b      	strmi	r3, [r1, #0]
 8006a42:	bf5c      	itt	pl
 8006a44:	600b      	strpl	r3, [r1, #0]
 8006a46:	2002      	movpl	r0, #2
 8006a48:	4770      	bx	lr
 8006a4a:	b298      	uxth	r0, r3
 8006a4c:	b9a8      	cbnz	r0, 8006a7a <__lo0bits+0x52>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a56:	bf04      	itt	eq
 8006a58:	0a1b      	lsreq	r3, r3, #8
 8006a5a:	3008      	addeq	r0, #8
 8006a5c:	071a      	lsls	r2, r3, #28
 8006a5e:	bf04      	itt	eq
 8006a60:	091b      	lsreq	r3, r3, #4
 8006a62:	3004      	addeq	r0, #4
 8006a64:	079a      	lsls	r2, r3, #30
 8006a66:	bf04      	itt	eq
 8006a68:	089b      	lsreq	r3, r3, #2
 8006a6a:	3002      	addeq	r0, #2
 8006a6c:	07da      	lsls	r2, r3, #31
 8006a6e:	d402      	bmi.n	8006a76 <__lo0bits+0x4e>
 8006a70:	085b      	lsrs	r3, r3, #1
 8006a72:	d006      	beq.n	8006a82 <__lo0bits+0x5a>
 8006a74:	3001      	adds	r0, #1
 8006a76:	600b      	str	r3, [r1, #0]
 8006a78:	4770      	bx	lr
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	e7e9      	b.n	8006a52 <__lo0bits+0x2a>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	4770      	bx	lr
 8006a82:	2020      	movs	r0, #32
 8006a84:	4770      	bx	lr

08006a86 <__i2b>:
 8006a86:	b510      	push	{r4, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	f7ff ff27 	bl	80068de <_Balloc>
 8006a90:	2201      	movs	r2, #1
 8006a92:	6144      	str	r4, [r0, #20]
 8006a94:	6102      	str	r2, [r0, #16]
 8006a96:	bd10      	pop	{r4, pc}

08006a98 <__multiply>:
 8006a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	690a      	ldr	r2, [r1, #16]
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	4688      	mov	r8, r1
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	bfbe      	ittt	lt
 8006aa8:	460b      	movlt	r3, r1
 8006aaa:	46a0      	movlt	r8, r4
 8006aac:	461c      	movlt	r4, r3
 8006aae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006ab2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ab6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006aba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006abe:	eb07 0609 	add.w	r6, r7, r9
 8006ac2:	42b3      	cmp	r3, r6
 8006ac4:	bfb8      	it	lt
 8006ac6:	3101      	addlt	r1, #1
 8006ac8:	f7ff ff09 	bl	80068de <_Balloc>
 8006acc:	f100 0514 	add.w	r5, r0, #20
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006ad8:	4573      	cmp	r3, lr
 8006ada:	d316      	bcc.n	8006b0a <__multiply+0x72>
 8006adc:	f104 0214 	add.w	r2, r4, #20
 8006ae0:	f108 0114 	add.w	r1, r8, #20
 8006ae4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006ae8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	9b00      	ldr	r3, [sp, #0]
 8006af0:	9201      	str	r2, [sp, #4]
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d80c      	bhi.n	8006b10 <__multiply+0x78>
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	dd03      	ble.n	8006b02 <__multiply+0x6a>
 8006afa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05d      	beq.n	8006bbe <__multiply+0x126>
 8006b02:	6106      	str	r6, [r0, #16]
 8006b04:	b003      	add	sp, #12
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	f843 2b04 	str.w	r2, [r3], #4
 8006b0e:	e7e3      	b.n	8006ad8 <__multiply+0x40>
 8006b10:	f8b2 b000 	ldrh.w	fp, [r2]
 8006b14:	f1bb 0f00 	cmp.w	fp, #0
 8006b18:	d023      	beq.n	8006b62 <__multiply+0xca>
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	46ac      	mov	ip, r5
 8006b1e:	f04f 0800 	mov.w	r8, #0
 8006b22:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b26:	f8dc a000 	ldr.w	sl, [ip]
 8006b2a:	b2a3      	uxth	r3, r4
 8006b2c:	fa1f fa8a 	uxth.w	sl, sl
 8006b30:	fb0b a303 	mla	r3, fp, r3, sl
 8006b34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006b38:	f8dc 4000 	ldr.w	r4, [ip]
 8006b3c:	4443      	add	r3, r8
 8006b3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006b42:	fb0b 840a 	mla	r4, fp, sl, r8
 8006b46:	46e2      	mov	sl, ip
 8006b48:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b52:	454f      	cmp	r7, r9
 8006b54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006b58:	f84a 3b04 	str.w	r3, [sl], #4
 8006b5c:	d82b      	bhi.n	8006bb6 <__multiply+0x11e>
 8006b5e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006b62:	9b01      	ldr	r3, [sp, #4]
 8006b64:	3204      	adds	r2, #4
 8006b66:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006b6a:	f1ba 0f00 	cmp.w	sl, #0
 8006b6e:	d020      	beq.n	8006bb2 <__multiply+0x11a>
 8006b70:	4689      	mov	r9, r1
 8006b72:	46a8      	mov	r8, r5
 8006b74:	f04f 0b00 	mov.w	fp, #0
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	f8b9 c000 	ldrh.w	ip, [r9]
 8006b7e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	fb0a 440c 	mla	r4, sl, ip, r4
 8006b88:	46c4      	mov	ip, r8
 8006b8a:	445c      	add	r4, fp
 8006b8c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006b90:	f84c 3b04 	str.w	r3, [ip], #4
 8006b94:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b98:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006b9c:	0c1b      	lsrs	r3, r3, #16
 8006b9e:	fb0a b303 	mla	r3, sl, r3, fp
 8006ba2:	454f      	cmp	r7, r9
 8006ba4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006ba8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006bac:	d805      	bhi.n	8006bba <__multiply+0x122>
 8006bae:	f8c8 3004 	str.w	r3, [r8, #4]
 8006bb2:	3504      	adds	r5, #4
 8006bb4:	e79b      	b.n	8006aee <__multiply+0x56>
 8006bb6:	46d4      	mov	ip, sl
 8006bb8:	e7b3      	b.n	8006b22 <__multiply+0x8a>
 8006bba:	46e0      	mov	r8, ip
 8006bbc:	e7dd      	b.n	8006b7a <__multiply+0xe2>
 8006bbe:	3e01      	subs	r6, #1
 8006bc0:	e799      	b.n	8006af6 <__multiply+0x5e>
	...

08006bc4 <__pow5mult>:
 8006bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	4615      	mov	r5, r2
 8006bca:	f012 0203 	ands.w	r2, r2, #3
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	d007      	beq.n	8006be4 <__pow5mult+0x20>
 8006bd4:	4c21      	ldr	r4, [pc, #132]	; (8006c5c <__pow5mult+0x98>)
 8006bd6:	3a01      	subs	r2, #1
 8006bd8:	2300      	movs	r3, #0
 8006bda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bde:	f7ff fec9 	bl	8006974 <__multadd>
 8006be2:	4607      	mov	r7, r0
 8006be4:	10ad      	asrs	r5, r5, #2
 8006be6:	d035      	beq.n	8006c54 <__pow5mult+0x90>
 8006be8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006bea:	b93c      	cbnz	r4, 8006bfc <__pow5mult+0x38>
 8006bec:	2010      	movs	r0, #16
 8006bee:	f7ff fe55 	bl	800689c <malloc>
 8006bf2:	6270      	str	r0, [r6, #36]	; 0x24
 8006bf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bf8:	6004      	str	r4, [r0, #0]
 8006bfa:	60c4      	str	r4, [r0, #12]
 8006bfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c04:	b94c      	cbnz	r4, 8006c1a <__pow5mult+0x56>
 8006c06:	f240 2171 	movw	r1, #625	; 0x271
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f7ff ff3b 	bl	8006a86 <__i2b>
 8006c10:	2300      	movs	r3, #0
 8006c12:	4604      	mov	r4, r0
 8006c14:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c18:	6003      	str	r3, [r0, #0]
 8006c1a:	f04f 0800 	mov.w	r8, #0
 8006c1e:	07eb      	lsls	r3, r5, #31
 8006c20:	d50a      	bpl.n	8006c38 <__pow5mult+0x74>
 8006c22:	4639      	mov	r1, r7
 8006c24:	4622      	mov	r2, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ff36 	bl	8006a98 <__multiply>
 8006c2c:	4681      	mov	r9, r0
 8006c2e:	4639      	mov	r1, r7
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fe88 	bl	8006946 <_Bfree>
 8006c36:	464f      	mov	r7, r9
 8006c38:	106d      	asrs	r5, r5, #1
 8006c3a:	d00b      	beq.n	8006c54 <__pow5mult+0x90>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	b938      	cbnz	r0, 8006c50 <__pow5mult+0x8c>
 8006c40:	4622      	mov	r2, r4
 8006c42:	4621      	mov	r1, r4
 8006c44:	4630      	mov	r0, r6
 8006c46:	f7ff ff27 	bl	8006a98 <__multiply>
 8006c4a:	6020      	str	r0, [r4, #0]
 8006c4c:	f8c0 8000 	str.w	r8, [r0]
 8006c50:	4604      	mov	r4, r0
 8006c52:	e7e4      	b.n	8006c1e <__pow5mult+0x5a>
 8006c54:	4638      	mov	r0, r7
 8006c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5a:	bf00      	nop
 8006c5c:	080077d8 	.word	0x080077d8

08006c60 <__lshift>:
 8006c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c64:	460c      	mov	r4, r1
 8006c66:	4607      	mov	r7, r0
 8006c68:	4616      	mov	r6, r2
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c70:	eb0a 0903 	add.w	r9, sl, r3
 8006c74:	6849      	ldr	r1, [r1, #4]
 8006c76:	68a3      	ldr	r3, [r4, #8]
 8006c78:	f109 0501 	add.w	r5, r9, #1
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	db32      	blt.n	8006ce6 <__lshift+0x86>
 8006c80:	4638      	mov	r0, r7
 8006c82:	f7ff fe2c 	bl	80068de <_Balloc>
 8006c86:	2300      	movs	r3, #0
 8006c88:	4680      	mov	r8, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f100 0114 	add.w	r1, r0, #20
 8006c90:	4553      	cmp	r3, sl
 8006c92:	db2b      	blt.n	8006cec <__lshift+0x8c>
 8006c94:	6920      	ldr	r0, [r4, #16]
 8006c96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c9a:	f104 0314 	add.w	r3, r4, #20
 8006c9e:	f016 021f 	ands.w	r2, r6, #31
 8006ca2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ca6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006caa:	d025      	beq.n	8006cf8 <__lshift+0x98>
 8006cac:	2000      	movs	r0, #0
 8006cae:	f1c2 0e20 	rsb	lr, r2, #32
 8006cb2:	468a      	mov	sl, r1
 8006cb4:	681e      	ldr	r6, [r3, #0]
 8006cb6:	4096      	lsls	r6, r2
 8006cb8:	4330      	orrs	r0, r6
 8006cba:	f84a 0b04 	str.w	r0, [sl], #4
 8006cbe:	f853 0b04 	ldr.w	r0, [r3], #4
 8006cc2:	459c      	cmp	ip, r3
 8006cc4:	fa20 f00e 	lsr.w	r0, r0, lr
 8006cc8:	d814      	bhi.n	8006cf4 <__lshift+0x94>
 8006cca:	6048      	str	r0, [r1, #4]
 8006ccc:	b108      	cbz	r0, 8006cd2 <__lshift+0x72>
 8006cce:	f109 0502 	add.w	r5, r9, #2
 8006cd2:	3d01      	subs	r5, #1
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	f8c8 5010 	str.w	r5, [r8, #16]
 8006cda:	4621      	mov	r1, r4
 8006cdc:	f7ff fe33 	bl	8006946 <_Bfree>
 8006ce0:	4640      	mov	r0, r8
 8006ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce6:	3101      	adds	r1, #1
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	e7c7      	b.n	8006c7c <__lshift+0x1c>
 8006cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	e7cd      	b.n	8006c90 <__lshift+0x30>
 8006cf4:	4651      	mov	r1, sl
 8006cf6:	e7dc      	b.n	8006cb2 <__lshift+0x52>
 8006cf8:	3904      	subs	r1, #4
 8006cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cfe:	459c      	cmp	ip, r3
 8006d00:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d04:	d8f9      	bhi.n	8006cfa <__lshift+0x9a>
 8006d06:	e7e4      	b.n	8006cd2 <__lshift+0x72>

08006d08 <__mcmp>:
 8006d08:	6903      	ldr	r3, [r0, #16]
 8006d0a:	690a      	ldr	r2, [r1, #16]
 8006d0c:	b530      	push	{r4, r5, lr}
 8006d0e:	1a9b      	subs	r3, r3, r2
 8006d10:	d10c      	bne.n	8006d2c <__mcmp+0x24>
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	3014      	adds	r0, #20
 8006d16:	3114      	adds	r1, #20
 8006d18:	1884      	adds	r4, r0, r2
 8006d1a:	4411      	add	r1, r2
 8006d1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d24:	4295      	cmp	r5, r2
 8006d26:	d003      	beq.n	8006d30 <__mcmp+0x28>
 8006d28:	d305      	bcc.n	8006d36 <__mcmp+0x2e>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	bd30      	pop	{r4, r5, pc}
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d3f3      	bcc.n	8006d1c <__mcmp+0x14>
 8006d34:	e7fa      	b.n	8006d2c <__mcmp+0x24>
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d3a:	e7f7      	b.n	8006d2c <__mcmp+0x24>

08006d3c <__mdiff>:
 8006d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d40:	460d      	mov	r5, r1
 8006d42:	4607      	mov	r7, r0
 8006d44:	4611      	mov	r1, r2
 8006d46:	4628      	mov	r0, r5
 8006d48:	4614      	mov	r4, r2
 8006d4a:	f7ff ffdd 	bl	8006d08 <__mcmp>
 8006d4e:	1e06      	subs	r6, r0, #0
 8006d50:	d108      	bne.n	8006d64 <__mdiff+0x28>
 8006d52:	4631      	mov	r1, r6
 8006d54:	4638      	mov	r0, r7
 8006d56:	f7ff fdc2 	bl	80068de <_Balloc>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d64:	bfa4      	itt	ge
 8006d66:	4623      	movge	r3, r4
 8006d68:	462c      	movge	r4, r5
 8006d6a:	4638      	mov	r0, r7
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	bfa6      	itte	ge
 8006d70:	461d      	movge	r5, r3
 8006d72:	2600      	movge	r6, #0
 8006d74:	2601      	movlt	r6, #1
 8006d76:	f7ff fdb2 	bl	80068de <_Balloc>
 8006d7a:	f04f 0e00 	mov.w	lr, #0
 8006d7e:	60c6      	str	r6, [r0, #12]
 8006d80:	692b      	ldr	r3, [r5, #16]
 8006d82:	6926      	ldr	r6, [r4, #16]
 8006d84:	f104 0214 	add.w	r2, r4, #20
 8006d88:	f105 0914 	add.w	r9, r5, #20
 8006d8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006d90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006d94:	f100 0114 	add.w	r1, r0, #20
 8006d98:	f852 ab04 	ldr.w	sl, [r2], #4
 8006d9c:	f859 5b04 	ldr.w	r5, [r9], #4
 8006da0:	fa1f f38a 	uxth.w	r3, sl
 8006da4:	4473      	add	r3, lr
 8006da6:	b2ac      	uxth	r4, r5
 8006da8:	1b1b      	subs	r3, r3, r4
 8006daa:	0c2c      	lsrs	r4, r5, #16
 8006dac:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006db0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006dba:	45c8      	cmp	r8, r9
 8006dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006dc0:	4694      	mov	ip, r2
 8006dc2:	f841 4b04 	str.w	r4, [r1], #4
 8006dc6:	d8e7      	bhi.n	8006d98 <__mdiff+0x5c>
 8006dc8:	45bc      	cmp	ip, r7
 8006dca:	d304      	bcc.n	8006dd6 <__mdiff+0x9a>
 8006dcc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006dd0:	b183      	cbz	r3, 8006df4 <__mdiff+0xb8>
 8006dd2:	6106      	str	r6, [r0, #16]
 8006dd4:	e7c4      	b.n	8006d60 <__mdiff+0x24>
 8006dd6:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006dda:	b2a2      	uxth	r2, r4
 8006ddc:	4472      	add	r2, lr
 8006dde:	1413      	asrs	r3, r2, #16
 8006de0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006de4:	b292      	uxth	r2, r2
 8006de6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dea:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006dee:	f841 2b04 	str.w	r2, [r1], #4
 8006df2:	e7e9      	b.n	8006dc8 <__mdiff+0x8c>
 8006df4:	3e01      	subs	r6, #1
 8006df6:	e7e9      	b.n	8006dcc <__mdiff+0x90>

08006df8 <__d2b>:
 8006df8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006dfc:	461c      	mov	r4, r3
 8006dfe:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006e02:	2101      	movs	r1, #1
 8006e04:	4690      	mov	r8, r2
 8006e06:	f7ff fd6a 	bl	80068de <_Balloc>
 8006e0a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006e0e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006e12:	4607      	mov	r7, r0
 8006e14:	bb34      	cbnz	r4, 8006e64 <__d2b+0x6c>
 8006e16:	9201      	str	r2, [sp, #4]
 8006e18:	f1b8 0200 	subs.w	r2, r8, #0
 8006e1c:	d027      	beq.n	8006e6e <__d2b+0x76>
 8006e1e:	a802      	add	r0, sp, #8
 8006e20:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006e24:	f7ff fe00 	bl	8006a28 <__lo0bits>
 8006e28:	9900      	ldr	r1, [sp, #0]
 8006e2a:	b1f0      	cbz	r0, 8006e6a <__d2b+0x72>
 8006e2c:	9a01      	ldr	r2, [sp, #4]
 8006e2e:	f1c0 0320 	rsb	r3, r0, #32
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	430b      	orrs	r3, r1
 8006e38:	40c2      	lsrs	r2, r0
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf14      	ite	ne
 8006e44:	2102      	movne	r1, #2
 8006e46:	2101      	moveq	r1, #1
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	6139      	str	r1, [r7, #16]
 8006e4c:	b1c4      	cbz	r4, 8006e80 <__d2b+0x88>
 8006e4e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006e52:	4404      	add	r4, r0
 8006e54:	6034      	str	r4, [r6, #0]
 8006e56:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e5a:	6028      	str	r0, [r5, #0]
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	b002      	add	sp, #8
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e68:	e7d5      	b.n	8006e16 <__d2b+0x1e>
 8006e6a:	6179      	str	r1, [r7, #20]
 8006e6c:	e7e7      	b.n	8006e3e <__d2b+0x46>
 8006e6e:	a801      	add	r0, sp, #4
 8006e70:	f7ff fdda 	bl	8006a28 <__lo0bits>
 8006e74:	2101      	movs	r1, #1
 8006e76:	9b01      	ldr	r3, [sp, #4]
 8006e78:	6139      	str	r1, [r7, #16]
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	3020      	adds	r0, #32
 8006e7e:	e7e5      	b.n	8006e4c <__d2b+0x54>
 8006e80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e84:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006e88:	6030      	str	r0, [r6, #0]
 8006e8a:	6918      	ldr	r0, [r3, #16]
 8006e8c:	f7ff fdad 	bl	80069ea <__hi0bits>
 8006e90:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006e94:	e7e1      	b.n	8006e5a <__d2b+0x62>

08006e96 <_calloc_r>:
 8006e96:	b538      	push	{r3, r4, r5, lr}
 8006e98:	fb02 f401 	mul.w	r4, r2, r1
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	f000 f855 	bl	8006f4c <_malloc_r>
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	b118      	cbz	r0, 8006eae <_calloc_r+0x18>
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f7fe fa2f 	bl	800530c <memset>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	bd38      	pop	{r3, r4, r5, pc}
	...

08006eb4 <_free_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	2900      	cmp	r1, #0
 8006eba:	d043      	beq.n	8006f44 <_free_r+0x90>
 8006ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec0:	1f0c      	subs	r4, r1, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfb8      	it	lt
 8006ec6:	18e4      	addlt	r4, r4, r3
 8006ec8:	f000 fa27 	bl	800731a <__malloc_lock>
 8006ecc:	4a1e      	ldr	r2, [pc, #120]	; (8006f48 <_free_r+0x94>)
 8006ece:	6813      	ldr	r3, [r2, #0]
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	b933      	cbnz	r3, 8006ee2 <_free_r+0x2e>
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	6014      	str	r4, [r2, #0]
 8006ed8:	4628      	mov	r0, r5
 8006eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ede:	f000 ba1d 	b.w	800731c <__malloc_unlock>
 8006ee2:	42a3      	cmp	r3, r4
 8006ee4:	d90b      	bls.n	8006efe <_free_r+0x4a>
 8006ee6:	6821      	ldr	r1, [r4, #0]
 8006ee8:	1862      	adds	r2, r4, r1
 8006eea:	4293      	cmp	r3, r2
 8006eec:	bf01      	itttt	eq
 8006eee:	681a      	ldreq	r2, [r3, #0]
 8006ef0:	685b      	ldreq	r3, [r3, #4]
 8006ef2:	1852      	addeq	r2, r2, r1
 8006ef4:	6022      	streq	r2, [r4, #0]
 8006ef6:	6063      	str	r3, [r4, #4]
 8006ef8:	6004      	str	r4, [r0, #0]
 8006efa:	e7ed      	b.n	8006ed8 <_free_r+0x24>
 8006efc:	4613      	mov	r3, r2
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	b10a      	cbz	r2, 8006f06 <_free_r+0x52>
 8006f02:	42a2      	cmp	r2, r4
 8006f04:	d9fa      	bls.n	8006efc <_free_r+0x48>
 8006f06:	6819      	ldr	r1, [r3, #0]
 8006f08:	1858      	adds	r0, r3, r1
 8006f0a:	42a0      	cmp	r0, r4
 8006f0c:	d10b      	bne.n	8006f26 <_free_r+0x72>
 8006f0e:	6820      	ldr	r0, [r4, #0]
 8006f10:	4401      	add	r1, r0
 8006f12:	1858      	adds	r0, r3, r1
 8006f14:	4282      	cmp	r2, r0
 8006f16:	6019      	str	r1, [r3, #0]
 8006f18:	d1de      	bne.n	8006ed8 <_free_r+0x24>
 8006f1a:	6810      	ldr	r0, [r2, #0]
 8006f1c:	6852      	ldr	r2, [r2, #4]
 8006f1e:	4401      	add	r1, r0
 8006f20:	6019      	str	r1, [r3, #0]
 8006f22:	605a      	str	r2, [r3, #4]
 8006f24:	e7d8      	b.n	8006ed8 <_free_r+0x24>
 8006f26:	d902      	bls.n	8006f2e <_free_r+0x7a>
 8006f28:	230c      	movs	r3, #12
 8006f2a:	602b      	str	r3, [r5, #0]
 8006f2c:	e7d4      	b.n	8006ed8 <_free_r+0x24>
 8006f2e:	6820      	ldr	r0, [r4, #0]
 8006f30:	1821      	adds	r1, r4, r0
 8006f32:	428a      	cmp	r2, r1
 8006f34:	bf01      	itttt	eq
 8006f36:	6811      	ldreq	r1, [r2, #0]
 8006f38:	6852      	ldreq	r2, [r2, #4]
 8006f3a:	1809      	addeq	r1, r1, r0
 8006f3c:	6021      	streq	r1, [r4, #0]
 8006f3e:	6062      	str	r2, [r4, #4]
 8006f40:	605c      	str	r4, [r3, #4]
 8006f42:	e7c9      	b.n	8006ed8 <_free_r+0x24>
 8006f44:	bd38      	pop	{r3, r4, r5, pc}
 8006f46:	bf00      	nop
 8006f48:	2000023c 	.word	0x2000023c

08006f4c <_malloc_r>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	1ccd      	adds	r5, r1, #3
 8006f50:	f025 0503 	bic.w	r5, r5, #3
 8006f54:	3508      	adds	r5, #8
 8006f56:	2d0c      	cmp	r5, #12
 8006f58:	bf38      	it	cc
 8006f5a:	250c      	movcc	r5, #12
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	db01      	blt.n	8006f66 <_malloc_r+0x1a>
 8006f62:	42a9      	cmp	r1, r5
 8006f64:	d903      	bls.n	8006f6e <_malloc_r+0x22>
 8006f66:	230c      	movs	r3, #12
 8006f68:	6033      	str	r3, [r6, #0]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	bd70      	pop	{r4, r5, r6, pc}
 8006f6e:	f000 f9d4 	bl	800731a <__malloc_lock>
 8006f72:	4a21      	ldr	r2, [pc, #132]	; (8006ff8 <_malloc_r+0xac>)
 8006f74:	6814      	ldr	r4, [r2, #0]
 8006f76:	4621      	mov	r1, r4
 8006f78:	b991      	cbnz	r1, 8006fa0 <_malloc_r+0x54>
 8006f7a:	4c20      	ldr	r4, [pc, #128]	; (8006ffc <_malloc_r+0xb0>)
 8006f7c:	6823      	ldr	r3, [r4, #0]
 8006f7e:	b91b      	cbnz	r3, 8006f88 <_malloc_r+0x3c>
 8006f80:	4630      	mov	r0, r6
 8006f82:	f000 f98f 	bl	80072a4 <_sbrk_r>
 8006f86:	6020      	str	r0, [r4, #0]
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4630      	mov	r0, r6
 8006f8c:	f000 f98a 	bl	80072a4 <_sbrk_r>
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d124      	bne.n	8006fde <_malloc_r+0x92>
 8006f94:	230c      	movs	r3, #12
 8006f96:	4630      	mov	r0, r6
 8006f98:	6033      	str	r3, [r6, #0]
 8006f9a:	f000 f9bf 	bl	800731c <__malloc_unlock>
 8006f9e:	e7e4      	b.n	8006f6a <_malloc_r+0x1e>
 8006fa0:	680b      	ldr	r3, [r1, #0]
 8006fa2:	1b5b      	subs	r3, r3, r5
 8006fa4:	d418      	bmi.n	8006fd8 <_malloc_r+0x8c>
 8006fa6:	2b0b      	cmp	r3, #11
 8006fa8:	d90f      	bls.n	8006fca <_malloc_r+0x7e>
 8006faa:	600b      	str	r3, [r1, #0]
 8006fac:	18cc      	adds	r4, r1, r3
 8006fae:	50cd      	str	r5, [r1, r3]
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	f000 f9b3 	bl	800731c <__malloc_unlock>
 8006fb6:	f104 000b 	add.w	r0, r4, #11
 8006fba:	1d23      	adds	r3, r4, #4
 8006fbc:	f020 0007 	bic.w	r0, r0, #7
 8006fc0:	1ac3      	subs	r3, r0, r3
 8006fc2:	d0d3      	beq.n	8006f6c <_malloc_r+0x20>
 8006fc4:	425a      	negs	r2, r3
 8006fc6:	50e2      	str	r2, [r4, r3]
 8006fc8:	e7d0      	b.n	8006f6c <_malloc_r+0x20>
 8006fca:	684b      	ldr	r3, [r1, #4]
 8006fcc:	428c      	cmp	r4, r1
 8006fce:	bf16      	itet	ne
 8006fd0:	6063      	strne	r3, [r4, #4]
 8006fd2:	6013      	streq	r3, [r2, #0]
 8006fd4:	460c      	movne	r4, r1
 8006fd6:	e7eb      	b.n	8006fb0 <_malloc_r+0x64>
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6849      	ldr	r1, [r1, #4]
 8006fdc:	e7cc      	b.n	8006f78 <_malloc_r+0x2c>
 8006fde:	1cc4      	adds	r4, r0, #3
 8006fe0:	f024 0403 	bic.w	r4, r4, #3
 8006fe4:	42a0      	cmp	r0, r4
 8006fe6:	d005      	beq.n	8006ff4 <_malloc_r+0xa8>
 8006fe8:	1a21      	subs	r1, r4, r0
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f95a 	bl	80072a4 <_sbrk_r>
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d0cf      	beq.n	8006f94 <_malloc_r+0x48>
 8006ff4:	6025      	str	r5, [r4, #0]
 8006ff6:	e7db      	b.n	8006fb0 <_malloc_r+0x64>
 8006ff8:	2000023c 	.word	0x2000023c
 8006ffc:	20000240 	.word	0x20000240

08007000 <__ssputs_r>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	688e      	ldr	r6, [r1, #8]
 8007006:	4682      	mov	sl, r0
 8007008:	429e      	cmp	r6, r3
 800700a:	460c      	mov	r4, r1
 800700c:	4690      	mov	r8, r2
 800700e:	4699      	mov	r9, r3
 8007010:	d837      	bhi.n	8007082 <__ssputs_r+0x82>
 8007012:	898a      	ldrh	r2, [r1, #12]
 8007014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007018:	d031      	beq.n	800707e <__ssputs_r+0x7e>
 800701a:	2302      	movs	r3, #2
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	6909      	ldr	r1, [r1, #16]
 8007020:	1a6f      	subs	r7, r5, r1
 8007022:	6965      	ldr	r5, [r4, #20]
 8007024:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007028:	fb95 f5f3 	sdiv	r5, r5, r3
 800702c:	f109 0301 	add.w	r3, r9, #1
 8007030:	443b      	add	r3, r7
 8007032:	429d      	cmp	r5, r3
 8007034:	bf38      	it	cc
 8007036:	461d      	movcc	r5, r3
 8007038:	0553      	lsls	r3, r2, #21
 800703a:	d530      	bpl.n	800709e <__ssputs_r+0x9e>
 800703c:	4629      	mov	r1, r5
 800703e:	f7ff ff85 	bl	8006f4c <_malloc_r>
 8007042:	4606      	mov	r6, r0
 8007044:	b950      	cbnz	r0, 800705c <__ssputs_r+0x5c>
 8007046:	230c      	movs	r3, #12
 8007048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800704c:	f8ca 3000 	str.w	r3, [sl]
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705c:	463a      	mov	r2, r7
 800705e:	6921      	ldr	r1, [r4, #16]
 8007060:	f7ff fc32 	bl	80068c8 <memcpy>
 8007064:	89a3      	ldrh	r3, [r4, #12]
 8007066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800706a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706e:	81a3      	strh	r3, [r4, #12]
 8007070:	6126      	str	r6, [r4, #16]
 8007072:	443e      	add	r6, r7
 8007074:	6026      	str	r6, [r4, #0]
 8007076:	464e      	mov	r6, r9
 8007078:	6165      	str	r5, [r4, #20]
 800707a:	1bed      	subs	r5, r5, r7
 800707c:	60a5      	str	r5, [r4, #8]
 800707e:	454e      	cmp	r6, r9
 8007080:	d900      	bls.n	8007084 <__ssputs_r+0x84>
 8007082:	464e      	mov	r6, r9
 8007084:	4632      	mov	r2, r6
 8007086:	4641      	mov	r1, r8
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	f000 f92d 	bl	80072e8 <memmove>
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	2000      	movs	r0, #0
 8007092:	1b9b      	subs	r3, r3, r6
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	6823      	ldr	r3, [r4, #0]
 8007098:	441e      	add	r6, r3
 800709a:	6026      	str	r6, [r4, #0]
 800709c:	e7dc      	b.n	8007058 <__ssputs_r+0x58>
 800709e:	462a      	mov	r2, r5
 80070a0:	f000 f93d 	bl	800731e <_realloc_r>
 80070a4:	4606      	mov	r6, r0
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d1e2      	bne.n	8007070 <__ssputs_r+0x70>
 80070aa:	6921      	ldr	r1, [r4, #16]
 80070ac:	4650      	mov	r0, sl
 80070ae:	f7ff ff01 	bl	8006eb4 <_free_r>
 80070b2:	e7c8      	b.n	8007046 <__ssputs_r+0x46>

080070b4 <_svfiprintf_r>:
 80070b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	461d      	mov	r5, r3
 80070ba:	898b      	ldrh	r3, [r1, #12]
 80070bc:	b09d      	sub	sp, #116	; 0x74
 80070be:	061f      	lsls	r7, r3, #24
 80070c0:	4680      	mov	r8, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	4616      	mov	r6, r2
 80070c6:	d50f      	bpl.n	80070e8 <_svfiprintf_r+0x34>
 80070c8:	690b      	ldr	r3, [r1, #16]
 80070ca:	b96b      	cbnz	r3, 80070e8 <_svfiprintf_r+0x34>
 80070cc:	2140      	movs	r1, #64	; 0x40
 80070ce:	f7ff ff3d 	bl	8006f4c <_malloc_r>
 80070d2:	6020      	str	r0, [r4, #0]
 80070d4:	6120      	str	r0, [r4, #16]
 80070d6:	b928      	cbnz	r0, 80070e4 <_svfiprintf_r+0x30>
 80070d8:	230c      	movs	r3, #12
 80070da:	f8c8 3000 	str.w	r3, [r8]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e2:	e0c8      	b.n	8007276 <_svfiprintf_r+0x1c2>
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	6163      	str	r3, [r4, #20]
 80070e8:	2300      	movs	r3, #0
 80070ea:	9309      	str	r3, [sp, #36]	; 0x24
 80070ec:	2320      	movs	r3, #32
 80070ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070f2:	2330      	movs	r3, #48	; 0x30
 80070f4:	f04f 0b01 	mov.w	fp, #1
 80070f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070fc:	9503      	str	r5, [sp, #12]
 80070fe:	4637      	mov	r7, r6
 8007100:	463d      	mov	r5, r7
 8007102:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007106:	b10b      	cbz	r3, 800710c <_svfiprintf_r+0x58>
 8007108:	2b25      	cmp	r3, #37	; 0x25
 800710a:	d13e      	bne.n	800718a <_svfiprintf_r+0xd6>
 800710c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007110:	d00b      	beq.n	800712a <_svfiprintf_r+0x76>
 8007112:	4653      	mov	r3, sl
 8007114:	4632      	mov	r2, r6
 8007116:	4621      	mov	r1, r4
 8007118:	4640      	mov	r0, r8
 800711a:	f7ff ff71 	bl	8007000 <__ssputs_r>
 800711e:	3001      	adds	r0, #1
 8007120:	f000 80a4 	beq.w	800726c <_svfiprintf_r+0x1b8>
 8007124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007126:	4453      	add	r3, sl
 8007128:	9309      	str	r3, [sp, #36]	; 0x24
 800712a:	783b      	ldrb	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 809d 	beq.w	800726c <_svfiprintf_r+0x1b8>
 8007132:	2300      	movs	r3, #0
 8007134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007144:	931a      	str	r3, [sp, #104]	; 0x68
 8007146:	462f      	mov	r7, r5
 8007148:	2205      	movs	r2, #5
 800714a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800714e:	4850      	ldr	r0, [pc, #320]	; (8007290 <_svfiprintf_r+0x1dc>)
 8007150:	f7ff fbac 	bl	80068ac <memchr>
 8007154:	9b04      	ldr	r3, [sp, #16]
 8007156:	b9d0      	cbnz	r0, 800718e <_svfiprintf_r+0xda>
 8007158:	06d9      	lsls	r1, r3, #27
 800715a:	bf44      	itt	mi
 800715c:	2220      	movmi	r2, #32
 800715e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007162:	071a      	lsls	r2, r3, #28
 8007164:	bf44      	itt	mi
 8007166:	222b      	movmi	r2, #43	; 0x2b
 8007168:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800716c:	782a      	ldrb	r2, [r5, #0]
 800716e:	2a2a      	cmp	r2, #42	; 0x2a
 8007170:	d015      	beq.n	800719e <_svfiprintf_r+0xea>
 8007172:	462f      	mov	r7, r5
 8007174:	2000      	movs	r0, #0
 8007176:	250a      	movs	r5, #10
 8007178:	9a07      	ldr	r2, [sp, #28]
 800717a:	4639      	mov	r1, r7
 800717c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007180:	3b30      	subs	r3, #48	; 0x30
 8007182:	2b09      	cmp	r3, #9
 8007184:	d94d      	bls.n	8007222 <_svfiprintf_r+0x16e>
 8007186:	b1b8      	cbz	r0, 80071b8 <_svfiprintf_r+0x104>
 8007188:	e00f      	b.n	80071aa <_svfiprintf_r+0xf6>
 800718a:	462f      	mov	r7, r5
 800718c:	e7b8      	b.n	8007100 <_svfiprintf_r+0x4c>
 800718e:	4a40      	ldr	r2, [pc, #256]	; (8007290 <_svfiprintf_r+0x1dc>)
 8007190:	463d      	mov	r5, r7
 8007192:	1a80      	subs	r0, r0, r2
 8007194:	fa0b f000 	lsl.w	r0, fp, r0
 8007198:	4318      	orrs	r0, r3
 800719a:	9004      	str	r0, [sp, #16]
 800719c:	e7d3      	b.n	8007146 <_svfiprintf_r+0x92>
 800719e:	9a03      	ldr	r2, [sp, #12]
 80071a0:	1d11      	adds	r1, r2, #4
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	9103      	str	r1, [sp, #12]
 80071a6:	2a00      	cmp	r2, #0
 80071a8:	db01      	blt.n	80071ae <_svfiprintf_r+0xfa>
 80071aa:	9207      	str	r2, [sp, #28]
 80071ac:	e004      	b.n	80071b8 <_svfiprintf_r+0x104>
 80071ae:	4252      	negs	r2, r2
 80071b0:	f043 0302 	orr.w	r3, r3, #2
 80071b4:	9207      	str	r2, [sp, #28]
 80071b6:	9304      	str	r3, [sp, #16]
 80071b8:	783b      	ldrb	r3, [r7, #0]
 80071ba:	2b2e      	cmp	r3, #46	; 0x2e
 80071bc:	d10c      	bne.n	80071d8 <_svfiprintf_r+0x124>
 80071be:	787b      	ldrb	r3, [r7, #1]
 80071c0:	2b2a      	cmp	r3, #42	; 0x2a
 80071c2:	d133      	bne.n	800722c <_svfiprintf_r+0x178>
 80071c4:	9b03      	ldr	r3, [sp, #12]
 80071c6:	3702      	adds	r7, #2
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	9203      	str	r2, [sp, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071d6:	9305      	str	r3, [sp, #20]
 80071d8:	4d2e      	ldr	r5, [pc, #184]	; (8007294 <_svfiprintf_r+0x1e0>)
 80071da:	2203      	movs	r2, #3
 80071dc:	7839      	ldrb	r1, [r7, #0]
 80071de:	4628      	mov	r0, r5
 80071e0:	f7ff fb64 	bl	80068ac <memchr>
 80071e4:	b138      	cbz	r0, 80071f6 <_svfiprintf_r+0x142>
 80071e6:	2340      	movs	r3, #64	; 0x40
 80071e8:	1b40      	subs	r0, r0, r5
 80071ea:	fa03 f000 	lsl.w	r0, r3, r0
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	3701      	adds	r7, #1
 80071f2:	4303      	orrs	r3, r0
 80071f4:	9304      	str	r3, [sp, #16]
 80071f6:	7839      	ldrb	r1, [r7, #0]
 80071f8:	2206      	movs	r2, #6
 80071fa:	4827      	ldr	r0, [pc, #156]	; (8007298 <_svfiprintf_r+0x1e4>)
 80071fc:	1c7e      	adds	r6, r7, #1
 80071fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007202:	f7ff fb53 	bl	80068ac <memchr>
 8007206:	2800      	cmp	r0, #0
 8007208:	d038      	beq.n	800727c <_svfiprintf_r+0x1c8>
 800720a:	4b24      	ldr	r3, [pc, #144]	; (800729c <_svfiprintf_r+0x1e8>)
 800720c:	bb13      	cbnz	r3, 8007254 <_svfiprintf_r+0x1a0>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	3307      	adds	r3, #7
 8007212:	f023 0307 	bic.w	r3, r3, #7
 8007216:	3308      	adds	r3, #8
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721c:	444b      	add	r3, r9
 800721e:	9309      	str	r3, [sp, #36]	; 0x24
 8007220:	e76d      	b.n	80070fe <_svfiprintf_r+0x4a>
 8007222:	fb05 3202 	mla	r2, r5, r2, r3
 8007226:	2001      	movs	r0, #1
 8007228:	460f      	mov	r7, r1
 800722a:	e7a6      	b.n	800717a <_svfiprintf_r+0xc6>
 800722c:	2300      	movs	r3, #0
 800722e:	250a      	movs	r5, #10
 8007230:	4619      	mov	r1, r3
 8007232:	3701      	adds	r7, #1
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	4638      	mov	r0, r7
 8007238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800723c:	3a30      	subs	r2, #48	; 0x30
 800723e:	2a09      	cmp	r2, #9
 8007240:	d903      	bls.n	800724a <_svfiprintf_r+0x196>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d0c8      	beq.n	80071d8 <_svfiprintf_r+0x124>
 8007246:	9105      	str	r1, [sp, #20]
 8007248:	e7c6      	b.n	80071d8 <_svfiprintf_r+0x124>
 800724a:	fb05 2101 	mla	r1, r5, r1, r2
 800724e:	2301      	movs	r3, #1
 8007250:	4607      	mov	r7, r0
 8007252:	e7f0      	b.n	8007236 <_svfiprintf_r+0x182>
 8007254:	ab03      	add	r3, sp, #12
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4622      	mov	r2, r4
 800725a:	4b11      	ldr	r3, [pc, #68]	; (80072a0 <_svfiprintf_r+0x1ec>)
 800725c:	a904      	add	r1, sp, #16
 800725e:	4640      	mov	r0, r8
 8007260:	f7fe f8ee 	bl	8005440 <_printf_float>
 8007264:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007268:	4681      	mov	r9, r0
 800726a:	d1d6      	bne.n	800721a <_svfiprintf_r+0x166>
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	065b      	lsls	r3, r3, #25
 8007270:	f53f af35 	bmi.w	80070de <_svfiprintf_r+0x2a>
 8007274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007276:	b01d      	add	sp, #116	; 0x74
 8007278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4622      	mov	r2, r4
 8007282:	4b07      	ldr	r3, [pc, #28]	; (80072a0 <_svfiprintf_r+0x1ec>)
 8007284:	a904      	add	r1, sp, #16
 8007286:	4640      	mov	r0, r8
 8007288:	f7fe fb86 	bl	8005998 <_printf_i>
 800728c:	e7ea      	b.n	8007264 <_svfiprintf_r+0x1b0>
 800728e:	bf00      	nop
 8007290:	080077e4 	.word	0x080077e4
 8007294:	080077ea 	.word	0x080077ea
 8007298:	080077ee 	.word	0x080077ee
 800729c:	08005441 	.word	0x08005441
 80072a0:	08007001 	.word	0x08007001

080072a4 <_sbrk_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	2300      	movs	r3, #0
 80072a8:	4c05      	ldr	r4, [pc, #20]	; (80072c0 <_sbrk_r+0x1c>)
 80072aa:	4605      	mov	r5, r0
 80072ac:	4608      	mov	r0, r1
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	f7fa ff06 	bl	80020c0 <_sbrk>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_sbrk_r+0x1a>
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	b103      	cbz	r3, 80072be <_sbrk_r+0x1a>
 80072bc:	602b      	str	r3, [r5, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20000a48 	.word	0x20000a48

080072c4 <__ascii_mbtowc>:
 80072c4:	b082      	sub	sp, #8
 80072c6:	b901      	cbnz	r1, 80072ca <__ascii_mbtowc+0x6>
 80072c8:	a901      	add	r1, sp, #4
 80072ca:	b142      	cbz	r2, 80072de <__ascii_mbtowc+0x1a>
 80072cc:	b14b      	cbz	r3, 80072e2 <__ascii_mbtowc+0x1e>
 80072ce:	7813      	ldrb	r3, [r2, #0]
 80072d0:	600b      	str	r3, [r1, #0]
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	1c10      	adds	r0, r2, #0
 80072d6:	bf18      	it	ne
 80072d8:	2001      	movne	r0, #1
 80072da:	b002      	add	sp, #8
 80072dc:	4770      	bx	lr
 80072de:	4610      	mov	r0, r2
 80072e0:	e7fb      	b.n	80072da <__ascii_mbtowc+0x16>
 80072e2:	f06f 0001 	mvn.w	r0, #1
 80072e6:	e7f8      	b.n	80072da <__ascii_mbtowc+0x16>

080072e8 <memmove>:
 80072e8:	4288      	cmp	r0, r1
 80072ea:	b510      	push	{r4, lr}
 80072ec:	eb01 0302 	add.w	r3, r1, r2
 80072f0:	d807      	bhi.n	8007302 <memmove+0x1a>
 80072f2:	1e42      	subs	r2, r0, #1
 80072f4:	4299      	cmp	r1, r3
 80072f6:	d00a      	beq.n	800730e <memmove+0x26>
 80072f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007300:	e7f8      	b.n	80072f4 <memmove+0xc>
 8007302:	4283      	cmp	r3, r0
 8007304:	d9f5      	bls.n	80072f2 <memmove+0xa>
 8007306:	1881      	adds	r1, r0, r2
 8007308:	1ad2      	subs	r2, r2, r3
 800730a:	42d3      	cmn	r3, r2
 800730c:	d100      	bne.n	8007310 <memmove+0x28>
 800730e:	bd10      	pop	{r4, pc}
 8007310:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007314:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007318:	e7f7      	b.n	800730a <memmove+0x22>

0800731a <__malloc_lock>:
 800731a:	4770      	bx	lr

0800731c <__malloc_unlock>:
 800731c:	4770      	bx	lr

0800731e <_realloc_r>:
 800731e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007320:	4607      	mov	r7, r0
 8007322:	4614      	mov	r4, r2
 8007324:	460e      	mov	r6, r1
 8007326:	b921      	cbnz	r1, 8007332 <_realloc_r+0x14>
 8007328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800732c:	4611      	mov	r1, r2
 800732e:	f7ff be0d 	b.w	8006f4c <_malloc_r>
 8007332:	b922      	cbnz	r2, 800733e <_realloc_r+0x20>
 8007334:	f7ff fdbe 	bl	8006eb4 <_free_r>
 8007338:	4625      	mov	r5, r4
 800733a:	4628      	mov	r0, r5
 800733c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733e:	f000 f821 	bl	8007384 <_malloc_usable_size_r>
 8007342:	42a0      	cmp	r0, r4
 8007344:	d20f      	bcs.n	8007366 <_realloc_r+0x48>
 8007346:	4621      	mov	r1, r4
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff fdff 	bl	8006f4c <_malloc_r>
 800734e:	4605      	mov	r5, r0
 8007350:	2800      	cmp	r0, #0
 8007352:	d0f2      	beq.n	800733a <_realloc_r+0x1c>
 8007354:	4631      	mov	r1, r6
 8007356:	4622      	mov	r2, r4
 8007358:	f7ff fab6 	bl	80068c8 <memcpy>
 800735c:	4631      	mov	r1, r6
 800735e:	4638      	mov	r0, r7
 8007360:	f7ff fda8 	bl	8006eb4 <_free_r>
 8007364:	e7e9      	b.n	800733a <_realloc_r+0x1c>
 8007366:	4635      	mov	r5, r6
 8007368:	e7e7      	b.n	800733a <_realloc_r+0x1c>

0800736a <__ascii_wctomb>:
 800736a:	b149      	cbz	r1, 8007380 <__ascii_wctomb+0x16>
 800736c:	2aff      	cmp	r2, #255	; 0xff
 800736e:	bf8b      	itete	hi
 8007370:	238a      	movhi	r3, #138	; 0x8a
 8007372:	700a      	strbls	r2, [r1, #0]
 8007374:	6003      	strhi	r3, [r0, #0]
 8007376:	2001      	movls	r0, #1
 8007378:	bf88      	it	hi
 800737a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800737e:	4770      	bx	lr
 8007380:	4608      	mov	r0, r1
 8007382:	4770      	bx	lr

08007384 <_malloc_usable_size_r>:
 8007384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007388:	1f18      	subs	r0, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfbc      	itt	lt
 800738e:	580b      	ldrlt	r3, [r1, r0]
 8007390:	18c0      	addlt	r0, r0, r3
 8007392:	4770      	bx	lr

08007394 <sqrt>:
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	b08b      	sub	sp, #44	; 0x2c
 800739a:	4604      	mov	r4, r0
 800739c:	460d      	mov	r5, r1
 800739e:	f000 f84d 	bl	800743c <__ieee754_sqrt>
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <sqrt+0xa0>)
 80073a4:	4680      	mov	r8, r0
 80073a6:	f993 a000 	ldrsb.w	sl, [r3]
 80073aa:	4689      	mov	r9, r1
 80073ac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80073b0:	d02b      	beq.n	800740a <sqrt+0x76>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	4620      	mov	r0, r4
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7f9 fb27 	bl	8000a0c <__aeabi_dcmpun>
 80073be:	4683      	mov	fp, r0
 80073c0:	bb18      	cbnz	r0, 800740a <sqrt+0x76>
 80073c2:	2600      	movs	r6, #0
 80073c4:	2700      	movs	r7, #0
 80073c6:	4632      	mov	r2, r6
 80073c8:	463b      	mov	r3, r7
 80073ca:	4620      	mov	r0, r4
 80073cc:	4629      	mov	r1, r5
 80073ce:	f7f9 faf5 	bl	80009bc <__aeabi_dcmplt>
 80073d2:	b1d0      	cbz	r0, 800740a <sqrt+0x76>
 80073d4:	2301      	movs	r3, #1
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	4b17      	ldr	r3, [pc, #92]	; (8007438 <sqrt+0xa4>)
 80073da:	f8cd b020 	str.w	fp, [sp, #32]
 80073de:	9301      	str	r3, [sp, #4]
 80073e0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80073e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80073e8:	f1ba 0f00 	cmp.w	sl, #0
 80073ec:	d112      	bne.n	8007414 <sqrt+0x80>
 80073ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80073f2:	4668      	mov	r0, sp
 80073f4:	f000 f8ce 	bl	8007594 <matherr>
 80073f8:	b1b8      	cbz	r0, 800742a <sqrt+0x96>
 80073fa:	9b08      	ldr	r3, [sp, #32]
 80073fc:	b11b      	cbz	r3, 8007406 <sqrt+0x72>
 80073fe:	f7fd ff5b 	bl	80052b8 <__errno>
 8007402:	9b08      	ldr	r3, [sp, #32]
 8007404:	6003      	str	r3, [r0, #0]
 8007406:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800740a:	4640      	mov	r0, r8
 800740c:	4649      	mov	r1, r9
 800740e:	b00b      	add	sp, #44	; 0x2c
 8007410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	4630      	mov	r0, r6
 800741a:	4639      	mov	r1, r7
 800741c:	f7f9 f986 	bl	800072c <__aeabi_ddiv>
 8007420:	f1ba 0f02 	cmp.w	sl, #2
 8007424:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007428:	d1e3      	bne.n	80073f2 <sqrt+0x5e>
 800742a:	f7fd ff45 	bl	80052b8 <__errno>
 800742e:	2321      	movs	r3, #33	; 0x21
 8007430:	6003      	str	r3, [r0, #0]
 8007432:	e7e2      	b.n	80073fa <sqrt+0x66>
 8007434:	200001e8 	.word	0x200001e8
 8007438:	08007900 	.word	0x08007900

0800743c <__ieee754_sqrt>:
 800743c:	4b54      	ldr	r3, [pc, #336]	; (8007590 <__ieee754_sqrt+0x154>)
 800743e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007442:	438b      	bics	r3, r1
 8007444:	4606      	mov	r6, r0
 8007446:	460d      	mov	r5, r1
 8007448:	460a      	mov	r2, r1
 800744a:	460c      	mov	r4, r1
 800744c:	d10f      	bne.n	800746e <__ieee754_sqrt+0x32>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	f7f9 f841 	bl	80004d8 <__aeabi_dmul>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	4630      	mov	r0, r6
 800745c:	4629      	mov	r1, r5
 800745e:	f7f8 fe85 	bl	800016c <__adddf3>
 8007462:	4606      	mov	r6, r0
 8007464:	460d      	mov	r5, r1
 8007466:	4630      	mov	r0, r6
 8007468:	4629      	mov	r1, r5
 800746a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800746e:	2900      	cmp	r1, #0
 8007470:	4607      	mov	r7, r0
 8007472:	4603      	mov	r3, r0
 8007474:	dc0e      	bgt.n	8007494 <__ieee754_sqrt+0x58>
 8007476:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800747a:	ea5c 0707 	orrs.w	r7, ip, r7
 800747e:	d0f2      	beq.n	8007466 <__ieee754_sqrt+0x2a>
 8007480:	b141      	cbz	r1, 8007494 <__ieee754_sqrt+0x58>
 8007482:	4602      	mov	r2, r0
 8007484:	460b      	mov	r3, r1
 8007486:	f7f8 fe6f 	bl	8000168 <__aeabi_dsub>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	f7f9 f94d 	bl	800072c <__aeabi_ddiv>
 8007492:	e7e6      	b.n	8007462 <__ieee754_sqrt+0x26>
 8007494:	1512      	asrs	r2, r2, #20
 8007496:	d074      	beq.n	8007582 <__ieee754_sqrt+0x146>
 8007498:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800749c:	07d5      	lsls	r5, r2, #31
 800749e:	f04f 0500 	mov.w	r5, #0
 80074a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80074a6:	bf48      	it	mi
 80074a8:	0fd9      	lsrmi	r1, r3, #31
 80074aa:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80074ae:	bf44      	itt	mi
 80074b0:	005b      	lslmi	r3, r3, #1
 80074b2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80074b6:	1051      	asrs	r1, r2, #1
 80074b8:	0fda      	lsrs	r2, r3, #31
 80074ba:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80074be:	4628      	mov	r0, r5
 80074c0:	2216      	movs	r2, #22
 80074c2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80074c6:	005b      	lsls	r3, r3, #1
 80074c8:	1987      	adds	r7, r0, r6
 80074ca:	42a7      	cmp	r7, r4
 80074cc:	bfde      	ittt	le
 80074ce:	19b8      	addle	r0, r7, r6
 80074d0:	1be4      	suble	r4, r4, r7
 80074d2:	19ad      	addle	r5, r5, r6
 80074d4:	0fdf      	lsrs	r7, r3, #31
 80074d6:	3a01      	subs	r2, #1
 80074d8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80074dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074e0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80074e4:	d1f0      	bne.n	80074c8 <__ieee754_sqrt+0x8c>
 80074e6:	f04f 0c20 	mov.w	ip, #32
 80074ea:	4696      	mov	lr, r2
 80074ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80074f0:	4284      	cmp	r4, r0
 80074f2:	eb06 070e 	add.w	r7, r6, lr
 80074f6:	dc02      	bgt.n	80074fe <__ieee754_sqrt+0xc2>
 80074f8:	d112      	bne.n	8007520 <__ieee754_sqrt+0xe4>
 80074fa:	429f      	cmp	r7, r3
 80074fc:	d810      	bhi.n	8007520 <__ieee754_sqrt+0xe4>
 80074fe:	2f00      	cmp	r7, #0
 8007500:	eb07 0e06 	add.w	lr, r7, r6
 8007504:	da42      	bge.n	800758c <__ieee754_sqrt+0x150>
 8007506:	f1be 0f00 	cmp.w	lr, #0
 800750a:	db3f      	blt.n	800758c <__ieee754_sqrt+0x150>
 800750c:	f100 0801 	add.w	r8, r0, #1
 8007510:	1a24      	subs	r4, r4, r0
 8007512:	4640      	mov	r0, r8
 8007514:	429f      	cmp	r7, r3
 8007516:	bf88      	it	hi
 8007518:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800751c:	1bdb      	subs	r3, r3, r7
 800751e:	4432      	add	r2, r6
 8007520:	0064      	lsls	r4, r4, #1
 8007522:	f1bc 0c01 	subs.w	ip, ip, #1
 8007526:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800752a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800752e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007532:	d1dd      	bne.n	80074f0 <__ieee754_sqrt+0xb4>
 8007534:	4323      	orrs	r3, r4
 8007536:	d006      	beq.n	8007546 <__ieee754_sqrt+0x10a>
 8007538:	1c54      	adds	r4, r2, #1
 800753a:	bf0b      	itete	eq
 800753c:	4662      	moveq	r2, ip
 800753e:	3201      	addne	r2, #1
 8007540:	3501      	addeq	r5, #1
 8007542:	f022 0201 	bicne.w	r2, r2, #1
 8007546:	106b      	asrs	r3, r5, #1
 8007548:	0852      	lsrs	r2, r2, #1
 800754a:	07e8      	lsls	r0, r5, #31
 800754c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007550:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007554:	bf48      	it	mi
 8007556:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800755a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800755e:	4616      	mov	r6, r2
 8007560:	e781      	b.n	8007466 <__ieee754_sqrt+0x2a>
 8007562:	0adc      	lsrs	r4, r3, #11
 8007564:	3915      	subs	r1, #21
 8007566:	055b      	lsls	r3, r3, #21
 8007568:	2c00      	cmp	r4, #0
 800756a:	d0fa      	beq.n	8007562 <__ieee754_sqrt+0x126>
 800756c:	02e6      	lsls	r6, r4, #11
 800756e:	d50a      	bpl.n	8007586 <__ieee754_sqrt+0x14a>
 8007570:	f1c2 0020 	rsb	r0, r2, #32
 8007574:	fa23 f000 	lsr.w	r0, r3, r0
 8007578:	1e55      	subs	r5, r2, #1
 800757a:	4093      	lsls	r3, r2
 800757c:	4304      	orrs	r4, r0
 800757e:	1b4a      	subs	r2, r1, r5
 8007580:	e78a      	b.n	8007498 <__ieee754_sqrt+0x5c>
 8007582:	4611      	mov	r1, r2
 8007584:	e7f0      	b.n	8007568 <__ieee754_sqrt+0x12c>
 8007586:	0064      	lsls	r4, r4, #1
 8007588:	3201      	adds	r2, #1
 800758a:	e7ef      	b.n	800756c <__ieee754_sqrt+0x130>
 800758c:	4680      	mov	r8, r0
 800758e:	e7bf      	b.n	8007510 <__ieee754_sqrt+0xd4>
 8007590:	7ff00000 	.word	0x7ff00000

08007594 <matherr>:
 8007594:	2000      	movs	r0, #0
 8007596:	4770      	bx	lr

08007598 <_init>:
 8007598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800759a:	bf00      	nop
 800759c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800759e:	bc08      	pop	{r3}
 80075a0:	469e      	mov	lr, r3
 80075a2:	4770      	bx	lr

080075a4 <_fini>:
 80075a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075a6:	bf00      	nop
 80075a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075aa:	bc08      	pop	{r3}
 80075ac:	469e      	mov	lr, r3
 80075ae:	4770      	bx	lr
