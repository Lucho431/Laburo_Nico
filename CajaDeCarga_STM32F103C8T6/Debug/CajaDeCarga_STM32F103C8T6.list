
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800493c  0800493c  0001493c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004970  08004970  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004970  08004970  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004970  08004970  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004970  08004970  00014970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004974  08004974  00014974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  20000074  080049ec  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  080049ec  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e99b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025f4  00000000  00000000  0002ea38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00031030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00031ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193c4  00000000  00000000  00032c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d88e  00000000  00000000  0004bfec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000908a6  00000000  00000000  0005987a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc4  00000000  00000000  000ea19c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08004924 	.word	0x08004924

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08004924 	.word	0x08004924

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <MX_ADC1_Init+0x98>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b42:	2202      	movs	r2, #2
 8000b44:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b46:	4815      	ldr	r0, [pc, #84]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b48:	f000 fff6 	bl	8001b38 <HAL_ADC_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b52:	f000 fcb5 	bl	80014c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b68:	f001 fa72 	bl	8002050 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b72:	f000 fca5 	bl	80014c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_ADC1_Init+0x94>)
 8000b84:	f001 fa64 	bl	8002050 <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b8e:	f000 fc97 	bl	80014c0 <Error_Handler>
  }

}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000b4 	.word	0x200000b4
 8000ba0:	40012400 	.word	0x40012400

08000ba4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <HAL_ADC_MspInit+0xcc>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d151      	bne.n	8000c68 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a24      	ldr	r2, [pc, #144]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <HAL_ADC_MspInit+0xd0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	481d      	ldr	r0, [pc, #116]	; (8000c78 <HAL_ADC_MspInit+0xd4>)
 8000c04:	f001 ff22 	bl	8002a4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c0a:	4a1d      	ldr	r2, [pc, #116]	; (8000c80 <HAL_ADC_MspInit+0xdc>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c1c:	2280      	movs	r2, #128	; 0x80
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c26:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c2e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c32:	2220      	movs	r2, #32
 8000c34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c3e:	f001 fd17 	bl	8002670 <HAL_DMA_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000c48:	f000 fc3a 	bl	80014c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c50:	621a      	str	r2, [r3, #32]
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_ADC_MspInit+0xd8>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2012      	movs	r0, #18
 8000c5e:	f001 fcd0 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c62:	2012      	movs	r0, #18
 8000c64:	f001 fce9 	bl	800263a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40012400 	.word	0x40012400
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	200000e4 	.word	0x200000e4
 8000c80:	40020008 	.word	0x40020008

08000c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_DMA_Init+0x38>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <MX_DMA_Init+0x38>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_DMA_Init+0x38>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	200b      	movs	r0, #11
 8000ca8:	f001 fcab 	bl	8002602 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cac:	200b      	movs	r0, #11
 8000cae:	f001 fcc4 	bl	800263a <HAL_NVIC_EnableIRQ>

}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd4:	4b51      	ldr	r3, [pc, #324]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a50      	ldr	r2, [pc, #320]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b4e      	ldr	r3, [pc, #312]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0310 	and.w	r3, r3, #16
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cec:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000cf2:	f043 0320 	orr.w	r3, r3, #32
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0320 	and.w	r3, r3, #32
 8000d00:	60bb      	str	r3, [r7, #8]
 8000d02:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b45      	ldr	r3, [pc, #276]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a44      	ldr	r2, [pc, #272]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b42      	ldr	r3, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a3e      	ldr	r2, [pc, #248]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d22:	f043 0308 	orr.w	r3, r3, #8
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b3c      	ldr	r3, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x15c>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0308 	and.w	r3, r3, #8
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, GPIO_PIN_RESET);
 8000d34:	2200      	movs	r2, #0
 8000d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d3a:	4839      	ldr	r0, [pc, #228]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d3c:	f001 fff7 	bl	8002d2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8000d46:	4837      	ldr	r0, [pc, #220]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000d48:	f001 fff1 	bl	8002d2e <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000d52:	4835      	ldr	r0, [pc, #212]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000d54:	f001 ffeb 	bl	8002d2e <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_onBoard_Pin;
 8000d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2302      	movs	r3, #2
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_onBoard_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482b      	ldr	r0, [pc, #172]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d72:	f001 fe6b 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Pul_hab_Vo_Pin|Pul_hab_Io_Pin;
 8000d76:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4825      	ldr	r0, [pc, #148]	; (8000e20 <MX_GPIO_Init+0x160>)
 8000d8c:	f001 fe5e 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Rep_Pote_Vo_Pin|Rep_Pote_Io_Pin|P_Temp_Vo_Pin|P_Temp_Io_Pin;
 8000d90:	23f0      	movs	r3, #240	; 0xf0
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0310 	add.w	r3, r7, #16
 8000da0:	4619      	mov	r1, r3
 8000da2:	4821      	ldr	r0, [pc, #132]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000da4:	f001 fe52 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = P_OL_Vo_Pin|P_OL_Io_Pin;
 8000da8:	2303      	movs	r3, #3
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0310 	add.w	r3, r7, #16
 8000db8:	4619      	mov	r1, r3
 8000dba:	481a      	ldr	r0, [pc, #104]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000dbc:	f001 fe46 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 8000dc0:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8000dc4:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000dda:	f001 fe37 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000dde:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000de2:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4619      	mov	r1, r3
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <MX_GPIO_Init+0x168>)
 8000df8:	f001 fe28 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Rango_Io_A_Pin|Rango_Io_B_Pin|Rango_Io_C_Pin;
 8000dfc:	2338      	movs	r3, #56	; 0x38
 8000dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_GPIO_Init+0x164>)
 8000e10:	f001 fe1c 	bl	8002a4c <HAL_GPIO_Init>

}
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40011000 	.word	0x40011000
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	40010800 	.word	0x40010800

08000e2c <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e36:	4819      	ldr	r0, [pc, #100]	; (8000e9c <LCD_Init+0x70>)
 8000e38:	f001 ff79 	bl	8002d2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e42:	4817      	ldr	r0, [pc, #92]	; (8000ea0 <LCD_Init+0x74>)
 8000e44:	f001 ff73 	bl	8002d2e <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8000e48:	2010      	movs	r0, #16
 8000e4a:	f000 fe53 	bl	8001af4 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e4e:	2003      	movs	r0, #3
 8000e50:	f000 f828 	bl	8000ea4 <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8000e54:	2005      	movs	r0, #5
 8000e56:	f000 fe4d 	bl	8001af4 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f000 f822 	bl	8000ea4 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f000 fe47 	bl	8001af4 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f81c 	bl	8000ea4 <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f000 f819 	bl	8000ea4 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fe3e 	bl	8001af4 <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8000e78:	2028      	movs	r0, #40	; 0x28
 8000e7a:	f000 f879 	bl	8000f70 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 8000e7e:	2008      	movs	r0, #8
 8000e80:	f000 f876 	bl	8000f70 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f000 f873 	bl	8000f70 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 8000e8a:	2006      	movs	r0, #6
 8000e8c:	f000 f870 	bl	8000f70 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 8000e90:	200c      	movs	r0, #12
 8000e92:	f000 f86d 	bl	8000f70 <LCD_SendInstruction>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40010c00 	.word	0x40010c00
 8000ea0:	40010800 	.word	0x40010800

08000ea4 <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d006      	beq.n	8000ec6 <LCD_SendNibble+0x22>
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebe:	482b      	ldr	r0, [pc, #172]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000ec0:	f001 ff35 	bl	8002d2e <HAL_GPIO_WritePin>
 8000ec4:	e005      	b.n	8000ed2 <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ecc:	4827      	ldr	r0, [pc, #156]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000ece:	f001 ff2e 	bl	8002d2e <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d006      	beq.n	8000eea <LCD_SendNibble+0x46>
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	4822      	ldr	r0, [pc, #136]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000ee4:	f001 ff23 	bl	8002d2e <HAL_GPIO_WritePin>
 8000ee8:	e005      	b.n	8000ef6 <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8000eea:	2200      	movs	r2, #0
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	481e      	ldr	r0, [pc, #120]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000ef2:	f001 ff1c 	bl	8002d2e <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d006      	beq.n	8000f0e <LCD_SendNibble+0x6a>
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f08:	f001 ff11 	bl	8002d2e <HAL_GPIO_WritePin>
 8000f0c:	e005      	b.n	8000f1a <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f14:	4815      	ldr	r0, [pc, #84]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f16:	f001 ff0a 	bl	8002d2e <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d006      	beq.n	8000f32 <LCD_SendNibble+0x8e>
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2a:	4810      	ldr	r0, [pc, #64]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f2c:	f001 feff 	bl	8002d2e <HAL_GPIO_WritePin>
 8000f30:	e005      	b.n	8000f3e <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	480c      	ldr	r0, [pc, #48]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f3a:	f001 fef8 	bl	8002d2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f46:	f001 fef2 	bl	8002d2e <HAL_GPIO_WritePin>
		HAL_Delay(1);//LCD_usDelay(5);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fdd2 	bl	8001af4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <LCD_SendNibble+0xc8>)
 8000f58:	f001 fee9 	bl	8002d2e <HAL_GPIO_WritePin>
	HAL_Delay(1);//LCD_usDelay(5);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f000 fdc9 	bl	8001af4 <HAL_Delay>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010800 	.word	0x40010800

08000f70 <LCD_SendInstruction>:
}


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f80:	480a      	ldr	r0, [pc, #40]	; (8000fac <LCD_SendInstruction+0x3c>)
 8000f82:	f001 fed4 	bl	8002d2e <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f811 	bl	8000fb0 <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d103      	bne.n	8000f9c <LCD_SendInstruction+0x2c>
		HAL_Delay(2);//LCD_usDelay(2000);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f000 fdad 	bl	8001af4 <HAL_Delay>
	else
		HAL_Delay(1);//LCD_usDelay(50);
}
 8000f9a:	e002      	b.n	8000fa2 <LCD_SendInstruction+0x32>
		HAL_Delay(1);//LCD_usDelay(50);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f000 fda9 	bl	8001af4 <HAL_Delay>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010c00 	.word	0x40010c00

08000fb0 <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff6f 	bl	8000ea4 <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff6b 	bl	8000ea4 <LCD_SendNibble>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fde:	f000 fd27 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe2:	f000 f9bb 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe6:	f7ff fe6b 	bl	8000cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fea:	f7ff fe4b 	bl	8000c84 <MX_DMA_Init>
  MX_ADC1_Init();
 8000fee:	f7ff fd8b 	bl	8000b08 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ff2:	f000 fb43 	bl	800167c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ff6:	f000 fb8d 	bl	8001714 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000ffa:	f000 faf1 	bl	80015e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 fc7d 	bl	80018fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8001002:	48b1      	ldr	r0, [pc, #708]	; (80012c8 <main+0x2f0>)
 8001004:	f002 fbce 	bl	80037a4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001008:	2100      	movs	r1, #0
 800100a:	48af      	ldr	r0, [pc, #700]	; (80012c8 <main+0x2f0>)
 800100c:	f002 fc6c 	bl	80038e8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8001010:	2108      	movs	r1, #8
 8001012:	48ad      	ldr	r0, [pc, #692]	; (80012c8 <main+0x2f0>)
 8001014:	f002 fc68 	bl	80038e8 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8001018:	48ac      	ldr	r0, [pc, #688]	; (80012cc <main+0x2f4>)
 800101a:	f002 fbc3 	bl	80037a4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, muestras, sizeof(muestras));
 800101e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001022:	49ab      	ldr	r1, [pc, #684]	; (80012d0 <main+0x2f8>)
 8001024:	48ab      	ldr	r0, [pc, #684]	; (80012d4 <main+0x2fc>)
 8001026:	f000 fe5f 	bl	8001ce8 <HAL_ADC_Start_DMA>

//  HAL_TIM_Base_Start_IT(&htim2); //desborda cada 10 ms.

  LCD_Init();
 800102a:	f7ff feff 	bl	8000e2c <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (status_adc) {
 800102e:	4baa      	ldr	r3, [pc, #680]	; (80012d8 <main+0x300>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d002      	beq.n	800103c <main+0x64>
 8001036:	2b02      	cmp	r3, #2
 8001038:	d065      	beq.n	8001106 <main+0x12e>
			  acumulaA = 0;

			  status_adc = 0;

		  default:
		  break;
 800103a:	e0c9      	b.n	80011d0 <main+0x1f8>
			  for (uint16_t i = 0; i < 200; i+=2){
 800103c:	2300      	movs	r3, #0
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	e022      	b.n	8001088 <main+0xb0>
				  acumulaV += muestras[i]*muestras[i];
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	4aa2      	ldr	r2, [pc, #648]	; (80012d0 <main+0x2f8>)
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	88fa      	ldrh	r2, [r7, #6]
 800104c:	49a0      	ldr	r1, [pc, #640]	; (80012d0 <main+0x2f8>)
 800104e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001052:	fb02 f203 	mul.w	r2, r2, r3
 8001056:	4ba1      	ldr	r3, [pc, #644]	; (80012dc <main+0x304>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a9f      	ldr	r2, [pc, #636]	; (80012dc <main+0x304>)
 800105e:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	3301      	adds	r3, #1
 8001064:	4a9a      	ldr	r2, [pc, #616]	; (80012d0 <main+0x2f8>)
 8001066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800106a:	88fa      	ldrh	r2, [r7, #6]
 800106c:	3201      	adds	r2, #1
 800106e:	4998      	ldr	r1, [pc, #608]	; (80012d0 <main+0x2f8>)
 8001070:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001074:	fb02 f203 	mul.w	r2, r2, r3
 8001078:	4b99      	ldr	r3, [pc, #612]	; (80012e0 <main+0x308>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4413      	add	r3, r2
 800107e:	4a98      	ldr	r2, [pc, #608]	; (80012e0 <main+0x308>)
 8001080:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	3302      	adds	r3, #2
 8001086:	80fb      	strh	r3, [r7, #6]
 8001088:	88fb      	ldrh	r3, [r7, #6]
 800108a:	2bc7      	cmp	r3, #199	; 0xc7
 800108c:	d9d9      	bls.n	8001042 <main+0x6a>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 800108e:	4b93      	ldr	r3, [pc, #588]	; (80012dc <main+0x304>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f99e 	bl	80003d4 <__aeabi_ui2d>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f003 fb3e 	bl	8004720 <sqrt>
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	4b8e      	ldr	r3, [pc, #568]	; (80012e4 <main+0x30c>)
 80010aa:	f7ff fb37 	bl	800071c <__aeabi_ddiv>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4618      	mov	r0, r3
 80010b4:	4621      	mov	r1, r4
 80010b6:	f7ff fcb7 	bl	8000a28 <__aeabi_d2uiz>
 80010ba:	4602      	mov	r2, r0
 80010bc:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <main+0x310>)
 80010be:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 80010c0:	4b87      	ldr	r3, [pc, #540]	; (80012e0 <main+0x308>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f985 	bl	80003d4 <__aeabi_ui2d>
 80010ca:	4603      	mov	r3, r0
 80010cc:	460c      	mov	r4, r1
 80010ce:	4618      	mov	r0, r3
 80010d0:	4621      	mov	r1, r4
 80010d2:	f003 fb25 	bl	8004720 <sqrt>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b82      	ldr	r3, [pc, #520]	; (80012e4 <main+0x30c>)
 80010dc:	f7ff fb1e 	bl	800071c <__aeabi_ddiv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	460c      	mov	r4, r1
 80010e4:	4618      	mov	r0, r3
 80010e6:	4621      	mov	r1, r4
 80010e8:	f7ff fc9e 	bl	8000a28 <__aeabi_d2uiz>
 80010ec:	4602      	mov	r2, r0
 80010ee:	4b7f      	ldr	r3, [pc, #508]	; (80012ec <main+0x314>)
 80010f0:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 80010f2:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <main+0x304>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 80010f8:	4b79      	ldr	r3, [pc, #484]	; (80012e0 <main+0x308>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 80010fe:	4b76      	ldr	r3, [pc, #472]	; (80012d8 <main+0x300>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
		  break;
 8001104:	e065      	b.n	80011d2 <main+0x1fa>
			  for (uint16_t i = 200; i < 400; i+=2){
 8001106:	23c8      	movs	r3, #200	; 0xc8
 8001108:	80bb      	strh	r3, [r7, #4]
 800110a:	e022      	b.n	8001152 <main+0x17a>
				  acumulaV += muestras[i]*muestras[i];
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	4a70      	ldr	r2, [pc, #448]	; (80012d0 <main+0x2f8>)
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	496e      	ldr	r1, [pc, #440]	; (80012d0 <main+0x2f8>)
 8001118:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800111c:	fb02 f203 	mul.w	r2, r2, r3
 8001120:	4b6e      	ldr	r3, [pc, #440]	; (80012dc <main+0x304>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4413      	add	r3, r2
 8001126:	4a6d      	ldr	r2, [pc, #436]	; (80012dc <main+0x304>)
 8001128:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	4a68      	ldr	r2, [pc, #416]	; (80012d0 <main+0x2f8>)
 8001130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001134:	88ba      	ldrh	r2, [r7, #4]
 8001136:	3201      	adds	r2, #1
 8001138:	4965      	ldr	r1, [pc, #404]	; (80012d0 <main+0x2f8>)
 800113a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800113e:	fb02 f203 	mul.w	r2, r2, r3
 8001142:	4b67      	ldr	r3, [pc, #412]	; (80012e0 <main+0x308>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a65      	ldr	r2, [pc, #404]	; (80012e0 <main+0x308>)
 800114a:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 800114c:	88bb      	ldrh	r3, [r7, #4]
 800114e:	3302      	adds	r3, #2
 8001150:	80bb      	strh	r3, [r7, #4]
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001158:	d3d8      	bcc.n	800110c <main+0x134>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 800115a:	4b60      	ldr	r3, [pc, #384]	; (80012dc <main+0x304>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f938 	bl	80003d4 <__aeabi_ui2d>
 8001164:	4603      	mov	r3, r0
 8001166:	460c      	mov	r4, r1
 8001168:	4618      	mov	r0, r3
 800116a:	4621      	mov	r1, r4
 800116c:	f003 fad8 	bl	8004720 <sqrt>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <main+0x30c>)
 8001176:	f7ff fad1 	bl	800071c <__aeabi_ddiv>
 800117a:	4603      	mov	r3, r0
 800117c:	460c      	mov	r4, r1
 800117e:	4618      	mov	r0, r3
 8001180:	4621      	mov	r1, r4
 8001182:	f7ff fc51 	bl	8000a28 <__aeabi_d2uiz>
 8001186:	4602      	mov	r2, r0
 8001188:	4b57      	ldr	r3, [pc, #348]	; (80012e8 <main+0x310>)
 800118a:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 800118c:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <main+0x308>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f91f 	bl	80003d4 <__aeabi_ui2d>
 8001196:	4603      	mov	r3, r0
 8001198:	460c      	mov	r4, r1
 800119a:	4618      	mov	r0, r3
 800119c:	4621      	mov	r1, r4
 800119e:	f003 fabf 	bl	8004720 <sqrt>
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <main+0x30c>)
 80011a8:	f7ff fab8 	bl	800071c <__aeabi_ddiv>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	4618      	mov	r0, r3
 80011b2:	4621      	mov	r1, r4
 80011b4:	f7ff fc38 	bl	8000a28 <__aeabi_d2uiz>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <main+0x314>)
 80011bc:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 80011be:	4b47      	ldr	r3, [pc, #284]	; (80012dc <main+0x304>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <main+0x308>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 80011ca:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <main+0x300>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
		  break;
 80011d0:	bf00      	nop
	  } //fin switch(status_adc)


	  if (cuenta_fase == 5){
 80011d2:	4b47      	ldr	r3, [pc, #284]	; (80012f0 <main+0x318>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b05      	cmp	r3, #5
 80011d8:	d118      	bne.n	800120c <main+0x234>
		  valor_fase = (float) (acum_fase * 0.04);
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <main+0x31c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f8f8 	bl	80003d4 <__aeabi_ui2d>
 80011e4:	a336      	add	r3, pc, #216	; (adr r3, 80012c0 <main+0x2e8>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	f7ff f96d 	bl	80004c8 <__aeabi_dmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff fc37 	bl	8000a68 <__aeabi_d2f>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b3e      	ldr	r3, [pc, #248]	; (80012f8 <main+0x320>)
 80011fe:	601a      	str	r2, [r3, #0]

		  acum_fase = 0;
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <main+0x31c>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
		  cuenta_fase = 0;
 8001206:	4b3a      	ldr	r3, [pc, #232]	; (80012f0 <main+0x318>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	  } //fin if cuenta_fase



	  switch (flag_protecV){
 800120c:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <main+0x324>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <main+0x242>
 8001214:	2b01      	cmp	r3, #1
 8001216:	d015      	beq.n	8001244 <main+0x26c>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_ON);
				  flag_protecV = 0;
			  }
		  default:
		  break;
 8001218:	e034      	b.n	8001284 <main+0x2ac>
			  if (PROTEC_V != 0){
 800121a:	4b39      	ldr	r3, [pc, #228]	; (8001300 <main+0x328>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <main+0x32c>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	4313      	orrs	r3, r2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d025      	beq.n	800127c <main+0x2a4>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_OFF);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	4833      	ldr	r0, [pc, #204]	; (8001304 <main+0x32c>)
 8001238:	f001 fd79 	bl	8002d2e <HAL_GPIO_WritePin>
				  flag_protecV = 1;
 800123c:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <main+0x324>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
		  break;
 8001242:	e01b      	b.n	800127c <main+0x2a4>
			  if (!PROTEC_V) break;
 8001244:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <main+0x328>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0240 	and.w	r2, r3, #64	; 0x40
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <main+0x32c>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	4313      	orrs	r3, r2
 8001256:	2b00      	cmp	r3, #0
 8001258:	d012      	beq.n	8001280 <main+0x2a8>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin) == (GPIO_PinState)SIGNAL_ON){
 800125a:	2110      	movs	r1, #16
 800125c:	4828      	ldr	r0, [pc, #160]	; (8001300 <main+0x328>)
 800125e:	f001 fd4f 	bl	8002d00 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10d      	bne.n	8001284 <main+0x2ac>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_ON);
 8001268:	2201      	movs	r2, #1
 800126a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126e:	4825      	ldr	r0, [pc, #148]	; (8001304 <main+0x32c>)
 8001270:	f001 fd5d 	bl	8002d2e <HAL_GPIO_WritePin>
				  flag_protecV = 0;
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <main+0x324>)
 8001276:	2200      	movs	r2, #0
 8001278:	701a      	strb	r2, [r3, #0]
		  break;
 800127a:	e003      	b.n	8001284 <main+0x2ac>
		  break;
 800127c:	bf00      	nop
 800127e:	e002      	b.n	8001286 <main+0x2ae>
			  if (!PROTEC_V) break;
 8001280:	bf00      	nop
 8001282:	e000      	b.n	8001286 <main+0x2ae>
		  break;
 8001284:	bf00      	nop
	  } //fin switch flag_protecV

	  switch (flag_protecA){
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <main+0x330>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <main+0x2bc>
 800128e:	2b01      	cmp	r3, #1
 8001290:	d03c      	beq.n	800130c <main+0x334>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_ON);
				  flag_protecA = 0;
			  }
		  default:
		  break;
 8001292:	e05b      	b.n	800134c <main+0x374>
			  if (PROTEC_A != 0){
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <main+0x328>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <main+0x32c>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	4313      	orrs	r3, r2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d04c      	beq.n	8001344 <main+0x36c>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_OFF);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b0:	4814      	ldr	r0, [pc, #80]	; (8001304 <main+0x32c>)
 80012b2:	f001 fd3c 	bl	8002d2e <HAL_GPIO_WritePin>
				  flag_protecA = 1;
 80012b6:	4b14      	ldr	r3, [pc, #80]	; (8001308 <main+0x330>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
		  break;
 80012bc:	e042      	b.n	8001344 <main+0x36c>
 80012be:	bf00      	nop
 80012c0:	47ae147b 	.word	0x47ae147b
 80012c4:	3fa47ae1 	.word	0x3fa47ae1
 80012c8:	20000768 	.word	0x20000768
 80012cc:	200007b0 	.word	0x200007b0
 80012d0:	20000128 	.word	0x20000128
 80012d4:	200000b4 	.word	0x200000b4
 80012d8:	200000a0 	.word	0x200000a0
 80012dc:	20000090 	.word	0x20000090
 80012e0:	20000094 	.word	0x20000094
 80012e4:	40240000 	.word	0x40240000
 80012e8:	20000098 	.word	0x20000098
 80012ec:	2000009c 	.word	0x2000009c
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	200000a4 	.word	0x200000a4
 80012f8:	200000ac 	.word	0x200000ac
 80012fc:	200000b1 	.word	0x200000b1
 8001300:	40010800 	.word	0x40010800
 8001304:	40010c00 	.word	0x40010c00
 8001308:	200000b2 	.word	0x200000b2
			  if (!PROTEC_A) break;
 800130c:	4b10      	ldr	r3, [pc, #64]	; (8001350 <main+0x378>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <main+0x37c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	4313      	orrs	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d012      	beq.n	8001348 <main+0x370>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin) == (GPIO_PinState)SIGNAL_ON){
 8001322:	2120      	movs	r1, #32
 8001324:	480a      	ldr	r0, [pc, #40]	; (8001350 <main+0x378>)
 8001326:	f001 fceb 	bl	8002d00 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10d      	bne.n	800134c <main+0x374>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_ON);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	4807      	ldr	r0, [pc, #28]	; (8001354 <main+0x37c>)
 8001338:	f001 fcf9 	bl	8002d2e <HAL_GPIO_WritePin>
				  flag_protecA = 0;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <main+0x380>)
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
		  break;
 8001342:	e003      	b.n	800134c <main+0x374>
		  break;
 8001344:	bf00      	nop
 8001346:	e672      	b.n	800102e <main+0x56>
			  if (!PROTEC_A) break;
 8001348:	bf00      	nop
 800134a:	e670      	b.n	800102e <main+0x56>
		  break;
 800134c:	bf00      	nop
	  switch (status_adc) {
 800134e:	e66e      	b.n	800102e <main+0x56>
 8001350:	40010800 	.word	0x40010800
 8001354:	40010c00 	.word	0x40010c00
 8001358:	200000b2 	.word	0x200000b2

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001366:	2228      	movs	r2, #40	; 0x28
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f9d0 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f001 fcd4 	bl	8002d60 <HAL_RCC_OscConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80013be:	f000 f87f 	bl	80014c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c2:	230f      	movs	r3, #15
 80013c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2102      	movs	r1, #2
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 ff3e 	bl	8003260 <HAL_RCC_ClockConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80013ea:	f000 f869 	bl	80014c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80013ee:	2302      	movs	r3, #2
 80013f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80013f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f8cc 	bl	8003598 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001406:	f000 f85b 	bl	80014c0 <Error_Handler>
  }
}
 800140a:	bf00      	nop
 800140c:	3750      	adds	r7, #80	; 0x50
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	status_adc = 1;
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_ADC_ConvHalfCpltCallback+0x18>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	200000a0 	.word	0x200000a0

08001430 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	status_adc = 2;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_ADC_ConvCpltCallback+0x18>)
 800143a:	2202      	movs	r2, #2
 800143c:	701a      	strb	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	200000a0 	.word	0x200000a0

0800144c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7f1b      	ldrb	r3, [r3, #28]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d103      	bne.n	8001464 <HAL_TIM_IC_CaptureCallback+0x18>

		__HAL_TIM_SET_COUNTER (&htim4, 0);
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_TIM_IC_CaptureCallback+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24

	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 descendente
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7f1b      	ldrb	r3, [r3, #28]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d10a      	bne.n	8001482 <HAL_TIM_IC_CaptureCallback+0x36>

		acum_fase = __HAL_TIM_GET_COUNTER (&htim4);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <HAL_TIM_IC_CaptureCallback+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001474:	6013      	str	r3, [r2, #0]
		cuenta_fase++;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001480:	701a      	strb	r2, [r3, #0]

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

} //fin HAL_TIM_IC_CaptureCallback()
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	20000768 	.word	0x20000768
 8001490:	200000a4 	.word	0x200000a4
 8001494:	200000a8 	.word	0x200000a8

08001498 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a8:	d102      	bne.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
	}
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200000b0 	.word	0x200000b0

080014c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014d2:	4b15      	ldr	r3, [pc, #84]	; (8001528 <HAL_MspInit+0x5c>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	4a14      	ldr	r2, [pc, #80]	; (8001528 <HAL_MspInit+0x5c>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6193      	str	r3, [r2, #24]
 80014de:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_MspInit+0x5c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_MspInit+0x5c>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_MspInit+0x5c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	61d3      	str	r3, [r2, #28]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_MspInit+0x5c>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001502:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_MspInit+0x60>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_MspInit+0x60>)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr
 8001528:	40021000 	.word	0x40021000
 800152c:	40010000 	.word	0x40010000

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <HardFault_Handler+0x4>

08001542 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <MemManage_Handler+0x4>

08001548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <BusFault_Handler+0x4>

0800154e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <UsageFault_Handler+0x4>

08001554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 fa9e 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}

08001584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001588:	4802      	ldr	r0, [pc, #8]	; (8001594 <DMA1_Channel1_IRQHandler+0x10>)
 800158a:	f001 f92b 	bl	80027e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200000e4 	.word	0x200000e4

08001598 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <ADC1_2_IRQHandler+0x10>)
 800159e:	f000 fc81 	bl	8001ea4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200000b4 	.word	0x200000b4

080015ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015b0:	4802      	ldr	r0, [pc, #8]	; (80015bc <TIM2_IRQHandler+0x10>)
 80015b2:	f002 fa9f 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200007f8 	.word	0x200007f8

080015c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM4_IRQHandler+0x10>)
 80015c6:	f002 fa95 	bl	8003af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000768 	.word	0x20000768

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	463b      	mov	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <MX_TIM2_Init+0x98>)
 80015fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001604:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <MX_TIM2_Init+0x98>)
 8001606:	f240 22cf 	movw	r2, #719	; 0x2cf
 800160a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_TIM2_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <MX_TIM2_Init+0x98>)
 8001614:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001618:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_TIM2_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_TIM2_Init+0x98>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001626:	4814      	ldr	r0, [pc, #80]	; (8001678 <MX_TIM2_Init+0x98>)
 8001628:	f002 f86c 	bl	8003704 <HAL_TIM_Base_Init>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001632:	f7ff ff45 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM2_Init+0x98>)
 8001644:	f002 fbf2 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800164e:	f7ff ff37 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	; (8001678 <MX_TIM2_Init+0x98>)
 8001660:	f002 fee0 	bl	8004424 <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800166a:	f7ff ff29 	bl	80014c0 <Error_Handler>
  }

}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200007f8 	.word	0x200007f8

0800167c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	463b      	mov	r3, r7
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MX_TIM3_Init+0x90>)
 800169a:	4a1d      	ldr	r2, [pc, #116]	; (8001710 <MX_TIM3_Init+0x94>)
 800169c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <MX_TIM3_Init+0x90>)
 80016a0:	2247      	movs	r2, #71	; 0x47
 80016a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <MX_TIM3_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <MX_TIM3_Init+0x90>)
 80016ac:	2263      	movs	r2, #99	; 0x63
 80016ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <MX_TIM3_Init+0x90>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <MX_TIM3_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <MX_TIM3_Init+0x90>)
 80016be:	f002 f821 	bl	8003704 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80016c8:	f7ff fefa 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4619      	mov	r1, r3
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <MX_TIM3_Init+0x90>)
 80016da:	f002 fba7 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80016e4:	f7ff feec 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e8:	2320      	movs	r3, #32
 80016ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f0:	463b      	mov	r3, r7
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_TIM3_Init+0x90>)
 80016f6:	f002 fe95 	bl	8004424 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001700:	f7ff fede 	bl	80014c0 <Error_Handler>
  }

}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200007b0 	.word	0x200007b0
 8001710:	40000400 	.word	0x40000400

08001714 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001732:	463b      	mov	r3, r7
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 800173e:	4b32      	ldr	r3, [pc, #200]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001740:	4a32      	ldr	r2, [pc, #200]	; (800180c <MX_TIM4_Init+0xf8>)
 8001742:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001746:	f240 321f 	movw	r2, #799	; 0x31f
 800174a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <MX_TIM4_Init+0xf4>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001758:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b2b      	ldr	r3, [pc, #172]	; (8001808 <MX_TIM4_Init+0xf4>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001766:	4828      	ldr	r0, [pc, #160]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001768:	f001 ffcc 	bl	8003704 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001772:	f7ff fea5 	bl	80014c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0318 	add.w	r3, r7, #24
 8001780:	4619      	mov	r1, r3
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001784:	f002 fb52 	bl	8003e2c <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800178e:	f7ff fe97 	bl	80014c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001792:	481d      	ldr	r0, [pc, #116]	; (8001808 <MX_TIM4_Init+0xf4>)
 8001794:	f002 f850 	bl	8003838 <HAL_TIM_IC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800179e:	f7ff fe8f 	bl	80014c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	4619      	mov	r1, r3
 80017b0:	4815      	ldr	r0, [pc, #84]	; (8001808 <MX_TIM4_Init+0xf4>)
 80017b2:	f002 fe37 	bl	8004424 <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80017bc:	f7ff fe80 	bl	80014c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017c4:	2301      	movs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <MX_TIM4_Init+0xf4>)
 80017d8:	f002 fa94 	bl	8003d04 <HAL_TIM_IC_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80017e2:	f7ff fe6d 	bl	80014c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80017e6:	2302      	movs	r3, #2
 80017e8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80017ea:	463b      	mov	r3, r7
 80017ec:	2208      	movs	r2, #8
 80017ee:	4619      	mov	r1, r3
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_TIM4_Init+0xf4>)
 80017f2:	f002 fa87 	bl	8003d04 <HAL_TIM_IC_ConfigChannel>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80017fc:	f7ff fe60 	bl	80014c0 <Error_Handler>
  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000768 	.word	0x20000768
 800180c:	40000800 	.word	0x40000800

08001810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	; 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182e:	d114      	bne.n	800185a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a2d      	ldr	r2, [pc, #180]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	61d3      	str	r3, [r2, #28]
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	201c      	movs	r0, #28
 800184e:	f000 fed8 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001852:	201c      	movs	r0, #28
 8001854:	f000 fef1 	bl	800263a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001858:	e043      	b.n	80018e2 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <HAL_TIM_Base_MspInit+0xe0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d10c      	bne.n	800187e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	61d3      	str	r3, [r2, #28]
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
}
 800187c:	e031      	b.n	80018e2 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM4)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_TIM_Base_MspInit+0xe4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d12c      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a17      	ldr	r2, [pc, #92]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6193      	str	r3, [r2, #24]
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_TIM_Base_MspInit+0xdc>)
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80018b8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c2:	2301      	movs	r3, #1
 80018c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0318 	add.w	r3, r7, #24
 80018ca:	4619      	mov	r1, r3
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0xe8>)
 80018ce:	f001 f8bd 	bl	8002a4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2100      	movs	r1, #0
 80018d6:	201e      	movs	r0, #30
 80018d8:	f000 fe93 	bl	8002602 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018dc:	201e      	movs	r0, #30
 80018de:	f000 feac 	bl	800263a <HAL_NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40000800 	.word	0x40000800
 80018f8:	40010c00 	.word	0x40010c00

080018fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART2_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800190c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001934:	f002 fde6 	bl	8004504 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f7ff fdbf 	bl	80014c0 <Error_Handler>
  }

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000840 	.word	0x20000840
 800194c:	40004400 	.word	0x40004400

08001950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b088      	sub	sp, #32
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <HAL_UART_MspInit+0x88>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d12f      	bne.n	80019d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001970:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <HAL_UART_MspInit+0x8c>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	4a19      	ldr	r2, [pc, #100]	; (80019dc <HAL_UART_MspInit+0x8c>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	61d3      	str	r3, [r2, #28]
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_UART_MspInit+0x8c>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001988:	4b14      	ldr	r3, [pc, #80]	; (80019dc <HAL_UART_MspInit+0x8c>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <HAL_UART_MspInit+0x8c>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_UART_MspInit+0x8c>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019a0:	2304      	movs	r3, #4
 80019a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	4619      	mov	r1, r3
 80019b2:	480b      	ldr	r0, [pc, #44]	; (80019e0 <HAL_UART_MspInit+0x90>)
 80019b4:	f001 f84a 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b8:	2308      	movs	r3, #8
 80019ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_UART_MspInit+0x90>)
 80019cc:	f001 f83e 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010800 	.word	0x40010800

080019e4 <Reset_Handler>:
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <LoopFillZerobss+0x12>)
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <LoopFillZerobss+0x1a>)
 80019ea:	2300      	movs	r3, #0
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:
 80019ee:	58d4      	ldr	r4, [r2, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:
 80019f4:	18c4      	adds	r4, r0, r3
 80019f6:	428c      	cmp	r4, r1
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <LoopFillZerobss+0x1e>)
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <LoopFillZerobss+0x22>)
 80019fe:	2300      	movs	r3, #0
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:
 8001a06:	42a2      	cmp	r2, r4
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>
 8001a0a:	f7ff fde3 	bl	80015d4 <SystemInit>
 8001a0e:	f002 fe5b 	bl	80046c8 <__libc_init_array>
 8001a12:	f7ff fae1 	bl	8000fd8 <main>
 8001a16:	4770      	bx	lr
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000074 	.word	0x20000074
 8001a20:	08004978 	.word	0x08004978
 8001a24:	20000074 	.word	0x20000074
 8001a28:	20000888 	.word	0x20000888

08001a2c <CAN1_RX1_IRQHandler>:
 8001a2c:	e7fe      	b.n	8001a2c <CAN1_RX1_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x28>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x28>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 fdd3 	bl	80025ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fd3e 	bl	80014cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fdeb 	bl	8002656 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a98:	f000 fdb3 	bl	8002602 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x20>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000884 	.word	0x20000884

08001ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_GetTick+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000884 	.word	0x20000884

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_Delay+0x40>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffe0 	bl	8001ae0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0be      	b.n	8001cd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff f814 	bl	8000ba4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fbb9 	bl	80022f4 <ADC_ConversionStop_Disable>
 8001b82:	4603      	mov	r3, r0
 8001b84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8099 	bne.w	8001cc6 <HAL_ADC_Init+0x18e>
 8001b94:	7dfb      	ldrb	r3, [r7, #23]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 8095 	bne.w	8001cc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba4:	f023 0302 	bic.w	r3, r3, #2
 8001ba8:	f043 0202 	orr.w	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	7b1b      	ldrb	r3, [r3, #12]
 8001bbe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bc0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd0:	d003      	beq.n	8001bda <HAL_ADC_Init+0xa2>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d102      	bne.n	8001be0 <HAL_ADC_Init+0xa8>
 8001bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bde:	e000      	b.n	8001be2 <HAL_ADC_Init+0xaa>
 8001be0:	2300      	movs	r3, #0
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7d1b      	ldrb	r3, [r3, #20]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d119      	bne.n	8001c24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7b1b      	ldrb	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d109      	bne.n	8001c0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	035a      	lsls	r2, r3, #13
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e00b      	b.n	8001c24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c10:	f043 0220 	orr.w	r2, r3, #32
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	f043 0201 	orr.w	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <HAL_ADC_Init+0x1a8>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	68b9      	ldr	r1, [r7, #8]
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c54:	d003      	beq.n	8001c5e <HAL_ADC_Init+0x126>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d104      	bne.n	8001c68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	051b      	lsls	r3, r3, #20
 8001c66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_Init+0x1ac>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca2:	e018      	b.n	8001cd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f023 0312 	bic.w	r3, r3, #18
 8001cac:	f043 0210 	orr.w	r2, r3, #16
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	f043 0201 	orr.w	r2, r3, #1
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc4:	e007      	b.n	8001cd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f043 0210 	orr.w	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ce4:	ff1f0efe 	.word	0xff1f0efe

08001ce8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a64      	ldr	r2, [pc, #400]	; (8001e90 <HAL_ADC_Start_DMA+0x1a8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_ADC_Start_DMA+0x24>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a63      	ldr	r2, [pc, #396]	; (8001e94 <HAL_ADC_Start_DMA+0x1ac>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_Start_DMA+0x32>
 8001d0c:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <HAL_ADC_Start_DMA+0x1a8>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 80b3 	bne.w	8001e80 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_ADC_Start_DMA+0x40>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0ae      	b.n	8001e86 <HAL_ADC_Start_DMA+0x19e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 fa85 	bl	8002240 <ADC_Enable>
 8001d36:	4603      	mov	r3, r0
 8001d38:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f040 809a 	bne.w	8001e76 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d46:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4a:	f023 0301 	bic.w	r3, r3, #1
 8001d4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_ADC_Start_DMA+0x1ac>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d105      	bne.n	8001d6c <HAL_ADC_Start_DMA+0x84>
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_ADC_Start_DMA+0x1a8>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d115      	bne.n	8001d98 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d026      	beq.n	8001dd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d96:	e01d      	b.n	8001dd4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a39      	ldr	r2, [pc, #228]	; (8001e90 <HAL_ADC_Start_DMA+0x1a8>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d004      	beq.n	8001db8 <HAL_ADC_Start_DMA+0xd0>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a38      	ldr	r2, [pc, #224]	; (8001e94 <HAL_ADC_Start_DMA+0x1ac>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d10d      	bne.n	8001dd4 <HAL_ADC_Start_DMA+0xec>
 8001db8:	4b35      	ldr	r3, [pc, #212]	; (8001e90 <HAL_ADC_Start_DMA+0x1a8>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	f023 0206 	bic.w	r2, r3, #6
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <HAL_ADC_Start_DMA+0x1b0>)
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_ADC_Start_DMA+0x1b4>)
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <HAL_ADC_Start_DMA+0x1b8>)
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0202 	mvn.w	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a18      	ldr	r0, [r3, #32]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	334c      	adds	r3, #76	; 0x4c
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f000 fc71 	bl	8002724 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e4c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e50:	d108      	bne.n	8001e64 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e60:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e62:	e00f      	b.n	8001e84 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e72:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e74:	e006      	b.n	8001e84 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e7e:	e001      	b.n	8001e84 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40012400 	.word	0x40012400
 8001e94:	40012800 	.word	0x40012800
 8001e98:	08002377 	.word	0x08002377
 8001e9c:	080023f3 	.word	0x080023f3
 8001ea0:	0800240f 	.word	0x0800240f

08001ea4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b20      	cmp	r3, #32
 8001eb8:	d140      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d139      	bne.n	8001f3c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d105      	bne.n	8001ee0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001eee:	d11d      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d119      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0220 	bic.w	r2, r2, #32
 8001f06:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d105      	bne.n	8001f2c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff fa7f 	bl	8001430 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f06f 0212 	mvn.w	r2, #18
 8001f3a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f46:	2b80      	cmp	r3, #128	; 0x80
 8001f48:	d14f      	bne.n	8001fea <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d148      	bne.n	8001fea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5c:	f003 0310 	and.w	r3, r3, #16
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d105      	bne.n	8001f70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f68:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f7a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f7e:	d012      	beq.n	8001fa6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d125      	bne.n	8001fda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f98:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f9c:	d11d      	bne.n	8001fda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d119      	bne.n	8001fda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d105      	bne.n	8001fda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa31 	bl	8002442 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 020c 	mvn.w	r2, #12
 8001fe8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d114      	bne.n	8002022 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10d      	bne.n	8002022 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f809 	bl	800202a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0201 	mvn.w	r2, #1
 8002020:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
	...

08002050 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x20>
 800206c:	2302      	movs	r3, #2
 800206e:	e0dc      	b.n	800222a <HAL_ADC_ConfigChannel+0x1da>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b06      	cmp	r3, #6
 800207e:	d81c      	bhi.n	80020ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b05      	subs	r3, #5
 8002092:	221f      	movs	r2, #31
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	4019      	ands	r1, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	fa00 f203 	lsl.w	r2, r0, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
 80020b8:	e03c      	b.n	8002134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d81c      	bhi.n	80020fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b23      	subs	r3, #35	; 0x23
 80020d4:	221f      	movs	r2, #31
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	4019      	ands	r1, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b23      	subs	r3, #35	; 0x23
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
 80020fa:	e01b      	b.n	8002134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	3b41      	subs	r3, #65	; 0x41
 800210e:	221f      	movs	r2, #31
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	4019      	ands	r1, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b41      	subs	r3, #65	; 0x41
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b09      	cmp	r3, #9
 800213a:	d91c      	bls.n	8002176 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68d9      	ldr	r1, [r3, #12]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	4019      	ands	r1, r3
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6898      	ldr	r0, [r3, #8]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4413      	add	r3, r2
 8002166:	3b1e      	subs	r3, #30
 8002168:	fa00 f203 	lsl.w	r2, r0, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	e019      	b.n	80021aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6919      	ldr	r1, [r3, #16]
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4413      	add	r3, r2
 8002186:	2207      	movs	r2, #7
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	4019      	ands	r1, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	6898      	ldr	r0, [r3, #8]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	fa00 f203 	lsl.w	r2, r0, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d003      	beq.n	80021ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021b6:	2b11      	cmp	r3, #17
 80021b8:	d132      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_ADC_ConfigChannel+0x1e4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d125      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d126      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b10      	cmp	r3, #16
 80021e8:	d11a      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <HAL_ADC_ConfigChannel+0x1e8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a13      	ldr	r2, [pc, #76]	; (800223c <HAL_ADC_ConfigChannel+0x1ec>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x1b2>
 800220e:	e007      	b.n	8002220 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f043 0220 	orr.w	r2, r3, #32
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002228:	7bfb      	ldrb	r3, [r7, #15]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	40012400 	.word	0x40012400
 8002238:	20000000 	.word	0x20000000
 800223c:	431bde83 	.word	0x431bde83

08002240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d040      	beq.n	80022e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800226e:	4b1f      	ldr	r3, [pc, #124]	; (80022ec <ADC_Enable+0xac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1f      	ldr	r2, [pc, #124]	; (80022f0 <ADC_Enable+0xb0>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9b      	lsrs	r3, r3, #18
 800227a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800227c:	e002      	b.n	8002284 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3b01      	subs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800228a:	f7ff fc29 	bl	8001ae0 <HAL_GetTick>
 800228e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002290:	e01f      	b.n	80022d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002292:	f7ff fc25 	bl	8001ae0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d918      	bls.n	80022d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d011      	beq.n	80022d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d1d8      	bne.n	8002292 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b01      	cmp	r3, #1
 800230c:	d12e      	bne.n	800236c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800231e:	f7ff fbdf 	bl	8001ae0 <HAL_GetTick>
 8002322:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002324:	e01b      	b.n	800235e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002326:	f7ff fbdb 	bl	8001ae0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d914      	bls.n	800235e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10d      	bne.n	800235e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	f043 0210 	orr.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f043 0201 	orr.w	r2, r3, #1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e007      	b.n	800236e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d0dc      	beq.n	8002326 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800238c:	2b00      	cmp	r3, #0
 800238e:	d127      	bne.n	80023e0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023aa:	d115      	bne.n	80023d8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d111      	bne.n	80023d8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	f043 0201 	orr.w	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff f829 	bl	8001430 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023de:	e004      	b.n	80023ea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	4798      	blx	r3
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b084      	sub	sp, #16
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f7ff f807 	bl	8001414 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b084      	sub	sp, #16
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fe01 	bl	800203c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	; (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4906      	ldr	r1, [pc, #24]	; (80024ec <__NVIC_EnableIRQ+0x34>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	db0a      	blt.n	800251a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	b2da      	uxtb	r2, r3
 8002508:	490c      	ldr	r1, [pc, #48]	; (800253c <__NVIC_SetPriority+0x4c>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	0112      	lsls	r2, r2, #4
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	440b      	add	r3, r1
 8002514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002518:	e00a      	b.n	8002530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4908      	ldr	r1, [pc, #32]	; (8002540 <__NVIC_SetPriority+0x50>)
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3b04      	subs	r3, #4
 8002528:	0112      	lsls	r2, r2, #4
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	440b      	add	r3, r1
 800252e:	761a      	strb	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000e100 	.word	0xe000e100
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b480      	push	{r7}
 8002546:	b089      	sub	sp, #36	; 0x24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f1c3 0307 	rsb	r3, r3, #7
 800255e:	2b04      	cmp	r3, #4
 8002560:	bf28      	it	cs
 8002562:	2304      	movcs	r3, #4
 8002564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3304      	adds	r3, #4
 800256a:	2b06      	cmp	r3, #6
 800256c:	d902      	bls.n	8002574 <NVIC_EncodePriority+0x30>
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b03      	subs	r3, #3
 8002572:	e000      	b.n	8002576 <NVIC_EncodePriority+0x32>
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43da      	mvns	r2, r3
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	401a      	ands	r2, r3
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800258c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa01 f303 	lsl.w	r3, r1, r3
 8002596:	43d9      	mvns	r1, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	4313      	orrs	r3, r2
         );
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b8:	d301      	bcc.n	80025be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00f      	b.n	80025de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025be:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <SysTick_Config+0x40>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025c6:	210f      	movs	r1, #15
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025cc:	f7ff ff90 	bl	80024f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <SysTick_Config+0x40>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025d6:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <SysTick_Config+0x40>)
 80025d8:	2207      	movs	r2, #7
 80025da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	e000e010 	.word	0xe000e010

080025ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff2d 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	4603      	mov	r3, r0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002614:	f7ff ff42 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002618:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	6978      	ldr	r0, [r7, #20]
 8002620:	f7ff ff90 	bl	8002544 <NVIC_EncodePriority>
 8002624:	4602      	mov	r2, r0
 8002626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff5f 	bl	80024f0 <__NVIC_SetPriority>
}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff35 	bl	80024b8 <__NVIC_EnableIRQ>
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff ffa2 	bl	80025a8 <SysTick_Config>
 8002664:	4603      	mov	r3, r0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e043      	b.n	800270e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	461a      	mov	r2, r3
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_DMA_Init+0xa8>)
 800268e:	4413      	add	r3, r2
 8002690:	4a22      	ldr	r2, [pc, #136]	; (800271c <HAL_DMA_Init+0xac>)
 8002692:	fba2 2303 	umull	r2, r3, r2, r3
 8002696:	091b      	lsrs	r3, r3, #4
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_DMA_Init+0xb0>)
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2202      	movs	r2, #2
 80026a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	bffdfff8 	.word	0xbffdfff8
 800271c:	cccccccd 	.word	0xcccccccd
 8002720:	40020000 	.word	0x40020000

08002724 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3020 	ldrb.w	r3, [r3, #32]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_DMA_Start_IT+0x20>
 8002740:	2302      	movs	r3, #2
 8002742:	e04a      	b.n	80027da <HAL_DMA_Start_IT+0xb6>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002752:	2b01      	cmp	r3, #1
 8002754:	d13a      	bne.n	80027cc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f938 	bl	80029f0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 020e 	orr.w	r2, r2, #14
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	e00f      	b.n	80027ba <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0204 	bic.w	r2, r2, #4
 80027a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 020a 	orr.w	r2, r2, #10
 80027b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0201 	orr.w	r2, r2, #1
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	e005      	b.n	80027d8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027d4:	2302      	movs	r3, #2
 80027d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2204      	movs	r2, #4
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d04f      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04a      	beq.n	80028ac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d107      	bne.n	8002834 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0204 	bic.w	r2, r2, #4
 8002832:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a66      	ldr	r2, [pc, #408]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d029      	beq.n	8002892 <HAL_DMA_IRQHandler+0xae>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a65      	ldr	r2, [pc, #404]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_IRQHandler+0xaa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a63      	ldr	r2, [pc, #396]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0xa4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a62      	ldr	r2, [pc, #392]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d012      	beq.n	8002882 <HAL_DMA_IRQHandler+0x9e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00a      	beq.n	800287c <HAL_DMA_IRQHandler+0x98>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a5f      	ldr	r2, [pc, #380]	; (80029e8 <HAL_DMA_IRQHandler+0x204>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <HAL_DMA_IRQHandler+0x92>
 8002870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002874:	e00e      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002876:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800287a:	e00b      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800287c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002880:	e008      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002882:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002886:	e005      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800288c:	e002      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 800288e:	2340      	movs	r3, #64	; 0x40
 8002890:	e000      	b.n	8002894 <HAL_DMA_IRQHandler+0xb0>
 8002892:	2304      	movs	r3, #4
 8002894:	4a55      	ldr	r2, [pc, #340]	; (80029ec <HAL_DMA_IRQHandler+0x208>)
 8002896:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8094 	beq.w	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028aa:	e08e      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	2202      	movs	r2, #2
 80028b2:	409a      	lsls	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4013      	ands	r3, r2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d056      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d051      	beq.n	800296a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10b      	bne.n	80028ec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020a 	bic.w	r2, r2, #10
 80028e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_DMA_IRQHandler+0x1f0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d029      	beq.n	800294a <HAL_DMA_IRQHandler+0x166>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a37      	ldr	r2, [pc, #220]	; (80029d8 <HAL_DMA_IRQHandler+0x1f4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d022      	beq.n	8002946 <HAL_DMA_IRQHandler+0x162>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a35      	ldr	r2, [pc, #212]	; (80029dc <HAL_DMA_IRQHandler+0x1f8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d01a      	beq.n	8002940 <HAL_DMA_IRQHandler+0x15c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a34      	ldr	r2, [pc, #208]	; (80029e0 <HAL_DMA_IRQHandler+0x1fc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0x156>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a32      	ldr	r2, [pc, #200]	; (80029e4 <HAL_DMA_IRQHandler+0x200>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x150>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	; (80029e8 <HAL_DMA_IRQHandler+0x204>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d102      	bne.n	800292e <HAL_DMA_IRQHandler+0x14a>
 8002928:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800292c:	e00e      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800292e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002932:	e00b      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002938:	e008      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800293a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800293e:	e005      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002944:	e002      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 8002946:	2320      	movs	r3, #32
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0x168>
 800294a:	2302      	movs	r3, #2
 800294c:	4a27      	ldr	r2, [pc, #156]	; (80029ec <HAL_DMA_IRQHandler+0x208>)
 800294e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d034      	beq.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002968:	e02f      	b.n	80029ca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	2208      	movs	r2, #8
 8002970:	409a      	lsls	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4013      	ands	r3, r2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	f003 0308 	and.w	r3, r3, #8
 8002980:	2b00      	cmp	r3, #0
 8002982:	d023      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 020e 	bic.w	r2, r2, #14
 8002992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
    }
  }
  return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40020008 	.word	0x40020008
 80029d8:	4002001c 	.word	0x4002001c
 80029dc:	40020030 	.word	0x40020030
 80029e0:	40020044 	.word	0x40020044
 80029e4:	40020058 	.word	0x40020058
 80029e8:	4002006c 	.word	0x4002006c
 80029ec:	40020000 	.word	0x40020000

080029f0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
 80029fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a06:	2101      	movs	r1, #1
 8002a08:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b10      	cmp	r3, #16
 8002a1c:	d108      	bne.n	8002a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a2e:	e007      	b.n	8002a40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr
	...

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b08b      	sub	sp, #44	; 0x2c
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a56:	2300      	movs	r3, #0
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a5e:	e127      	b.n	8002cb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a60:	2201      	movs	r2, #1
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69fa      	ldr	r2, [r7, #28]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8116 	bne.w	8002caa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d034      	beq.n	8002af0 <HAL_GPIO_Init+0xa4>
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d80d      	bhi.n	8002aa6 <HAL_GPIO_Init+0x5a>
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d02b      	beq.n	8002ae6 <HAL_GPIO_Init+0x9a>
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d804      	bhi.n	8002a9c <HAL_GPIO_Init+0x50>
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d031      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d01c      	beq.n	8002ad4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a9a:	e048      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d043      	beq.n	8002b28 <HAL_GPIO_Init+0xdc>
 8002aa0:	2b11      	cmp	r3, #17
 8002aa2:	d01b      	beq.n	8002adc <HAL_GPIO_Init+0x90>
          break;
 8002aa4:	e043      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aa6:	4a89      	ldr	r2, [pc, #548]	; (8002ccc <HAL_GPIO_Init+0x280>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d026      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002aac:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_GPIO_Init+0x280>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d806      	bhi.n	8002ac0 <HAL_GPIO_Init+0x74>
 8002ab2:	4a87      	ldr	r2, [pc, #540]	; (8002cd0 <HAL_GPIO_Init+0x284>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d020      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002ab8:	4a86      	ldr	r2, [pc, #536]	; (8002cd4 <HAL_GPIO_Init+0x288>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d01d      	beq.n	8002afa <HAL_GPIO_Init+0xae>
          break;
 8002abe:	e036      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac0:	4a85      	ldr	r2, [pc, #532]	; (8002cd8 <HAL_GPIO_Init+0x28c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d019      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002ac6:	4a85      	ldr	r2, [pc, #532]	; (8002cdc <HAL_GPIO_Init+0x290>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d016      	beq.n	8002afa <HAL_GPIO_Init+0xae>
 8002acc:	4a84      	ldr	r2, [pc, #528]	; (8002ce0 <HAL_GPIO_Init+0x294>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d013      	beq.n	8002afa <HAL_GPIO_Init+0xae>
          break;
 8002ad2:	e02c      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	623b      	str	r3, [r7, #32]
          break;
 8002ada:	e028      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	623b      	str	r3, [r7, #32]
          break;
 8002ae4:	e023      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	3308      	adds	r3, #8
 8002aec:	623b      	str	r3, [r7, #32]
          break;
 8002aee:	e01e      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	330c      	adds	r3, #12
 8002af6:	623b      	str	r3, [r7, #32]
          break;
 8002af8:	e019      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b02:	2304      	movs	r3, #4
 8002b04:	623b      	str	r3, [r7, #32]
          break;
 8002b06:	e012      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b10:	2308      	movs	r3, #8
 8002b12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	611a      	str	r2, [r3, #16]
          break;
 8002b1a:	e008      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	615a      	str	r2, [r3, #20]
          break;
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
          break;
 8002b2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2bff      	cmp	r3, #255	; 0xff
 8002b32:	d801      	bhi.n	8002b38 <HAL_GPIO_Init+0xec>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	e001      	b.n	8002b3c <HAL_GPIO_Init+0xf0>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2bff      	cmp	r3, #255	; 0xff
 8002b42:	d802      	bhi.n	8002b4a <HAL_GPIO_Init+0xfe>
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_Init+0x104>
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3b08      	subs	r3, #8
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	210f      	movs	r1, #15
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	401a      	ands	r2, r3
 8002b62:	6a39      	ldr	r1, [r7, #32]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 8096 	beq.w	8002caa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b7e:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	4a58      	ldr	r2, [pc, #352]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6193      	str	r3, [r2, #24]
 8002b8a:	4b56      	ldr	r3, [pc, #344]	; (8002ce4 <HAL_GPIO_Init+0x298>)
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b96:	4a54      	ldr	r2, [pc, #336]	; (8002ce8 <HAL_GPIO_Init+0x29c>)
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_GPIO_Init+0x2a0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d013      	beq.n	8002bea <HAL_GPIO_Init+0x19e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_GPIO_Init+0x2a4>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00d      	beq.n	8002be6 <HAL_GPIO_Init+0x19a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a49      	ldr	r2, [pc, #292]	; (8002cf4 <HAL_GPIO_Init+0x2a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d007      	beq.n	8002be2 <HAL_GPIO_Init+0x196>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a48      	ldr	r2, [pc, #288]	; (8002cf8 <HAL_GPIO_Init+0x2ac>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_GPIO_Init+0x192>
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e006      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002bde:	2304      	movs	r3, #4
 8002be0:	e004      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e002      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <HAL_GPIO_Init+0x1a0>
 8002bea:	2300      	movs	r3, #0
 8002bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bee:	f002 0203 	and.w	r2, r2, #3
 8002bf2:	0092      	lsls	r2, r2, #2
 8002bf4:	4093      	lsls	r3, r2
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bfc:	493a      	ldr	r1, [pc, #232]	; (8002ce8 <HAL_GPIO_Init+0x29c>)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	089b      	lsrs	r3, r3, #2
 8002c02:	3302      	adds	r3, #2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c16:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4938      	ldr	r1, [pc, #224]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]
 8002c22:	e006      	b.n	8002c32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c24:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	4933      	ldr	r1, [pc, #204]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	492e      	ldr	r1, [pc, #184]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
 8002c4a:	e006      	b.n	8002c5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	4929      	ldr	r1, [pc, #164]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c66:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4924      	ldr	r1, [pc, #144]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
 8002c72:	e006      	b.n	8002c82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c74:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	491f      	ldr	r1, [pc, #124]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	491a      	ldr	r1, [pc, #104]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60cb      	str	r3, [r1, #12]
 8002c9a:	e006      	b.n	8002caa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	4915      	ldr	r1, [pc, #84]	; (8002cfc <HAL_GPIO_Init+0x2b0>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3301      	adds	r3, #1
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f47f aed0 	bne.w	8002a60 <HAL_GPIO_Init+0x14>
  }
}
 8002cc0:	bf00      	nop
 8002cc2:	372c      	adds	r7, #44	; 0x2c
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	10210000 	.word	0x10210000
 8002cd0:	10110000 	.word	0x10110000
 8002cd4:	10120000 	.word	0x10120000
 8002cd8:	10310000 	.word	0x10310000
 8002cdc:	10320000 	.word	0x10320000
 8002ce0:	10220000 	.word	0x10220000
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40010000 	.word	0x40010000
 8002cec:	40010800 	.word	0x40010800
 8002cf0:	40010c00 	.word	0x40010c00
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	887b      	ldrh	r3, [r7, #2]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e001      	b.n	8002d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	460b      	mov	r3, r1
 8002d38:	807b      	strh	r3, [r7, #2]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d3e:	787b      	ldrb	r3, [r7, #1]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d44:	887a      	ldrh	r2, [r7, #2]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d4a:	e003      	b.n	8002d54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d4c:	887b      	ldrh	r3, [r7, #2]
 8002d4e:	041a      	lsls	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bc80      	pop	{r7}
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e26c      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 8087 	beq.w	8002e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d80:	4b92      	ldr	r3, [pc, #584]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 030c 	and.w	r3, r3, #12
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d00c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d8c:	4b8f      	ldr	r3, [pc, #572]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	d112      	bne.n	8002dbe <HAL_RCC_OscConfig+0x5e>
 8002d98:	4b8c      	ldr	r3, [pc, #560]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da4:	d10b      	bne.n	8002dbe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d06c      	beq.n	8002e8c <HAL_RCC_OscConfig+0x12c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d168      	bne.n	8002e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e246      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x76>
 8002dc8:	4b80      	ldr	r3, [pc, #512]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e02e      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x98>
 8002dde:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7a      	ldr	r2, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0xbc>
 8002e02:	4b72      	ldr	r3, [pc, #456]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6e      	ldr	r2, [pc, #440]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xd4>
 8002e1c:	4b6b      	ldr	r3, [pc, #428]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b68      	ldr	r3, [pc, #416]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a67      	ldr	r2, [pc, #412]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fe50 	bl	8001ae0 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fe4c 	bl	8001ae0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1fa      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xe4>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fe3c 	bl	8001ae0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fe38 	bl	8001ae0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	; 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1e6      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b53      	ldr	r3, [pc, #332]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x10c>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e9a:	4b4c      	ldr	r3, [pc, #304]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ea6:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x18c>
 8002eb2:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x176>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1ba      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b3d      	ldr	r3, [pc, #244]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4939      	ldr	r1, [pc, #228]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e03a      	b.n	8002f62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efa:	f7fe fdf1 	bl	8001ae0 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fe fded 	bl	8001ae0 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e19b      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b2a      	ldr	r3, [pc, #168]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4927      	ldr	r1, [pc, #156]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b26      	ldr	r3, [pc, #152]	; (8002fd0 <HAL_RCC_OscConfig+0x270>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fdd0 	bl	8001ae0 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fe fdcc 	bl	8001ae0 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e17a      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d03a      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d019      	beq.n	8002faa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fdb0 	bl	8001ae0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fdac 	bl	8001ae0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e15a      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	4b0d      	ldr	r3, [pc, #52]	; (8002fcc <HAL_RCC_OscConfig+0x26c>)
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	f000 fada 	bl	800355c <RCC_Delay>
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_RCC_OscConfig+0x274>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb0:	f7fe fd96 	bl	8001ae0 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fd92 	bl	8001ae0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d908      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e140      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
 8002fca:	bf00      	nop
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	42420000 	.word	0x42420000
 8002fd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	4b9e      	ldr	r3, [pc, #632]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e9      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80a6 	beq.w	800313e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff6:	4b97      	ldr	r3, [pc, #604]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10d      	bne.n	800301e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b94      	ldr	r3, [pc, #592]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	69db      	ldr	r3, [r3, #28]
 8003006:	4a93      	ldr	r2, [pc, #588]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800300c:	61d3      	str	r3, [r2, #28]
 800300e:	4b91      	ldr	r3, [pc, #580]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301e:	4b8e      	ldr	r3, [pc, #568]	; (8003258 <HAL_RCC_OscConfig+0x4f8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d118      	bne.n	800305c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302a:	4b8b      	ldr	r3, [pc, #556]	; (8003258 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a8a      	ldr	r2, [pc, #552]	; (8003258 <HAL_RCC_OscConfig+0x4f8>)
 8003030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003036:	f7fe fd53 	bl	8001ae0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303e:	f7fe fd4f 	bl	8001ae0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b64      	cmp	r3, #100	; 0x64
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0fd      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003050:	4b81      	ldr	r3, [pc, #516]	; (8003258 <HAL_RCC_OscConfig+0x4f8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d106      	bne.n	8003072 <HAL_RCC_OscConfig+0x312>
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a7a      	ldr	r2, [pc, #488]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	e02d      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10c      	bne.n	8003094 <HAL_RCC_OscConfig+0x334>
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a75      	ldr	r2, [pc, #468]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6213      	str	r3, [r2, #32]
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	4a72      	ldr	r2, [pc, #456]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800308c:	f023 0304 	bic.w	r3, r3, #4
 8003090:	6213      	str	r3, [r2, #32]
 8003092:	e01c      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	2b05      	cmp	r3, #5
 800309a:	d10c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x356>
 800309c:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	4a6c      	ldr	r2, [pc, #432]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030a2:	f043 0304 	orr.w	r3, r3, #4
 80030a6:	6213      	str	r3, [r2, #32]
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	4a69      	ldr	r2, [pc, #420]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	6213      	str	r3, [r2, #32]
 80030b4:	e00b      	b.n	80030ce <HAL_RCC_OscConfig+0x36e>
 80030b6:	4b67      	ldr	r3, [pc, #412]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	4a66      	ldr	r2, [pc, #408]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	6213      	str	r3, [r2, #32]
 80030c2:	4b64      	ldr	r3, [pc, #400]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	4a63      	ldr	r2, [pc, #396]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030c8:	f023 0304 	bic.w	r3, r3, #4
 80030cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d015      	beq.n	8003102 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fd03 	bl	8001ae0 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030dc:	e00a      	b.n	80030f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f7fe fcff 	bl	8001ae0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e0ab      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f4:	4b57      	ldr	r3, [pc, #348]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0ee      	beq.n	80030de <HAL_RCC_OscConfig+0x37e>
 8003100:	e014      	b.n	800312c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fced 	bl	8001ae0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe fce9 	bl	8001ae0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e095      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003120:	4b4c      	ldr	r3, [pc, #304]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ee      	bne.n	800310a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003132:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	4a47      	ldr	r2, [pc, #284]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 8081 	beq.w	800324a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003148:	4b42      	ldr	r3, [pc, #264]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b08      	cmp	r3, #8
 8003152:	d061      	beq.n	8003218 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d146      	bne.n	80031ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315c:	4b3f      	ldr	r3, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x4fc>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7fe fcbd 	bl	8001ae0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316a:	f7fe fcb9 	bl	8001ae0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e067      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317c:	4b35      	ldr	r3, [pc, #212]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f0      	bne.n	800316a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d108      	bne.n	80031a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	492d      	ldr	r1, [pc, #180]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a4:	4b2b      	ldr	r3, [pc, #172]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a19      	ldr	r1, [r3, #32]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	430b      	orrs	r3, r1
 80031b6:	4927      	ldr	r1, [pc, #156]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_RCC_OscConfig+0x4fc>)
 80031be:	2201      	movs	r2, #1
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fc8d 	bl	8001ae0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ca:	f7fe fc89 	bl	8001ae0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e037      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031dc:	4b1d      	ldr	r3, [pc, #116]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x46a>
 80031e8:	e02f      	b.n	800324a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ea:	4b1c      	ldr	r3, [pc, #112]	; (800325c <HAL_RCC_OscConfig+0x4fc>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe fc76 	bl	8001ae0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f8:	f7fe fc72 	bl	8001ae0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e020      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x498>
 8003216:	e018      	b.n	800324a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e013      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003224:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <HAL_RCC_OscConfig+0x4f4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	429a      	cmp	r2, r3
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d001      	beq.n	800324a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	40007000 	.word	0x40007000
 800325c:	42420060 	.word	0x42420060

08003260 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0d0      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b6a      	ldr	r3, [pc, #424]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d910      	bls.n	80032a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4965      	ldr	r1, [pc, #404]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b63      	ldr	r3, [pc, #396]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0b8      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0304 	and.w	r3, r3, #4
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032bc:	4b59      	ldr	r3, [pc, #356]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a58      	ldr	r2, [pc, #352]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4a52      	ldr	r2, [pc, #328]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e0:	4b50      	ldr	r3, [pc, #320]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	494d      	ldr	r1, [pc, #308]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d040      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d115      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e07f      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b41      	ldr	r3, [pc, #260]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e073      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e06b      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b39      	ldr	r3, [pc, #228]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4936      	ldr	r1, [pc, #216]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fe fbc6 	bl	8001ae0 <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fe fbc2 	bl	8001ae0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	; 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e053      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b27      	ldr	r3, [pc, #156]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d210      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b24      	ldr	r3, [pc, #144]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f023 0207 	bic.w	r2, r3, #7
 8003396:	4922      	ldr	r1, [pc, #136]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d001      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e032      	b.n	8003416 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b19      	ldr	r3, [pc, #100]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4916      	ldr	r1, [pc, #88]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033da:	4b12      	ldr	r3, [pc, #72]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	490e      	ldr	r1, [pc, #56]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ee:	f000 f821 	bl	8003434 <HAL_RCC_GetSysClockFreq>
 80033f2:	4601      	mov	r1, r0
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 030f 	and.w	r3, r3, #15
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	5cd3      	ldrb	r3, [r2, r3]
 8003402:	fa21 f303 	lsr.w	r3, r1, r3
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1cc>)
 8003408:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800340a:	4b09      	ldr	r3, [pc, #36]	; (8003430 <HAL_RCC_ClockConfig+0x1d0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe fb24 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40022000 	.word	0x40022000
 8003424:	40021000 	.word	0x40021000
 8003428:	08004950 	.word	0x08004950
 800342c:	20000000 	.word	0x20000000
 8003430:	20000004 	.word	0x20000004

08003434 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003434:	b490      	push	{r4, r7}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800343a:	4b2a      	ldr	r3, [pc, #168]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800343c:	1d3c      	adds	r4, r7, #4
 800343e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003444:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d002      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x40>
 800346e:	2b08      	cmp	r3, #8
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x46>
 8003472:	e02d      	b.n	80034d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003476:	623b      	str	r3, [r7, #32]
      break;
 8003478:	e02d      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	0c9b      	lsrs	r3, r3, #18
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003486:	4413      	add	r3, r2
 8003488:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800348c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	0c5b      	lsrs	r3, r3, #17
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034a6:	4413      	add	r3, r2
 80034a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034b2:	fb02 f203 	mul.w	r2, r2, r3
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
 80034be:	e004      	b.n	80034ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4a0c      	ldr	r2, [pc, #48]	; (80034f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	623b      	str	r3, [r7, #32]
      break;
 80034ce:	e002      	b.n	80034d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034d2:	623b      	str	r3, [r7, #32]
      break;
 80034d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d6:	6a3b      	ldr	r3, [r7, #32]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3728      	adds	r7, #40	; 0x28
 80034dc:	46bd      	mov	sp, r7
 80034de:	bc90      	pop	{r4, r7}
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	0800493c 	.word	0x0800493c
 80034e8:	0800494c 	.word	0x0800494c
 80034ec:	40021000 	.word	0x40021000
 80034f0:	007a1200 	.word	0x007a1200
 80034f4:	003d0900 	.word	0x003d0900

080034f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <HAL_RCC_GetHCLKFreq+0x10>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	20000000 	.word	0x20000000

0800350c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003510:	f7ff fff2 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 8003514:	4601      	mov	r1, r0
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	4a03      	ldr	r2, [pc, #12]	; (8003530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003528:	4618      	mov	r0, r3
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	08004960 	.word	0x08004960

08003534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003538:	f7ff ffde 	bl	80034f8 <HAL_RCC_GetHCLKFreq>
 800353c:	4601      	mov	r1, r0
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	0adb      	lsrs	r3, r3, #11
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	4a03      	ldr	r2, [pc, #12]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003550:	4618      	mov	r0, r3
 8003552:	bd80      	pop	{r7, pc}
 8003554:	40021000 	.word	0x40021000
 8003558:	08004960 	.word	0x08004960

0800355c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <RCC_Delay+0x34>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <RCC_Delay+0x38>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	0a5b      	lsrs	r3, r3, #9
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003578:	bf00      	nop
  }
  while (Delay --);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	60fa      	str	r2, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1f9      	bne.n	8003578 <RCC_Delay+0x1c>
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000000 	.word	0x20000000
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d07d      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035b4:	2300      	movs	r3, #0
 80035b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b8:	4b4f      	ldr	r3, [pc, #316]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10d      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a4b      	ldr	r2, [pc, #300]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	61d3      	str	r3, [r2, #28]
 80035d0:	4b49      	ldr	r3, [pc, #292]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	60bb      	str	r3, [r7, #8]
 80035da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035dc:	2301      	movs	r3, #1
 80035de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b46      	ldr	r3, [pc, #280]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d118      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ec:	4b43      	ldr	r3, [pc, #268]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a42      	ldr	r2, [pc, #264]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f8:	f7fe fa72 	bl	8001ae0 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	e008      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe fa6e 	bl	8001ae0 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e06d      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003626:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d02e      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	429a      	cmp	r2, r3
 800363a:	d027      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800363c:	4b2e      	ldr	r3, [pc, #184]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003644:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364c:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003652:	4a29      	ldr	r2, [pc, #164]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003662:	f7fe fa3d 	bl	8001ae0 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003668:	e00a      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366a:	f7fe fa39 	bl	8001ae0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	f241 3288 	movw	r2, #5000	; 0x1388
 8003678:	4293      	cmp	r3, r2
 800367a:	d901      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e036      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ee      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4917      	ldr	r1, [pc, #92]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	4313      	orrs	r3, r2
 800369c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369e:	7dfb      	ldrb	r3, [r7, #23]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036bc:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	490b      	ldr	r1, [pc, #44]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	4904      	ldr	r1, [pc, #16]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	42420440 	.word	0x42420440

08003704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e041      	b.n	800379a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f870 	bl	8001810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	4619      	mov	r1, r3
 8003742:	4610      	mov	r0, r2
 8003744:	f000 fc44 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d001      	beq.n	80037bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e032      	b.n	8003822 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_TIM_Base_Start+0x88>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00e      	beq.n	80037ec <HAL_TIM_Base_Start+0x48>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d6:	d009      	beq.n	80037ec <HAL_TIM_Base_Start+0x48>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <HAL_TIM_Base_Start+0x8c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d004      	beq.n	80037ec <HAL_TIM_Base_Start+0x48>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <HAL_TIM_Base_Start+0x90>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d111      	bne.n	8003810 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2b06      	cmp	r3, #6
 80037fc:	d010      	beq.n	8003820 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	e007      	b.n	8003820 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800

08003838 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e041      	b.n	80038ce <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f839 	bl	80038d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3304      	adds	r3, #4
 8003874:	4619      	mov	r1, r3
 8003876:	4610      	mov	r0, r2
 8003878:	f000 fbaa 	bl	8003fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_IC_Start_IT+0x1a>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	e013      	b.n	800392a <HAL_TIM_IC_Start_IT+0x42>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b04      	cmp	r3, #4
 8003906:	d104      	bne.n	8003912 <HAL_TIM_IC_Start_IT+0x2a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800390e:	b2db      	uxtb	r3, r3
 8003910:	e00b      	b.n	800392a <HAL_TIM_IC_Start_IT+0x42>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b08      	cmp	r3, #8
 8003916:	d104      	bne.n	8003922 <HAL_TIM_IC_Start_IT+0x3a>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391e:	b2db      	uxtb	r3, r3
 8003920:	e003      	b.n	800392a <HAL_TIM_IC_Start_IT+0x42>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003928:	b2db      	uxtb	r3, r3
 800392a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d104      	bne.n	800393c <HAL_TIM_IC_Start_IT+0x54>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e013      	b.n	8003964 <HAL_TIM_IC_Start_IT+0x7c>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d104      	bne.n	800394c <HAL_TIM_IC_Start_IT+0x64>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e00b      	b.n	8003964 <HAL_TIM_IC_Start_IT+0x7c>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b08      	cmp	r3, #8
 8003950:	d104      	bne.n	800395c <HAL_TIM_IC_Start_IT+0x74>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e003      	b.n	8003964 <HAL_TIM_IC_Start_IT+0x7c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003962:	b2db      	uxtb	r3, r3
 8003964:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d102      	bne.n	8003972 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800396c:	7bbb      	ldrb	r3, [r7, #14]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e0b3      	b.n	8003ade <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <HAL_TIM_IC_Start_IT+0x9e>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003984:	e013      	b.n	80039ae <HAL_TIM_IC_Start_IT+0xc6>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d104      	bne.n	8003996 <HAL_TIM_IC_Start_IT+0xae>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	e00b      	b.n	80039ae <HAL_TIM_IC_Start_IT+0xc6>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b08      	cmp	r3, #8
 800399a:	d104      	bne.n	80039a6 <HAL_TIM_IC_Start_IT+0xbe>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a4:	e003      	b.n	80039ae <HAL_TIM_IC_Start_IT+0xc6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_TIM_IC_Start_IT+0xd6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039bc:	e013      	b.n	80039e6 <HAL_TIM_IC_Start_IT+0xfe>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d104      	bne.n	80039ce <HAL_TIM_IC_Start_IT+0xe6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039cc:	e00b      	b.n	80039e6 <HAL_TIM_IC_Start_IT+0xfe>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d104      	bne.n	80039de <HAL_TIM_IC_Start_IT+0xf6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039dc:	e003      	b.n	80039e6 <HAL_TIM_IC_Start_IT+0xfe>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2202      	movs	r2, #2
 80039e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d841      	bhi.n	8003a70 <HAL_TIM_IC_Start_IT+0x188>
 80039ec:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_TIM_IC_Start_IT+0x10c>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a71 	.word	0x08003a71
 80039fc:	08003a71 	.word	0x08003a71
 8003a00:	08003a71 	.word	0x08003a71
 8003a04:	08003a3b 	.word	0x08003a3b
 8003a08:	08003a71 	.word	0x08003a71
 8003a0c:	08003a71 	.word	0x08003a71
 8003a10:	08003a71 	.word	0x08003a71
 8003a14:	08003a4d 	.word	0x08003a4d
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	08003a71 	.word	0x08003a71
 8003a20:	08003a71 	.word	0x08003a71
 8003a24:	08003a5f 	.word	0x08003a5f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0202 	orr.w	r2, r2, #2
 8003a36:	60da      	str	r2, [r3, #12]
      break;
 8003a38:	e01b      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0204 	orr.w	r2, r2, #4
 8003a48:	60da      	str	r2, [r3, #12]
      break;
 8003a4a:	e012      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0208 	orr.w	r2, r2, #8
 8003a5a:	60da      	str	r2, [r3, #12]
      break;
 8003a5c:	e009      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0210 	orr.w	r2, r2, #16
 8003a6c:	60da      	str	r2, [r3, #12]
      break;
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003a70:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2201      	movs	r2, #1
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fcad 	bl	80043da <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_TIM_IC_Start_IT+0x200>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00e      	beq.n	8003aa8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a92:	d009      	beq.n	8003aa8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a14      	ldr	r2, [pc, #80]	; (8003aec <HAL_TIM_IC_Start_IT+0x204>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d004      	beq.n	8003aa8 <HAL_TIM_IC_Start_IT+0x1c0>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a13      	ldr	r2, [pc, #76]	; (8003af0 <HAL_TIM_IC_Start_IT+0x208>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d010      	beq.n	8003adc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0201 	orr.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aca:	e007      	b.n	8003adc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40000400 	.word	0x40000400
 8003af0:	40000800 	.word	0x40000800

08003af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0202 	mvn.w	r2, #2
 8003b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fc88 	bl	800144c <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa2b 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa31 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0204 	mvn.w	r2, #4
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd fc5e 	bl	800144c <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa01 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa07 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b08      	cmp	r3, #8
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0208 	mvn.w	r2, #8
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2204      	movs	r2, #4
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fc34 	bl	800144c <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9d7 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9dd 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b10      	cmp	r3, #16
 8003c04:	d122      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b10      	cmp	r3, #16
 8003c12:	d11b      	bne.n	8003c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0210 	mvn.w	r2, #16
 8003c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2208      	movs	r2, #8
 8003c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fc0a 	bl	800144c <HAL_TIM_IC_CaptureCallback>
 8003c38:	e005      	b.n	8003c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f9ad 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f000 f9b3 	bl	8003fac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d10e      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d107      	bne.n	8003c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f06f 0201 	mvn.w	r2, #1
 8003c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fc10 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b80      	cmp	r3, #128	; 0x80
 8003c84:	d10e      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c90:	2b80      	cmp	r3, #128	; 0x80
 8003c92:	d107      	bne.n	8003ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 fc27 	bl	80044f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d10e      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d107      	bne.n	8003cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f977 	bl	8003fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 0320 	and.w	r3, r3, #32
 8003cda:	2b20      	cmp	r3, #32
 8003cdc:	d10e      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d107      	bne.n	8003cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f06f 0220 	mvn.w	r2, #32
 8003cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fbf2 	bl	80044e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_TIM_IC_ConfigChannel+0x1a>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e082      	b.n	8003e24 <HAL_TIM_IC_ConfigChannel+0x120>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f000 f9aa 	bl	8004094 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699a      	ldr	r2, [r3, #24]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 020c 	bic.w	r2, r2, #12
 8003d4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	619a      	str	r2, [r3, #24]
 8003d62:	e05a      	b.n	8003e1a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d11c      	bne.n	8003da4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	6819      	ldr	r1, [r3, #0]
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	f000 fa13 	bl	80041a4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	021a      	lsls	r2, r3, #8
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	619a      	str	r2, [r3, #24]
 8003da2:	e03a      	b.n	8003e1a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11b      	bne.n	8003de2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f000 fa5e 	bl	800427a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 020c 	bic.w	r2, r2, #12
 8003dcc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
 8003de0:	e01b      	b.n	8003e1a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6819      	ldr	r1, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f000 fa7d 	bl	80042f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e04:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	021a      	lsls	r2, r3, #8
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_TIM_ConfigClockSource+0x18>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e0a6      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x166>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b40      	cmp	r3, #64	; 0x40
 8003e7a:	d067      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0x120>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d80b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x6c>
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d073      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e84:	2b10      	cmp	r3, #16
 8003e86:	d802      	bhi.n	8003e8e <HAL_TIM_ConfigClockSource+0x62>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d06f      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003e8c:	e078      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d06c      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
 8003e92:	2b30      	cmp	r3, #48	; 0x30
 8003e94:	d06a      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e96:	e073      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e98:	2b70      	cmp	r3, #112	; 0x70
 8003e9a:	d00d      	beq.n	8003eb8 <HAL_TIM_ConfigClockSource+0x8c>
 8003e9c:	2b70      	cmp	r3, #112	; 0x70
 8003e9e:	d804      	bhi.n	8003eaa <HAL_TIM_ConfigClockSource+0x7e>
 8003ea0:	2b50      	cmp	r3, #80	; 0x50
 8003ea2:	d033      	beq.n	8003f0c <HAL_TIM_ConfigClockSource+0xe0>
 8003ea4:	2b60      	cmp	r3, #96	; 0x60
 8003ea6:	d041      	beq.n	8003f2c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ea8:	e06a      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eae:	d066      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x152>
 8003eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb4:	d017      	beq.n	8003ee6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eb6:	e063      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	6899      	ldr	r1, [r3, #8]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f000 fa68 	bl	800439c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eda:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
      break;
 8003ee4:	e04c      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685a      	ldr	r2, [r3, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f000 fa51 	bl	800439c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f08:	609a      	str	r2, [r3, #8]
      break;
 8003f0a:	e039      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	6859      	ldr	r1, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f000 f915 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2150      	movs	r1, #80	; 0x50
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fa1f 	bl	8004368 <TIM_ITRx_SetConfig>
      break;
 8003f2a:	e029      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f000 f96f 	bl	800421c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2160      	movs	r1, #96	; 0x60
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fa0f 	bl	8004368 <TIM_ITRx_SetConfig>
      break;
 8003f4a:	e019      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f000 f8f5 	bl	8004148 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2140      	movs	r1, #64	; 0x40
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 f9ff 	bl	8004368 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e009      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 f9f6 	bl	8004368 <TIM_ITRx_SetConfig>
        break;
 8003f7c:	e000      	b.n	8003f80 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a29      	ldr	r2, [pc, #164]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <TIM_Base_SetConfig+0xbc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x30>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <TIM_Base_SetConfig+0xc0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1c      	ldr	r2, [pc, #112]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00b      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d007      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <TIM_Base_SetConfig+0xbc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d003      	beq.n	8004032 <TIM_Base_SetConfig+0x62>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <TIM_Base_SetConfig+0xc0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d108      	bne.n	8004044 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a07      	ldr	r2, [pc, #28]	; (8004088 <TIM_Base_SetConfig+0xb8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d103      	bne.n	8004078 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	615a      	str	r2, [r3, #20]
}
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800

08004094 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	f023 0201 	bic.w	r2, r3, #1
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	699b      	ldr	r3, [r3, #24]
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	; (800413c <TIM_TI1_SetConfig+0xa8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d00b      	beq.n	80040da <TIM_TI1_SetConfig+0x46>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c8:	d007      	beq.n	80040da <TIM_TI1_SetConfig+0x46>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <TIM_TI1_SetConfig+0xac>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d003      	beq.n	80040da <TIM_TI1_SetConfig+0x46>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	; (8004144 <TIM_TI1_SetConfig+0xb0>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d101      	bne.n	80040de <TIM_TI1_SetConfig+0x4a>
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <TIM_TI1_SetConfig+0x4c>
 80040de:	2300      	movs	r3, #0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e003      	b.n	80040fe <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004104:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	b2db      	uxtb	r3, r3
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f023 030a 	bic.w	r3, r3, #10
 8004118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 030a 	and.w	r3, r3, #10
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	40012c00 	.word	0x40012c00
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800

08004148 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b087      	sub	sp, #28
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004172:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	011b      	lsls	r3, r3, #4
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	4313      	orrs	r3, r2
 800417c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f023 030a 	bic.w	r3, r3, #10
 8004184:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	f023 0210 	bic.w	r2, r3, #16
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	031b      	lsls	r3, r3, #12
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041f6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4313      	orrs	r3, r2
 8004204:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f023 0210 	bic.w	r2, r3, #16
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	031b      	lsls	r3, r3, #12
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	4313      	orrs	r3, r2
 8004262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800427a:	b480      	push	{r7}
 800427c:	b087      	sub	sp, #28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800432e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	b29b      	uxth	r3, r3
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	031b      	lsls	r3, r3, #12
 8004348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	f043 0307 	orr.w	r3, r3, #7
 800438a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	609a      	str	r2, [r3, #8]
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr

080043da <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f003 031f 	and.w	r3, r3, #31
 80043ec:	2201      	movs	r2, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	401a      	ands	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1a      	ldr	r2, [r3, #32]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	431a      	orrs	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	bf00      	nop
 800441a:	371c      	adds	r7, #28
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr
	...

08004424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004438:	2302      	movs	r3, #2
 800443a:	e046      	b.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a16      	ldr	r2, [pc, #88]	; (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00e      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004488:	d009      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d004      	beq.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a10      	ldr	r2, [pc, #64]	; (80044dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10c      	bne.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bc80      	pop	{r7}
 80044d2:	4770      	bx	lr
 80044d4:	40012c00 	.word	0x40012c00
 80044d8:	40000400 	.word	0x40000400
 80044dc:	40000800 	.word	0x40000800

080044e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bc80      	pop	{r7}
 80044f0:	4770      	bx	lr

080044f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e03f      	b.n	8004596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7fd fa10 	bl	8001950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2224      	movs	r2, #36	; 0x24
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f829 	bl	80045a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800455c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800456c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800457c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045da:	f023 030c 	bic.w	r3, r3, #12
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	430b      	orrs	r3, r1
 80045e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2c      	ldr	r2, [pc, #176]	; (80046b4 <UART_SetConfig+0x114>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004608:	f7fe ff94 	bl	8003534 <HAL_RCC_GetPCLK2Freq>
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	e002      	b.n	8004616 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7fe ff7c 	bl	800350c <HAL_RCC_GetPCLK1Freq>
 8004614:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <UART_SetConfig+0x118>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	0119      	lsls	r1, r3, #4
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <UART_SetConfig+0x118>)
 800464e:	fba3 0302 	umull	r0, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2064      	movs	r0, #100	; 0x64
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <UART_SetConfig+0x118>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466c:	4419      	add	r1, r3
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009a      	lsls	r2, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4b0c      	ldr	r3, [pc, #48]	; (80046b8 <UART_SetConfig+0x118>)
 8004686:	fba3 0302 	umull	r0, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2064      	movs	r0, #100	; 0x64
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a07      	ldr	r2, [pc, #28]	; (80046b8 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	440a      	add	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40013800 	.word	0x40013800
 80046b8:	51eb851f 	.word	0x51eb851f

080046bc <__errno>:
 80046bc:	4b01      	ldr	r3, [pc, #4]	; (80046c4 <__errno+0x8>)
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <__libc_init_array>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	2500      	movs	r5, #0
 80046cc:	4e0c      	ldr	r6, [pc, #48]	; (8004700 <__libc_init_array+0x38>)
 80046ce:	4c0d      	ldr	r4, [pc, #52]	; (8004704 <__libc_init_array+0x3c>)
 80046d0:	1ba4      	subs	r4, r4, r6
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	42a5      	cmp	r5, r4
 80046d6:	d109      	bne.n	80046ec <__libc_init_array+0x24>
 80046d8:	f000 f924 	bl	8004924 <_init>
 80046dc:	2500      	movs	r5, #0
 80046de:	4e0a      	ldr	r6, [pc, #40]	; (8004708 <__libc_init_array+0x40>)
 80046e0:	4c0a      	ldr	r4, [pc, #40]	; (800470c <__libc_init_array+0x44>)
 80046e2:	1ba4      	subs	r4, r4, r6
 80046e4:	10a4      	asrs	r4, r4, #2
 80046e6:	42a5      	cmp	r5, r4
 80046e8:	d105      	bne.n	80046f6 <__libc_init_array+0x2e>
 80046ea:	bd70      	pop	{r4, r5, r6, pc}
 80046ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f0:	4798      	blx	r3
 80046f2:	3501      	adds	r5, #1
 80046f4:	e7ee      	b.n	80046d4 <__libc_init_array+0xc>
 80046f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046fa:	4798      	blx	r3
 80046fc:	3501      	adds	r5, #1
 80046fe:	e7f2      	b.n	80046e6 <__libc_init_array+0x1e>
 8004700:	08004970 	.word	0x08004970
 8004704:	08004970 	.word	0x08004970
 8004708:	08004970 	.word	0x08004970
 800470c:	08004974 	.word	0x08004974

08004710 <memset>:
 8004710:	4603      	mov	r3, r0
 8004712:	4402      	add	r2, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <sqrt>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	b08b      	sub	sp, #44	; 0x2c
 8004726:	4604      	mov	r4, r0
 8004728:	460d      	mov	r5, r1
 800472a:	f000 f84d 	bl	80047c8 <__ieee754_sqrt>
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <sqrt+0xa0>)
 8004730:	4680      	mov	r8, r0
 8004732:	f993 a000 	ldrsb.w	sl, [r3]
 8004736:	4689      	mov	r9, r1
 8004738:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800473c:	d02b      	beq.n	8004796 <sqrt+0x76>
 800473e:	4622      	mov	r2, r4
 8004740:	462b      	mov	r3, r5
 8004742:	4620      	mov	r0, r4
 8004744:	4629      	mov	r1, r5
 8004746:	f7fc f959 	bl	80009fc <__aeabi_dcmpun>
 800474a:	4683      	mov	fp, r0
 800474c:	bb18      	cbnz	r0, 8004796 <sqrt+0x76>
 800474e:	2600      	movs	r6, #0
 8004750:	2700      	movs	r7, #0
 8004752:	4632      	mov	r2, r6
 8004754:	463b      	mov	r3, r7
 8004756:	4620      	mov	r0, r4
 8004758:	4629      	mov	r1, r5
 800475a:	f7fc f927 	bl	80009ac <__aeabi_dcmplt>
 800475e:	b1d0      	cbz	r0, 8004796 <sqrt+0x76>
 8004760:	2301      	movs	r3, #1
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <sqrt+0xa4>)
 8004766:	f8cd b020 	str.w	fp, [sp, #32]
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004770:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004774:	f1ba 0f00 	cmp.w	sl, #0
 8004778:	d112      	bne.n	80047a0 <sqrt+0x80>
 800477a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800477e:	4668      	mov	r0, sp
 8004780:	f000 f8ce 	bl	8004920 <matherr>
 8004784:	b1b8      	cbz	r0, 80047b6 <sqrt+0x96>
 8004786:	9b08      	ldr	r3, [sp, #32]
 8004788:	b11b      	cbz	r3, 8004792 <sqrt+0x72>
 800478a:	f7ff ff97 	bl	80046bc <__errno>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	6003      	str	r3, [r0, #0]
 8004792:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8004796:	4640      	mov	r0, r8
 8004798:	4649      	mov	r1, r9
 800479a:	b00b      	add	sp, #44	; 0x2c
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	4632      	mov	r2, r6
 80047a2:	463b      	mov	r3, r7
 80047a4:	4630      	mov	r0, r6
 80047a6:	4639      	mov	r1, r7
 80047a8:	f7fb ffb8 	bl	800071c <__aeabi_ddiv>
 80047ac:	f1ba 0f02 	cmp.w	sl, #2
 80047b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047b4:	d1e3      	bne.n	800477e <sqrt+0x5e>
 80047b6:	f7ff ff81 	bl	80046bc <__errno>
 80047ba:	2321      	movs	r3, #33	; 0x21
 80047bc:	6003      	str	r3, [r0, #0]
 80047be:	e7e2      	b.n	8004786 <sqrt+0x66>
 80047c0:	20000070 	.word	0x20000070
 80047c4:	08004968 	.word	0x08004968

080047c8 <__ieee754_sqrt>:
 80047c8:	4b54      	ldr	r3, [pc, #336]	; (800491c <__ieee754_sqrt+0x154>)
 80047ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ce:	438b      	bics	r3, r1
 80047d0:	4606      	mov	r6, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	460a      	mov	r2, r1
 80047d6:	460c      	mov	r4, r1
 80047d8:	d10f      	bne.n	80047fa <__ieee754_sqrt+0x32>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	f7fb fe73 	bl	80004c8 <__aeabi_dmul>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4630      	mov	r0, r6
 80047e8:	4629      	mov	r1, r5
 80047ea:	f7fb fcb7 	bl	800015c <__adddf3>
 80047ee:	4606      	mov	r6, r0
 80047f0:	460d      	mov	r5, r1
 80047f2:	4630      	mov	r0, r6
 80047f4:	4629      	mov	r1, r5
 80047f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047fa:	2900      	cmp	r1, #0
 80047fc:	4607      	mov	r7, r0
 80047fe:	4603      	mov	r3, r0
 8004800:	dc0e      	bgt.n	8004820 <__ieee754_sqrt+0x58>
 8004802:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8004806:	ea5c 0707 	orrs.w	r7, ip, r7
 800480a:	d0f2      	beq.n	80047f2 <__ieee754_sqrt+0x2a>
 800480c:	b141      	cbz	r1, 8004820 <__ieee754_sqrt+0x58>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	f7fb fca1 	bl	8000158 <__aeabi_dsub>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	f7fb ff7f 	bl	800071c <__aeabi_ddiv>
 800481e:	e7e6      	b.n	80047ee <__ieee754_sqrt+0x26>
 8004820:	1512      	asrs	r2, r2, #20
 8004822:	d074      	beq.n	800490e <__ieee754_sqrt+0x146>
 8004824:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004828:	07d5      	lsls	r5, r2, #31
 800482a:	f04f 0500 	mov.w	r5, #0
 800482e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004832:	bf48      	it	mi
 8004834:	0fd9      	lsrmi	r1, r3, #31
 8004836:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800483a:	bf44      	itt	mi
 800483c:	005b      	lslmi	r3, r3, #1
 800483e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004842:	1051      	asrs	r1, r2, #1
 8004844:	0fda      	lsrs	r2, r3, #31
 8004846:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800484a:	4628      	mov	r0, r5
 800484c:	2216      	movs	r2, #22
 800484e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	1987      	adds	r7, r0, r6
 8004856:	42a7      	cmp	r7, r4
 8004858:	bfde      	ittt	le
 800485a:	19b8      	addle	r0, r7, r6
 800485c:	1be4      	suble	r4, r4, r7
 800485e:	19ad      	addle	r5, r5, r6
 8004860:	0fdf      	lsrs	r7, r3, #31
 8004862:	3a01      	subs	r2, #1
 8004864:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8004868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800486c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004870:	d1f0      	bne.n	8004854 <__ieee754_sqrt+0x8c>
 8004872:	f04f 0c20 	mov.w	ip, #32
 8004876:	4696      	mov	lr, r2
 8004878:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800487c:	4284      	cmp	r4, r0
 800487e:	eb06 070e 	add.w	r7, r6, lr
 8004882:	dc02      	bgt.n	800488a <__ieee754_sqrt+0xc2>
 8004884:	d112      	bne.n	80048ac <__ieee754_sqrt+0xe4>
 8004886:	429f      	cmp	r7, r3
 8004888:	d810      	bhi.n	80048ac <__ieee754_sqrt+0xe4>
 800488a:	2f00      	cmp	r7, #0
 800488c:	eb07 0e06 	add.w	lr, r7, r6
 8004890:	da42      	bge.n	8004918 <__ieee754_sqrt+0x150>
 8004892:	f1be 0f00 	cmp.w	lr, #0
 8004896:	db3f      	blt.n	8004918 <__ieee754_sqrt+0x150>
 8004898:	f100 0801 	add.w	r8, r0, #1
 800489c:	1a24      	subs	r4, r4, r0
 800489e:	4640      	mov	r0, r8
 80048a0:	429f      	cmp	r7, r3
 80048a2:	bf88      	it	hi
 80048a4:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80048a8:	1bdb      	subs	r3, r3, r7
 80048aa:	4432      	add	r2, r6
 80048ac:	0064      	lsls	r4, r4, #1
 80048ae:	f1bc 0c01 	subs.w	ip, ip, #1
 80048b2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80048b6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80048ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80048be:	d1dd      	bne.n	800487c <__ieee754_sqrt+0xb4>
 80048c0:	4323      	orrs	r3, r4
 80048c2:	d006      	beq.n	80048d2 <__ieee754_sqrt+0x10a>
 80048c4:	1c54      	adds	r4, r2, #1
 80048c6:	bf0b      	itete	eq
 80048c8:	4662      	moveq	r2, ip
 80048ca:	3201      	addne	r2, #1
 80048cc:	3501      	addeq	r5, #1
 80048ce:	f022 0201 	bicne.w	r2, r2, #1
 80048d2:	106b      	asrs	r3, r5, #1
 80048d4:	0852      	lsrs	r2, r2, #1
 80048d6:	07e8      	lsls	r0, r5, #31
 80048d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80048dc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80048e0:	bf48      	it	mi
 80048e2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80048e6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80048ea:	4616      	mov	r6, r2
 80048ec:	e781      	b.n	80047f2 <__ieee754_sqrt+0x2a>
 80048ee:	0adc      	lsrs	r4, r3, #11
 80048f0:	3915      	subs	r1, #21
 80048f2:	055b      	lsls	r3, r3, #21
 80048f4:	2c00      	cmp	r4, #0
 80048f6:	d0fa      	beq.n	80048ee <__ieee754_sqrt+0x126>
 80048f8:	02e6      	lsls	r6, r4, #11
 80048fa:	d50a      	bpl.n	8004912 <__ieee754_sqrt+0x14a>
 80048fc:	f1c2 0020 	rsb	r0, r2, #32
 8004900:	fa23 f000 	lsr.w	r0, r3, r0
 8004904:	1e55      	subs	r5, r2, #1
 8004906:	4093      	lsls	r3, r2
 8004908:	4304      	orrs	r4, r0
 800490a:	1b4a      	subs	r2, r1, r5
 800490c:	e78a      	b.n	8004824 <__ieee754_sqrt+0x5c>
 800490e:	4611      	mov	r1, r2
 8004910:	e7f0      	b.n	80048f4 <__ieee754_sqrt+0x12c>
 8004912:	0064      	lsls	r4, r4, #1
 8004914:	3201      	adds	r2, #1
 8004916:	e7ef      	b.n	80048f8 <__ieee754_sqrt+0x130>
 8004918:	4680      	mov	r8, r0
 800491a:	e7bf      	b.n	800489c <__ieee754_sqrt+0xd4>
 800491c:	7ff00000 	.word	0x7ff00000

08004920 <matherr>:
 8004920:	2000      	movs	r0, #0
 8004922:	4770      	bx	lr

08004924 <_init>:
 8004924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004926:	bf00      	nop
 8004928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492a:	bc08      	pop	{r3}
 800492c:	469e      	mov	lr, r3
 800492e:	4770      	bx	lr

08004930 <_fini>:
 8004930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004932:	bf00      	nop
 8004934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004936:	bc08      	pop	{r3}
 8004938:	469e      	mov	lr, r3
 800493a:	4770      	bx	lr
