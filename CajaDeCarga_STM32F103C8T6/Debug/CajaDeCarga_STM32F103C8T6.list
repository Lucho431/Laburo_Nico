
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080046a4  080046a4  000146a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080046d0  080046d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d0  080046d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d8  20000074  0800474c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000084c  0800474c  0002084c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cad4  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021fe  00000000  00000000  0002cb71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002ed70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b28  00000000  00000000  0002f9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018cad  00000000  00000000  000304f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bf14  00000000  00000000  000491a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e371  00000000  00000000  000550b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e342a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003418  00000000  00000000  000e34a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800468c 	.word	0x0800468c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800468c 	.word	0x0800468c

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000aa4:	f001 f80a 	bl	8001abc <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000aae:	f000 fd1d 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000aba:	2307      	movs	r3, #7
 8000abc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000ac4:	f001 fa86 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fd0d 	bl	80014ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000ae0:	f001 fa78 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000aea:	f000 fcff 	bl	80014ec <Error_Handler>
  }

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	40012400 	.word	0x40012400

08000b00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <HAL_ADC_MspInit+0xcc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d151      	bne.n	8000bc4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <HAL_ADC_MspInit+0xd4>)
 8000b60:	f001 ff36 	bl	80029d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b66:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_ADC_MspInit+0xdc>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b9a:	f001 fd2b 	bl	80025f4 <HAL_DMA_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba4:	f000 fca2 	bl	80014ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f001 fce4 	bl	8002586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bbe:	2012      	movs	r0, #18
 8000bc0:	f001 fcfd 	bl	80025be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40012400 	.word	0x40012400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	200000ec 	.word	0x200000ec
 8000bdc:	40020008 	.word	0x40020008

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_DMA_Init+0x38>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <MX_DMA_Init+0x38>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_DMA_Init+0x38>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	200b      	movs	r0, #11
 8000c04:	f001 fcbf 	bl	8002586 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c08:	200b      	movs	r0, #11
 8000c0a:	f001 fcd8 	bl	80025be <HAL_NVIC_EnableIRQ>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a4b      	ldr	r2, [pc, #300]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b49      	ldr	r3, [pc, #292]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b46      	ldr	r3, [pc, #280]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a45      	ldr	r2, [pc, #276]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b43      	ldr	r3, [pc, #268]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a39      	ldr	r2, [pc, #228]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b37      	ldr	r3, [pc, #220]	; (8000d64 <MX_GPIO_Init+0x148>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4834      	ldr	r0, [pc, #208]	; (8000d68 <MX_GPIO_Init+0x14c>)
 8000c98:	f002 f80b 	bl	8002cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_ENAMP1_Pin|OUT_ENAMP2_Pin|OUT_EN_Pin|OUT_D4_Pin
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f641 7118 	movw	r1, #7960	; 0x1f18
 8000ca2:	4832      	ldr	r0, [pc, #200]	; (8000d6c <MX_GPIO_Init+0x150>)
 8000ca4:	f002 f805 	bl	8002cb2 <HAL_GPIO_WritePin>
                          |OUT_D5_Pin|OUT_D6_Pin|OUT_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_RS_GPIO_Port, OUT_RS_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cae:	4830      	ldr	r0, [pc, #192]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000cb0:	f001 ffff 	bl	8002cb2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4826      	ldr	r0, [pc, #152]	; (8000d68 <MX_GPIO_Init+0x14c>)
 8000cce:	f001 fe7f 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OUT_ENAMP1_Pin|OUT_ENAMP2_Pin|OUT_EN_Pin|OUT_D4_Pin
 8000cd2:	f641 7318 	movw	r3, #7960	; 0x1f18
 8000cd6:	613b      	str	r3, [r7, #16]
                          |OUT_D5_Pin|OUT_D6_Pin|OUT_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4820      	ldr	r0, [pc, #128]	; (8000d6c <MX_GPIO_Init+0x150>)
 8000cec:	f001 fe70 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IN_P1CERO_Pin|IN_P2CERO_Pin|IN_PV1_Pin;
 8000cf0:	23e0      	movs	r3, #224	; 0xe0
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4619      	mov	r1, r3
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x150>)
 8000d04:	f001 fe64 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN_PV2_Pin|IN_PV3_Pin|IN_PA1_Pin|IN_PA2_Pin;
 8000d08:	f640 4303 	movw	r3, #3075	; 0xc03
 8000d0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d12:	2301      	movs	r3, #1
 8000d14:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000d1e:	f001 fe57 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_PA3_Pin;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IN_PA3_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000d38:	f001 fe4a 	bl	80029d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OUT_RS_Pin;
 8000d3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_RS_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0310 	add.w	r3, r7, #16
 8000d52:	4619      	mov	r1, r3
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_GPIO_Init+0x154>)
 8000d56:	f001 fe3b 	bl	80029d0 <HAL_GPIO_Init>

}
 8000d5a:	bf00      	nop
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40010800 	.word	0x40010800
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <LCD_Init+0x70>)
 8000d80:	f001 ff97 	bl	8002cb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d8a:	4817      	ldr	r0, [pc, #92]	; (8000de8 <LCD_Init+0x74>)
 8000d8c:	f001 ff91 	bl	8002cb2 <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8000d90:	2010      	movs	r0, #16
 8000d92:	f000 fe71 	bl	8001a78 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f828 	bl	8000dec <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f000 fe6b 	bl	8001a78 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 f822 	bl	8000dec <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 fe65 	bl	8001a78 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 f81c 	bl	8000dec <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8000db4:	2002      	movs	r0, #2
 8000db6:	f000 f819 	bl	8000dec <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fe5c 	bl	8001a78 <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8000dc0:	2028      	movs	r0, #40	; 0x28
 8000dc2:	f000 f879 	bl	8000eb8 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 8000dc6:	2008      	movs	r0, #8
 8000dc8:	f000 f876 	bl	8000eb8 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 f873 	bl	8000eb8 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 8000dd2:	2006      	movs	r0, #6
 8000dd4:	f000 f870 	bl	8000eb8 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 8000dd8:	200c      	movs	r0, #12
 8000dda:	f000 f86d 	bl	8000eb8 <LCD_SendInstruction>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40010800 	.word	0x40010800

08000dec <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <LCD_SendNibble+0x22>
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	482b      	ldr	r0, [pc, #172]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e08:	f001 ff53 	bl	8002cb2 <HAL_GPIO_WritePin>
 8000e0c:	e005      	b.n	8000e1a <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e16:	f001 ff4c 	bl	8002cb2 <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <LCD_SendNibble+0x46>
 8000e24:	2201      	movs	r2, #1
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	4822      	ldr	r0, [pc, #136]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e2c:	f001 ff41 	bl	8002cb2 <HAL_GPIO_WritePin>
 8000e30:	e005      	b.n	8000e3e <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e38:	481e      	ldr	r0, [pc, #120]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e3a:	f001 ff3a 	bl	8002cb2 <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d006      	beq.n	8000e56 <LCD_SendNibble+0x6a>
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e50:	f001 ff2f 	bl	8002cb2 <HAL_GPIO_WritePin>
 8000e54:	e005      	b.n	8000e62 <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e5e:	f001 ff28 	bl	8002cb2 <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 0308 	and.w	r3, r3, #8
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d006      	beq.n	8000e7a <LCD_SendNibble+0x8e>
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e72:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e74:	f001 ff1d 	bl	8002cb2 <HAL_GPIO_WritePin>
 8000e78:	e005      	b.n	8000e86 <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e82:	f001 ff16 	bl	8002cb2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000e8e:	f001 ff10 	bl	8002cb2 <HAL_GPIO_WritePin>
		HAL_Delay(1);//LCD_usDelay(5);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fdf0 	bl	8001a78 <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <LCD_SendNibble+0xc8>)
 8000ea0:	f001 ff07 	bl	8002cb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);//LCD_usDelay(5);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fde7 	bl	8001a78 <HAL_Delay>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40010800 	.word	0x40010800

08000eb8 <LCD_SendInstruction>:
}


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <LCD_SendInstruction+0x3c>)
 8000eca:	f001 fef2 	bl	8002cb2 <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f811 	bl	8000ef8 <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d103      	bne.n	8000ee4 <LCD_SendInstruction+0x2c>
		HAL_Delay(2);//LCD_usDelay(2000);
 8000edc:	2002      	movs	r0, #2
 8000ede:	f000 fdcb 	bl	8001a78 <HAL_Delay>
	else
		HAL_Delay(1);//LCD_usDelay(50);
}
 8000ee2:	e002      	b.n	8000eea <LCD_SendInstruction+0x32>
		HAL_Delay(1);//LCD_usDelay(50);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f000 fdc7 	bl	8001a78 <HAL_Delay>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40010c00 	.word	0x40010c00

08000ef8 <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	091b      	lsrs	r3, r3, #4
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff6f 	bl	8000dec <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff6b 	bl	8000dec <LCD_SendNibble>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f26:	f000 fd45 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f2a:	f000 f9eb 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2e:	f7ff fe75 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f32:	f7ff fe55 	bl	8000be0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f36:	f7ff fd95 	bl	8000a64 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f3a:	f000 fbb5 	bl	80016a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f3e:	f000 fbff 	bl	8001740 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000f42:	f000 fb63 	bl	800160c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8000f46:	48b2      	ldr	r0, [pc, #712]	; (8001210 <main+0x2f0>)
 8000f48:	f002 fbbc 	bl	80036c4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	48b0      	ldr	r0, [pc, #704]	; (8001210 <main+0x2f0>)
 8000f50:	f002 fc5a 	bl	8003808 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	48ae      	ldr	r0, [pc, #696]	; (8001210 <main+0x2f0>)
 8000f58:	f002 fc56 	bl	8003808 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	48ac      	ldr	r0, [pc, #688]	; (8001210 <main+0x2f0>)
 8000f60:	f002 fc52 	bl	8003808 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000f64:	210c      	movs	r1, #12
 8000f66:	48aa      	ldr	r0, [pc, #680]	; (8001210 <main+0x2f0>)
 8000f68:	f002 fc4e 	bl	8003808 <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8000f6c:	48a9      	ldr	r0, [pc, #676]	; (8001214 <main+0x2f4>)
 8000f6e:	f002 fba9 	bl	80036c4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, muestras, sizeof(muestras));
 8000f72:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000f76:	49a8      	ldr	r1, [pc, #672]	; (8001218 <main+0x2f8>)
 8000f78:	48a8      	ldr	r0, [pc, #672]	; (800121c <main+0x2fc>)
 8000f7a:	f000 fe77 	bl	8001c6c <HAL_ADC_Start_DMA>

//  HAL_TIM_Base_Start_IT(&htim2); //desborda cada 10 ms.

  LCD_Init();
 8000f7e:	f7ff fef9 	bl	8000d74 <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (status_adc) {
 8000f82:	4ba7      	ldr	r3, [pc, #668]	; (8001220 <main+0x300>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d002      	beq.n	8000f90 <main+0x70>
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d065      	beq.n	800105a <main+0x13a>
			  acumulaA = 0;

			  status_adc = 0;

		  default:
		  break;
 8000f8e:	e0c9      	b.n	8001124 <main+0x204>
			  for (uint16_t i = 0; i < 200; i+=2){
 8000f90:	2300      	movs	r3, #0
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	e022      	b.n	8000fdc <main+0xbc>
				  acumulaV += muestras[i]*muestras[i];
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	4a9f      	ldr	r2, [pc, #636]	; (8001218 <main+0x2f8>)
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	499d      	ldr	r1, [pc, #628]	; (8001218 <main+0x2f8>)
 8000fa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fa6:	fb02 f203 	mul.w	r2, r2, r3
 8000faa:	4b9e      	ldr	r3, [pc, #632]	; (8001224 <main+0x304>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a9c      	ldr	r2, [pc, #624]	; (8001224 <main+0x304>)
 8000fb2:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	4a97      	ldr	r2, [pc, #604]	; (8001218 <main+0x2f8>)
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	88fa      	ldrh	r2, [r7, #6]
 8000fc0:	3201      	adds	r2, #1
 8000fc2:	4995      	ldr	r1, [pc, #596]	; (8001218 <main+0x2f8>)
 8000fc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fc8:	fb02 f203 	mul.w	r2, r2, r3
 8000fcc:	4b96      	ldr	r3, [pc, #600]	; (8001228 <main+0x308>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a95      	ldr	r2, [pc, #596]	; (8001228 <main+0x308>)
 8000fd4:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	3302      	adds	r3, #2
 8000fda:	80fb      	strh	r3, [r7, #6]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	2bc7      	cmp	r3, #199	; 0xc7
 8000fe0:	d9d9      	bls.n	8000f96 <main+0x76>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 8000fe2:	4b90      	ldr	r3, [pc, #576]	; (8001224 <main+0x304>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f9f2 	bl	80003d0 <__aeabi_ui2d>
 8000fec:	4603      	mov	r3, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	4621      	mov	r1, r4
 8000ff4:	f003 fa48 	bl	8004488 <sqrt>
 8000ff8:	f04f 0200 	mov.w	r2, #0
 8000ffc:	4b8b      	ldr	r3, [pc, #556]	; (800122c <main+0x30c>)
 8000ffe:	f7ff fb8b 	bl	8000718 <__aeabi_ddiv>
 8001002:	4603      	mov	r3, r0
 8001004:	460c      	mov	r4, r1
 8001006:	4618      	mov	r0, r3
 8001008:	4621      	mov	r1, r4
 800100a:	f7ff fd0b 	bl	8000a24 <__aeabi_d2uiz>
 800100e:	4602      	mov	r2, r0
 8001010:	4b87      	ldr	r3, [pc, #540]	; (8001230 <main+0x310>)
 8001012:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 8001014:	4b84      	ldr	r3, [pc, #528]	; (8001228 <main+0x308>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff f9d9 	bl	80003d0 <__aeabi_ui2d>
 800101e:	4603      	mov	r3, r0
 8001020:	460c      	mov	r4, r1
 8001022:	4618      	mov	r0, r3
 8001024:	4621      	mov	r1, r4
 8001026:	f003 fa2f 	bl	8004488 <sqrt>
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	4b7f      	ldr	r3, [pc, #508]	; (800122c <main+0x30c>)
 8001030:	f7ff fb72 	bl	8000718 <__aeabi_ddiv>
 8001034:	4603      	mov	r3, r0
 8001036:	460c      	mov	r4, r1
 8001038:	4618      	mov	r0, r3
 800103a:	4621      	mov	r1, r4
 800103c:	f7ff fcf2 	bl	8000a24 <__aeabi_d2uiz>
 8001040:	4602      	mov	r2, r0
 8001042:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <main+0x314>)
 8001044:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 8001046:	4b77      	ldr	r3, [pc, #476]	; (8001224 <main+0x304>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 800104c:	4b76      	ldr	r3, [pc, #472]	; (8001228 <main+0x308>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 8001052:	4b73      	ldr	r3, [pc, #460]	; (8001220 <main+0x300>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		  break;
 8001058:	e065      	b.n	8001126 <main+0x206>
			  for (uint16_t i = 200; i < 400; i+=2){
 800105a:	23c8      	movs	r3, #200	; 0xc8
 800105c:	80bb      	strh	r3, [r7, #4]
 800105e:	e022      	b.n	80010a6 <main+0x186>
				  acumulaV += muestras[i]*muestras[i];
 8001060:	88bb      	ldrh	r3, [r7, #4]
 8001062:	4a6d      	ldr	r2, [pc, #436]	; (8001218 <main+0x2f8>)
 8001064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001068:	88ba      	ldrh	r2, [r7, #4]
 800106a:	496b      	ldr	r1, [pc, #428]	; (8001218 <main+0x2f8>)
 800106c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001070:	fb02 f203 	mul.w	r2, r2, r3
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <main+0x304>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4413      	add	r3, r2
 800107a:	4a6a      	ldr	r2, [pc, #424]	; (8001224 <main+0x304>)
 800107c:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 800107e:	88bb      	ldrh	r3, [r7, #4]
 8001080:	3301      	adds	r3, #1
 8001082:	4a65      	ldr	r2, [pc, #404]	; (8001218 <main+0x2f8>)
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	88ba      	ldrh	r2, [r7, #4]
 800108a:	3201      	adds	r2, #1
 800108c:	4962      	ldr	r1, [pc, #392]	; (8001218 <main+0x2f8>)
 800108e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001092:	fb02 f203 	mul.w	r2, r2, r3
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <main+0x308>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a62      	ldr	r2, [pc, #392]	; (8001228 <main+0x308>)
 800109e:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 80010a0:	88bb      	ldrh	r3, [r7, #4]
 80010a2:	3302      	adds	r3, #2
 80010a4:	80bb      	strh	r3, [r7, #4]
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010ac:	d3d8      	bcc.n	8001060 <main+0x140>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <main+0x304>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f98c 	bl	80003d0 <__aeabi_ui2d>
 80010b8:	4603      	mov	r3, r0
 80010ba:	460c      	mov	r4, r1
 80010bc:	4618      	mov	r0, r3
 80010be:	4621      	mov	r1, r4
 80010c0:	f003 f9e2 	bl	8004488 <sqrt>
 80010c4:	f04f 0200 	mov.w	r2, #0
 80010c8:	4b58      	ldr	r3, [pc, #352]	; (800122c <main+0x30c>)
 80010ca:	f7ff fb25 	bl	8000718 <__aeabi_ddiv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	4618      	mov	r0, r3
 80010d4:	4621      	mov	r1, r4
 80010d6:	f7ff fca5 	bl	8000a24 <__aeabi_d2uiz>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b54      	ldr	r3, [pc, #336]	; (8001230 <main+0x310>)
 80010de:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 80010e0:	4b51      	ldr	r3, [pc, #324]	; (8001228 <main+0x308>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f973 	bl	80003d0 <__aeabi_ui2d>
 80010ea:	4603      	mov	r3, r0
 80010ec:	460c      	mov	r4, r1
 80010ee:	4618      	mov	r0, r3
 80010f0:	4621      	mov	r1, r4
 80010f2:	f003 f9c9 	bl	8004488 <sqrt>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b4c      	ldr	r3, [pc, #304]	; (800122c <main+0x30c>)
 80010fc:	f7ff fb0c 	bl	8000718 <__aeabi_ddiv>
 8001100:	4603      	mov	r3, r0
 8001102:	460c      	mov	r4, r1
 8001104:	4618      	mov	r0, r3
 8001106:	4621      	mov	r1, r4
 8001108:	f7ff fc8c 	bl	8000a24 <__aeabi_d2uiz>
 800110c:	4602      	mov	r2, r0
 800110e:	4b49      	ldr	r3, [pc, #292]	; (8001234 <main+0x314>)
 8001110:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 8001112:	4b44      	ldr	r3, [pc, #272]	; (8001224 <main+0x304>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 8001118:	4b43      	ldr	r3, [pc, #268]	; (8001228 <main+0x308>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 800111e:	4b40      	ldr	r3, [pc, #256]	; (8001220 <main+0x300>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
		  break;
 8001124:	bf00      	nop
	  } //fin switch(status_adc)


	  if (status_fase == 2){
 8001126:	4b44      	ldr	r3, [pc, #272]	; (8001238 <main+0x318>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d12e      	bne.n	800118c <main+0x26c>

		  acum_fase += (ventana_fin - ventana_inicio);
 800112e:	4b43      	ldr	r3, [pc, #268]	; (800123c <main+0x31c>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b43      	ldr	r3, [pc, #268]	; (8001240 <main+0x320>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	4b42      	ldr	r3, [pc, #264]	; (8001244 <main+0x324>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4a41      	ldr	r2, [pc, #260]	; (8001244 <main+0x324>)
 8001140:	6013      	str	r3, [r2, #0]
		  cuenta_fase++;
 8001142:	4b41      	ldr	r3, [pc, #260]	; (8001248 <main+0x328>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	3301      	adds	r3, #1
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <main+0x328>)
 800114c:	701a      	strb	r2, [r3, #0]

		  if (cuenta_fase == 5){
 800114e:	4b3e      	ldr	r3, [pc, #248]	; (8001248 <main+0x328>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b05      	cmp	r3, #5
 8001154:	d117      	bne.n	8001186 <main+0x266>

			  valor_fase = acum_fase / 5;
 8001156:	4b3b      	ldr	r3, [pc, #236]	; (8001244 <main+0x324>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a3c      	ldr	r2, [pc, #240]	; (800124c <main+0x32c>)
 800115c:	fba2 2303 	umull	r2, r3, r2, r3
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	461a      	mov	r2, r3
 8001164:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <main+0x330>)
 8001166:	601a      	str	r2, [r3, #0]

			  if (flag_faseNegativa != 0){
 8001168:	4b3a      	ldr	r3, [pc, #232]	; (8001254 <main+0x334>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <main+0x25a>
				  valor_fase *= -1;
 8001170:	4b37      	ldr	r3, [pc, #220]	; (8001250 <main+0x330>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	425b      	negs	r3, r3
 8001176:	4a36      	ldr	r2, [pc, #216]	; (8001250 <main+0x330>)
 8001178:	6013      	str	r3, [r2, #0]
			  }

			  acum_fase = 0;
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <main+0x324>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
			  cuenta_fase = 0;
 8001180:	4b31      	ldr	r3, [pc, #196]	; (8001248 <main+0x328>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
		  } //fin if cuenta_fase

		  status_fase = 0;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <main+0x318>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
	  } //fin if status_fase


	  switch (flag_protecV){
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <main+0x338>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <main+0x27a>
 8001194:	2b01      	cmp	r3, #1
 8001196:	d019      	beq.n	80011cc <main+0x2ac>
			  if (HAL_GPIO_ReadPin(IN_P1CERO_GPIO_Port, IN_P1CERO_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(OUT_ENAMP1_GPIO_Port, OUT_ENAMP1_Pin, SIGNAL_ON);
				  flag_protecV = 0;
			  }
		  default:
		  break;
 8001198:	e066      	b.n	8001268 <main+0x348>
			  if (PROTEC_V != 0){
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <main+0x33c>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80011a2:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <main+0x340>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	431a      	orrs	r2, r3
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <main+0x340>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	4313      	orrs	r3, r2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d028      	beq.n	800120c <main+0x2ec>
				  HAL_GPIO_WritePin(OUT_ENAMP1_GPIO_Port, OUT_ENAMP1_Pin, SIGNAL_OFF);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2108      	movs	r1, #8
 80011be:	4827      	ldr	r0, [pc, #156]	; (800125c <main+0x33c>)
 80011c0:	f001 fd77 	bl	8002cb2 <HAL_GPIO_WritePin>
				  flag_protecV = 1;
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <main+0x338>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
		  break;
 80011ca:	e01f      	b.n	800120c <main+0x2ec>
			  if (!PROTEC_V) break;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <main+0x33c>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80011d4:	4b22      	ldr	r3, [pc, #136]	; (8001260 <main+0x340>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	431a      	orrs	r2, r3
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <main+0x340>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	4313      	orrs	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d03b      	beq.n	8001264 <main+0x344>
			  if (HAL_GPIO_ReadPin(IN_P1CERO_GPIO_Port, IN_P1CERO_Pin) == (GPIO_PinState)SIGNAL_ON){
 80011ec:	2120      	movs	r1, #32
 80011ee:	481b      	ldr	r0, [pc, #108]	; (800125c <main+0x33c>)
 80011f0:	f001 fd48 	bl	8002c84 <HAL_GPIO_ReadPin>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d136      	bne.n	8001268 <main+0x348>
				  HAL_GPIO_WritePin(OUT_ENAMP1_GPIO_Port, OUT_ENAMP1_Pin, SIGNAL_ON);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2108      	movs	r1, #8
 80011fe:	4817      	ldr	r0, [pc, #92]	; (800125c <main+0x33c>)
 8001200:	f001 fd57 	bl	8002cb2 <HAL_GPIO_WritePin>
				  flag_protecV = 0;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <main+0x338>)
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
		  break;
 800120a:	e02d      	b.n	8001268 <main+0x348>
		  break;
 800120c:	bf00      	nop
 800120e:	e02c      	b.n	800126a <main+0x34a>
 8001210:	20000770 	.word	0x20000770
 8001214:	200007b8 	.word	0x200007b8
 8001218:	20000130 	.word	0x20000130
 800121c:	200000bc 	.word	0x200000bc
 8001220:	200000a0 	.word	0x200000a0
 8001224:	20000090 	.word	0x20000090
 8001228:	20000094 	.word	0x20000094
 800122c:	40240000 	.word	0x40240000
 8001230:	20000098 	.word	0x20000098
 8001234:	2000009c 	.word	0x2000009c
 8001238:	200000a1 	.word	0x200000a1
 800123c:	200000b4 	.word	0x200000b4
 8001240:	200000b0 	.word	0x200000b0
 8001244:	200000a4 	.word	0x200000a4
 8001248:	200000a8 	.word	0x200000a8
 800124c:	cccccccd 	.word	0xcccccccd
 8001250:	200000ac 	.word	0x200000ac
 8001254:	200000a2 	.word	0x200000a2
 8001258:	200000b9 	.word	0x200000b9
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00
			  if (!PROTEC_V) break;
 8001264:	bf00      	nop
 8001266:	e000      	b.n	800126a <main+0x34a>
		  break;
 8001268:	bf00      	nop
	  } //fin switch flag_protecV

	  switch (flag_protecA){
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <main+0x3d8>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <main+0x358>
 8001272:	2b01      	cmp	r3, #1
 8001274:	d019      	beq.n	80012aa <main+0x38a>
			  if (HAL_GPIO_ReadPin(IN_P2CERO_GPIO_Port, IN_P2CERO_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(OUT_ENAMP2_GPIO_Port, OUT_ENAMP2_Pin, SIGNAL_ON);
				  flag_protecA = 0;
			  }
		  default:
		  break;
 8001276:	e03c      	b.n	80012f2 <main+0x3d2>
			  if (PROTEC_A != 0){
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <main+0x3dc>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001280:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <main+0x3dc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001288:	431a      	orrs	r2, r3
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <main+0x3dc>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001292:	4313      	orrs	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d028      	beq.n	80012ea <main+0x3ca>
				  HAL_GPIO_WritePin(OUT_ENAMP2_GPIO_Port, OUT_ENAMP2_Pin, SIGNAL_OFF);
 8001298:	2200      	movs	r2, #0
 800129a:	2110      	movs	r1, #16
 800129c:	4818      	ldr	r0, [pc, #96]	; (8001300 <main+0x3e0>)
 800129e:	f001 fd08 	bl	8002cb2 <HAL_GPIO_WritePin>
				  flag_protecA = 1;
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <main+0x3d8>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		  break;
 80012a8:	e01f      	b.n	80012ea <main+0x3ca>
			  if (!PROTEC_A) break;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <main+0x3dc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <main+0x3dc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012ba:	431a      	orrs	r2, r3
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <main+0x3dc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012c4:	4313      	orrs	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d011      	beq.n	80012ee <main+0x3ce>
			  if (HAL_GPIO_ReadPin(IN_P2CERO_GPIO_Port, IN_P2CERO_Pin) == (GPIO_PinState)SIGNAL_ON){
 80012ca:	2140      	movs	r1, #64	; 0x40
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <main+0x3e0>)
 80012ce:	f001 fcd9 	bl	8002c84 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d10c      	bne.n	80012f2 <main+0x3d2>
				  HAL_GPIO_WritePin(OUT_ENAMP2_GPIO_Port, OUT_ENAMP2_Pin, SIGNAL_ON);
 80012d8:	2201      	movs	r2, #1
 80012da:	2110      	movs	r1, #16
 80012dc:	4808      	ldr	r0, [pc, #32]	; (8001300 <main+0x3e0>)
 80012de:	f001 fce8 	bl	8002cb2 <HAL_GPIO_WritePin>
				  flag_protecA = 0;
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <main+0x3d8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
		  break;
 80012e8:	e003      	b.n	80012f2 <main+0x3d2>
		  break;
 80012ea:	bf00      	nop
 80012ec:	e649      	b.n	8000f82 <main+0x62>
			  if (!PROTEC_A) break;
 80012ee:	bf00      	nop
 80012f0:	e647      	b.n	8000f82 <main+0x62>
		  break;
 80012f2:	bf00      	nop
	  switch (status_adc) {
 80012f4:	e645      	b.n	8000f82 <main+0x62>
 80012f6:	bf00      	nop
 80012f8:	200000ba 	.word	0x200000ba
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40010800 	.word	0x40010800

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800130e:	2228      	movs	r2, #40	; 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f003 f8b0 	bl	8004478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001338:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001342:	2301      	movs	r3, #1
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001354:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fcc2 	bl	8002ce4 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001366:	f000 f8c1 	bl	80014ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800136e:	2302      	movs	r3, #2
 8001370:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2102      	movs	r1, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f001 ff2c 	bl	80031e4 <HAL_RCC_ClockConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001392:	f000 f8ab 	bl	80014ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001396:	2302      	movs	r3, #2
 8001398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800139a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800139e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f888 	bl	80034b8 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ae:	f000 f89d 	bl	80014ec <Error_Handler>
  }
}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	; 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	status_adc = 1;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	200000a0 	.word	0x200000a0

080013d8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	status_adc = 2;
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_ADC_ConvCpltCallback+0x18>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	701a      	strb	r2, [r3, #0]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr
 80013f0:	200000a0 	.word	0x200000a0

080013f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7f1b      	ldrb	r3, [r3, #28]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d115      	bne.n	8001430 <HAL_TIM_IC_CaptureCallback+0x3c>
		//HAL_TIM_ReadCapturedValue(htim, HAL_TIM_ACTIVE_CHANNEL_3);
		//ic1 = htim->Instance->CCR1;

		//if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)
		if ((GPIOB->IDR & GPIO_PIN_8) != 0){
 8001404:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00c      	beq.n	800142a <HAL_TIM_IC_CaptureCallback+0x36>

			if (!status_fase){
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10b      	bne.n	8001430 <HAL_TIM_IC_CaptureCallback+0x3c>
				status_fase = 1;
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
				ventana_inicio = htim->Instance->CCR1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	4a24      	ldr	r2, [pc, #144]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e002      	b.n	8001430 <HAL_TIM_IC_CaptureCallback+0x3c>
			}
		}else{
			flag_faseNegativa = 0;
 800142a:	4b24      	ldr	r3, [pc, #144]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
		} //fin if GPIOB...


	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){ // i.e.: PB6 descendente
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	7f1b      	ldrb	r3, [r3, #28]
 8001434:	2b02      	cmp	r3, #2
 8001436:	d10b      	bne.n	8001450 <HAL_TIM_IC_CaptureCallback+0x5c>

		if (status_fase == 1){
 8001438:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d107      	bne.n	8001450 <HAL_TIM_IC_CaptureCallback+0x5c>

		ventana_fin = htim->Instance->CCR2;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001448:	6013      	str	r3, [r2, #0]
		status_fase = 2;
 800144a:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
		}

	} //fin if HAL_TIM_ACTIVE_CHANNEL_2

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 ascendente
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b04      	cmp	r3, #4
 8001456:	d115      	bne.n	8001484 <HAL_TIM_IC_CaptureCallback+0x90>

		if ((GPIOB->IDR & GPIO_PIN_6) != 0){
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_TIM_IC_CaptureCallback+0x8a>

			if (!status_fase){
 8001464:	4b13      	ldr	r3, [pc, #76]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <HAL_TIM_IC_CaptureCallback+0x90>
				status_fase = 1;
 800146c:	4b11      	ldr	r3, [pc, #68]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
				ventana_inicio = htim->Instance->CCR3;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001478:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	e002      	b.n	8001484 <HAL_TIM_IC_CaptureCallback+0x90>
			}
		}else{
			flag_faseNegativa = 1;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
		} //fin if GPIOB...

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){ //i.e.: PB8 descendente
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7f1b      	ldrb	r3, [r3, #28]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d10b      	bne.n	80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>

		if (status_fase == 1){
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d107      	bne.n	80014a4 <HAL_TIM_IC_CaptureCallback+0xb0>
			ventana_fin = htim->Instance->CCR4;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800149c:	6013      	str	r3, [r2, #0]
			status_fase = 2;
 800149e:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80014a0:	2202      	movs	r2, #2
 80014a2:	701a      	strb	r2, [r3, #0]
		}

	} //fin HAL_TIM_ACTIVE_CHANNEL_4


} //fin HAL_TIM_IC_CaptureCallback()
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40010c00 	.word	0x40010c00
 80014b4:	200000a1 	.word	0x200000a1
 80014b8:	200000b0 	.word	0x200000b0
 80014bc:	200000a2 	.word	0x200000a2
 80014c0:	200000b4 	.word	0x200000b4

080014c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d102      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
	}
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	200000b8 	.word	0x200000b8

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_MspInit+0x5c>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_MspInit+0x5c>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6193      	str	r3, [r2, #24]
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_MspInit+0x5c>)
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_MspInit+0x5c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_MspInit+0x5c>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_MspInit+0x5c>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_MspInit+0x60>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	4a04      	ldr	r2, [pc, #16]	; (8001558 <HAL_MspInit+0x60>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <HardFault_Handler+0x4>

0800156e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <MemManage_Handler+0x4>

08001574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <BusFault_Handler+0x4>

0800157a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <UsageFault_Handler+0x4>

08001580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a8:	f000 fa4a 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015b4:	4802      	ldr	r0, [pc, #8]	; (80015c0 <DMA1_Channel1_IRQHandler+0x10>)
 80015b6:	f001 f8d7 	bl	8002768 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200000ec 	.word	0x200000ec

080015c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <ADC1_2_IRQHandler+0x10>)
 80015ca:	f000 fc2d 	bl	8001e28 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000bc 	.word	0x200000bc

080015d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <TIM2_IRQHandler+0x10>)
 80015de:	f002 fa19 	bl	8003a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000800 	.word	0x20000800

080015ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <TIM4_IRQHandler+0x10>)
 80015f2:	f002 fa0f 	bl	8003a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000770 	.word	0x20000770

08001600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001620:	463b      	mov	r3, r7
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001628:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <MX_TIM2_Init+0x98>)
 800162a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001632:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001636:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <MX_TIM2_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800163e:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001640:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <MX_TIM2_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001652:	4814      	ldr	r0, [pc, #80]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001654:	f001 ffe6 	bl	8003624 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800165e:	f7ff ff45 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	4619      	mov	r1, r3
 800166e:	480d      	ldr	r0, [pc, #52]	; (80016a4 <MX_TIM2_Init+0x98>)
 8001670:	f002 fb6c 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800167a:	f7ff ff37 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001686:	463b      	mov	r3, r7
 8001688:	4619      	mov	r1, r3
 800168a:	4806      	ldr	r0, [pc, #24]	; (80016a4 <MX_TIM2_Init+0x98>)
 800168c:	f002 fe5a 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001696:	f7ff ff29 	bl	80014ec <Error_Handler>
  }

}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000800 	.word	0x20000800

080016a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM3_Init+0x90>)
 80016c6:	4a1d      	ldr	r2, [pc, #116]	; (800173c <MX_TIM3_Init+0x94>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_TIM3_Init+0x90>)
 80016cc:	2247      	movs	r2, #71	; 0x47
 80016ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_TIM3_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_TIM3_Init+0x90>)
 80016d8:	2263      	movs	r2, #99	; 0x63
 80016da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_TIM3_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_TIM3_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <MX_TIM3_Init+0x90>)
 80016ea:	f001 ff9b 	bl	8003624 <HAL_TIM_Base_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80016f4:	f7ff fefa 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4619      	mov	r1, r3
 8001704:	480c      	ldr	r0, [pc, #48]	; (8001738 <MX_TIM3_Init+0x90>)
 8001706:	f002 fb21 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001710:	f7ff feec 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001714:	2320      	movs	r3, #32
 8001716:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_TIM3_Init+0x90>)
 8001722:	f002 fe0f 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800172c:	f7ff fede 	bl	80014ec <Error_Handler>
  }

}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200007b8 	.word	0x200007b8
 800173c:	40000400 	.word	0x40000400

08001740 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 800176a:	4b42      	ldr	r3, [pc, #264]	; (8001874 <MX_TIM4_Init+0x134>)
 800176c:	4a42      	ldr	r2, [pc, #264]	; (8001878 <MX_TIM4_Init+0x138>)
 800176e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4000-1;
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <MX_TIM4_Init+0x134>)
 8001772:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001776:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <MX_TIM4_Init+0x134>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <MX_TIM4_Init+0x134>)
 8001780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001784:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <MX_TIM4_Init+0x134>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <MX_TIM4_Init+0x134>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001792:	4838      	ldr	r0, [pc, #224]	; (8001874 <MX_TIM4_Init+0x134>)
 8001794:	f001 ff46 	bl	8003624 <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 800179e:	f7ff fea5 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a8:	f107 0318 	add.w	r3, r7, #24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4831      	ldr	r0, [pc, #196]	; (8001874 <MX_TIM4_Init+0x134>)
 80017b0:	f002 facc 	bl	8003d4c <HAL_TIM_ConfigClockSource>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017ba:	f7ff fe97 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017be:	482d      	ldr	r0, [pc, #180]	; (8001874 <MX_TIM4_Init+0x134>)
 80017c0:	f001 ffca 	bl	8003758 <HAL_TIM_IC_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80017ca:	f7ff fe8f 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	4619      	mov	r1, r3
 80017dc:	4825      	ldr	r0, [pc, #148]	; (8001874 <MX_TIM4_Init+0x134>)
 80017de:	f002 fdb1 	bl	8004344 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80017e8:	f7ff fe80 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017ec:	2300      	movs	r3, #0
 80017ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017f0:	2301      	movs	r3, #1
 80017f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	4619      	mov	r1, r3
 8001802:	481c      	ldr	r0, [pc, #112]	; (8001874 <MX_TIM4_Init+0x134>)
 8001804:	f002 fa0e 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 800180e:	f7ff fe6d 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001812:	2302      	movs	r3, #2
 8001814:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001816:	2302      	movs	r3, #2
 8001818:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800181a:	463b      	mov	r3, r7
 800181c:	2204      	movs	r2, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4814      	ldr	r0, [pc, #80]	; (8001874 <MX_TIM4_Init+0x134>)
 8001822:	f002 f9ff 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 800182c:	f7ff fe5e 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001834:	2301      	movs	r3, #1
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	2208      	movs	r2, #8
 800183c:	4619      	mov	r1, r3
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <MX_TIM4_Init+0x134>)
 8001840:	f002 f9f0 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM4_Init+0x10e>
  {
    Error_Handler();
 800184a:	f7ff fe4f 	bl	80014ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800184e:	2302      	movs	r3, #2
 8001850:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001852:	2302      	movs	r3, #2
 8001854:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	220c      	movs	r2, #12
 800185a:	4619      	mov	r1, r3
 800185c:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_TIM4_Init+0x134>)
 800185e:	f002 f9e1 	bl	8003c24 <HAL_TIM_IC_ConfigChannel>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x12c>
  {
    Error_Handler();
 8001868:	f7ff fe40 	bl	80014ec <Error_Handler>
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	; 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000770 	.word	0x20000770
 8001878:	40000800 	.word	0x40000800

0800187c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	; 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189a:	d114      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018a2:	f043 0301 	orr.w	r3, r3, #1
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2100      	movs	r1, #0
 80018b8:	201c      	movs	r0, #28
 80018ba:	f000 fe64 	bl	8002586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018be:	201c      	movs	r0, #28
 80018c0:	f000 fe7d 	bl	80025be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018c4:	e043      	b.n	800194e <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a24      	ldr	r2, [pc, #144]	; (800195c <HAL_TIM_Base_MspInit+0xe0>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d10c      	bne.n	80018ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d0:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	4a20      	ldr	r2, [pc, #128]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	61d3      	str	r3, [r2, #28]
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
}
 80018e8:	e031      	b.n	800194e <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM4)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_TIM_Base_MspInit+0xe4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d12c      	bne.n	800194e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f4:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 80018fa:	f043 0304 	orr.w	r3, r3, #4
 80018fe:	61d3      	str	r3, [r2, #28]
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a11      	ldr	r2, [pc, #68]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_TIM_Base_MspInit+0xdc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001924:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 0318 	add.w	r3, r7, #24
 8001936:	4619      	mov	r1, r3
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0xe8>)
 800193a:	f001 f849 	bl	80029d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	201e      	movs	r0, #30
 8001944:	f000 fe1f 	bl	8002586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001948:	201e      	movs	r0, #30
 800194a:	f000 fe38 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	; 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40000400 	.word	0x40000400
 8001960:	40000800 	.word	0x40000800
 8001964:	40010c00 	.word	0x40010c00

08001968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001968:	480c      	ldr	r0, [pc, #48]	; (800199c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196a:	490d      	ldr	r1, [pc, #52]	; (80019a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800196e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001970:	e002      	b.n	8001978 <LoopCopyDataInit>

08001972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001976:	3304      	adds	r3, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800197c:	d3f9      	bcc.n	8001972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001980:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001984:	e001      	b.n	800198a <LoopFillZerobss>

08001986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001988:	3204      	adds	r2, #4

0800198a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800198c:	d3fb      	bcc.n	8001986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800198e:	f7ff fe37 	bl	8001600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001992:	f002 fd4d 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001996:	f7ff fac3 	bl	8000f20 <main>
  bx lr
 800199a:	4770      	bx	lr
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019a4:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 80019a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019ac:	2000084c 	.word	0x2000084c

080019b0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <CAN1_RX1_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_Init+0x28>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_Init+0x28>)
 80019be:	f043 0310 	orr.w	r3, r3, #16
 80019c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c4:	2003      	movs	r0, #3
 80019c6:	f000 fdd3 	bl	8002570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f808 	bl	80019e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019d0:	f7ff fd92 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_InitTick+0x54>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_InitTick+0x58>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4619      	mov	r1, r3
 80019f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 fdeb 	bl	80025da <HAL_SYSTICK_Config>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00e      	b.n	8001a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0f      	cmp	r3, #15
 8001a12:	d80a      	bhi.n	8001a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a14:	2200      	movs	r2, #0
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a1c:	f000 fdb3 	bl	8002586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a20:	4a06      	ldr	r2, [pc, #24]	; (8001a3c <HAL_InitTick+0x5c>)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e000      	b.n	8001a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000000 	.word	0x20000000
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_IncTick+0x1c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <HAL_IncTick+0x20>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a03      	ldr	r2, [pc, #12]	; (8001a60 <HAL_IncTick+0x20>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000008 	.word	0x20000008
 8001a60:	20000848 	.word	0x20000848

08001a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return uwTick;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_GetTick+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000848 	.word	0x20000848

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a80:	f7ff fff0 	bl	8001a64 <HAL_GetTick>
 8001a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a90:	d005      	beq.n	8001a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_Delay+0x40>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9e:	bf00      	nop
 8001aa0:	f7ff ffe0 	bl	8001a64 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d8f7      	bhi.n	8001aa0 <HAL_Delay+0x28>
  {
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e0be      	b.n	8001c5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff f800 	bl	8000b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f000 fbb9 	bl	8002278 <ADC_ConversionStop_Disable>
 8001b06:	4603      	mov	r3, r0
 8001b08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 8099 	bne.w	8001c4a <HAL_ADC_Init+0x18e>
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 8095 	bne.w	8001c4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b28:	f023 0302 	bic.w	r3, r3, #2
 8001b2c:	f043 0202 	orr.w	r2, r3, #2
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7b1b      	ldrb	r3, [r3, #12]
 8001b42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b54:	d003      	beq.n	8001b5e <HAL_ADC_Init+0xa2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d102      	bne.n	8001b64 <HAL_ADC_Init+0xa8>
 8001b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b62:	e000      	b.n	8001b66 <HAL_ADC_Init+0xaa>
 8001b64:	2300      	movs	r3, #0
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7d1b      	ldrb	r3, [r3, #20]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d119      	bne.n	8001ba8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	035a      	lsls	r2, r3, #13
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	e00b      	b.n	8001ba8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_ADC_Init+0x1a8>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	68b9      	ldr	r1, [r7, #8]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd8:	d003      	beq.n	8001be2 <HAL_ADC_Init+0x126>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d104      	bne.n	8001bec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	051b      	lsls	r3, r3, #20
 8001bea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <HAL_ADC_Init+0x1ac>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10b      	bne.n	8001c28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f023 0303 	bic.w	r3, r3, #3
 8001c1e:	f043 0201 	orr.w	r2, r3, #1
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c26:	e018      	b.n	8001c5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f023 0312 	bic.w	r3, r3, #18
 8001c30:	f043 0210 	orr.w	r2, r3, #16
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c48:	e007      	b.n	8001c5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	ffe1f7fd 	.word	0xffe1f7fd
 8001c68:	ff1f0efe 	.word	0xff1f0efe

08001c6c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a64      	ldr	r2, [pc, #400]	; (8001e14 <HAL_ADC_Start_DMA+0x1a8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_ADC_Start_DMA+0x24>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a63      	ldr	r2, [pc, #396]	; (8001e18 <HAL_ADC_Start_DMA+0x1ac>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d106      	bne.n	8001c9e <HAL_ADC_Start_DMA+0x32>
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <HAL_ADC_Start_DMA+0x1a8>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f040 80b3 	bne.w	8001e04 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_Start_DMA+0x40>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0ae      	b.n	8001e0a <HAL_ADC_Start_DMA+0x19e>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fa85 	bl	80021c4 <ADC_Enable>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cbe:	7dfb      	ldrb	r3, [r7, #23]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f040 809a 	bne.w	8001dfa <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <HAL_ADC_Start_DMA+0x1ac>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d105      	bne.n	8001cf0 <HAL_ADC_Start_DMA+0x84>
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_ADC_Start_DMA+0x1a8>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d115      	bne.n	8001d1c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d026      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d1a:	e01d      	b.n	8001d58 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a39      	ldr	r2, [pc, #228]	; (8001e14 <HAL_ADC_Start_DMA+0x1a8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d004      	beq.n	8001d3c <HAL_ADC_Start_DMA+0xd0>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_ADC_Start_DMA+0x1ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d10d      	bne.n	8001d58 <HAL_ADC_Start_DMA+0xec>
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_ADC_Start_DMA+0x1a8>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	f023 0206 	bic.w	r2, r3, #6
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_ADC_Start_DMA+0x1b0>)
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <HAL_ADC_Start_DMA+0x1b4>)
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <HAL_ADC_Start_DMA+0x1b8>)
 8001d96:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0202 	mvn.w	r2, #2
 8001da0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a18      	ldr	r0, [r3, #32]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	334c      	adds	r3, #76	; 0x4c
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f000 fc71 	bl	80026a8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dd0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd4:	d108      	bne.n	8001de8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001de4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001de6:	e00f      	b.n	8001e08 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001df6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001df8:	e006      	b.n	8001e08 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e02:	e001      	b.n	8001e08 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3718      	adds	r7, #24
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40012400 	.word	0x40012400
 8001e18:	40012800 	.word	0x40012800
 8001e1c:	080022fb 	.word	0x080022fb
 8001e20:	08002377 	.word	0x08002377
 8001e24:	08002393 	.word	0x08002393

08001e28 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0320 	and.w	r3, r3, #32
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	d140      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d139      	bne.n	8001ec0 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e6e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e72:	d11d      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d119      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0220 	bic.w	r2, r2, #32
 8001e8a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f043 0201 	orr.w	r2, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fa91 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0212 	mvn.w	r2, #18
 8001ebe:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eca:	2b80      	cmp	r3, #128	; 0x80
 8001ecc:	d14f      	bne.n	8001f6e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d148      	bne.n	8001f6e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001efe:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001f02:	d012      	beq.n	8001f2a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d125      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001f1c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f20:	d11d      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d119      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f38:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fa31 	bl	80023c6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 020c 	mvn.w	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	d114      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d10d      	bne.n	8001fa6 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f809 	bl	8001fae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0201 	mvn.w	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x20>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	e0dc      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1da>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b06      	cmp	r3, #6
 8002002:	d81c      	bhi.n	800203e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	3b05      	subs	r3, #5
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	4019      	ands	r1, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b05      	subs	r3, #5
 8002030:	fa00 f203 	lsl.w	r2, r0, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	635a      	str	r2, [r3, #52]	; 0x34
 800203c:	e03c      	b.n	80020b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b0c      	cmp	r3, #12
 8002044:	d81c      	bhi.n	8002080 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	3b23      	subs	r3, #35	; 0x23
 8002058:	221f      	movs	r2, #31
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	4019      	ands	r1, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	3b23      	subs	r3, #35	; 0x23
 8002072:	fa00 f203 	lsl.w	r2, r0, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
 800207e:	e01b      	b.n	80020b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b41      	subs	r3, #65	; 0x41
 8002092:	221f      	movs	r2, #31
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	4019      	ands	r1, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b41      	subs	r3, #65	; 0x41
 80020ac:	fa00 f203 	lsl.w	r2, r0, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d91c      	bls.n	80020fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	3b1e      	subs	r3, #30
 80020d2:	2207      	movs	r2, #7
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	4019      	ands	r1, r3
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	6898      	ldr	r0, [r3, #8]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	fa00 f203 	lsl.w	r2, r0, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	e019      	b.n	800212e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6919      	ldr	r1, [r3, #16]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	2207      	movs	r2, #7
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	4019      	ands	r1, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6898      	ldr	r0, [r3, #8]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4613      	mov	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	4413      	add	r3, r2
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b10      	cmp	r3, #16
 8002134:	d003      	beq.n	800213e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800213a:	2b11      	cmp	r3, #17
 800213c:	d132      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d125      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d126      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002164:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d11a      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9a      	lsrs	r2, r3, #18
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002184:	e002      	b.n	800218c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x1b2>
 8002192:	e007      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bc80      	pop	{r7}
 80021b6:	4770      	bx	lr
 80021b8:	40012400 	.word	0x40012400
 80021bc:	20000000 	.word	0x20000000
 80021c0:	431bde83 	.word	0x431bde83

080021c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d040      	beq.n	8002264 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f2:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <ADC_Enable+0xac>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <ADC_Enable+0xb0>)
 80021f8:	fba2 2303 	umull	r2, r3, r2, r3
 80021fc:	0c9b      	lsrs	r3, r3, #18
 80021fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002200:	e002      	b.n	8002208 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800220e:	f7ff fc29 	bl	8001a64 <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002214:	e01f      	b.n	8002256 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002216:	f7ff fc25 	bl	8001a64 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d918      	bls.n	8002256 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b01      	cmp	r3, #1
 8002230:	d011      	beq.n	8002256 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f043 0210 	orr.w	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e007      	b.n	8002266 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b01      	cmp	r3, #1
 8002262:	d1d8      	bne.n	8002216 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000000 	.word	0x20000000
 8002274:	431bde83 	.word	0x431bde83

08002278 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b01      	cmp	r3, #1
 8002290:	d12e      	bne.n	80022f0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0201 	bic.w	r2, r2, #1
 80022a0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a2:	f7ff fbdf 	bl	8001a64 <HAL_GetTick>
 80022a6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022a8:	e01b      	b.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022aa:	f7ff fbdb 	bl	8001a64 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d914      	bls.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10d      	bne.n	80022e2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e007      	b.n	80022f2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d0dc      	beq.n	80022aa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002310:	2b00      	cmp	r3, #0
 8002312:	d127      	bne.n	8002364 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800232a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800232e:	d115      	bne.n	800235c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002334:	2b00      	cmp	r3, #0
 8002336:	d111      	bne.n	800235c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff f83b 	bl	80013d8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002362:	e004      	b.n	800236e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	4798      	blx	r3
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f7ff f819 	bl	80013bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800238a:	bf00      	nop
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	f043 0204 	orr.w	r2, r3, #4
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7ff fe01 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	2b00      	cmp	r3, #0
 800244c:	db0b      	blt.n	8002466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	f003 021f 	and.w	r2, r3, #31
 8002454:	4906      	ldr	r1, [pc, #24]	; (8002470 <__NVIC_EnableIRQ+0x34>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2001      	movs	r0, #1
 800245e:	fa00 f202 	lsl.w	r2, r0, r2
 8002462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0112      	lsls	r2, r2, #4
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	bf28      	it	cs
 80024e6:	2304      	movcs	r3, #4
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3304      	adds	r3, #4
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b03      	subs	r3, #3
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr

0800252c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800253c:	d301      	bcc.n	8002542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253e:	2301      	movs	r3, #1
 8002540:	e00f      	b.n	8002562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002542:	4a0a      	ldr	r2, [pc, #40]	; (800256c <SysTick_Config+0x40>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3b01      	subs	r3, #1
 8002548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254a:	210f      	movs	r1, #15
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002550:	f7ff ff90 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <SysTick_Config+0x40>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255a:	4b04      	ldr	r3, [pc, #16]	; (800256c <SysTick_Config+0x40>)
 800255c:	2207      	movs	r2, #7
 800255e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff ff2d 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002586:	b580      	push	{r7, lr}
 8002588:	b086      	sub	sp, #24
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff42 	bl	8002420 <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff90 	bl	80024c8 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5f 	bl	8002474 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff35 	bl	800243c <__NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffa2 	bl	800252c <SysTick_Config>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e043      	b.n	8002692 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <HAL_DMA_Init+0xa8>)
 8002612:	4413      	add	r3, r2
 8002614:	4a22      	ldr	r2, [pc, #136]	; (80026a0 <HAL_DMA_Init+0xac>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_DMA_Init+0xb0>)
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800263e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800264c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	bffdfff8 	.word	0xbffdfff8
 80026a0:	cccccccd 	.word	0xcccccccd
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026b6:	2300      	movs	r3, #0
 80026b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_DMA_Start_IT+0x20>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e04a      	b.n	800275e <HAL_DMA_Start_IT+0xb6>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d13a      	bne.n	8002750 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f938 	bl	8002974 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d008      	beq.n	800271e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 020e 	orr.w	r2, r2, #14
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e00f      	b.n	800273e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 020a 	orr.w	r2, r2, #10
 800273c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e005      	b.n	800275c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002758:	2302      	movs	r3, #2
 800275a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2204      	movs	r2, #4
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d04f      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc8>
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d04a      	beq.n	8002830 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a66      	ldr	r2, [pc, #408]	; (8002958 <HAL_DMA_IRQHandler+0x1f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d029      	beq.n	8002816 <HAL_DMA_IRQHandler+0xae>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a65      	ldr	r2, [pc, #404]	; (800295c <HAL_DMA_IRQHandler+0x1f4>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d022      	beq.n	8002812 <HAL_DMA_IRQHandler+0xaa>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a63      	ldr	r2, [pc, #396]	; (8002960 <HAL_DMA_IRQHandler+0x1f8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01a      	beq.n	800280c <HAL_DMA_IRQHandler+0xa4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a62      	ldr	r2, [pc, #392]	; (8002964 <HAL_DMA_IRQHandler+0x1fc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d012      	beq.n	8002806 <HAL_DMA_IRQHandler+0x9e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a60      	ldr	r2, [pc, #384]	; (8002968 <HAL_DMA_IRQHandler+0x200>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x98>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a5f      	ldr	r2, [pc, #380]	; (800296c <HAL_DMA_IRQHandler+0x204>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d102      	bne.n	80027fa <HAL_DMA_IRQHandler+0x92>
 80027f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027f8:	e00e      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 80027fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027fe:	e00b      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 8002800:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002804:	e008      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 8002806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800280a:	e005      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	e002      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 8002812:	2340      	movs	r3, #64	; 0x40
 8002814:	e000      	b.n	8002818 <HAL_DMA_IRQHandler+0xb0>
 8002816:	2304      	movs	r3, #4
 8002818:	4a55      	ldr	r2, [pc, #340]	; (8002970 <HAL_DMA_IRQHandler+0x208>)
 800281a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8094 	beq.w	800294e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800282e:	e08e      	b.n	800294e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	2202      	movs	r2, #2
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d056      	beq.n	80028ee <HAL_DMA_IRQHandler+0x186>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d051      	beq.n	80028ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 020a 	bic.w	r2, r2, #10
 8002866:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a38      	ldr	r2, [pc, #224]	; (8002958 <HAL_DMA_IRQHandler+0x1f0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d029      	beq.n	80028ce <HAL_DMA_IRQHandler+0x166>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a37      	ldr	r2, [pc, #220]	; (800295c <HAL_DMA_IRQHandler+0x1f4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_IRQHandler+0x162>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	; (8002960 <HAL_DMA_IRQHandler+0x1f8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01a      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x15c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_DMA_IRQHandler+0x1fc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d012      	beq.n	80028be <HAL_DMA_IRQHandler+0x156>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a32      	ldr	r2, [pc, #200]	; (8002968 <HAL_DMA_IRQHandler+0x200>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00a      	beq.n	80028b8 <HAL_DMA_IRQHandler+0x150>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <HAL_DMA_IRQHandler+0x204>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d102      	bne.n	80028b2 <HAL_DMA_IRQHandler+0x14a>
 80028ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80028b0:	e00e      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b6:	e00b      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028bc:	e008      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028c2:	e005      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c8:	e002      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028ca:	2320      	movs	r3, #32
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_IRQHandler+0x168>
 80028ce:	2302      	movs	r3, #2
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_DMA_IRQHandler+0x208>)
 80028d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d034      	beq.n	800294e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028ec:	e02f      	b.n	800294e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2208      	movs	r2, #8
 80028f4:	409a      	lsls	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d028      	beq.n	8002950 <HAL_DMA_IRQHandler+0x1e8>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 020e 	bic.w	r2, r2, #14
 8002916:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002920:	2101      	movs	r1, #1
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	2b00      	cmp	r3, #0
 8002944:	d004      	beq.n	8002950 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
    }
  }
  return;
 800294e:	bf00      	nop
 8002950:	bf00      	nop
}
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40020008 	.word	0x40020008
 800295c:	4002001c 	.word	0x4002001c
 8002960:	40020030 	.word	0x40020030
 8002964:	40020044 	.word	0x40020044
 8002968:	40020058 	.word	0x40020058
 800296c:	4002006c 	.word	0x4002006c
 8002970:	40020000 	.word	0x40020000

08002974 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	2101      	movs	r1, #1
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b10      	cmp	r3, #16
 80029a0:	d108      	bne.n	80029b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029b2:	e007      	b.n	80029c4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
}
 80029c4:	bf00      	nop
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b08b      	sub	sp, #44	; 0x2c
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029da:	2300      	movs	r3, #0
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029e2:	e127      	b.n	8002c34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029e4:	2201      	movs	r2, #1
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	f040 8116 	bne.w	8002c2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d034      	beq.n	8002a74 <HAL_GPIO_Init+0xa4>
 8002a0a:	2b12      	cmp	r3, #18
 8002a0c:	d80d      	bhi.n	8002a2a <HAL_GPIO_Init+0x5a>
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d02b      	beq.n	8002a6a <HAL_GPIO_Init+0x9a>
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d804      	bhi.n	8002a20 <HAL_GPIO_Init+0x50>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d031      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d01c      	beq.n	8002a58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a1e:	e048      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d043      	beq.n	8002aac <HAL_GPIO_Init+0xdc>
 8002a24:	2b11      	cmp	r3, #17
 8002a26:	d01b      	beq.n	8002a60 <HAL_GPIO_Init+0x90>
          break;
 8002a28:	e043      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a2a:	4a89      	ldr	r2, [pc, #548]	; (8002c50 <HAL_GPIO_Init+0x280>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d026      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
 8002a30:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <HAL_GPIO_Init+0x280>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d806      	bhi.n	8002a44 <HAL_GPIO_Init+0x74>
 8002a36:	4a87      	ldr	r2, [pc, #540]	; (8002c54 <HAL_GPIO_Init+0x284>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d020      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
 8002a3c:	4a86      	ldr	r2, [pc, #536]	; (8002c58 <HAL_GPIO_Init+0x288>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d01d      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
          break;
 8002a42:	e036      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a44:	4a85      	ldr	r2, [pc, #532]	; (8002c5c <HAL_GPIO_Init+0x28c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d019      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
 8002a4a:	4a85      	ldr	r2, [pc, #532]	; (8002c60 <HAL_GPIO_Init+0x290>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d016      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
 8002a50:	4a84      	ldr	r2, [pc, #528]	; (8002c64 <HAL_GPIO_Init+0x294>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d013      	beq.n	8002a7e <HAL_GPIO_Init+0xae>
          break;
 8002a56:	e02c      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	623b      	str	r3, [r7, #32]
          break;
 8002a5e:	e028      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	3304      	adds	r3, #4
 8002a66:	623b      	str	r3, [r7, #32]
          break;
 8002a68:	e023      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	623b      	str	r3, [r7, #32]
          break;
 8002a72:	e01e      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	330c      	adds	r3, #12
 8002a7a:	623b      	str	r3, [r7, #32]
          break;
 8002a7c:	e019      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d102      	bne.n	8002a8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a86:	2304      	movs	r3, #4
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e012      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a94:	2308      	movs	r3, #8
 8002a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	611a      	str	r2, [r3, #16]
          break;
 8002a9e:	e008      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69fa      	ldr	r2, [r7, #28]
 8002aa8:	615a      	str	r2, [r3, #20]
          break;
 8002aaa:	e002      	b.n	8002ab2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002aac:	2300      	movs	r3, #0
 8002aae:	623b      	str	r3, [r7, #32]
          break;
 8002ab0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	d801      	bhi.n	8002abc <HAL_GPIO_Init+0xec>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	e001      	b.n	8002ac0 <HAL_GPIO_Init+0xf0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	2bff      	cmp	r3, #255	; 0xff
 8002ac6:	d802      	bhi.n	8002ace <HAL_GPIO_Init+0xfe>
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x104>
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	3b08      	subs	r3, #8
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	210f      	movs	r1, #15
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	6a39      	ldr	r1, [r7, #32]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	fa01 f303 	lsl.w	r3, r1, r3
 8002aee:	431a      	orrs	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8096 	beq.w	8002c2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b02:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_GPIO_Init+0x298>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <HAL_GPIO_Init+0x298>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6193      	str	r3, [r2, #24]
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_GPIO_Init+0x298>)
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b1a:	4a54      	ldr	r2, [pc, #336]	; (8002c6c <HAL_GPIO_Init+0x29c>)
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	089b      	lsrs	r3, r3, #2
 8002b20:	3302      	adds	r3, #2
 8002b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	220f      	movs	r2, #15
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a4b      	ldr	r2, [pc, #300]	; (8002c70 <HAL_GPIO_Init+0x2a0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_GPIO_Init+0x19e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a4a      	ldr	r2, [pc, #296]	; (8002c74 <HAL_GPIO_Init+0x2a4>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00d      	beq.n	8002b6a <HAL_GPIO_Init+0x19a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a49      	ldr	r2, [pc, #292]	; (8002c78 <HAL_GPIO_Init+0x2a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <HAL_GPIO_Init+0x196>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a48      	ldr	r2, [pc, #288]	; (8002c7c <HAL_GPIO_Init+0x2ac>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d101      	bne.n	8002b62 <HAL_GPIO_Init+0x192>
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x1a0>
 8002b62:	2304      	movs	r3, #4
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x1a0>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x1a0>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x1a0>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	f002 0203 	and.w	r2, r2, #3
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b80:	493a      	ldr	r1, [pc, #232]	; (8002c6c <HAL_GPIO_Init+0x29c>)
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4938      	ldr	r1, [pc, #224]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
 8002ba6:	e006      	b.n	8002bb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ba8:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	4933      	ldr	r1, [pc, #204]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d006      	beq.n	8002bd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	492e      	ldr	r1, [pc, #184]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	604b      	str	r3, [r1, #4]
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002bd0:	4b2b      	ldr	r3, [pc, #172]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	4929      	ldr	r1, [pc, #164]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bea:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	4924      	ldr	r1, [pc, #144]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
 8002bf6:	e006      	b.n	8002c06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	491f      	ldr	r1, [pc, #124]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d006      	beq.n	8002c20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	491a      	ldr	r1, [pc, #104]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60cb      	str	r3, [r1, #12]
 8002c1e:	e006      	b.n	8002c2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4915      	ldr	r1, [pc, #84]	; (8002c80 <HAL_GPIO_Init+0x2b0>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	3301      	adds	r3, #1
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f47f aed0 	bne.w	80029e4 <HAL_GPIO_Init+0x14>
  }
}
 8002c44:	bf00      	nop
 8002c46:	372c      	adds	r7, #44	; 0x2c
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bc80      	pop	{r7}
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	10210000 	.word	0x10210000
 8002c54:	10110000 	.word	0x10110000
 8002c58:	10120000 	.word	0x10120000
 8002c5c:	10310000 	.word	0x10310000
 8002c60:	10320000 	.word	0x10320000
 8002c64:	10220000 	.word	0x10220000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40010800 	.word	0x40010800
 8002c74:	40010c00 	.word	0x40010c00
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	40010400 	.word	0x40010400

08002c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
 8002ca0:	e001      	b.n	8002ca6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	460b      	mov	r3, r1
 8002cbc:	807b      	strh	r3, [r7, #2]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc2:	787b      	ldrb	r3, [r7, #1]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cc8:	887a      	ldrh	r2, [r7, #2]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cce:	e003      	b.n	8002cd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd0:	887b      	ldrh	r3, [r7, #2]
 8002cd2:	041a      	lsls	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	611a      	str	r2, [r3, #16]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr
	...

08002ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e26c      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8087 	beq.w	8002e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d04:	4b92      	ldr	r3, [pc, #584]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d00c      	beq.n	8002d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d10:	4b8f      	ldr	r3, [pc, #572]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d112      	bne.n	8002d42 <HAL_RCC_OscConfig+0x5e>
 8002d1c:	4b8c      	ldr	r3, [pc, #560]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d28:	d10b      	bne.n	8002d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2a:	4b89      	ldr	r3, [pc, #548]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d06c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x12c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d168      	bne.n	8002e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e246      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x76>
 8002d4c:	4b80      	ldr	r3, [pc, #512]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a7f      	ldr	r2, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e02e      	b.n	8002db8 <HAL_RCC_OscConfig+0xd4>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCC_OscConfig+0x98>
 8002d62:	4b7b      	ldr	r3, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a7a      	ldr	r2, [pc, #488]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e01d      	b.n	8002db8 <HAL_RCC_OscConfig+0xd4>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d84:	d10c      	bne.n	8002da0 <HAL_RCC_OscConfig+0xbc>
 8002d86:	4b72      	ldr	r3, [pc, #456]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a71      	ldr	r2, [pc, #452]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d90:	6013      	str	r3, [r2, #0]
 8002d92:	4b6f      	ldr	r3, [pc, #444]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a6e      	ldr	r2, [pc, #440]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e00b      	b.n	8002db8 <HAL_RCC_OscConfig+0xd4>
 8002da0:	4b6b      	ldr	r3, [pc, #428]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	4b68      	ldr	r3, [pc, #416]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a67      	ldr	r2, [pc, #412]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d013      	beq.n	8002de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe50 	bl	8001a64 <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc8:	f7fe fe4c 	bl	8001a64 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b64      	cmp	r3, #100	; 0x64
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e1fa      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dda:	4b5d      	ldr	r3, [pc, #372]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0xe4>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe fe3c 	bl	8001a64 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fe38 	bl	8001a64 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1e6      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e02:	4b53      	ldr	r3, [pc, #332]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x10c>
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d063      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1e:	4b4c      	ldr	r3, [pc, #304]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d11c      	bne.n	8002e70 <HAL_RCC_OscConfig+0x18c>
 8002e36:	4b46      	ldr	r3, [pc, #280]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d116      	bne.n	8002e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_RCC_OscConfig+0x176>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d001      	beq.n	8002e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e1ba      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5a:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4939      	ldr	r1, [pc, #228]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	e03a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d020      	beq.n	8002eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e78:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe fdf1 	bl	8001a64 <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e86:	f7fe fded 	bl	8001a64 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e19b      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e98:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b2a      	ldr	r3, [pc, #168]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4927      	ldr	r1, [pc, #156]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eba:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fdd0 	bl	8001a64 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fdcc 	bl	8001a64 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e17a      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eda:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03a      	beq.n	8002f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d019      	beq.n	8002f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002efa:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCC_OscConfig+0x274>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fe fdb0 	bl	8001a64 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fe fdac 	bl	8001a64 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e15a      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0f0      	beq.n	8002f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f26:	2001      	movs	r0, #1
 8002f28:	f000 faa8 	bl	800347c <RCC_Delay>
 8002f2c:	e01c      	b.n	8002f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f2e:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_OscConfig+0x274>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fd96 	bl	8001a64 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3a:	e00f      	b.n	8002f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fd92 	bl	8001a64 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d908      	bls.n	8002f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e140      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	42420000 	.word	0x42420000
 8002f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f5c:	4b9e      	ldr	r3, [pc, #632]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e9      	bne.n	8002f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80a6 	beq.w	80030c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b97      	ldr	r3, [pc, #604]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b94      	ldr	r3, [pc, #592]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a93      	ldr	r2, [pc, #588]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b91      	ldr	r3, [pc, #580]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa2:	4b8e      	ldr	r3, [pc, #568]	; (80031dc <HAL_RCC_OscConfig+0x4f8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d118      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x4f8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a8a      	ldr	r2, [pc, #552]	; (80031dc <HAL_RCC_OscConfig+0x4f8>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fd53 	bl	8001a64 <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fe fd4f 	bl	8001a64 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0fd      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd4:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x4f8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x312>
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a7a      	ldr	r2, [pc, #488]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	e02d      	b.n	8003052 <HAL_RCC_OscConfig+0x36e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x334>
 8002ffe:	4b76      	ldr	r3, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	4a75      	ldr	r2, [pc, #468]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6213      	str	r3, [r2, #32]
 800300a:	4b73      	ldr	r3, [pc, #460]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	4a72      	ldr	r2, [pc, #456]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6213      	str	r3, [r2, #32]
 8003016:	e01c      	b.n	8003052 <HAL_RCC_OscConfig+0x36e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x356>
 8003020:	4b6d      	ldr	r3, [pc, #436]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a6c      	ldr	r2, [pc, #432]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	4b6a      	ldr	r3, [pc, #424]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	4a69      	ldr	r2, [pc, #420]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6213      	str	r3, [r2, #32]
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x36e>
 800303a:	4b67      	ldr	r3, [pc, #412]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a66      	ldr	r2, [pc, #408]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	4b64      	ldr	r3, [pc, #400]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a63      	ldr	r2, [pc, #396]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d015      	beq.n	8003086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305a:	f7fe fd03 	bl	8001a64 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe fcff 	bl	8001a64 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0ab      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ee      	beq.n	8003062 <HAL_RCC_OscConfig+0x37e>
 8003084:	e014      	b.n	80030b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003086:	f7fe fced 	bl	8001a64 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe fce9 	bl	8001a64 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e095      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ee      	bne.n	800308e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	69db      	ldr	r3, [r3, #28]
 80030ba:	4a47      	ldr	r2, [pc, #284]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 8081 	beq.w	80031ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030cc:	4b42      	ldr	r3, [pc, #264]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d061      	beq.n	800319c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d146      	bne.n	800316e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <HAL_RCC_OscConfig+0x4fc>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e6:	f7fe fcbd 	bl	8001a64 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ee:	f7fe fcb9 	bl	8001a64 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e067      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d108      	bne.n	8003128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	492d      	ldr	r1, [pc, #180]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a19      	ldr	r1, [r3, #32]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	430b      	orrs	r3, r1
 800313a:	4927      	ldr	r1, [pc, #156]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <HAL_RCC_OscConfig+0x4fc>)
 8003142:	2201      	movs	r2, #1
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fc8d 	bl	8001a64 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fc89 	bl	8001a64 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e037      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x46a>
 800316c:	e02f      	b.n	80031ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <HAL_RCC_OscConfig+0x4fc>)
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fe fc76 	bl	8001a64 <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800317a:	e008      	b.n	800318e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317c:	f7fe fc72 	bl	8001a64 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e020      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f0      	bne.n	800317c <HAL_RCC_OscConfig+0x498>
 800319a:	e018      	b.n	80031ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e013      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_RCC_OscConfig+0x4f4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d106      	bne.n	80031ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40007000 	.word	0x40007000
 80031e0:	42420060 	.word	0x42420060

080031e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0d0      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	4965      	ldr	r1, [pc, #404]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b63      	ldr	r3, [pc, #396]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0b8      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d020      	beq.n	8003276 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003240:	4b59      	ldr	r3, [pc, #356]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a58      	ldr	r2, [pc, #352]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003246:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800324a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d005      	beq.n	8003264 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003258:	4b53      	ldr	r3, [pc, #332]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003262:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003264:	4b50      	ldr	r3, [pc, #320]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	494d      	ldr	r1, [pc, #308]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	4313      	orrs	r3, r2
 8003274:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d040      	beq.n	8003304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d115      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e07f      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e073      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b3d      	ldr	r3, [pc, #244]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e06b      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4936      	ldr	r1, [pc, #216]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7fe fbc6 	bl	8001a64 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe fbc2 	bl	8001a64 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e053      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d210      	bcs.n	8003334 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b24      	ldr	r3, [pc, #144]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0207 	bic.w	r2, r3, #7
 800331a:	4922      	ldr	r1, [pc, #136]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003322:	4b20      	ldr	r3, [pc, #128]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0307 	and.w	r3, r3, #7
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d001      	beq.n	8003334 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e032      	b.n	800339a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4916      	ldr	r1, [pc, #88]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800335e:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	490e      	ldr	r1, [pc, #56]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003372:	f000 f821 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8003376:	4601      	mov	r1, r0
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	4a0a      	ldr	r2, [pc, #40]	; (80033ac <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	5cd3      	ldrb	r3, [r2, r3]
 8003386:	fa21 f303 	lsr.w	r3, r1, r3
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <HAL_RCC_ClockConfig+0x1cc>)
 800338c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fb24 	bl	80019e0 <HAL_InitTick>

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40022000 	.word	0x40022000
 80033a8:	40021000 	.word	0x40021000
 80033ac:	080046b8 	.word	0x080046b8
 80033b0:	20000000 	.word	0x20000000
 80033b4:	20000004 	.word	0x20000004

080033b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	b490      	push	{r4, r7}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033be:	4b2a      	ldr	r3, [pc, #168]	; (8003468 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033c0:	1d3c      	adds	r4, r7, #4
 80033c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80033c8:	4b28      	ldr	r3, [pc, #160]	; (800346c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	2300      	movs	r3, #0
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033e2:	4b23      	ldr	r3, [pc, #140]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 030c 	and.w	r3, r3, #12
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d002      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x40>
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d003      	beq.n	80033fe <HAL_RCC_GetSysClockFreq+0x46>
 80033f6:	e02d      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_RCC_GetSysClockFreq+0xbc>)
 80033fa:	623b      	str	r3, [r7, #32]
      break;
 80033fc:	e02d      	b.n	800345a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	0c9b      	lsrs	r3, r3, #18
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800340a:	4413      	add	r3, r2
 800340c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003410:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	0c5b      	lsrs	r3, r3, #17
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800342a:	4413      	add	r3, r2
 800342c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003430:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003436:	fb02 f203 	mul.w	r2, r2, r3
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	e004      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	623b      	str	r3, [r7, #32]
      break;
 8003452:	e002      	b.n	800345a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003456:	623b      	str	r3, [r7, #32]
      break;
 8003458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345a:	6a3b      	ldr	r3, [r7, #32]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bc90      	pop	{r4, r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	080046a4 	.word	0x080046a4
 800346c:	080046b4 	.word	0x080046b4
 8003470:	40021000 	.word	0x40021000
 8003474:	007a1200 	.word	0x007a1200
 8003478:	003d0900 	.word	0x003d0900

0800347c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003484:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <RCC_Delay+0x34>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a0a      	ldr	r2, [pc, #40]	; (80034b4 <RCC_Delay+0x38>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0a5b      	lsrs	r3, r3, #9
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003498:	bf00      	nop
  }
  while (Delay --);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1e5a      	subs	r2, r3, #1
 800349e:	60fa      	str	r2, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1f9      	bne.n	8003498 <RCC_Delay+0x1c>
}
 80034a4:	bf00      	nop
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	20000000 	.word	0x20000000
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d07d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d8:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10d      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034e4:	4b4c      	ldr	r3, [pc, #304]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	4a4b      	ldr	r2, [pc, #300]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ee:	61d3      	str	r3, [r2, #28]
 80034f0:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034fc:	2301      	movs	r3, #1
 80034fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d118      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a42      	ldr	r2, [pc, #264]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003518:	f7fe faa4 	bl	8001a64 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e008      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe faa0 	bl	8001a64 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e06d      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003546:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d027      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003566:	4b2e      	ldr	r3, [pc, #184]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800356c:	4b2c      	ldr	r3, [pc, #176]	; (8003620 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003572:	4a29      	ldr	r2, [pc, #164]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d014      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003582:	f7fe fa6f 	bl	8001a64 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	e00a      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358a:	f7fe fa6b 	bl	8001a64 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	f241 3288 	movw	r2, #5000	; 0x1388
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e036      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a0:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0ee      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035ac:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4917      	ldr	r1, [pc, #92]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035c4:	4b14      	ldr	r3, [pc, #80]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4a13      	ldr	r2, [pc, #76]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	490b      	ldr	r1, [pc, #44]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	4904      	ldr	r1, [pc, #16]	; (8003618 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	4313      	orrs	r3, r2
 800360a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	42420440 	.word	0x42420440

08003624 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e041      	b.n	80036ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fe f916 	bl	800187c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3304      	adds	r3, #4
 8003660:	4619      	mov	r1, r3
 8003662:	4610      	mov	r0, r2
 8003664:	f000 fc44 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d001      	beq.n	80036dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2202      	movs	r2, #2
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <HAL_TIM_Base_Start+0x88>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d00e      	beq.n	800370c <HAL_TIM_Base_Start+0x48>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d009      	beq.n	800370c <HAL_TIM_Base_Start+0x48>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a14      	ldr	r2, [pc, #80]	; (8003750 <HAL_TIM_Base_Start+0x8c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIM_Base_Start+0x48>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_TIM_Base_Start+0x90>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b06      	cmp	r3, #6
 800371c:	d010      	beq.n	8003740 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0201 	orr.w	r2, r2, #1
 800372c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372e:	e007      	b.n	8003740 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	40012c00 	.word	0x40012c00
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800

08003758 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e041      	b.n	80037ee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f839 	bl	80037f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3304      	adds	r3, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4610      	mov	r0, r2
 8003798:	f000 fbaa 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037f6:	b480      	push	{r7}
 80037f8:	b083      	sub	sp, #12
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr

08003808 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_TIM_IC_Start_IT+0x1a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e013      	b.n	800384a <HAL_TIM_IC_Start_IT+0x42>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b04      	cmp	r3, #4
 8003826:	d104      	bne.n	8003832 <HAL_TIM_IC_Start_IT+0x2a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800382e:	b2db      	uxtb	r3, r3
 8003830:	e00b      	b.n	800384a <HAL_TIM_IC_Start_IT+0x42>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x3a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e003      	b.n	800384a <HAL_TIM_IC_Start_IT+0x42>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003848:	b2db      	uxtb	r3, r3
 800384a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_TIM_IC_Start_IT+0x54>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e013      	b.n	8003884 <HAL_TIM_IC_Start_IT+0x7c>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b04      	cmp	r3, #4
 8003860:	d104      	bne.n	800386c <HAL_TIM_IC_Start_IT+0x64>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e00b      	b.n	8003884 <HAL_TIM_IC_Start_IT+0x7c>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b08      	cmp	r3, #8
 8003870:	d104      	bne.n	800387c <HAL_TIM_IC_Start_IT+0x74>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e003      	b.n	8003884 <HAL_TIM_IC_Start_IT+0x7c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003882:	b2db      	uxtb	r3, r3
 8003884:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800388c:	7bbb      	ldrb	r3, [r7, #14]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d001      	beq.n	8003896 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e0b3      	b.n	80039fe <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <HAL_TIM_IC_Start_IT+0x9e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	e013      	b.n	80038ce <HAL_TIM_IC_Start_IT+0xc6>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_IC_Start_IT+0xae>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b4:	e00b      	b.n	80038ce <HAL_TIM_IC_Start_IT+0xc6>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_IC_Start_IT+0xbe>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c4:	e003      	b.n	80038ce <HAL_TIM_IC_Start_IT+0xc6>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <HAL_TIM_IC_Start_IT+0xd6>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038dc:	e013      	b.n	8003906 <HAL_TIM_IC_Start_IT+0xfe>
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d104      	bne.n	80038ee <HAL_TIM_IC_Start_IT+0xe6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ec:	e00b      	b.n	8003906 <HAL_TIM_IC_Start_IT+0xfe>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d104      	bne.n	80038fe <HAL_TIM_IC_Start_IT+0xf6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	e003      	b.n	8003906 <HAL_TIM_IC_Start_IT+0xfe>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d841      	bhi.n	8003990 <HAL_TIM_IC_Start_IT+0x188>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <HAL_TIM_IC_Start_IT+0x10c>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003949 	.word	0x08003949
 8003918:	08003991 	.word	0x08003991
 800391c:	08003991 	.word	0x08003991
 8003920:	08003991 	.word	0x08003991
 8003924:	0800395b 	.word	0x0800395b
 8003928:	08003991 	.word	0x08003991
 800392c:	08003991 	.word	0x08003991
 8003930:	08003991 	.word	0x08003991
 8003934:	0800396d 	.word	0x0800396d
 8003938:	08003991 	.word	0x08003991
 800393c:	08003991 	.word	0x08003991
 8003940:	08003991 	.word	0x08003991
 8003944:	0800397f 	.word	0x0800397f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0202 	orr.w	r2, r2, #2
 8003956:	60da      	str	r2, [r3, #12]
      break;
 8003958:	e01b      	b.n	8003992 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0204 	orr.w	r2, r2, #4
 8003968:	60da      	str	r2, [r3, #12]
      break;
 800396a:	e012      	b.n	8003992 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	60da      	str	r2, [r3, #12]
      break;
 800397c:	e009      	b.n	8003992 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0210 	orr.w	r2, r2, #16
 800398c:	60da      	str	r2, [r3, #12]
      break;
 800398e:	e000      	b.n	8003992 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003990:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2201      	movs	r2, #1
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f000 fcad 	bl	80042fa <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a18      	ldr	r2, [pc, #96]	; (8003a08 <HAL_TIM_IC_Start_IT+0x200>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00e      	beq.n	80039c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d009      	beq.n	80039c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <HAL_TIM_IC_Start_IT+0x204>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d004      	beq.n	80039c8 <HAL_TIM_IC_Start_IT+0x1c0>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <HAL_TIM_IC_Start_IT+0x208>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d111      	bne.n	80039ec <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d010      	beq.n	80039fc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0201 	orr.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ea:	e007      	b.n	80039fc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	40012c00 	.word	0x40012c00
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800

08003a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d122      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d11b      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0202 	mvn.w	r2, #2
 8003a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fccc 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 fa2b 	bl	8003eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fa31 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d122      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d11b      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0204 	mvn.w	r2, #4
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fca2 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003ab0:	e005      	b.n	8003abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fa01 	bl	8003eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa07 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0308 	and.w	r3, r3, #8
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d122      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f003 0308 	and.w	r3, r3, #8
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d11b      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0208 	mvn.w	r2, #8
 8003ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2204      	movs	r2, #4
 8003aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fc78 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9d7 	bl	8003eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9dd 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0310 	and.w	r3, r3, #16
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b10      	cmp	r3, #16
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0210 	mvn.w	r2, #16
 8003b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2208      	movs	r2, #8
 8003b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fc4e 	bl	80013f4 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9ad 	bl	8003eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f9b3 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d10e      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d107      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0201 	mvn.w	r2, #1
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fd fc96 	bl	80014c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fc27 	bl	8004412 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f977 	bl	8003ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fbf2 	bl	8004400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <HAL_TIM_IC_ConfigChannel+0x1a>
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e082      	b.n	8003d44 <HAL_TIM_IC_ConfigChannel+0x120>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d11b      	bne.n	8003c84 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f000 f9aa 	bl	8003fb4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 020c 	bic.w	r2, r2, #12
 8003c6e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6999      	ldr	r1, [r3, #24]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	619a      	str	r2, [r3, #24]
 8003c82:	e05a      	b.n	8003d3a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d11c      	bne.n	8003cc4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f000 fa13 	bl	80040c4 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003cac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6999      	ldr	r1, [r3, #24]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	021a      	lsls	r2, r3, #8
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	619a      	str	r2, [r3, #24]
 8003cc2:	e03a      	b.n	8003d3a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d11b      	bne.n	8003d02 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6818      	ldr	r0, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	f000 fa5e 	bl	800419a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 020c 	bic.w	r2, r2, #12
 8003cec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	61da      	str	r2, [r3, #28]
 8003d00:	e01b      	b.n	8003d3a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f000 fa7d 	bl	8004210 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d24:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_TIM_ConfigClockSource+0x18>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e0a6      	b.n	8003eb2 <HAL_TIM_ConfigClockSource+0x166>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2202      	movs	r2, #2
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d067      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0x120>
 8003d9c:	2b40      	cmp	r3, #64	; 0x40
 8003d9e:	d80b      	bhi.n	8003db8 <HAL_TIM_ConfigClockSource+0x6c>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d073      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x140>
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d802      	bhi.n	8003dae <HAL_TIM_ConfigClockSource+0x62>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d06f      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dac:	e078      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d06c      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x140>
 8003db2:	2b30      	cmp	r3, #48	; 0x30
 8003db4:	d06a      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003db6:	e073      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003db8:	2b70      	cmp	r3, #112	; 0x70
 8003dba:	d00d      	beq.n	8003dd8 <HAL_TIM_ConfigClockSource+0x8c>
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d804      	bhi.n	8003dca <HAL_TIM_ConfigClockSource+0x7e>
 8003dc0:	2b50      	cmp	r3, #80	; 0x50
 8003dc2:	d033      	beq.n	8003e2c <HAL_TIM_ConfigClockSource+0xe0>
 8003dc4:	2b60      	cmp	r3, #96	; 0x60
 8003dc6:	d041      	beq.n	8003e4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003dc8:	e06a      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dce:	d066      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0x152>
 8003dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dd4:	d017      	beq.n	8003e06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dd6:	e063      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6899      	ldr	r1, [r3, #8]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f000 fa68 	bl	80042bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	609a      	str	r2, [r3, #8]
      break;
 8003e04:	e04c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	6899      	ldr	r1, [r3, #8]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f000 fa51 	bl	80042bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e28:	609a      	str	r2, [r3, #8]
      break;
 8003e2a:	e039      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6818      	ldr	r0, [r3, #0]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f000 f915 	bl	8004068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2150      	movs	r1, #80	; 0x50
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fa1f 	bl	8004288 <TIM_ITRx_SetConfig>
      break;
 8003e4a:	e029      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6859      	ldr	r1, [r3, #4]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f000 f96f 	bl	800413c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2160      	movs	r1, #96	; 0x60
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa0f 	bl	8004288 <TIM_ITRx_SetConfig>
      break;
 8003e6a:	e019      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f000 f8f5 	bl	8004068 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2140      	movs	r1, #64	; 0x40
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 f9ff 	bl	8004288 <TIM_ITRx_SetConfig>
      break;
 8003e8a:	e009      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f000 f9f6 	bl	8004288 <TIM_ITRx_SetConfig>
        break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <TIM_Base_SetConfig+0xb8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <TIM_Base_SetConfig+0x30>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0e:	d007      	beq.n	8003f20 <TIM_Base_SetConfig+0x30>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a26      	ldr	r2, [pc, #152]	; (8003fac <TIM_Base_SetConfig+0xbc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d003      	beq.n	8003f20 <TIM_Base_SetConfig+0x30>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <TIM_Base_SetConfig+0xc0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d108      	bne.n	8003f32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <TIM_Base_SetConfig+0xb8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00b      	beq.n	8003f52 <TIM_Base_SetConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f40:	d007      	beq.n	8003f52 <TIM_Base_SetConfig+0x62>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a19      	ldr	r2, [pc, #100]	; (8003fac <TIM_Base_SetConfig+0xbc>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_Base_SetConfig+0x62>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	; (8003fb0 <TIM_Base_SetConfig+0xc0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a07      	ldr	r2, [pc, #28]	; (8003fa8 <TIM_Base_SetConfig+0xb8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	40012c00 	.word	0x40012c00
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800

08003fb4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0201 	bic.w	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a1f      	ldr	r2, [pc, #124]	; (800405c <TIM_TI1_SetConfig+0xa8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_TI1_SetConfig+0x46>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe8:	d007      	beq.n	8003ffa <TIM_TI1_SetConfig+0x46>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <TIM_TI1_SetConfig+0xac>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_TI1_SetConfig+0x46>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <TIM_TI1_SetConfig+0xb0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <TIM_TI1_SetConfig+0x4a>
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e000      	b.n	8004000 <TIM_TI1_SetConfig+0x4c>
 8003ffe:	2300      	movs	r3, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e003      	b.n	800401e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f043 0301 	orr.w	r3, r3, #1
 800401c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	b2db      	uxtb	r3, r3
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f023 030a 	bic.w	r3, r3, #10
 8004038:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 030a 	and.w	r3, r3, #10
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	693a      	ldr	r2, [r7, #16]
 8004050:	621a      	str	r2, [r3, #32]
}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800

08004068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	f023 0201 	bic.w	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 030a 	bic.w	r3, r3, #10
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	621a      	str	r2, [r3, #32]
}
 80040ba:	bf00      	nop
 80040bc:	371c      	adds	r7, #28
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0210 	bic.w	r2, r3, #16
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a1b      	ldr	r3, [r3, #32]
 80040e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004102:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	031b      	lsls	r3, r3, #12
 8004108:	b29b      	uxth	r3, r3
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004116:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	011b      	lsls	r3, r3, #4
 800411c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	4313      	orrs	r3, r2
 8004124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	f023 0210 	bic.w	r2, r3, #16
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004166:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	031b      	lsls	r3, r3, #12
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004178:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4313      	orrs	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	621a      	str	r2, [r3, #32]
}
 8004190:	bf00      	nop
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr

0800419a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800419a:	b480      	push	{r7}
 800419c:	b087      	sub	sp, #28
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0303 	bic.w	r3, r3, #3
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800424e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	031b      	lsls	r3, r3, #12
 8004254:	b29b      	uxth	r3, r3
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004262:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	031b      	lsls	r3, r3, #12
 8004268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	621a      	str	r2, [r3, #32]
}
 800427e:	bf00      	nop
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bc80      	pop	{r7}
 8004286:	4770      	bx	lr

08004288 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f043 0307 	orr.w	r3, r3, #7
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	609a      	str	r2, [r3, #8]
}
 80042b2:	bf00      	nop
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b087      	sub	sp, #28
 80042fe:	af00      	add	r7, sp, #0
 8004300:	60f8      	str	r0, [r7, #12]
 8004302:	60b9      	str	r1, [r7, #8]
 8004304:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	2201      	movs	r2, #1
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	43db      	mvns	r3, r3
 800431c:	401a      	ands	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	431a      	orrs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	bc80      	pop	{r7}
 8004340:	4770      	bx	lr
	...

08004344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004358:	2302      	movs	r3, #2
 800435a:	e046      	b.n	80043ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00e      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d009      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a12      	ldr	r2, [pc, #72]	; (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d004      	beq.n	80043be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a10      	ldr	r2, [pc, #64]	; (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d10c      	bne.n	80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40012c00 	.word	0x40012c00
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800

08004400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <__errno>:
 8004424:	4b01      	ldr	r3, [pc, #4]	; (800442c <__errno+0x8>)
 8004426:	6818      	ldr	r0, [r3, #0]
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	2000000c 	.word	0x2000000c

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	2500      	movs	r5, #0
 8004434:	4e0c      	ldr	r6, [pc, #48]	; (8004468 <__libc_init_array+0x38>)
 8004436:	4c0d      	ldr	r4, [pc, #52]	; (800446c <__libc_init_array+0x3c>)
 8004438:	1ba4      	subs	r4, r4, r6
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	42a5      	cmp	r5, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	f000 f924 	bl	800468c <_init>
 8004444:	2500      	movs	r5, #0
 8004446:	4e0a      	ldr	r6, [pc, #40]	; (8004470 <__libc_init_array+0x40>)
 8004448:	4c0a      	ldr	r4, [pc, #40]	; (8004474 <__libc_init_array+0x44>)
 800444a:	1ba4      	subs	r4, r4, r6
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	42a5      	cmp	r5, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004458:	4798      	blx	r3
 800445a:	3501      	adds	r5, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004462:	4798      	blx	r3
 8004464:	3501      	adds	r5, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	080046d0 	.word	0x080046d0
 800446c:	080046d0 	.word	0x080046d0
 8004470:	080046d0 	.word	0x080046d0
 8004474:	080046d4 	.word	0x080046d4

08004478 <memset>:
 8004478:	4603      	mov	r3, r0
 800447a:	4402      	add	r2, r0
 800447c:	4293      	cmp	r3, r2
 800447e:	d100      	bne.n	8004482 <memset+0xa>
 8004480:	4770      	bx	lr
 8004482:	f803 1b01 	strb.w	r1, [r3], #1
 8004486:	e7f9      	b.n	800447c <memset+0x4>

08004488 <sqrt>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b08b      	sub	sp, #44	; 0x2c
 800448e:	4604      	mov	r4, r0
 8004490:	460d      	mov	r5, r1
 8004492:	f000 f84d 	bl	8004530 <__ieee754_sqrt>
 8004496:	4b24      	ldr	r3, [pc, #144]	; (8004528 <sqrt+0xa0>)
 8004498:	4680      	mov	r8, r0
 800449a:	f993 a000 	ldrsb.w	sl, [r3]
 800449e:	4689      	mov	r9, r1
 80044a0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80044a4:	d02b      	beq.n	80044fe <sqrt+0x76>
 80044a6:	4622      	mov	r2, r4
 80044a8:	462b      	mov	r3, r5
 80044aa:	4620      	mov	r0, r4
 80044ac:	4629      	mov	r1, r5
 80044ae:	f7fc faa3 	bl	80009f8 <__aeabi_dcmpun>
 80044b2:	4683      	mov	fp, r0
 80044b4:	bb18      	cbnz	r0, 80044fe <sqrt+0x76>
 80044b6:	2600      	movs	r6, #0
 80044b8:	2700      	movs	r7, #0
 80044ba:	4632      	mov	r2, r6
 80044bc:	463b      	mov	r3, r7
 80044be:	4620      	mov	r0, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	f7fc fa71 	bl	80009a8 <__aeabi_dcmplt>
 80044c6:	b1d0      	cbz	r0, 80044fe <sqrt+0x76>
 80044c8:	2301      	movs	r3, #1
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	4b17      	ldr	r3, [pc, #92]	; (800452c <sqrt+0xa4>)
 80044ce:	f8cd b020 	str.w	fp, [sp, #32]
 80044d2:	9301      	str	r3, [sp, #4]
 80044d4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80044d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044dc:	f1ba 0f00 	cmp.w	sl, #0
 80044e0:	d112      	bne.n	8004508 <sqrt+0x80>
 80044e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80044e6:	4668      	mov	r0, sp
 80044e8:	f000 f8ce 	bl	8004688 <matherr>
 80044ec:	b1b8      	cbz	r0, 800451e <sqrt+0x96>
 80044ee:	9b08      	ldr	r3, [sp, #32]
 80044f0:	b11b      	cbz	r3, 80044fa <sqrt+0x72>
 80044f2:	f7ff ff97 	bl	8004424 <__errno>
 80044f6:	9b08      	ldr	r3, [sp, #32]
 80044f8:	6003      	str	r3, [r0, #0]
 80044fa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80044fe:	4640      	mov	r0, r8
 8004500:	4649      	mov	r1, r9
 8004502:	b00b      	add	sp, #44	; 0x2c
 8004504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004508:	4632      	mov	r2, r6
 800450a:	463b      	mov	r3, r7
 800450c:	4630      	mov	r0, r6
 800450e:	4639      	mov	r1, r7
 8004510:	f7fc f902 	bl	8000718 <__aeabi_ddiv>
 8004514:	f1ba 0f02 	cmp.w	sl, #2
 8004518:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800451c:	d1e3      	bne.n	80044e6 <sqrt+0x5e>
 800451e:	f7ff ff81 	bl	8004424 <__errno>
 8004522:	2321      	movs	r3, #33	; 0x21
 8004524:	6003      	str	r3, [r0, #0]
 8004526:	e7e2      	b.n	80044ee <sqrt+0x66>
 8004528:	20000070 	.word	0x20000070
 800452c:	080046c8 	.word	0x080046c8

08004530 <__ieee754_sqrt>:
 8004530:	4b54      	ldr	r3, [pc, #336]	; (8004684 <__ieee754_sqrt+0x154>)
 8004532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004536:	438b      	bics	r3, r1
 8004538:	4606      	mov	r6, r0
 800453a:	460d      	mov	r5, r1
 800453c:	460a      	mov	r2, r1
 800453e:	460c      	mov	r4, r1
 8004540:	d10f      	bne.n	8004562 <__ieee754_sqrt+0x32>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	f7fb ffbd 	bl	80004c4 <__aeabi_dmul>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	4630      	mov	r0, r6
 8004550:	4629      	mov	r1, r5
 8004552:	f7fb fe01 	bl	8000158 <__adddf3>
 8004556:	4606      	mov	r6, r0
 8004558:	460d      	mov	r5, r1
 800455a:	4630      	mov	r0, r6
 800455c:	4629      	mov	r1, r5
 800455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004562:	2900      	cmp	r1, #0
 8004564:	4607      	mov	r7, r0
 8004566:	4603      	mov	r3, r0
 8004568:	dc0e      	bgt.n	8004588 <__ieee754_sqrt+0x58>
 800456a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800456e:	ea5c 0707 	orrs.w	r7, ip, r7
 8004572:	d0f2      	beq.n	800455a <__ieee754_sqrt+0x2a>
 8004574:	b141      	cbz	r1, 8004588 <__ieee754_sqrt+0x58>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	f7fb fdeb 	bl	8000154 <__aeabi_dsub>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	f7fc f8c9 	bl	8000718 <__aeabi_ddiv>
 8004586:	e7e6      	b.n	8004556 <__ieee754_sqrt+0x26>
 8004588:	1512      	asrs	r2, r2, #20
 800458a:	d074      	beq.n	8004676 <__ieee754_sqrt+0x146>
 800458c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004590:	07d5      	lsls	r5, r2, #31
 8004592:	f04f 0500 	mov.w	r5, #0
 8004596:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800459a:	bf48      	it	mi
 800459c:	0fd9      	lsrmi	r1, r3, #31
 800459e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80045a2:	bf44      	itt	mi
 80045a4:	005b      	lslmi	r3, r3, #1
 80045a6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 80045aa:	1051      	asrs	r1, r2, #1
 80045ac:	0fda      	lsrs	r2, r3, #31
 80045ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80045b2:	4628      	mov	r0, r5
 80045b4:	2216      	movs	r2, #22
 80045b6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	1987      	adds	r7, r0, r6
 80045be:	42a7      	cmp	r7, r4
 80045c0:	bfde      	ittt	le
 80045c2:	19b8      	addle	r0, r7, r6
 80045c4:	1be4      	suble	r4, r4, r7
 80045c6:	19ad      	addle	r5, r5, r6
 80045c8:	0fdf      	lsrs	r7, r3, #31
 80045ca:	3a01      	subs	r2, #1
 80045cc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 80045d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80045d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80045d8:	d1f0      	bne.n	80045bc <__ieee754_sqrt+0x8c>
 80045da:	f04f 0c20 	mov.w	ip, #32
 80045de:	4696      	mov	lr, r2
 80045e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80045e4:	4284      	cmp	r4, r0
 80045e6:	eb06 070e 	add.w	r7, r6, lr
 80045ea:	dc02      	bgt.n	80045f2 <__ieee754_sqrt+0xc2>
 80045ec:	d112      	bne.n	8004614 <__ieee754_sqrt+0xe4>
 80045ee:	429f      	cmp	r7, r3
 80045f0:	d810      	bhi.n	8004614 <__ieee754_sqrt+0xe4>
 80045f2:	2f00      	cmp	r7, #0
 80045f4:	eb07 0e06 	add.w	lr, r7, r6
 80045f8:	da42      	bge.n	8004680 <__ieee754_sqrt+0x150>
 80045fa:	f1be 0f00 	cmp.w	lr, #0
 80045fe:	db3f      	blt.n	8004680 <__ieee754_sqrt+0x150>
 8004600:	f100 0801 	add.w	r8, r0, #1
 8004604:	1a24      	subs	r4, r4, r0
 8004606:	4640      	mov	r0, r8
 8004608:	429f      	cmp	r7, r3
 800460a:	bf88      	it	hi
 800460c:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8004610:	1bdb      	subs	r3, r3, r7
 8004612:	4432      	add	r2, r6
 8004614:	0064      	lsls	r4, r4, #1
 8004616:	f1bc 0c01 	subs.w	ip, ip, #1
 800461a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800461e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004622:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004626:	d1dd      	bne.n	80045e4 <__ieee754_sqrt+0xb4>
 8004628:	4323      	orrs	r3, r4
 800462a:	d006      	beq.n	800463a <__ieee754_sqrt+0x10a>
 800462c:	1c54      	adds	r4, r2, #1
 800462e:	bf0b      	itete	eq
 8004630:	4662      	moveq	r2, ip
 8004632:	3201      	addne	r2, #1
 8004634:	3501      	addeq	r5, #1
 8004636:	f022 0201 	bicne.w	r2, r2, #1
 800463a:	106b      	asrs	r3, r5, #1
 800463c:	0852      	lsrs	r2, r2, #1
 800463e:	07e8      	lsls	r0, r5, #31
 8004640:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004644:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004648:	bf48      	it	mi
 800464a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800464e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8004652:	4616      	mov	r6, r2
 8004654:	e781      	b.n	800455a <__ieee754_sqrt+0x2a>
 8004656:	0adc      	lsrs	r4, r3, #11
 8004658:	3915      	subs	r1, #21
 800465a:	055b      	lsls	r3, r3, #21
 800465c:	2c00      	cmp	r4, #0
 800465e:	d0fa      	beq.n	8004656 <__ieee754_sqrt+0x126>
 8004660:	02e6      	lsls	r6, r4, #11
 8004662:	d50a      	bpl.n	800467a <__ieee754_sqrt+0x14a>
 8004664:	f1c2 0020 	rsb	r0, r2, #32
 8004668:	fa23 f000 	lsr.w	r0, r3, r0
 800466c:	1e55      	subs	r5, r2, #1
 800466e:	4093      	lsls	r3, r2
 8004670:	4304      	orrs	r4, r0
 8004672:	1b4a      	subs	r2, r1, r5
 8004674:	e78a      	b.n	800458c <__ieee754_sqrt+0x5c>
 8004676:	4611      	mov	r1, r2
 8004678:	e7f0      	b.n	800465c <__ieee754_sqrt+0x12c>
 800467a:	0064      	lsls	r4, r4, #1
 800467c:	3201      	adds	r2, #1
 800467e:	e7ef      	b.n	8004660 <__ieee754_sqrt+0x130>
 8004680:	4680      	mov	r8, r0
 8004682:	e7bf      	b.n	8004604 <__ieee754_sqrt+0xd4>
 8004684:	7ff00000 	.word	0x7ff00000

08004688 <matherr>:
 8004688:	2000      	movs	r0, #0
 800468a:	4770      	bx	lr

0800468c <_init>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

08004698 <_fini>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr
