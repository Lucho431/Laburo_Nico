
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004854  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004994  08004994  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004994  08004994  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004994  08004994  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004994  08004994  00014994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004998  08004998  00014998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800499c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000074  08004a10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000890  08004a10  00020890  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9ad  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002603  00000000  00000000  0002ea4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  00031050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00031ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000193c4  00000000  00000000  00032c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d64a  00000000  00000000  0004c00c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090863  00000000  00000000  00059656  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9eb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  000e9f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004948 	.word	0x08004948

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004948 	.word	0x08004948

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__gedf2>:
 80008e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008ec:	e006      	b.n	80008fc <__cmpdf2+0x4>
 80008ee:	bf00      	nop

080008f0 <__ledf2>:
 80008f0:	f04f 0c01 	mov.w	ip, #1
 80008f4:	e002      	b.n	80008fc <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__cmpdf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000912:	d01b      	beq.n	800094c <__cmpdf2+0x54>
 8000914:	b001      	add	sp, #4
 8000916:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091a:	bf0c      	ite	eq
 800091c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000920:	ea91 0f03 	teqne	r1, r3
 8000924:	bf02      	ittt	eq
 8000926:	ea90 0f02 	teqeq	r0, r2
 800092a:	2000      	moveq	r0, #0
 800092c:	4770      	bxeq	lr
 800092e:	f110 0f00 	cmn.w	r0, #0
 8000932:	ea91 0f03 	teq	r1, r3
 8000936:	bf58      	it	pl
 8000938:	4299      	cmppl	r1, r3
 800093a:	bf08      	it	eq
 800093c:	4290      	cmpeq	r0, r2
 800093e:	bf2c      	ite	cs
 8000940:	17d8      	asrcs	r0, r3, #31
 8000942:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000946:	f040 0001 	orr.w	r0, r0, #1
 800094a:	4770      	bx	lr
 800094c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000954:	d102      	bne.n	800095c <__cmpdf2+0x64>
 8000956:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095a:	d107      	bne.n	800096c <__cmpdf2+0x74>
 800095c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000960:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000964:	d1d6      	bne.n	8000914 <__cmpdf2+0x1c>
 8000966:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096a:	d0d3      	beq.n	8000914 <__cmpdf2+0x1c>
 800096c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <__aeabi_cdrcmple>:
 8000974:	4684      	mov	ip, r0
 8000976:	4610      	mov	r0, r2
 8000978:	4662      	mov	r2, ip
 800097a:	468c      	mov	ip, r1
 800097c:	4619      	mov	r1, r3
 800097e:	4663      	mov	r3, ip
 8000980:	e000      	b.n	8000984 <__aeabi_cdcmpeq>
 8000982:	bf00      	nop

08000984 <__aeabi_cdcmpeq>:
 8000984:	b501      	push	{r0, lr}
 8000986:	f7ff ffb7 	bl	80008f8 <__cmpdf2>
 800098a:	2800      	cmp	r0, #0
 800098c:	bf48      	it	mi
 800098e:	f110 0f00 	cmnmi.w	r0, #0
 8000992:	bd01      	pop	{r0, pc}

08000994 <__aeabi_dcmpeq>:
 8000994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000998:	f7ff fff4 	bl	8000984 <__aeabi_cdcmpeq>
 800099c:	bf0c      	ite	eq
 800099e:	2001      	moveq	r0, #1
 80009a0:	2000      	movne	r0, #0
 80009a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009a6:	bf00      	nop

080009a8 <__aeabi_dcmplt>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff ffea 	bl	8000984 <__aeabi_cdcmpeq>
 80009b0:	bf34      	ite	cc
 80009b2:	2001      	movcc	r0, #1
 80009b4:	2000      	movcs	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmple>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffe0 	bl	8000984 <__aeabi_cdcmpeq>
 80009c4:	bf94      	ite	ls
 80009c6:	2001      	movls	r0, #1
 80009c8:	2000      	movhi	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmpge>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffce 	bl	8000974 <__aeabi_cdrcmple>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpgt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffc4 	bl	8000974 <__aeabi_cdrcmple>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpun>:
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d102      	bne.n	8000a08 <__aeabi_dcmpun+0x10>
 8000a02:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a06:	d10a      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__aeabi_dcmpun+0x20>
 8000a12:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a16:	d102      	bne.n	8000a1e <__aeabi_dcmpun+0x26>
 8000a18:	f04f 0000 	mov.w	r0, #0
 8000a1c:	4770      	bx	lr
 8000a1e:	f04f 0001 	mov.w	r0, #1
 8000a22:	4770      	bx	lr

08000a24 <__aeabi_d2uiz>:
 8000a24:	004a      	lsls	r2, r1, #1
 8000a26:	d211      	bcs.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a2c:	d211      	bcs.n	8000a52 <__aeabi_d2uiz+0x2e>
 8000a2e:	d50d      	bpl.n	8000a4c <__aeabi_d2uiz+0x28>
 8000a30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a38:	d40e      	bmi.n	8000a58 <__aeabi_d2uiz+0x34>
 8000a3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a46:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d102      	bne.n	8000a5e <__aeabi_d2uiz+0x3a>
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	4770      	bx	lr
 8000a5e:	f04f 0000 	mov.w	r0, #0
 8000a62:	4770      	bx	lr

08000a64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a76:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x98>)
 8000a78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a94:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000aa4:	f001 f85a 	bl	8001b5c <HAL_ADC_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000aae:	f000 fd19 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000aba:	2307      	movs	r3, #7
 8000abc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000ac4:	f001 fad6 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fd09 	bl	80014e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <MX_ADC1_Init+0x94>)
 8000ae0:	f001 fac8 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000aea:	f000 fcfb 	bl	80014e4 <Error_Handler>
  }

}
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200000bc 	.word	0x200000bc
 8000afc:	40012400 	.word	0x40012400

08000b00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <HAL_ADC_MspInit+0xcc>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d151      	bne.n	8000bc4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b20:	4b2b      	ldr	r3, [pc, #172]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a2a      	ldr	r2, [pc, #168]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b25      	ldr	r3, [pc, #148]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b22      	ldr	r3, [pc, #136]	; (8000bd0 <HAL_ADC_MspInit+0xd0>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b50:	2303      	movs	r3, #3
 8000b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	2303      	movs	r3, #3
 8000b56:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	481d      	ldr	r0, [pc, #116]	; (8000bd4 <HAL_ADC_MspInit+0xd4>)
 8000b60:	f001 ff86 	bl	8002a70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b66:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_ADC_MspInit+0xdc>)
 8000b68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b70:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b78:	2280      	movs	r2, #128	; 0x80
 8000b7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b82:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b8c:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000b9a:	f001 fd7b 	bl	8002694 <HAL_DMA_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000ba4:	f000 fc9e 	bl	80014e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000bac:	621a      	str	r2, [r3, #32]
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_ADC_MspInit+0xd8>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2012      	movs	r0, #18
 8000bba:	f001 fd34 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000bbe:	2012      	movs	r0, #18
 8000bc0:	f001 fd4d 	bl	800265e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40012400 	.word	0x40012400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	200000ec 	.word	0x200000ec
 8000bdc:	40020008 	.word	0x40020008

08000be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_DMA_Init+0x38>)
 8000be8:	695b      	ldr	r3, [r3, #20]
 8000bea:	4a0b      	ldr	r2, [pc, #44]	; (8000c18 <MX_DMA_Init+0x38>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6153      	str	r3, [r2, #20]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_DMA_Init+0x38>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	200b      	movs	r0, #11
 8000c04:	f001 fd0f 	bl	8002626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c08:	200b      	movs	r0, #11
 8000c0a:	f001 fd28 	bl	800265e <HAL_NVIC_EnableIRQ>

}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c30:	4b51      	ldr	r3, [pc, #324]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c36:	f043 0310 	orr.w	r3, r3, #16
 8000c3a:	6193      	str	r3, [r2, #24]
 8000c3c:	4b4e      	ldr	r3, [pc, #312]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	f003 0310 	and.w	r3, r3, #16
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c48:	4b4b      	ldr	r3, [pc, #300]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a4a      	ldr	r2, [pc, #296]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c4e:	f043 0320 	orr.w	r3, r3, #32
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b48      	ldr	r3, [pc, #288]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f003 0320 	and.w	r3, r3, #32
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b45      	ldr	r3, [pc, #276]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b42      	ldr	r3, [pc, #264]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	607b      	str	r3, [r7, #4]
 8000c76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c78:	4b3f      	ldr	r3, [pc, #252]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	4a3e      	ldr	r2, [pc, #248]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c7e:	f043 0308 	orr.w	r3, r3, #8
 8000c82:	6193      	str	r3, [r2, #24]
 8000c84:	4b3c      	ldr	r3, [pc, #240]	; (8000d78 <MX_GPIO_Init+0x15c>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	f003 0308 	and.w	r3, r3, #8
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4839      	ldr	r0, [pc, #228]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000c98:	f002 f85b 	bl	8002d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
 8000ca2:	4837      	ldr	r0, [pc, #220]	; (8000d80 <MX_GPIO_Init+0x164>)
 8000ca4:	f002 f855 	bl	8002d52 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000cae:	4835      	ldr	r0, [pc, #212]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000cb0:	f002 f84f 	bl	8002d52 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_onBoard_Pin;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_onBoard_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	f107 0310 	add.w	r3, r7, #16
 8000cca:	4619      	mov	r1, r3
 8000ccc:	482b      	ldr	r0, [pc, #172]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000cce:	f001 fecf 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Pul_hab_Vo_Pin|Pul_hab_Io_Pin;
 8000cd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4825      	ldr	r0, [pc, #148]	; (8000d7c <MX_GPIO_Init+0x160>)
 8000ce8:	f001 fec2 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Rep_Pote_Vo_Pin|Rep_Pote_Io_Pin|P_Temp_Vo_Pin|P_Temp_Io_Pin;
 8000cec:	23f0      	movs	r3, #240	; 0xf0
 8000cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000d00:	f001 feb6 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = P_OL_Vo_Pin|P_OL_Io_Pin;
 8000d04:	2303      	movs	r3, #3
 8000d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	481a      	ldr	r0, [pc, #104]	; (8000d80 <MX_GPIO_Init+0x164>)
 8000d18:	f001 feaa 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = HAB_Vo_Pin|HAB_Io_Pin|LED_Vo_Pin|LED_Io_Pin
 8000d1c:	f44f 433c 	mov.w	r3, #48128	; 0xbc00
 8000d20:	613b      	str	r3, [r7, #16]
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	4812      	ldr	r0, [pc, #72]	; (8000d80 <MX_GPIO_Init+0x164>)
 8000d36:	f001 fe9b 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000d3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000d3e:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0310 	add.w	r3, r7, #16
 8000d50:	4619      	mov	r1, r3
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_GPIO_Init+0x168>)
 8000d54:	f001 fe8c 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Rango_Io_A_Pin|Rango_Io_B_Pin|Rango_Io_C_Pin;
 8000d58:	2338      	movs	r3, #56	; 0x38
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d60:	2302      	movs	r3, #2
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_GPIO_Init+0x164>)
 8000d6c:	f001 fe80 	bl	8002a70 <HAL_GPIO_Init>

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40011000 	.word	0x40011000
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40010800 	.word	0x40010800

08000d88 <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <LCD_Init+0x70>)
 8000d94:	f001 ffdd 	bl	8002d52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9e:	4817      	ldr	r0, [pc, #92]	; (8000dfc <LCD_Init+0x74>)
 8000da0:	f001 ffd7 	bl	8002d52 <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8000da4:	2010      	movs	r0, #16
 8000da6:	f000 feb7 	bl	8001b18 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f000 f828 	bl	8000e00 <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8000db0:	2005      	movs	r0, #5
 8000db2:	f000 feb1 	bl	8001b18 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f000 f822 	bl	8000e00 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 feab 	bl	8001b18 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f000 f81c 	bl	8000e00 <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f000 f819 	bl	8000e00 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f000 fea2 	bl	8001b18 <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8000dd4:	2028      	movs	r0, #40	; 0x28
 8000dd6:	f000 f879 	bl	8000ecc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 8000dda:	2008      	movs	r0, #8
 8000ddc:	f000 f876 	bl	8000ecc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 8000de0:	2001      	movs	r0, #1
 8000de2:	f000 f873 	bl	8000ecc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 8000de6:	2006      	movs	r0, #6
 8000de8:	f000 f870 	bl	8000ecc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 8000dec:	200c      	movs	r0, #12
 8000dee:	f000 f86d 	bl	8000ecc <LCD_SendInstruction>
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010c00 	.word	0x40010c00
 8000dfc:	40010800 	.word	0x40010800

08000e00 <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d006      	beq.n	8000e22 <LCD_SendNibble+0x22>
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1a:	482b      	ldr	r0, [pc, #172]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e1c:	f001 ff99 	bl	8002d52 <HAL_GPIO_WritePin>
 8000e20:	e005      	b.n	8000e2e <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	4827      	ldr	r0, [pc, #156]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e2a:	f001 ff92 	bl	8002d52 <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <LCD_SendNibble+0x46>
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e3e:	4822      	ldr	r0, [pc, #136]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e40:	f001 ff87 	bl	8002d52 <HAL_GPIO_WritePin>
 8000e44:	e005      	b.n	8000e52 <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e4e:	f001 ff80 	bl	8002d52 <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <LCD_SendNibble+0x6a>
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e62:	4819      	ldr	r0, [pc, #100]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e64:	f001 ff75 	bl	8002d52 <HAL_GPIO_WritePin>
 8000e68:	e005      	b.n	8000e76 <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e70:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e72:	f001 ff6e 	bl	8002d52 <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d006      	beq.n	8000e8e <LCD_SendNibble+0x8e>
 8000e80:	2201      	movs	r2, #1
 8000e82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e88:	f001 ff63 	bl	8002d52 <HAL_GPIO_WritePin>
 8000e8c:	e005      	b.n	8000e9a <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000e96:	f001 ff5c 	bl	8002d52 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000ea2:	f001 ff56 	bl	8002d52 <HAL_GPIO_WritePin>
		HAL_Delay(1);//LCD_usDelay(5);
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	f000 fe36 	bl	8001b18 <HAL_Delay>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <LCD_SendNibble+0xc8>)
 8000eb4:	f001 ff4d 	bl	8002d52 <HAL_GPIO_WritePin>
	HAL_Delay(1);//LCD_usDelay(5);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fe2d 	bl	8001b18 <HAL_Delay>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40010800 	.word	0x40010800

08000ecc <LCD_SendInstruction>:
}


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <LCD_SendInstruction+0x3c>)
 8000ede:	f001 ff38 	bl	8002d52 <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f811 	bl	8000f0c <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d103      	bne.n	8000ef8 <LCD_SendInstruction+0x2c>
		HAL_Delay(2);//LCD_usDelay(2000);
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f000 fe11 	bl	8001b18 <HAL_Delay>
	else
		HAL_Delay(1);//LCD_usDelay(50);
}
 8000ef6:	e002      	b.n	8000efe <LCD_SendInstruction+0x32>
		HAL_Delay(1);//LCD_usDelay(50);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f000 fe0d 	bl	8001b18 <HAL_Delay>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff6f 	bl	8000e00 <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff6b 	bl	8000e00 <LCD_SendNibble>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fd8b 	bl	8001a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f9dd 	bl	80012fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f7ff fe6b 	bl	8000c1c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f7ff fe4b 	bl	8000be0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f4a:	f7ff fd8b 	bl	8000a64 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000f4e:	f000 fba7 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f52:	f000 fbf1 	bl	8001738 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000f56:	f000 fb55 	bl	8001604 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 fce1 	bl	8001920 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8000f5e:	48af      	ldr	r0, [pc, #700]	; (800121c <main+0x2e8>)
 8000f60:	f002 fc32 	bl	80037c8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	48ad      	ldr	r0, [pc, #692]	; (800121c <main+0x2e8>)
 8000f68:	f002 fcd0 	bl	800390c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	48ab      	ldr	r0, [pc, #684]	; (800121c <main+0x2e8>)
 8000f70:	f002 fccc 	bl	800390c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3);
 8000f74:	2108      	movs	r1, #8
 8000f76:	48a9      	ldr	r0, [pc, #676]	; (800121c <main+0x2e8>)
 8000f78:	f002 fcc8 	bl	800390c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
 8000f7c:	210c      	movs	r1, #12
 8000f7e:	48a7      	ldr	r0, [pc, #668]	; (800121c <main+0x2e8>)
 8000f80:	f002 fcc4 	bl	800390c <HAL_TIM_IC_Start_IT>

  HAL_TIM_Base_Start(&htim3);
 8000f84:	48a6      	ldr	r0, [pc, #664]	; (8001220 <main+0x2ec>)
 8000f86:	f002 fc1f 	bl	80037c8 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, muestras, sizeof(muestras));
 8000f8a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000f8e:	49a5      	ldr	r1, [pc, #660]	; (8001224 <main+0x2f0>)
 8000f90:	48a5      	ldr	r0, [pc, #660]	; (8001228 <main+0x2f4>)
 8000f92:	f000 febb 	bl	8001d0c <HAL_ADC_Start_DMA>

//  HAL_TIM_Base_Start_IT(&htim2); //desborda cada 10 ms.

  LCD_Init();
 8000f96:	f7ff fef7 	bl	8000d88 <LCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  switch (status_adc) {
 8000f9a:	4ba4      	ldr	r3, [pc, #656]	; (800122c <main+0x2f8>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d002      	beq.n	8000fa8 <main+0x74>
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d065      	beq.n	8001072 <main+0x13e>
			  acumulaA = 0;

			  status_adc = 0;

		  default:
		  break;
 8000fa6:	e0c9      	b.n	800113c <main+0x208>
			  for (uint16_t i = 0; i < 200; i+=2){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	80fb      	strh	r3, [r7, #6]
 8000fac:	e022      	b.n	8000ff4 <main+0xc0>
				  acumulaV += muestras[i]*muestras[i];
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	4a9c      	ldr	r2, [pc, #624]	; (8001224 <main+0x2f0>)
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	88fa      	ldrh	r2, [r7, #6]
 8000fb8:	499a      	ldr	r1, [pc, #616]	; (8001224 <main+0x2f0>)
 8000fba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fbe:	fb02 f203 	mul.w	r2, r2, r3
 8000fc2:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <main+0x2fc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a99      	ldr	r2, [pc, #612]	; (8001230 <main+0x2fc>)
 8000fca:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	4a94      	ldr	r2, [pc, #592]	; (8001224 <main+0x2f0>)
 8000fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd6:	88fa      	ldrh	r2, [r7, #6]
 8000fd8:	3201      	adds	r2, #1
 8000fda:	4992      	ldr	r1, [pc, #584]	; (8001224 <main+0x2f0>)
 8000fdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	4b93      	ldr	r3, [pc, #588]	; (8001234 <main+0x300>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a92      	ldr	r2, [pc, #584]	; (8001234 <main+0x300>)
 8000fec:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	2bc7      	cmp	r3, #199	; 0xc7
 8000ff8:	d9d9      	bls.n	8000fae <main+0x7a>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 8000ffa:	4b8d      	ldr	r3, [pc, #564]	; (8001230 <main+0x2fc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f9e6 	bl	80003d0 <__aeabi_ui2d>
 8001004:	4603      	mov	r3, r0
 8001006:	460c      	mov	r4, r1
 8001008:	4618      	mov	r0, r3
 800100a:	4621      	mov	r1, r4
 800100c:	f003 fb9a 	bl	8004744 <sqrt>
 8001010:	f04f 0200 	mov.w	r2, #0
 8001014:	4b88      	ldr	r3, [pc, #544]	; (8001238 <main+0x304>)
 8001016:	f7ff fb7f 	bl	8000718 <__aeabi_ddiv>
 800101a:	4603      	mov	r3, r0
 800101c:	460c      	mov	r4, r1
 800101e:	4618      	mov	r0, r3
 8001020:	4621      	mov	r1, r4
 8001022:	f7ff fcff 	bl	8000a24 <__aeabi_d2uiz>
 8001026:	4602      	mov	r2, r0
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <main+0x308>)
 800102a:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 800102c:	4b81      	ldr	r3, [pc, #516]	; (8001234 <main+0x300>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f9cd 	bl	80003d0 <__aeabi_ui2d>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	4618      	mov	r0, r3
 800103c:	4621      	mov	r1, r4
 800103e:	f003 fb81 	bl	8004744 <sqrt>
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	4b7c      	ldr	r3, [pc, #496]	; (8001238 <main+0x304>)
 8001048:	f7ff fb66 	bl	8000718 <__aeabi_ddiv>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	4618      	mov	r0, r3
 8001052:	4621      	mov	r1, r4
 8001054:	f7ff fce6 	bl	8000a24 <__aeabi_d2uiz>
 8001058:	4602      	mov	r2, r0
 800105a:	4b79      	ldr	r3, [pc, #484]	; (8001240 <main+0x30c>)
 800105c:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 800105e:	4b74      	ldr	r3, [pc, #464]	; (8001230 <main+0x2fc>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <main+0x300>)
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 800106a:	4b70      	ldr	r3, [pc, #448]	; (800122c <main+0x2f8>)
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
		  break;
 8001070:	e065      	b.n	800113e <main+0x20a>
			  for (uint16_t i = 200; i < 400; i+=2){
 8001072:	23c8      	movs	r3, #200	; 0xc8
 8001074:	80bb      	strh	r3, [r7, #4]
 8001076:	e022      	b.n	80010be <main+0x18a>
				  acumulaV += muestras[i]*muestras[i];
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	4a6a      	ldr	r2, [pc, #424]	; (8001224 <main+0x2f0>)
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	88ba      	ldrh	r2, [r7, #4]
 8001082:	4968      	ldr	r1, [pc, #416]	; (8001224 <main+0x2f0>)
 8001084:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001088:	fb02 f203 	mul.w	r2, r2, r3
 800108c:	4b68      	ldr	r3, [pc, #416]	; (8001230 <main+0x2fc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4413      	add	r3, r2
 8001092:	4a67      	ldr	r2, [pc, #412]	; (8001230 <main+0x2fc>)
 8001094:	6013      	str	r3, [r2, #0]
				  acumulaA += muestras[i+1]*muestras[i+1];
 8001096:	88bb      	ldrh	r3, [r7, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	4a62      	ldr	r2, [pc, #392]	; (8001224 <main+0x2f0>)
 800109c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a0:	88ba      	ldrh	r2, [r7, #4]
 80010a2:	3201      	adds	r2, #1
 80010a4:	495f      	ldr	r1, [pc, #380]	; (8001224 <main+0x2f0>)
 80010a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010aa:	fb02 f203 	mul.w	r2, r2, r3
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <main+0x300>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	4a5f      	ldr	r2, [pc, #380]	; (8001234 <main+0x300>)
 80010b6:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	3302      	adds	r3, #2
 80010bc:	80bb      	strh	r3, [r7, #4]
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80010c4:	d3d8      	bcc.n	8001078 <main+0x144>
			  RMS_samplesV = (uint32_t) (sqrt( (double) acumulaV) / 10);
 80010c6:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <main+0x2fc>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f980 	bl	80003d0 <__aeabi_ui2d>
 80010d0:	4603      	mov	r3, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	4618      	mov	r0, r3
 80010d6:	4621      	mov	r1, r4
 80010d8:	f003 fb34 	bl	8004744 <sqrt>
 80010dc:	f04f 0200 	mov.w	r2, #0
 80010e0:	4b55      	ldr	r3, [pc, #340]	; (8001238 <main+0x304>)
 80010e2:	f7ff fb19 	bl	8000718 <__aeabi_ddiv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	460c      	mov	r4, r1
 80010ea:	4618      	mov	r0, r3
 80010ec:	4621      	mov	r1, r4
 80010ee:	f7ff fc99 	bl	8000a24 <__aeabi_d2uiz>
 80010f2:	4602      	mov	r2, r0
 80010f4:	4b51      	ldr	r3, [pc, #324]	; (800123c <main+0x308>)
 80010f6:	601a      	str	r2, [r3, #0]
			  RMS_samplesA = (uint32_t) (sqrt( (double) acumulaA) / 10);
 80010f8:	4b4e      	ldr	r3, [pc, #312]	; (8001234 <main+0x300>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f967 	bl	80003d0 <__aeabi_ui2d>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	4618      	mov	r0, r3
 8001108:	4621      	mov	r1, r4
 800110a:	f003 fb1b 	bl	8004744 <sqrt>
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b49      	ldr	r3, [pc, #292]	; (8001238 <main+0x304>)
 8001114:	f7ff fb00 	bl	8000718 <__aeabi_ddiv>
 8001118:	4603      	mov	r3, r0
 800111a:	460c      	mov	r4, r1
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fc80 	bl	8000a24 <__aeabi_d2uiz>
 8001124:	4602      	mov	r2, r0
 8001126:	4b46      	ldr	r3, [pc, #280]	; (8001240 <main+0x30c>)
 8001128:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <main+0x2fc>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
			  acumulaA = 0;
 8001130:	4b40      	ldr	r3, [pc, #256]	; (8001234 <main+0x300>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <main+0x2f8>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
		  break;
 800113c:	bf00      	nop
	  } //fin switch(status_adc)


	  if (status_fase == 2){
 800113e:	4b41      	ldr	r3, [pc, #260]	; (8001244 <main+0x310>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d12e      	bne.n	80011a4 <main+0x270>

		  acum_fase += (ventana_fin - ventana_inicio);
 8001146:	4b40      	ldr	r3, [pc, #256]	; (8001248 <main+0x314>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	4b40      	ldr	r3, [pc, #256]	; (800124c <main+0x318>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <main+0x31c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4413      	add	r3, r2
 8001156:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <main+0x31c>)
 8001158:	6013      	str	r3, [r2, #0]
		  cuenta_fase++;
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <main+0x320>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b3c      	ldr	r3, [pc, #240]	; (8001254 <main+0x320>)
 8001164:	701a      	strb	r2, [r3, #0]

		  if (cuenta_fase == 5){
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <main+0x320>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b05      	cmp	r3, #5
 800116c:	d117      	bne.n	800119e <main+0x26a>

			  valor_fase = acum_fase / 5;
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <main+0x31c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a39      	ldr	r2, [pc, #228]	; (8001258 <main+0x324>)
 8001174:	fba2 2303 	umull	r2, r3, r2, r3
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	461a      	mov	r2, r3
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <main+0x328>)
 800117e:	601a      	str	r2, [r3, #0]

			  if (flag_faseNegativa != 0){
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <main+0x32c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d004      	beq.n	8001192 <main+0x25e>
				  valor_fase *= -1;
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <main+0x328>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	425b      	negs	r3, r3
 800118e:	4a33      	ldr	r2, [pc, #204]	; (800125c <main+0x328>)
 8001190:	6013      	str	r3, [r2, #0]
			  }

			  acum_fase = 0;
 8001192:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <main+0x31c>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
			  cuenta_fase = 0;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <main+0x320>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
		  } //fin if cuenta_fase

		  status_fase = 0;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <main+0x310>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
	  } //fin if status_fase


	  switch (flag_protecV){
 80011a4:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <main+0x330>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <main+0x27e>
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d015      	beq.n	80011dc <main+0x2a8>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_ON);
				  flag_protecV = 0;
			  }
		  default:
		  break;
 80011b0:	e05e      	b.n	8001270 <main+0x33c>
			  if (PROTEC_V != 0){
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <main+0x334>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <main+0x338>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	4313      	orrs	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d025      	beq.n	8001214 <main+0x2e0>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_OFF);
 80011c8:	2200      	movs	r2, #0
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	4827      	ldr	r0, [pc, #156]	; (800126c <main+0x338>)
 80011d0:	f001 fdbf 	bl	8002d52 <HAL_GPIO_WritePin>
				  flag_protecV = 1;
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <main+0x330>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
		  break;
 80011da:	e01b      	b.n	8001214 <main+0x2e0>
			  if (!PROTEC_V) break;
 80011dc:	4b22      	ldr	r3, [pc, #136]	; (8001268 <main+0x334>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 0240 	and.w	r2, r3, #64	; 0x40
 80011e4:	4b21      	ldr	r3, [pc, #132]	; (800126c <main+0x338>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	4313      	orrs	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d012      	beq.n	8001218 <main+0x2e4>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin) == (GPIO_PinState)SIGNAL_ON){
 80011f2:	2110      	movs	r1, #16
 80011f4:	481c      	ldr	r0, [pc, #112]	; (8001268 <main+0x334>)
 80011f6:	f001 fd95 	bl	8002d24 <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d137      	bne.n	8001270 <main+0x33c>
				  HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, SIGNAL_ON);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001206:	4819      	ldr	r0, [pc, #100]	; (800126c <main+0x338>)
 8001208:	f001 fda3 	bl	8002d52 <HAL_GPIO_WritePin>
				  flag_protecV = 0;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0x330>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
		  break;
 8001212:	e02d      	b.n	8001270 <main+0x33c>
		  break;
 8001214:	bf00      	nop
 8001216:	e02c      	b.n	8001272 <main+0x33e>
			  if (!PROTEC_V) break;
 8001218:	bf00      	nop
 800121a:	e02a      	b.n	8001272 <main+0x33e>
 800121c:	20000770 	.word	0x20000770
 8001220:	200007b8 	.word	0x200007b8
 8001224:	20000130 	.word	0x20000130
 8001228:	200000bc 	.word	0x200000bc
 800122c:	200000a0 	.word	0x200000a0
 8001230:	20000090 	.word	0x20000090
 8001234:	20000094 	.word	0x20000094
 8001238:	40240000 	.word	0x40240000
 800123c:	20000098 	.word	0x20000098
 8001240:	2000009c 	.word	0x2000009c
 8001244:	200000a1 	.word	0x200000a1
 8001248:	200000b4 	.word	0x200000b4
 800124c:	200000b0 	.word	0x200000b0
 8001250:	200000a4 	.word	0x200000a4
 8001254:	200000a8 	.word	0x200000a8
 8001258:	cccccccd 	.word	0xcccccccd
 800125c:	200000ac 	.word	0x200000ac
 8001260:	200000a2 	.word	0x200000a2
 8001264:	200000b9 	.word	0x200000b9
 8001268:	40010800 	.word	0x40010800
 800126c:	40010c00 	.word	0x40010c00
		  break;
 8001270:	bf00      	nop
	  } //fin switch flag_protecV

	  switch (flag_protecA){
 8001272:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <main+0x3bc>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <main+0x34c>
 800127a:	2b01      	cmp	r3, #1
 800127c:	d015      	beq.n	80012aa <main+0x376>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin) == (GPIO_PinState)SIGNAL_ON){
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_ON);
				  flag_protecA = 0;
			  }
		  default:
		  break;
 800127e:	e034      	b.n	80012ea <main+0x3b6>
			  if (PROTEC_A != 0){
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <main+0x3c0>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001288:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <main+0x3c4>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	4313      	orrs	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d025      	beq.n	80012e2 <main+0x3ae>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_OFF);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800129c:	4816      	ldr	r0, [pc, #88]	; (80012f8 <main+0x3c4>)
 800129e:	f001 fd58 	bl	8002d52 <HAL_GPIO_WritePin>
				  flag_protecA = 1;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <main+0x3bc>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
		  break;
 80012a8:	e01b      	b.n	80012e2 <main+0x3ae>
			  if (!PROTEC_A) break;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <main+0x3c0>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80012b2:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <main+0x3c4>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	4313      	orrs	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d012      	beq.n	80012e6 <main+0x3b2>
			  if (HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin) == (GPIO_PinState)SIGNAL_ON){
 80012c0:	2120      	movs	r1, #32
 80012c2:	480c      	ldr	r0, [pc, #48]	; (80012f4 <main+0x3c0>)
 80012c4:	f001 fd2e 	bl	8002d24 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10d      	bne.n	80012ea <main+0x3b6>
				  HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, SIGNAL_ON);
 80012ce:	2201      	movs	r2, #1
 80012d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <main+0x3c4>)
 80012d6:	f001 fd3c 	bl	8002d52 <HAL_GPIO_WritePin>
				  flag_protecA = 0;
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <main+0x3bc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		  break;
 80012e0:	e003      	b.n	80012ea <main+0x3b6>
		  break;
 80012e2:	bf00      	nop
 80012e4:	e659      	b.n	8000f9a <main+0x66>
			  if (!PROTEC_A) break;
 80012e6:	bf00      	nop
 80012e8:	e657      	b.n	8000f9a <main+0x66>
		  break;
 80012ea:	bf00      	nop
	  switch (status_adc) {
 80012ec:	e655      	b.n	8000f9a <main+0x66>
 80012ee:	bf00      	nop
 80012f0:	200000ba 	.word	0x200000ba
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00

080012fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b094      	sub	sp, #80	; 0x50
 8001300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2228      	movs	r2, #40	; 0x28
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f003 fa12 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	2301      	movs	r3, #1
 800133c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133e:	2302      	movs	r3, #2
 8001340:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001348:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800134c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fd16 	bl	8002d84 <HAL_RCC_OscConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800135e:	f000 f8c1 	bl	80014e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	230f      	movs	r3, #15
 8001364:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	2302      	movs	r3, #2
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001372:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2102      	movs	r1, #2
 800137e:	4618      	mov	r0, r3
 8001380:	f001 ff80 	bl	8003284 <HAL_RCC_ClockConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800138a:	f000 f8ab 	bl	80014e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800138e:	2302      	movs	r3, #2
 8001390:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4618      	mov	r0, r3
 800139c:	f002 f90e 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013a6:	f000 f89d 	bl	80014e4 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3750      	adds	r7, #80	; 0x50
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	status_adc = 1;
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_ADC_ConvHalfCpltCallback+0x18>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	200000a0 	.word	0x200000a0

080013d0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	status_adc = 2;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_ADC_ConvCpltCallback+0x18>)
 80013da:	2202      	movs	r2, #2
 80013dc:	701a      	strb	r2, [r3, #0]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	200000a0 	.word	0x200000a0

080013ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7f1b      	ldrb	r3, [r3, #28]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d115      	bne.n	8001428 <HAL_TIM_IC_CaptureCallback+0x3c>
		//HAL_TIM_ReadCapturedValue(htim, HAL_TIM_ACTIVE_CHANNEL_3);
		//ic1 = htim->Instance->CCR1;

		//if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)
		if ((GPIOB->IDR & GPIO_PIN_8) != 0){
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001404:	2b00      	cmp	r3, #0
 8001406:	d00c      	beq.n	8001422 <HAL_TIM_IC_CaptureCallback+0x36>

			if (!status_fase){
 8001408:	4b28      	ldr	r3, [pc, #160]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10b      	bne.n	8001428 <HAL_TIM_IC_CaptureCallback+0x3c>
				status_fase = 1;
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
				ventana_inicio = htim->Instance->CCR1;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141c:	4a24      	ldr	r2, [pc, #144]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e002      	b.n	8001428 <HAL_TIM_IC_CaptureCallback+0x3c>
			}
		}else{
			flag_faseNegativa = 0;
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
		} //fin if GPIOB...


	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){ // i.e.: PB6 descendente
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7f1b      	ldrb	r3, [r3, #28]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d10b      	bne.n	8001448 <HAL_TIM_IC_CaptureCallback+0x5c>

		if (status_fase == 1){
 8001430:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_TIM_IC_CaptureCallback+0x5c>

		ventana_fin = htim->Instance->CCR2;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001440:	6013      	str	r3, [r2, #0]
		status_fase = 2;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001444:	2202      	movs	r2, #2
 8001446:	701a      	strb	r2, [r3, #0]
		}

	} //fin if HAL_TIM_ACTIVE_CHANNEL_2

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 ascendente
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7f1b      	ldrb	r3, [r3, #28]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d115      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x90>

		if ((GPIOB->IDR & GPIO_PIN_6) != 0){
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <HAL_TIM_IC_CaptureCallback+0x8a>

			if (!status_fase){
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10b      	bne.n	800147c <HAL_TIM_IC_CaptureCallback+0x90>
				status_fase = 1;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
				ventana_inicio = htim->Instance->CCR3;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001470:	4a0f      	ldr	r2, [pc, #60]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e002      	b.n	800147c <HAL_TIM_IC_CaptureCallback+0x90>
			}
		}else{
			flag_faseNegativa = 1;
 8001476:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
		} //fin if GPIOB...

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){ //i.e.: PB8 descendente
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7f1b      	ldrb	r3, [r3, #28]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d10b      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0xb0>

		if (status_fase == 1){
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d107      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0xb0>
			ventana_fin = htim->Instance->CCR4;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001494:	6013      	str	r3, [r2, #0]
			status_fase = 2;
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001498:	2202      	movs	r2, #2
 800149a:	701a      	strb	r2, [r3, #0]
		}

	} //fin HAL_TIM_ACTIVE_CHANNEL_4


} //fin HAL_TIM_IC_CaptureCallback()
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	200000a1 	.word	0x200000a1
 80014b0:	200000b0 	.word	0x200000b0
 80014b4:	200000a2 	.word	0x200000a2
 80014b8:	200000b4 	.word	0x200000b4

080014bc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014cc:	d102      	bne.n	80014d4 <HAL_TIM_PeriodElapsedCallback+0x18>
		flag_tim2 = 1;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
	}
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200000b8 	.word	0x200000b8

080014e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_MspInit+0x5c>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	4a14      	ldr	r2, [pc, #80]	; (800154c <HAL_MspInit+0x5c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_MspInit+0x5c>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	60bb      	str	r3, [r7, #8]
 800150c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <HAL_MspInit+0x5c>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_MspInit+0x5c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b0c      	ldr	r3, [pc, #48]	; (800154c <HAL_MspInit+0x5c>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <HAL_MspInit+0x60>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_MspInit+0x60>)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001542:	bf00      	nop
 8001544:	3714      	adds	r7, #20
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	40021000 	.word	0x40021000
 8001550:	40010000 	.word	0x40010000

08001554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <HardFault_Handler+0x4>

08001566 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <MemManage_Handler+0x4>

0800156c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <BusFault_Handler+0x4>

08001572 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <UsageFault_Handler+0x4>

08001578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a0:	f000 fa9e 	bl	8001ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <DMA1_Channel1_IRQHandler+0x10>)
 80015ae:	f001 f92b 	bl	8002808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200000ec 	.word	0x200000ec

080015bc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <ADC1_2_IRQHandler+0x10>)
 80015c2:	f000 fc81 	bl	8001ec8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000bc 	.word	0x200000bc

080015d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM2_IRQHandler+0x10>)
 80015d6:	f002 fa9f 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000800 	.word	0x20000800

080015e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <TIM4_IRQHandler+0x10>)
 80015ea:	f002 fa95 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000770 	.word	0x20000770

080015f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_TIM2_Init+0x98>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_TIM2_Init+0x98>)
 800162a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800162e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM2_Init+0x98>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM2_Init+0x98>)
 8001638:	f240 32e7 	movw	r2, #999	; 0x3e7
 800163c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_TIM2_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164a:	4814      	ldr	r0, [pc, #80]	; (800169c <MX_TIM2_Init+0x98>)
 800164c:	f002 f86c 	bl	8003728 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001656:	f7ff ff45 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_TIM2_Init+0x98>)
 8001668:	f002 fbf2 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001672:	f7ff ff37 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167e:	463b      	mov	r3, r7
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_TIM2_Init+0x98>)
 8001684:	f002 fee0 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800168e:	f7ff ff29 	bl	80014e4 <Error_Handler>
  }

}
 8001692:	bf00      	nop
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000800 	.word	0x20000800

080016a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	463b      	mov	r3, r7
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MX_TIM3_Init+0x90>)
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <MX_TIM3_Init+0x94>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM3_Init+0x90>)
 80016c4:	2247      	movs	r2, #71	; 0x47
 80016c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <MX_TIM3_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_TIM3_Init+0x90>)
 80016d0:	2263      	movs	r2, #99	; 0x63
 80016d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <MX_TIM3_Init+0x90>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_TIM3_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <MX_TIM3_Init+0x90>)
 80016e2:	f002 f821 	bl	8003728 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80016ec:	f7ff fefa 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	4619      	mov	r1, r3
 80016fc:	480c      	ldr	r0, [pc, #48]	; (8001730 <MX_TIM3_Init+0x90>)
 80016fe:	f002 fba7 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001708:	f7ff feec 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800170c:	2320      	movs	r3, #32
 800170e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_TIM3_Init+0x90>)
 800171a:	f002 fe95 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001724:	f7ff fede 	bl	80014e4 <Error_Handler>
  }

}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200007b8 	.word	0x200007b8
 8001734:	40000400 	.word	0x40000400

08001738 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0318 	add.w	r3, r7, #24
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <MX_TIM4_Init+0xf4>)
 8001764:	4a32      	ldr	r2, [pc, #200]	; (8001830 <MX_TIM4_Init+0xf8>)
 8001766:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8001768:	4b30      	ldr	r3, [pc, #192]	; (800182c <MX_TIM4_Init+0xf4>)
 800176a:	f240 321f 	movw	r2, #799	; 0x31f
 800176e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <MX_TIM4_Init+0xf4>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <MX_TIM4_Init+0xf4>)
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_TIM4_Init+0xf4>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <MX_TIM4_Init+0xf4>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800178a:	4828      	ldr	r0, [pc, #160]	; (800182c <MX_TIM4_Init+0xf4>)
 800178c:	f001 ffcc 	bl	8003728 <HAL_TIM_Base_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001796:	f7ff fea5 	bl	80014e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80017a0:	f107 0318 	add.w	r3, r7, #24
 80017a4:	4619      	mov	r1, r3
 80017a6:	4821      	ldr	r0, [pc, #132]	; (800182c <MX_TIM4_Init+0xf4>)
 80017a8:	f002 fb52 	bl	8003e50 <HAL_TIM_ConfigClockSource>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80017b2:	f7ff fe97 	bl	80014e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80017b6:	481d      	ldr	r0, [pc, #116]	; (800182c <MX_TIM4_Init+0xf4>)
 80017b8:	f002 f850 	bl	800385c <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80017c2:	f7ff fe8f 	bl	80014e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4619      	mov	r1, r3
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <MX_TIM4_Init+0xf4>)
 80017d6:	f002 fe37 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80017e0:	f7ff fe80 	bl	80014e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_TIM4_Init+0xf4>)
 80017fc:	f002 fa94 	bl	8003d28 <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8001806:	f7ff fe6d 	bl	80014e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800180a:	2302      	movs	r3, #2
 800180c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800180e:	463b      	mov	r3, r7
 8001810:	2208      	movs	r2, #8
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_TIM4_Init+0xf4>)
 8001816:	f002 fa87 	bl	8003d28 <HAL_TIM_IC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001820:	f7ff fe60 	bl	80014e4 <Error_Handler>
  }

}
 8001824:	bf00      	nop
 8001826:	3728      	adds	r7, #40	; 0x28
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000770 	.word	0x20000770
 8001830:	40000800 	.word	0x40000800

08001834 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001852:	d114      	bne.n	800187e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001854:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	4a2d      	ldr	r2, [pc, #180]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	61d3      	str	r3, [r2, #28]
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	201c      	movs	r0, #28
 8001872:	f000 fed8 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001876:	201c      	movs	r0, #28
 8001878:	f000 fef1 	bl	800265e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800187c:	e043      	b.n	8001906 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM3)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_TIM_Base_MspInit+0xe0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d10c      	bne.n	80018a2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	61d3      	str	r3, [r2, #28]
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	693b      	ldr	r3, [r7, #16]
}
 80018a0:	e031      	b.n	8001906 <HAL_TIM_Base_MspInit+0xd2>
  else if(tim_baseHandle->Instance==TIM4)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_TIM_Base_MspInit+0xe4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d12c      	bne.n	8001906 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	4a17      	ldr	r2, [pc, #92]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	61d3      	str	r3, [r2, #28]
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	f003 0304 	and.w	r3, r3, #4
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	4a11      	ldr	r2, [pc, #68]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018ca:	f043 0308 	orr.w	r3, r3, #8
 80018ce:	6193      	str	r3, [r2, #24]
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_TIM_Base_MspInit+0xdc>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80018dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4619      	mov	r1, r3
 80018f0:	480a      	ldr	r0, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0xe8>)
 80018f2:	f001 f8bd 	bl	8002a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	201e      	movs	r0, #30
 80018fc:	f000 fe93 	bl	8002626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001900:	201e      	movs	r0, #30
 8001902:	f000 feac 	bl	800265e <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000
 8001914:	40000400 	.word	0x40000400
 8001918:	40000800 	.word	0x40000800
 800191c:	40010c00 	.word	0x40010c00

08001920 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <MX_USART2_UART_Init+0x50>)
 8001928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_USART2_UART_Init+0x4c>)
 800192c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_USART2_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0b      	ldr	r3, [pc, #44]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b08      	ldr	r3, [pc, #32]	; (800196c <MX_USART2_UART_Init+0x4c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001956:	4805      	ldr	r0, [pc, #20]	; (800196c <MX_USART2_UART_Init+0x4c>)
 8001958:	f002 fde6 	bl	8004528 <HAL_UART_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001962:	f7ff fdbf 	bl	80014e4 <Error_Handler>
  }

}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000848 	.word	0x20000848
 8001970:	40004400 	.word	0x40004400

08001974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b088      	sub	sp, #32
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_UART_MspInit+0x88>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d12f      	bne.n	80019f4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 8001996:	69db      	ldr	r3, [r3, #28]
 8001998:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 800199a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199e:	61d3      	str	r3, [r2, #28]
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a13      	ldr	r2, [pc, #76]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_UART_MspInit+0x8c>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c4:	2304      	movs	r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c8:	2302      	movs	r3, #2
 80019ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480b      	ldr	r0, [pc, #44]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019d8:	f001 f84a 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019dc:	2308      	movs	r3, #8
 80019de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0310 	add.w	r3, r7, #16
 80019ec:	4619      	mov	r1, r3
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <HAL_UART_MspInit+0x90>)
 80019f0:	f001 f83e 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	3720      	adds	r7, #32
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010800 	.word	0x40010800

08001a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff fde3 	bl	80015f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f002 fe5b 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a36:	f7ff fa7d 	bl	8000f34 <main>
  bx lr
 8001a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001a44:	0800499c 	.word	0x0800499c
  ldr r2, =_sbss
 8001a48:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001a4c:	20000890 	.word	0x20000890

08001a50 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <CAN1_RX1_IRQHandler>
	...

08001a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x28>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x28>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 fdd3 	bl	8002610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f808 	bl	8001a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fd3e 	bl	80014f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40022000 	.word	0x40022000

08001a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x54>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_InitTick+0x58>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fdeb 	bl	800267a <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00e      	b.n	8001acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d80a      	bhi.n	8001aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001abc:	f000 fdb3 	bl	8002626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <HAL_InitTick+0x5c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000008 	.word	0x20000008
 8001adc:	20000004 	.word	0x20000004

08001ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x1c>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_IncTick+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	4a03      	ldr	r2, [pc, #12]	; (8001b00 <HAL_IncTick+0x20>)
 8001af2:	6013      	str	r3, [r2, #0]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000008 	.word	0x20000008
 8001b00:	2000088c 	.word	0x2000088c

08001b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return uwTick;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <HAL_GetTick+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr
 8001b14:	2000088c 	.word	0x2000088c

08001b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b30:	d005      	beq.n	8001b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_Delay+0x40>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3e:	bf00      	nop
 8001b40:	f7ff ffe0 	bl	8001b04 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d8f7      	bhi.n	8001b40 <HAL_Delay+0x28>
  {
  }
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000008 	.word	0x20000008

08001b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0be      	b.n	8001cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d109      	bne.n	8001ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe ffb0 	bl	8000b00 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 fbb9 	bl	8002318 <ADC_ConversionStop_Disable>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 8099 	bne.w	8001cea <HAL_ADC_Init+0x18e>
 8001bb8:	7dfb      	ldrb	r3, [r7, #23]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 8095 	bne.w	8001cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bc8:	f023 0302 	bic.w	r3, r3, #2
 8001bcc:	f043 0202 	orr.w	r2, r3, #2
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b1b      	ldrb	r3, [r3, #12]
 8001be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf4:	d003      	beq.n	8001bfe <HAL_ADC_Init+0xa2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d102      	bne.n	8001c04 <HAL_ADC_Init+0xa8>
 8001bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c02:	e000      	b.n	8001c06 <HAL_ADC_Init+0xaa>
 8001c04:	2300      	movs	r3, #0
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d1b      	ldrb	r3, [r3, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d119      	bne.n	8001c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	7b1b      	ldrb	r3, [r3, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	035a      	lsls	r2, r3, #13
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e00b      	b.n	8001c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f043 0220 	orr.w	r2, r3, #32
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_ADC_Init+0x1a8>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	68b9      	ldr	r1, [r7, #8]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c78:	d003      	beq.n	8001c82 <HAL_ADC_Init+0x126>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	051b      	lsls	r3, r3, #20
 8001c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <HAL_ADC_Init+0x1ac>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d10b      	bne.n	8001cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f023 0303 	bic.w	r3, r3, #3
 8001cbe:	f043 0201 	orr.w	r2, r3, #1
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc6:	e018      	b.n	8001cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	f023 0312 	bic.w	r3, r3, #18
 8001cd0:	f043 0210 	orr.w	r2, r3, #16
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ce8:	e007      	b.n	8001cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f043 0210 	orr.w	r2, r3, #16
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	ffe1f7fd 	.word	0xffe1f7fd
 8001d08:	ff1f0efe 	.word	0xff1f0efe

08001d0c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a64      	ldr	r2, [pc, #400]	; (8001eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d004      	beq.n	8001d30 <HAL_ADC_Start_DMA+0x24>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a63      	ldr	r2, [pc, #396]	; (8001eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x32>
 8001d30:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 80b3 	bne.w	8001ea4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_Start_DMA+0x40>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e0ae      	b.n	8001eaa <HAL_ADC_Start_DMA+0x19e>
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f000 fa85 	bl	8002264 <ADC_Enable>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f040 809a 	bne.w	8001e9a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d105      	bne.n	8001d90 <HAL_ADC_Start_DMA+0x84>
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d115      	bne.n	8001dbc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d026      	beq.n	8001df8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001db2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001dba:	e01d      	b.n	8001df8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a39      	ldr	r2, [pc, #228]	; (8001eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d004      	beq.n	8001ddc <HAL_ADC_Start_DMA+0xd0>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a38      	ldr	r2, [pc, #224]	; (8001eb8 <HAL_ADC_Start_DMA+0x1ac>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d10d      	bne.n	8001df8 <HAL_ADC_Start_DMA+0xec>
 8001ddc:	4b35      	ldr	r3, [pc, #212]	; (8001eb4 <HAL_ADC_Start_DMA+0x1a8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001df0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	f023 0206 	bic.w	r2, r3, #6
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e10:	e002      	b.n	8001e18 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <HAL_ADC_Start_DMA+0x1b0>)
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a24      	ldr	r2, [pc, #144]	; (8001ec0 <HAL_ADC_Start_DMA+0x1b4>)
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a23      	ldr	r2, [pc, #140]	; (8001ec4 <HAL_ADC_Start_DMA+0x1b8>)
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f06f 0202 	mvn.w	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e50:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a18      	ldr	r0, [r3, #32]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	334c      	adds	r3, #76	; 0x4c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f000 fc71 	bl	8002748 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e74:	d108      	bne.n	8001e88 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e84:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e86:	e00f      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e96:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e98:	e006      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001ea2:	e001      	b.n	8001ea8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40012400 	.word	0x40012400
 8001eb8:	40012800 	.word	0x40012800
 8001ebc:	0800239b 	.word	0x0800239b
 8001ec0:	08002417 	.word	0x08002417
 8001ec4:	08002433 	.word	0x08002433

08001ec8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b20      	cmp	r3, #32
 8001edc:	d140      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d139      	bne.n	8001f60 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f12:	d11d      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d119      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0220 	bic.w	r2, r2, #32
 8001f2a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f48:	f043 0201 	orr.w	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fa3d 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0212 	mvn.w	r2, #18
 8001f5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d14f      	bne.n	800200e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d148      	bne.n	800200e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001f9e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001fa2:	d012      	beq.n	8001fca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d125      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001fbc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fc0:	d11d      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d119      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f043 0201 	orr.w	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa31 	bl	8002466 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 020c 	mvn.w	r2, #12
 800200c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d114      	bne.n	8002046 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10d      	bne.n	8002046 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f809 	bl	800204e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f06f 0201 	mvn.w	r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
	...

08002074 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x20>
 8002090:	2302      	movs	r3, #2
 8002092:	e0dc      	b.n	800224e <HAL_ADC_ConfigChannel+0x1da>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d81c      	bhi.n	80020de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	3b05      	subs	r3, #5
 80020b6:	221f      	movs	r2, #31
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	4019      	ands	r1, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	6818      	ldr	r0, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b05      	subs	r3, #5
 80020d0:	fa00 f203 	lsl.w	r2, r0, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34
 80020dc:	e03c      	b.n	8002158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d81c      	bhi.n	8002120 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	3b23      	subs	r3, #35	; 0x23
 80020f8:	221f      	movs	r2, #31
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	4019      	ands	r1, r3
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	3b23      	subs	r3, #35	; 0x23
 8002112:	fa00 f203 	lsl.w	r2, r0, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
 800211e:	e01b      	b.n	8002158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	3b41      	subs	r3, #65	; 0x41
 8002132:	221f      	movs	r2, #31
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	4019      	ands	r1, r3
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	3b41      	subs	r3, #65	; 0x41
 800214c:	fa00 f203 	lsl.w	r2, r0, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b09      	cmp	r3, #9
 800215e:	d91c      	bls.n	800219a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	2207      	movs	r2, #7
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	4019      	ands	r1, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	6898      	ldr	r0, [r3, #8]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4613      	mov	r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4413      	add	r3, r2
 800218a:	3b1e      	subs	r3, #30
 800218c:	fa00 f203 	lsl.w	r2, r0, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	e019      	b.n	80021ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6919      	ldr	r1, [r3, #16]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	2207      	movs	r2, #7
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4019      	ands	r1, r3
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	6898      	ldr	r0, [r3, #8]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4413      	add	r3, r2
 80021c2:	fa00 f203 	lsl.w	r2, r0, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d003      	beq.n	80021de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021da:	2b11      	cmp	r3, #17
 80021dc:	d132      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_ADC_ConfigChannel+0x1e4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d125      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d126      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002204:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b10      	cmp	r3, #16
 800220c:	d11a      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800220e:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_ADC_ConfigChannel+0x1e8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_ADC_ConfigChannel+0x1ec>)
 8002214:	fba2 2303 	umull	r2, r3, r2, r3
 8002218:	0c9a      	lsrs	r2, r3, #18
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002224:	e002      	b.n	800222c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	3b01      	subs	r3, #1
 800222a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f9      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x1b2>
 8002232:	e007      	b.n	8002244 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f043 0220 	orr.w	r2, r3, #32
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800224c:	7bfb      	ldrb	r3, [r7, #15]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	40012400 	.word	0x40012400
 800225c:	20000000 	.word	0x20000000
 8002260:	431bde83 	.word	0x431bde83

08002264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b01      	cmp	r3, #1
 8002280:	d040      	beq.n	8002304 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f042 0201 	orr.w	r2, r2, #1
 8002290:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <ADC_Enable+0xac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <ADC_Enable+0xb0>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a0:	e002      	b.n	80022a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ae:	f7ff fc29 	bl	8001b04 <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022b4:	e01f      	b.n	80022f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022b6:	f7ff fc25 	bl	8001b04 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d918      	bls.n	80022f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d011      	beq.n	80022f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d6:	f043 0210 	orr.w	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f043 0201 	orr.w	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e007      	b.n	8002306 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d1d8      	bne.n	80022b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000
 8002314:	431bde83 	.word	0x431bde83

08002318 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d12e      	bne.n	8002390 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0201 	bic.w	r2, r2, #1
 8002340:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002342:	f7ff fbdf 	bl	8001b04 <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002348:	e01b      	b.n	8002382 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800234a:	f7ff fbdb 	bl	8001b04 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d914      	bls.n	8002382 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10d      	bne.n	8002382 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e007      	b.n	8002392 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d0dc      	beq.n	800234a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d127      	bne.n	8002404 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023ce:	d115      	bne.n	80023fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d111      	bne.n	80023fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d105      	bne.n	80023fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	f043 0201 	orr.w	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f7fe ffe7 	bl	80013d0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002402:	e004      	b.n	800240e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	4798      	blx	r3
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7fe ffc5 	bl	80013b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f043 0204 	orr.w	r2, r3, #4
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff fe01 	bl	8002060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4906      	ldr	r1, [pc, #24]	; (8002510 <__NVIC_EnableIRQ+0x34>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	; (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	; (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025dc:	d301      	bcc.n	80025e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025de:	2301      	movs	r3, #1
 80025e0:	e00f      	b.n	8002602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <SysTick_Config+0x40>)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ea:	210f      	movs	r1, #15
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	f7ff ff90 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <SysTick_Config+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fa:	4b04      	ldr	r3, [pc, #16]	; (800260c <SysTick_Config+0x40>)
 80025fc:	2207      	movs	r2, #7
 80025fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	e000e010 	.word	0xe000e010

08002610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ff2d 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002626:	b580      	push	{r7, lr}
 8002628:	b086      	sub	sp, #24
 800262a:	af00      	add	r7, sp, #0
 800262c:	4603      	mov	r3, r0
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002638:	f7ff ff42 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 800263c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	6978      	ldr	r0, [r7, #20]
 8002644:	f7ff ff90 	bl	8002568 <NVIC_EncodePriority>
 8002648:	4602      	mov	r2, r0
 800264a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff5f 	bl	8002514 <__NVIC_SetPriority>
}
 8002656:	bf00      	nop
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff ff35 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ffa2 	bl	80025cc <SysTick_Config>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e043      	b.n	8002732 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_DMA_Init+0xa8>)
 80026b2:	4413      	add	r3, r2
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_DMA_Init+0xac>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	009a      	lsls	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1f      	ldr	r2, [pc, #124]	; (8002744 <HAL_DMA_Init+0xb0>)
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	bffdfff8 	.word	0xbffdfff8
 8002740:	cccccccd 	.word	0xcccccccd
 8002744:	40020000 	.word	0x40020000

08002748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Start_IT+0x20>
 8002764:	2302      	movs	r3, #2
 8002766:	e04a      	b.n	80027fe <HAL_DMA_Start_IT+0xb6>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002776:	2b01      	cmp	r3, #1
 8002778:	d13a      	bne.n	80027f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f938 	bl	8002a14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 020e 	orr.w	r2, r2, #14
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	e00f      	b.n	80027de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0204 	bic.w	r2, r2, #4
 80027cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 020a 	orr.w	r2, r2, #10
 80027dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0201 	orr.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e005      	b.n	80027fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027f8:	2302      	movs	r3, #2
 80027fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2204      	movs	r2, #4
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d04f      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xc8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b00      	cmp	r3, #0
 8002846:	d107      	bne.n	8002858 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0204 	bic.w	r2, r2, #4
 8002856:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a66      	ldr	r2, [pc, #408]	; (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d029      	beq.n	80028b6 <HAL_DMA_IRQHandler+0xae>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a65      	ldr	r2, [pc, #404]	; (80029fc <HAL_DMA_IRQHandler+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0xaa>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a63      	ldr	r2, [pc, #396]	; (8002a00 <HAL_DMA_IRQHandler+0x1f8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d01a      	beq.n	80028ac <HAL_DMA_IRQHandler+0xa4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a62      	ldr	r2, [pc, #392]	; (8002a04 <HAL_DMA_IRQHandler+0x1fc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d012      	beq.n	80028a6 <HAL_DMA_IRQHandler+0x9e>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_DMA_IRQHandler+0x200>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x98>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a5f      	ldr	r2, [pc, #380]	; (8002a0c <HAL_DMA_IRQHandler+0x204>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d102      	bne.n	800289a <HAL_DMA_IRQHandler+0x92>
 8002894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002898:	e00e      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 800289a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800289e:	e00b      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028a4:	e008      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028aa:	e005      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b0:	e002      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028b2:	2340      	movs	r3, #64	; 0x40
 80028b4:	e000      	b.n	80028b8 <HAL_DMA_IRQHandler+0xb0>
 80028b6:	2304      	movs	r3, #4
 80028b8:	4a55      	ldr	r2, [pc, #340]	; (8002a10 <HAL_DMA_IRQHandler+0x208>)
 80028ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8094 	beq.w	80029ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028ce:	e08e      	b.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d4:	2202      	movs	r2, #2
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d056      	beq.n	800298e <HAL_DMA_IRQHandler+0x186>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d051      	beq.n	800298e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 020a 	bic.w	r2, r2, #10
 8002906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a38      	ldr	r2, [pc, #224]	; (80029f8 <HAL_DMA_IRQHandler+0x1f0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d029      	beq.n	800296e <HAL_DMA_IRQHandler+0x166>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_DMA_IRQHandler+0x1f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <HAL_DMA_IRQHandler+0x162>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <HAL_DMA_IRQHandler+0x1f8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01a      	beq.n	8002964 <HAL_DMA_IRQHandler+0x15c>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_DMA_IRQHandler+0x1fc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d012      	beq.n	800295e <HAL_DMA_IRQHandler+0x156>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_DMA_IRQHandler+0x200>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x150>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a31      	ldr	r2, [pc, #196]	; (8002a0c <HAL_DMA_IRQHandler+0x204>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d102      	bne.n	8002952 <HAL_DMA_IRQHandler+0x14a>
 800294c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002950:	e00e      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002956:	e00b      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	e008      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	e005      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 8002964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002968:	e002      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800296a:	2320      	movs	r3, #32
 800296c:	e000      	b.n	8002970 <HAL_DMA_IRQHandler+0x168>
 800296e:	2302      	movs	r3, #2
 8002970:	4a27      	ldr	r2, [pc, #156]	; (8002a10 <HAL_DMA_IRQHandler+0x208>)
 8002972:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	2b00      	cmp	r3, #0
 8002982:	d034      	beq.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800298c:	e02f      	b.n	80029ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	2208      	movs	r2, #8
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d028      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 0308 	and.w	r3, r3, #8
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d023      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 020e 	bic.w	r2, r2, #14
 80029b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c0:	2101      	movs	r1, #1
 80029c2:	fa01 f202 	lsl.w	r2, r1, r2
 80029c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
    }
  }
  return;
 80029ee:	bf00      	nop
 80029f0:	bf00      	nop
}
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40020008 	.word	0x40020008
 80029fc:	4002001c 	.word	0x4002001c
 8002a00:	40020030 	.word	0x40020030
 8002a04:	40020044 	.word	0x40020044
 8002a08:	40020058 	.word	0x40020058
 8002a0c:	4002006c 	.word	0x4002006c
 8002a10:	40020000 	.word	0x40020000

08002a14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	683a      	ldr	r2, [r7, #0]
 8002a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b10      	cmp	r3, #16
 8002a40:	d108      	bne.n	8002a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a52:	e007      	b.n	8002a64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	60da      	str	r2, [r3, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b08b      	sub	sp, #44	; 0x2c
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a82:	e127      	b.n	8002cd4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a84:	2201      	movs	r2, #1
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69fa      	ldr	r2, [r7, #28]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	f040 8116 	bne.w	8002cce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b12      	cmp	r3, #18
 8002aa8:	d034      	beq.n	8002b14 <HAL_GPIO_Init+0xa4>
 8002aaa:	2b12      	cmp	r3, #18
 8002aac:	d80d      	bhi.n	8002aca <HAL_GPIO_Init+0x5a>
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d02b      	beq.n	8002b0a <HAL_GPIO_Init+0x9a>
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d804      	bhi.n	8002ac0 <HAL_GPIO_Init+0x50>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d031      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d01c      	beq.n	8002af8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002abe:	e048      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d043      	beq.n	8002b4c <HAL_GPIO_Init+0xdc>
 8002ac4:	2b11      	cmp	r3, #17
 8002ac6:	d01b      	beq.n	8002b00 <HAL_GPIO_Init+0x90>
          break;
 8002ac8:	e043      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002aca:	4a89      	ldr	r2, [pc, #548]	; (8002cf0 <HAL_GPIO_Init+0x280>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d026      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
 8002ad0:	4a87      	ldr	r2, [pc, #540]	; (8002cf0 <HAL_GPIO_Init+0x280>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d806      	bhi.n	8002ae4 <HAL_GPIO_Init+0x74>
 8002ad6:	4a87      	ldr	r2, [pc, #540]	; (8002cf4 <HAL_GPIO_Init+0x284>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d020      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
 8002adc:	4a86      	ldr	r2, [pc, #536]	; (8002cf8 <HAL_GPIO_Init+0x288>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
          break;
 8002ae2:	e036      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ae4:	4a85      	ldr	r2, [pc, #532]	; (8002cfc <HAL_GPIO_Init+0x28c>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d019      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
 8002aea:	4a85      	ldr	r2, [pc, #532]	; (8002d00 <HAL_GPIO_Init+0x290>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d016      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
 8002af0:	4a84      	ldr	r2, [pc, #528]	; (8002d04 <HAL_GPIO_Init+0x294>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0xae>
          break;
 8002af6:	e02c      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	623b      	str	r3, [r7, #32]
          break;
 8002afe:	e028      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	3304      	adds	r3, #4
 8002b06:	623b      	str	r3, [r7, #32]
          break;
 8002b08:	e023      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e01e      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	623b      	str	r3, [r7, #32]
          break;
 8002b1c:	e019      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d102      	bne.n	8002b2c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b26:	2304      	movs	r3, #4
 8002b28:	623b      	str	r3, [r7, #32]
          break;
 8002b2a:	e012      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b34:	2308      	movs	r3, #8
 8002b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	611a      	str	r2, [r3, #16]
          break;
 8002b3e:	e008      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b40:	2308      	movs	r3, #8
 8002b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	615a      	str	r2, [r3, #20]
          break;
 8002b4a:	e002      	b.n	8002b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	623b      	str	r3, [r7, #32]
          break;
 8002b50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	2bff      	cmp	r3, #255	; 0xff
 8002b56:	d801      	bhi.n	8002b5c <HAL_GPIO_Init+0xec>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	e001      	b.n	8002b60 <HAL_GPIO_Init+0xf0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2bff      	cmp	r3, #255	; 0xff
 8002b66:	d802      	bhi.n	8002b6e <HAL_GPIO_Init+0xfe>
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	e002      	b.n	8002b74 <HAL_GPIO_Init+0x104>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	3b08      	subs	r3, #8
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43db      	mvns	r3, r3
 8002b84:	401a      	ands	r2, r3
 8002b86:	6a39      	ldr	r1, [r7, #32]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8096 	beq.w	8002cce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ba2:	4b59      	ldr	r3, [pc, #356]	; (8002d08 <HAL_GPIO_Init+0x298>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_GPIO_Init+0x298>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6193      	str	r3, [r2, #24]
 8002bae:	4b56      	ldr	r3, [pc, #344]	; (8002d08 <HAL_GPIO_Init+0x298>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bba:	4a54      	ldr	r2, [pc, #336]	; (8002d0c <HAL_GPIO_Init+0x29c>)
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <HAL_GPIO_Init+0x2a0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x19e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4a      	ldr	r2, [pc, #296]	; (8002d14 <HAL_GPIO_Init+0x2a4>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x19a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a49      	ldr	r2, [pc, #292]	; (8002d18 <HAL_GPIO_Init+0x2a8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x196>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2ac>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x192>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x1a0>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x1a0>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x1a0>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x1a0>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c20:	493a      	ldr	r1, [pc, #232]	; (8002d0c <HAL_GPIO_Init+0x29c>)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4938      	ldr	r1, [pc, #224]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	600b      	str	r3, [r1, #0]
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c48:	4b35      	ldr	r3, [pc, #212]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	4933      	ldr	r1, [pc, #204]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	492e      	ldr	r1, [pc, #184]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
 8002c6e:	e006      	b.n	8002c7e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	4929      	ldr	r1, [pc, #164]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	4924      	ldr	r1, [pc, #144]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
 8002c96:	e006      	b.n	8002ca6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	491f      	ldr	r1, [pc, #124]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	491a      	ldr	r1, [pc, #104]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60cb      	str	r3, [r1, #12]
 8002cbe:	e006      	b.n	8002cce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002cc0:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	4915      	ldr	r1, [pc, #84]	; (8002d20 <HAL_GPIO_Init+0x2b0>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	fa22 f303 	lsr.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f47f aed0 	bne.w	8002a84 <HAL_GPIO_Init+0x14>
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	372c      	adds	r7, #44	; 0x2c
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	10210000 	.word	0x10210000
 8002cf4:	10110000 	.word	0x10110000
 8002cf8:	10120000 	.word	0x10120000
 8002cfc:	10310000 	.word	0x10310000
 8002d00:	10320000 	.word	0x10320000
 8002d04:	10220000 	.word	0x10220000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40010800 	.word	0x40010800
 8002d14:	40010c00 	.word	0x40010c00
 8002d18:	40011000 	.word	0x40011000
 8002d1c:	40011400 	.word	0x40011400
 8002d20:	40010400 	.word	0x40010400

08002d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	887b      	ldrh	r3, [r7, #2]
 8002d36:	4013      	ands	r3, r2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
 8002d40:	e001      	b.n	8002d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d42:	2300      	movs	r3, #0
 8002d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	807b      	strh	r3, [r7, #2]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d62:	787b      	ldrb	r3, [r7, #1]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d68:	887a      	ldrh	r2, [r7, #2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bc80      	pop	{r7}
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e26c      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8087 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002da4:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 030c 	and.w	r3, r3, #12
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d00c      	beq.n	8002dca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db0:	4b8f      	ldr	r3, [pc, #572]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d112      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5e>
 8002dbc:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dca:	4b89      	ldr	r3, [pc, #548]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d06c      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x12c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d168      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e246      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x76>
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a7f      	ldr	r2, [pc, #508]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	e02e      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x98>
 8002e02:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b78      	ldr	r3, [pc, #480]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a77      	ldr	r2, [pc, #476]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e01d      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e24:	d10c      	bne.n	8002e40 <HAL_RCC_OscConfig+0xbc>
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a71      	ldr	r2, [pc, #452]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	4b6f      	ldr	r3, [pc, #444]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6e      	ldr	r2, [pc, #440]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e00b      	b.n	8002e58 <HAL_RCC_OscConfig+0xd4>
 8002e40:	4b6b      	ldr	r3, [pc, #428]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a6a      	ldr	r2, [pc, #424]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a67      	ldr	r2, [pc, #412]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d013      	beq.n	8002e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe fe50 	bl	8001b04 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe fe4c 	bl	8001b04 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1fa      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7a:	4b5d      	ldr	r3, [pc, #372]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0xe4>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fe3c 	bl	8001b04 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fe38 	bl	8001b04 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	; 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1e6      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x10c>
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d063      	beq.n	8002f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ebe:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d11c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x18c>
 8002ed6:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee2:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_RCC_OscConfig+0x176>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e1ba      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4939      	ldr	r1, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0e:	e03a      	b.n	8002f86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d020      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f18:	4b36      	ldr	r3, [pc, #216]	; (8002ff4 <HAL_RCC_OscConfig+0x270>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fdf1 	bl	8001b04 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f26:	f7fe fded 	bl	8001b04 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e19b      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b2a      	ldr	r3, [pc, #168]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4927      	ldr	r1, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]
 8002f58:	e015      	b.n	8002f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <HAL_RCC_OscConfig+0x270>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f60:	f7fe fdd0 	bl	8001b04 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f68:	f7fe fdcc 	bl	8001b04 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e17a      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03a      	beq.n	8003008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d019      	beq.n	8002fce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fdb0 	bl	8001b04 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa8:	f7fe fdac 	bl	8001b04 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e15a      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fc6:	2001      	movs	r0, #1
 8002fc8:	f000 fada 	bl	8003580 <RCC_Delay>
 8002fcc:	e01c      	b.n	8003008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fd96 	bl	8001b04 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fda:	e00f      	b.n	8002ffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fe fd92 	bl	8001b04 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d908      	bls.n	8002ffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e140      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	42420000 	.word	0x42420000
 8002ff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	4b9e      	ldr	r3, [pc, #632]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e9      	bne.n	8002fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a6 	beq.w	8003162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301a:	4b97      	ldr	r3, [pc, #604]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10d      	bne.n	8003042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b94      	ldr	r3, [pc, #592]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a93      	ldr	r2, [pc, #588]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003030:	61d3      	str	r3, [r2, #28]
 8003032:	4b91      	ldr	r3, [pc, #580]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b8e      	ldr	r3, [pc, #568]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b8b      	ldr	r3, [pc, #556]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a8a      	ldr	r2, [pc, #552]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7fe fd53 	bl	8001b04 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7fe fd4f 	bl	8001b04 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b64      	cmp	r3, #100	; 0x64
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0fd      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b81      	ldr	r3, [pc, #516]	; (800327c <HAL_RCC_OscConfig+0x4f8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x312>
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	4a7a      	ldr	r2, [pc, #488]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6213      	str	r3, [r2, #32]
 8003094:	e02d      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x334>
 800309e:	4b76      	ldr	r3, [pc, #472]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	4a75      	ldr	r2, [pc, #468]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6213      	str	r3, [r2, #32]
 80030aa:	4b73      	ldr	r3, [pc, #460]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4a72      	ldr	r2, [pc, #456]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030b0:	f023 0304 	bic.w	r3, r3, #4
 80030b4:	6213      	str	r3, [r2, #32]
 80030b6:	e01c      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d10c      	bne.n	80030da <HAL_RCC_OscConfig+0x356>
 80030c0:	4b6d      	ldr	r3, [pc, #436]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	4a6c      	ldr	r2, [pc, #432]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030c6:	f043 0304 	orr.w	r3, r3, #4
 80030ca:	6213      	str	r3, [r2, #32]
 80030cc:	4b6a      	ldr	r3, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	4a69      	ldr	r2, [pc, #420]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6213      	str	r3, [r2, #32]
 80030d8:	e00b      	b.n	80030f2 <HAL_RCC_OscConfig+0x36e>
 80030da:	4b67      	ldr	r3, [pc, #412]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	4a66      	ldr	r2, [pc, #408]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6213      	str	r3, [r2, #32]
 80030e6:	4b64      	ldr	r3, [pc, #400]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	4a63      	ldr	r2, [pc, #396]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80030ec:	f023 0304 	bic.w	r3, r3, #4
 80030f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fe fd03 	bl	8001b04 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003100:	e00a      	b.n	8003118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fcff 	bl	8001b04 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0ab      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	4b57      	ldr	r3, [pc, #348]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ee      	beq.n	8003102 <HAL_RCC_OscConfig+0x37e>
 8003124:	e014      	b.n	8003150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe fced 	bl	8001b04 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe fce9 	bl	8001b04 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e095      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003144:	4b4c      	ldr	r3, [pc, #304]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ee      	bne.n	800312e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d105      	bne.n	8003162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003156:	4b48      	ldr	r3, [pc, #288]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a47      	ldr	r2, [pc, #284]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800315c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b00      	cmp	r3, #0
 8003168:	f000 8081 	beq.w	800326e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 030c 	and.w	r3, r3, #12
 8003174:	2b08      	cmp	r3, #8
 8003176:	d061      	beq.n	800323c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d146      	bne.n	800320e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b3f      	ldr	r3, [pc, #252]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 8003182:	2200      	movs	r2, #0
 8003184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003186:	f7fe fcbd 	bl	8001b04 <HAL_GetTick>
 800318a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fcb9 	bl	8001b04 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e067      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	4b35      	ldr	r3, [pc, #212]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031b4:	d108      	bne.n	80031c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031b6:	4b30      	ldr	r3, [pc, #192]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	492d      	ldr	r1, [pc, #180]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c8:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a19      	ldr	r1, [r3, #32]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	430b      	orrs	r3, r1
 80031da:	4927      	ldr	r1, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e6:	f7fe fc8d 	bl	8001b04 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ee:	f7fe fc89 	bl	8001b04 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e037      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0f0      	beq.n	80031ee <HAL_RCC_OscConfig+0x46a>
 800320c:	e02f      	b.n	800326e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_RCC_OscConfig+0x4fc>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe fc76 	bl	8001b04 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fc72 	bl	8001b04 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e020      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800322e:	4b12      	ldr	r3, [pc, #72]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x498>
 800323a:	e018      	b.n	800326e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e013      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	429a      	cmp	r2, r3
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	40007000 	.word	0x40007000
 8003280:	42420060 	.word	0x42420060

08003284 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d0      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003298:	4b6a      	ldr	r3, [pc, #424]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d910      	bls.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 0207 	bic.w	r2, r3, #7
 80032ae:	4965      	ldr	r1, [pc, #404]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	683a      	ldr	r2, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d001      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0b8      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d020      	beq.n	8003316 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e0:	4b59      	ldr	r3, [pc, #356]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4a58      	ldr	r2, [pc, #352]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032f8:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4a52      	ldr	r2, [pc, #328]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003302:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003304:	4b50      	ldr	r3, [pc, #320]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	494d      	ldr	r1, [pc, #308]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d040      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b47      	ldr	r3, [pc, #284]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d115      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e07f      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d107      	bne.n	8003352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e073      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	4b39      	ldr	r3, [pc, #228]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f023 0203 	bic.w	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4936      	ldr	r1, [pc, #216]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003374:	f7fe fbc6 	bl	8001b04 <HAL_GetTick>
 8003378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800337a:	e00a      	b.n	8003392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fe fbc2 	bl	8001b04 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	; 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e053      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 020c 	and.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d1eb      	bne.n	800337c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	4b27      	ldr	r3, [pc, #156]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d210      	bcs.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b2:	4b24      	ldr	r3, [pc, #144]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f023 0207 	bic.w	r2, r3, #7
 80033ba:	4922      	ldr	r1, [pc, #136]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e032      	b.n	800343a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4916      	ldr	r1, [pc, #88]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d009      	beq.n	8003412 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033fe:	4b12      	ldr	r3, [pc, #72]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	490e      	ldr	r1, [pc, #56]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	4313      	orrs	r3, r2
 8003410:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003412:	f000 f821 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8003416:	4601      	mov	r1, r0
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	091b      	lsrs	r3, r3, #4
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x1c8>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	fa21 f303 	lsr.w	r3, r1, r3
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <HAL_RCC_ClockConfig+0x1cc>)
 800342c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800342e:	4b09      	ldr	r3, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1d0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fb24 	bl	8001a80 <HAL_InitTick>

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	40022000 	.word	0x40022000
 8003448:	40021000 	.word	0x40021000
 800344c:	08004974 	.word	0x08004974
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b490      	push	{r4, r7}
 800345a:	b08a      	sub	sp, #40	; 0x28
 800345c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800345e:	4b2a      	ldr	r3, [pc, #168]	; (8003508 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003460:	1d3c      	adds	r4, r7, #4
 8003462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_RCC_GetSysClockFreq+0xb4>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b04      	cmp	r3, #4
 8003490:	d002      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x40>
 8003492:	2b08      	cmp	r3, #8
 8003494:	d003      	beq.n	800349e <HAL_RCC_GetSysClockFreq+0x46>
 8003496:	e02d      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003498:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <HAL_RCC_GetSysClockFreq+0xbc>)
 800349a:	623b      	str	r3, [r7, #32]
      break;
 800349c:	e02d      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	0c9b      	lsrs	r3, r3, #18
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034aa:	4413      	add	r3, r2
 80034ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80034b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034bc:	4b14      	ldr	r3, [pc, #80]	; (8003510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0c5b      	lsrs	r3, r3, #17
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034ca:	4413      	add	r3, r2
 80034cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034d6:	fb02 f203 	mul.w	r2, r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
 80034e2:	e004      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	623b      	str	r3, [r7, #32]
      break;
 80034f2:	e002      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b07      	ldr	r3, [pc, #28]	; (8003514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034f6:	623b      	str	r3, [r7, #32]
      break;
 80034f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fa:	6a3b      	ldr	r3, [r7, #32]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3728      	adds	r7, #40	; 0x28
 8003500:	46bd      	mov	sp, r7
 8003502:	bc90      	pop	{r4, r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	08004960 	.word	0x08004960
 800350c:	08004970 	.word	0x08004970
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200
 8003518:	003d0900 	.word	0x003d0900

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <HAL_RCC_GetHCLKFreq+0x10>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bc80      	pop	{r7}
 800352a:	4770      	bx	lr
 800352c:	20000000 	.word	0x20000000

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003534:	f7ff fff2 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003538:	4601      	mov	r1, r0
 800353a:	4b05      	ldr	r3, [pc, #20]	; (8003550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0a1b      	lsrs	r3, r3, #8
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	4a03      	ldr	r2, [pc, #12]	; (8003554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	fa21 f303 	lsr.w	r3, r1, r3
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40021000 	.word	0x40021000
 8003554:	08004984 	.word	0x08004984

08003558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800355c:	f7ff ffde 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003560:	4601      	mov	r1, r0
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	0adb      	lsrs	r3, r3, #11
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	4a03      	ldr	r2, [pc, #12]	; (800357c <HAL_RCC_GetPCLK2Freq+0x24>)
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	08004984 	.word	0x08004984

08003580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <RCC_Delay+0x34>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a0a      	ldr	r2, [pc, #40]	; (80035b8 <RCC_Delay+0x38>)
 800358e:	fba2 2303 	umull	r2, r3, r2, r3
 8003592:	0a5b      	lsrs	r3, r3, #9
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	fb02 f303 	mul.w	r3, r2, r3
 800359a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800359c:	bf00      	nop
  }
  while (Delay --);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1e5a      	subs	r2, r3, #1
 80035a2:	60fa      	str	r2, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1f9      	bne.n	800359c <RCC_Delay+0x1c>
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000
 80035b8:	10624dd3 	.word	0x10624dd3

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d07d      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035d8:	2300      	movs	r3, #0
 80035da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035dc:	4b4f      	ldr	r3, [pc, #316]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b4c      	ldr	r3, [pc, #304]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	61d3      	str	r3, [r2, #28]
 80035f4:	4b49      	ldr	r3, [pc, #292]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d118      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003610:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a42      	ldr	r2, [pc, #264]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361c:	f7fe fa72 	bl	8001b04 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	e008      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fe fa6e 	bl	8001b04 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b64      	cmp	r3, #100	; 0x64
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e06d      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003636:	4b3a      	ldr	r3, [pc, #232]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003642:	4b36      	ldr	r3, [pc, #216]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800364a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d02e      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d027      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003660:	4b2e      	ldr	r3, [pc, #184]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003668:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800366a:	4b2e      	ldr	r3, [pc, #184]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800366c:	2201      	movs	r2, #1
 800366e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003672:	2200      	movs	r2, #0
 8003674:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003676:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe fa3d 	bl	8001b04 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe fa39 	bl	8001b04 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e036      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0ee      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	4917      	ldr	r1, [pc, #92]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	490b      	ldr	r1, [pc, #44]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0310 	and.w	r3, r3, #16
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d008      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036fe:	4b07      	ldr	r3, [pc, #28]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4904      	ldr	r1, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	42420440 	.word	0x42420440

08003728 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e041      	b.n	80037be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fe f870 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3304      	adds	r3, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f000 fc44 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d001      	beq.n	80037e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_Base_Start+0x88>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_TIM_Base_Start+0x48>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d009      	beq.n	8003810 <HAL_TIM_Base_Start+0x48>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <HAL_TIM_Base_Start+0x8c>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_Base_Start+0x48>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <HAL_TIM_Base_Start+0x90>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d010      	beq.n	8003844 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	e007      	b.n	8003844 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	40012c00 	.word	0x40012c00
 8003854:	40000400 	.word	0x40000400
 8003858:	40000800 	.word	0x40000800

0800385c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e041      	b.n	80038f2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f839 	bl	80038fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fbaa 	bl	8003ff4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start_IT+0x1a>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003922:	b2db      	uxtb	r3, r3
 8003924:	e013      	b.n	800394e <HAL_TIM_IC_Start_IT+0x42>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x2a>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e00b      	b.n	800394e <HAL_TIM_IC_Start_IT+0x42>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_IC_Start_IT+0x3a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e003      	b.n	800394e <HAL_TIM_IC_Start_IT+0x42>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d104      	bne.n	8003960 <HAL_TIM_IC_Start_IT+0x54>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e013      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x7c>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d104      	bne.n	8003970 <HAL_TIM_IC_Start_IT+0x64>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e00b      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x7c>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d104      	bne.n	8003980 <HAL_TIM_IC_Start_IT+0x74>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e003      	b.n	8003988 <HAL_TIM_IC_Start_IT+0x7c>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003986:	b2db      	uxtb	r3, r3
 8003988:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d102      	bne.n	8003996 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003990:	7bbb      	ldrb	r3, [r7, #14]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d001      	beq.n	800399a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0b3      	b.n	8003b02 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_TIM_IC_Start_IT+0x9e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a8:	e013      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xc6>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_IC_Start_IT+0xae>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039b8:	e00b      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xc6>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d104      	bne.n	80039ca <HAL_TIM_IC_Start_IT+0xbe>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039c8:	e003      	b.n	80039d2 <HAL_TIM_IC_Start_IT+0xc6>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_TIM_IC_Start_IT+0xd6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e0:	e013      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xfe>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d104      	bne.n	80039f2 <HAL_TIM_IC_Start_IT+0xe6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	e00b      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xfe>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d104      	bne.n	8003a02 <HAL_TIM_IC_Start_IT+0xf6>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a00:	e003      	b.n	8003a0a <HAL_TIM_IC_Start_IT+0xfe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2202      	movs	r2, #2
 8003a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d841      	bhi.n	8003a94 <HAL_TIM_IC_Start_IT+0x188>
 8003a10:	a201      	add	r2, pc, #4	; (adr r2, 8003a18 <HAL_TIM_IC_Start_IT+0x10c>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a95 	.word	0x08003a95
 8003a20:	08003a95 	.word	0x08003a95
 8003a24:	08003a95 	.word	0x08003a95
 8003a28:	08003a5f 	.word	0x08003a5f
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003a95 	.word	0x08003a95
 8003a34:	08003a95 	.word	0x08003a95
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a95 	.word	0x08003a95
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	08003a83 	.word	0x08003a83
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0202 	orr.w	r2, r2, #2
 8003a5a:	60da      	str	r2, [r3, #12]
      break;
 8003a5c:	e01b      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	60da      	str	r2, [r3, #12]
      break;
 8003a6e:	e012      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0208 	orr.w	r2, r2, #8
 8003a7e:	60da      	str	r2, [r3, #12]
      break;
 8003a80:	e009      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0210 	orr.w	r2, r2, #16
 8003a90:	60da      	str	r2, [r3, #12]
      break;
 8003a92:	e000      	b.n	8003a96 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003a94:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fcad 	bl	80043fe <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_TIM_IC_Start_IT+0x200>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x1c0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab6:	d009      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x1c0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <HAL_TIM_IC_Start_IT+0x204>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <HAL_TIM_IC_Start_IT+0x1c0>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_TIM_IC_Start_IT+0x208>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d111      	bne.n	8003af0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d010      	beq.n	8003b00 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 0201 	orr.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aee:	e007      	b.n	8003b00 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800

08003b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0202 	mvn.w	r2, #2
 8003b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f003 0303 	and.w	r3, r3, #3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd fc46 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fa2b 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fa31 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0204 	mvn.w	r2, #4
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7fd fc1c 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fa01 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 fa07 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0208 	mvn.w	r2, #8
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fbf2 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f9d7 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f9dd 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b10      	cmp	r3, #16
 8003c28:	d122      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0310 	and.w	r3, r3, #16
 8003c34:	2b10      	cmp	r3, #16
 8003c36:	d11b      	bne.n	8003c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0210 	mvn.w	r2, #16
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2208      	movs	r2, #8
 8003c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69db      	ldr	r3, [r3, #28]
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fbc8 	bl	80013ec <HAL_TIM_IC_CaptureCallback>
 8003c5c:	e005      	b.n	8003c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f9ad 	bl	8003fbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 f9b3 	bl	8003fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d10e      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d107      	bne.n	8003c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f06f 0201 	mvn.w	r2, #1
 8003c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fc10 	bl	80014bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca6:	2b80      	cmp	r3, #128	; 0x80
 8003ca8:	d10e      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b80      	cmp	r3, #128	; 0x80
 8003cb6:	d107      	bne.n	8003cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fc27 	bl	8004516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b40      	cmp	r3, #64	; 0x40
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce0:	2b40      	cmp	r3, #64	; 0x40
 8003ce2:	d107      	bne.n	8003cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f977 	bl	8003fe2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d10e      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f06f 0220 	mvn.w	r2, #32
 8003d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fbf2 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e082      	b.n	8003e48 <HAL_TIM_IC_ConfigChannel+0x120>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	6819      	ldr	r1, [r3, #0]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f000 f9aa 	bl	80040b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 020c 	bic.w	r2, r2, #12
 8003d72:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	619a      	str	r2, [r3, #24]
 8003d86:	e05a      	b.n	8003e3e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d11c      	bne.n	8003dc8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 fa13 	bl	80041c8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003db0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6999      	ldr	r1, [r3, #24]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	619a      	str	r2, [r3, #24]
 8003dc6:	e03a      	b.n	8003e3e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b08      	cmp	r3, #8
 8003dcc:	d11b      	bne.n	8003e06 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f000 fa5e 	bl	800429e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 020c 	bic.w	r2, r2, #12
 8003df0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	61da      	str	r2, [r3, #28]
 8003e04:	e01b      	b.n	8003e3e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6818      	ldr	r0, [r3, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	6819      	ldr	r1, [r3, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	f000 fa7d 	bl	8004314 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003e28:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69d9      	ldr	r1, [r3, #28]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	021a      	lsls	r2, r3, #8
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d101      	bne.n	8003e68 <HAL_TIM_ConfigClockSource+0x18>
 8003e64:	2302      	movs	r3, #2
 8003e66:	e0a6      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x166>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b40      	cmp	r3, #64	; 0x40
 8003e9e:	d067      	beq.n	8003f70 <HAL_TIM_ConfigClockSource+0x120>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d80b      	bhi.n	8003ebc <HAL_TIM_ConfigClockSource+0x6c>
 8003ea4:	2b10      	cmp	r3, #16
 8003ea6:	d073      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d802      	bhi.n	8003eb2 <HAL_TIM_ConfigClockSource+0x62>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d06f      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003eb0:	e078      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d06c      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
 8003eb6:	2b30      	cmp	r3, #48	; 0x30
 8003eb8:	d06a      	beq.n	8003f90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003eba:	e073      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ebc:	2b70      	cmp	r3, #112	; 0x70
 8003ebe:	d00d      	beq.n	8003edc <HAL_TIM_ConfigClockSource+0x8c>
 8003ec0:	2b70      	cmp	r3, #112	; 0x70
 8003ec2:	d804      	bhi.n	8003ece <HAL_TIM_ConfigClockSource+0x7e>
 8003ec4:	2b50      	cmp	r3, #80	; 0x50
 8003ec6:	d033      	beq.n	8003f30 <HAL_TIM_ConfigClockSource+0xe0>
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d041      	beq.n	8003f50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ecc:	e06a      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d066      	beq.n	8003fa2 <HAL_TIM_ConfigClockSource+0x152>
 8003ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed8:	d017      	beq.n	8003f0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003eda:	e063      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6818      	ldr	r0, [r3, #0]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f000 fa68 	bl	80043c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003efe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	609a      	str	r2, [r3, #8]
      break;
 8003f08:	e04c      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	6899      	ldr	r1, [r3, #8]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f000 fa51 	bl	80043c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2c:	609a      	str	r2, [r3, #8]
      break;
 8003f2e:	e039      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f000 f915 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2150      	movs	r1, #80	; 0x50
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fa1f 	bl	800438c <TIM_ITRx_SetConfig>
      break;
 8003f4e:	e029      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f000 f96f 	bl	8004240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2160      	movs	r1, #96	; 0x60
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fa0f 	bl	800438c <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e019      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	f000 f8f5 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2140      	movs	r1, #64	; 0x40
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f9ff 	bl	800438c <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e009      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4610      	mov	r0, r2
 8003f9c:	f000 f9f6 	bl	800438c <TIM_ITRx_SetConfig>
        break;
 8003fa0:	e000      	b.n	8003fa4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fa2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a29      	ldr	r2, [pc, #164]	; (80040ac <TIM_Base_SetConfig+0xb8>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x30>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x30>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a26      	ldr	r2, [pc, #152]	; (80040b0 <TIM_Base_SetConfig+0xbc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x30>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a25      	ldr	r2, [pc, #148]	; (80040b4 <TIM_Base_SetConfig+0xc0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <TIM_Base_SetConfig+0xb8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0x62>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <TIM_Base_SetConfig+0xbc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0x62>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a18      	ldr	r2, [pc, #96]	; (80040b4 <TIM_Base_SetConfig+0xc0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a07      	ldr	r2, [pc, #28]	; (80040ac <TIM_Base_SetConfig+0xb8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d103      	bne.n	800409c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691a      	ldr	r2, [r3, #16]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	615a      	str	r2, [r3, #20]
}
 80040a2:	bf00      	nop
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bc80      	pop	{r7}
 80040aa:	4770      	bx	lr
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800

080040b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	f023 0201 	bic.w	r2, r3, #1
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <TIM_TI1_SetConfig+0xa8>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00b      	beq.n	80040fe <TIM_TI1_SetConfig+0x46>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ec:	d007      	beq.n	80040fe <TIM_TI1_SetConfig+0x46>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a1c      	ldr	r2, [pc, #112]	; (8004164 <TIM_TI1_SetConfig+0xac>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <TIM_TI1_SetConfig+0x46>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	; (8004168 <TIM_TI1_SetConfig+0xb0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d101      	bne.n	8004102 <TIM_TI1_SetConfig+0x4a>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <TIM_TI1_SetConfig+0x4c>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d008      	beq.n	800411a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0303 	bic.w	r3, r3, #3
 800410e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e003      	b.n	8004122 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	b2db      	uxtb	r3, r3
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f023 030a 	bic.w	r3, r3, #10
 800413c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	f003 030a 	and.w	r3, r3, #10
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr
 8004160:	40012c00 	.word	0x40012c00
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f023 0210 	bic.w	r2, r3, #16
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	031b      	lsls	r3, r3, #12
 800420c:	b29b      	uxth	r3, r3
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800421a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	bf00      	nop
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bc80      	pop	{r7}
 800423e:	4770      	bx	lr

08004240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f023 0210 	bic.w	r2, r3, #16
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800426a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	031b      	lsls	r3, r3, #12
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800427c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	621a      	str	r2, [r3, #32]
}
 8004294:	bf00      	nop
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800429e:	b480      	push	{r7}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	621a      	str	r2, [r3, #32]
}
 800430a:	bf00      	nop
 800430c:	371c      	adds	r7, #28
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004340:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004352:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	031b      	lsls	r3, r3, #12
 8004358:	b29b      	uxth	r3, r3
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bc80      	pop	{r7}
 800438a:	4770      	bx	lr

0800438c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	f043 0307 	orr.w	r3, r3, #7
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	609a      	str	r2, [r3, #8]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f003 031f 	and.w	r3, r3, #31
 8004410:	2201      	movs	r2, #1
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1a      	ldr	r2, [r3, #32]
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	43db      	mvns	r3, r3
 8004420:	401a      	ands	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1a      	ldr	r2, [r3, #32]
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	fa01 f303 	lsl.w	r3, r1, r3
 8004436:	431a      	orrs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	bc80      	pop	{r7}
 8004444:	4770      	bx	lr
	...

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800445c:	2302      	movs	r3, #2
 800445e:	e046      	b.n	80044ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00e      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d009      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d004      	beq.n	80044c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a10      	ldr	r2, [pc, #64]	; (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10c      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bc80      	pop	{r7}
 80044f6:	4770      	bx	lr
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800

08004504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e03f      	b.n	80045ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fd fa10 	bl	8001974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	; 0x24
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800456a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f829 	bl	80045c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045fe:	f023 030c 	bic.w	r3, r3, #12
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	430b      	orrs	r3, r1
 800460a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699a      	ldr	r2, [r3, #24]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a2c      	ldr	r2, [pc, #176]	; (80046d8 <UART_SetConfig+0x114>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d103      	bne.n	8004634 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800462c:	f7fe ff94 	bl	8003558 <HAL_RCC_GetPCLK2Freq>
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	e002      	b.n	800463a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004634:	f7fe ff7c 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8004638:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	4613      	mov	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	009a      	lsls	r2, r3, #2
 8004644:	441a      	add	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <UART_SetConfig+0x118>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	0119      	lsls	r1, r3, #4
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009a      	lsls	r2, r3, #2
 8004664:	441a      	add	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004670:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <UART_SetConfig+0x118>)
 8004672:	fba3 0302 	umull	r0, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2064      	movs	r0, #100	; 0x64
 800467a:	fb00 f303 	mul.w	r3, r0, r3
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	3332      	adds	r3, #50	; 0x32
 8004684:	4a15      	ldr	r2, [pc, #84]	; (80046dc <UART_SetConfig+0x118>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004690:	4419      	add	r1, r3
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <UART_SetConfig+0x118>)
 80046aa:	fba3 0302 	umull	r0, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2064      	movs	r0, #100	; 0x64
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	; 0x32
 80046bc:	4a07      	ldr	r2, [pc, #28]	; (80046dc <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	440a      	add	r2, r1
 80046ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40013800 	.word	0x40013800
 80046dc:	51eb851f 	.word	0x51eb851f

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	2000000c 	.word	0x2000000c

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	2500      	movs	r5, #0
 80046f0:	4e0c      	ldr	r6, [pc, #48]	; (8004724 <__libc_init_array+0x38>)
 80046f2:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f4:	1ba4      	subs	r4, r4, r6
 80046f6:	10a4      	asrs	r4, r4, #2
 80046f8:	42a5      	cmp	r5, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	f000 f924 	bl	8004948 <_init>
 8004700:	2500      	movs	r5, #0
 8004702:	4e0a      	ldr	r6, [pc, #40]	; (800472c <__libc_init_array+0x40>)
 8004704:	4c0a      	ldr	r4, [pc, #40]	; (8004730 <__libc_init_array+0x44>)
 8004706:	1ba4      	subs	r4, r4, r6
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	42a5      	cmp	r5, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004714:	4798      	blx	r3
 8004716:	3501      	adds	r5, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800471e:	4798      	blx	r3
 8004720:	3501      	adds	r5, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08004994 	.word	0x08004994
 8004728:	08004994 	.word	0x08004994
 800472c:	08004994 	.word	0x08004994
 8004730:	08004998 	.word	0x08004998

08004734 <memset>:
 8004734:	4603      	mov	r3, r0
 8004736:	4402      	add	r2, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <sqrt>:
 8004744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004748:	b08b      	sub	sp, #44	; 0x2c
 800474a:	4604      	mov	r4, r0
 800474c:	460d      	mov	r5, r1
 800474e:	f000 f84d 	bl	80047ec <__ieee754_sqrt>
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <sqrt+0xa0>)
 8004754:	4680      	mov	r8, r0
 8004756:	f993 a000 	ldrsb.w	sl, [r3]
 800475a:	4689      	mov	r9, r1
 800475c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8004760:	d02b      	beq.n	80047ba <sqrt+0x76>
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	4620      	mov	r0, r4
 8004768:	4629      	mov	r1, r5
 800476a:	f7fc f945 	bl	80009f8 <__aeabi_dcmpun>
 800476e:	4683      	mov	fp, r0
 8004770:	bb18      	cbnz	r0, 80047ba <sqrt+0x76>
 8004772:	2600      	movs	r6, #0
 8004774:	2700      	movs	r7, #0
 8004776:	4632      	mov	r2, r6
 8004778:	463b      	mov	r3, r7
 800477a:	4620      	mov	r0, r4
 800477c:	4629      	mov	r1, r5
 800477e:	f7fc f913 	bl	80009a8 <__aeabi_dcmplt>
 8004782:	b1d0      	cbz	r0, 80047ba <sqrt+0x76>
 8004784:	2301      	movs	r3, #1
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <sqrt+0xa4>)
 800478a:	f8cd b020 	str.w	fp, [sp, #32]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004794:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004798:	f1ba 0f00 	cmp.w	sl, #0
 800479c:	d112      	bne.n	80047c4 <sqrt+0x80>
 800479e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80047a2:	4668      	mov	r0, sp
 80047a4:	f000 f8ce 	bl	8004944 <matherr>
 80047a8:	b1b8      	cbz	r0, 80047da <sqrt+0x96>
 80047aa:	9b08      	ldr	r3, [sp, #32]
 80047ac:	b11b      	cbz	r3, 80047b6 <sqrt+0x72>
 80047ae:	f7ff ff97 	bl	80046e0 <__errno>
 80047b2:	9b08      	ldr	r3, [sp, #32]
 80047b4:	6003      	str	r3, [r0, #0]
 80047b6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80047ba:	4640      	mov	r0, r8
 80047bc:	4649      	mov	r1, r9
 80047be:	b00b      	add	sp, #44	; 0x2c
 80047c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047c4:	4632      	mov	r2, r6
 80047c6:	463b      	mov	r3, r7
 80047c8:	4630      	mov	r0, r6
 80047ca:	4639      	mov	r1, r7
 80047cc:	f7fb ffa4 	bl	8000718 <__aeabi_ddiv>
 80047d0:	f1ba 0f02 	cmp.w	sl, #2
 80047d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80047d8:	d1e3      	bne.n	80047a2 <sqrt+0x5e>
 80047da:	f7ff ff81 	bl	80046e0 <__errno>
 80047de:	2321      	movs	r3, #33	; 0x21
 80047e0:	6003      	str	r3, [r0, #0]
 80047e2:	e7e2      	b.n	80047aa <sqrt+0x66>
 80047e4:	20000070 	.word	0x20000070
 80047e8:	0800498c 	.word	0x0800498c

080047ec <__ieee754_sqrt>:
 80047ec:	4b54      	ldr	r3, [pc, #336]	; (8004940 <__ieee754_sqrt+0x154>)
 80047ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f2:	438b      	bics	r3, r1
 80047f4:	4606      	mov	r6, r0
 80047f6:	460d      	mov	r5, r1
 80047f8:	460a      	mov	r2, r1
 80047fa:	460c      	mov	r4, r1
 80047fc:	d10f      	bne.n	800481e <__ieee754_sqrt+0x32>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	f7fb fe5f 	bl	80004c4 <__aeabi_dmul>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4630      	mov	r0, r6
 800480c:	4629      	mov	r1, r5
 800480e:	f7fb fca3 	bl	8000158 <__adddf3>
 8004812:	4606      	mov	r6, r0
 8004814:	460d      	mov	r5, r1
 8004816:	4630      	mov	r0, r6
 8004818:	4629      	mov	r1, r5
 800481a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800481e:	2900      	cmp	r1, #0
 8004820:	4607      	mov	r7, r0
 8004822:	4603      	mov	r3, r0
 8004824:	dc0e      	bgt.n	8004844 <__ieee754_sqrt+0x58>
 8004826:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800482a:	ea5c 0707 	orrs.w	r7, ip, r7
 800482e:	d0f2      	beq.n	8004816 <__ieee754_sqrt+0x2a>
 8004830:	b141      	cbz	r1, 8004844 <__ieee754_sqrt+0x58>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	f7fb fc8d 	bl	8000154 <__aeabi_dsub>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	f7fb ff6b 	bl	8000718 <__aeabi_ddiv>
 8004842:	e7e6      	b.n	8004812 <__ieee754_sqrt+0x26>
 8004844:	1512      	asrs	r2, r2, #20
 8004846:	d074      	beq.n	8004932 <__ieee754_sqrt+0x146>
 8004848:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800484c:	07d5      	lsls	r5, r2, #31
 800484e:	f04f 0500 	mov.w	r5, #0
 8004852:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004856:	bf48      	it	mi
 8004858:	0fd9      	lsrmi	r1, r3, #31
 800485a:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800485e:	bf44      	itt	mi
 8004860:	005b      	lslmi	r3, r3, #1
 8004862:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8004866:	1051      	asrs	r1, r2, #1
 8004868:	0fda      	lsrs	r2, r3, #31
 800486a:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800486e:	4628      	mov	r0, r5
 8004870:	2216      	movs	r2, #22
 8004872:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	1987      	adds	r7, r0, r6
 800487a:	42a7      	cmp	r7, r4
 800487c:	bfde      	ittt	le
 800487e:	19b8      	addle	r0, r7, r6
 8004880:	1be4      	suble	r4, r4, r7
 8004882:	19ad      	addle	r5, r5, r6
 8004884:	0fdf      	lsrs	r7, r3, #31
 8004886:	3a01      	subs	r2, #1
 8004888:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800488c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004890:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004894:	d1f0      	bne.n	8004878 <__ieee754_sqrt+0x8c>
 8004896:	f04f 0c20 	mov.w	ip, #32
 800489a:	4696      	mov	lr, r2
 800489c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80048a0:	4284      	cmp	r4, r0
 80048a2:	eb06 070e 	add.w	r7, r6, lr
 80048a6:	dc02      	bgt.n	80048ae <__ieee754_sqrt+0xc2>
 80048a8:	d112      	bne.n	80048d0 <__ieee754_sqrt+0xe4>
 80048aa:	429f      	cmp	r7, r3
 80048ac:	d810      	bhi.n	80048d0 <__ieee754_sqrt+0xe4>
 80048ae:	2f00      	cmp	r7, #0
 80048b0:	eb07 0e06 	add.w	lr, r7, r6
 80048b4:	da42      	bge.n	800493c <__ieee754_sqrt+0x150>
 80048b6:	f1be 0f00 	cmp.w	lr, #0
 80048ba:	db3f      	blt.n	800493c <__ieee754_sqrt+0x150>
 80048bc:	f100 0801 	add.w	r8, r0, #1
 80048c0:	1a24      	subs	r4, r4, r0
 80048c2:	4640      	mov	r0, r8
 80048c4:	429f      	cmp	r7, r3
 80048c6:	bf88      	it	hi
 80048c8:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80048cc:	1bdb      	subs	r3, r3, r7
 80048ce:	4432      	add	r2, r6
 80048d0:	0064      	lsls	r4, r4, #1
 80048d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80048d6:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80048da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80048de:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80048e2:	d1dd      	bne.n	80048a0 <__ieee754_sqrt+0xb4>
 80048e4:	4323      	orrs	r3, r4
 80048e6:	d006      	beq.n	80048f6 <__ieee754_sqrt+0x10a>
 80048e8:	1c54      	adds	r4, r2, #1
 80048ea:	bf0b      	itete	eq
 80048ec:	4662      	moveq	r2, ip
 80048ee:	3201      	addne	r2, #1
 80048f0:	3501      	addeq	r5, #1
 80048f2:	f022 0201 	bicne.w	r2, r2, #1
 80048f6:	106b      	asrs	r3, r5, #1
 80048f8:	0852      	lsrs	r2, r2, #1
 80048fa:	07e8      	lsls	r0, r5, #31
 80048fc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8004900:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8004904:	bf48      	it	mi
 8004906:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800490a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800490e:	4616      	mov	r6, r2
 8004910:	e781      	b.n	8004816 <__ieee754_sqrt+0x2a>
 8004912:	0adc      	lsrs	r4, r3, #11
 8004914:	3915      	subs	r1, #21
 8004916:	055b      	lsls	r3, r3, #21
 8004918:	2c00      	cmp	r4, #0
 800491a:	d0fa      	beq.n	8004912 <__ieee754_sqrt+0x126>
 800491c:	02e6      	lsls	r6, r4, #11
 800491e:	d50a      	bpl.n	8004936 <__ieee754_sqrt+0x14a>
 8004920:	f1c2 0020 	rsb	r0, r2, #32
 8004924:	fa23 f000 	lsr.w	r0, r3, r0
 8004928:	1e55      	subs	r5, r2, #1
 800492a:	4093      	lsls	r3, r2
 800492c:	4304      	orrs	r4, r0
 800492e:	1b4a      	subs	r2, r1, r5
 8004930:	e78a      	b.n	8004848 <__ieee754_sqrt+0x5c>
 8004932:	4611      	mov	r1, r2
 8004934:	e7f0      	b.n	8004918 <__ieee754_sqrt+0x12c>
 8004936:	0064      	lsls	r4, r4, #1
 8004938:	3201      	adds	r2, #1
 800493a:	e7ef      	b.n	800491c <__ieee754_sqrt+0x130>
 800493c:	4680      	mov	r8, r0
 800493e:	e7bf      	b.n	80048c0 <__ieee754_sqrt+0xd4>
 8004940:	7ff00000 	.word	0x7ff00000

08004944 <matherr>:
 8004944:	2000      	movs	r0, #0
 8004946:	4770      	bx	lr

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
