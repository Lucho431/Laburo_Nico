
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007108  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08007218  08007218  00017218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007548  08007548  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007548  08007548  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007548  08007548  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800754c  0800754c  0001754c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200001f4  08007744  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  08007744  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f7d0  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002804  00000000  00000000  0002f9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed8  00000000  00000000  000321f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  000330d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001970f  00000000  00000000  00033e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dcbc  00000000  00000000  0004d57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091085  00000000  00000000  0005b23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec2c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046a8  00000000  00000000  000ec33c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007200 	.word	0x08007200

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08007200 	.word	0x08007200

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad8:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000ada:	4a21      	ldr	r2, [pc, #132]	; (8000b60 <MX_ADC1_Init+0x98>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000af4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000af8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000afa:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b06:	4815      	ldr	r0, [pc, #84]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000b08:	f001 fe7c 	bl	8002804 <HAL_ADC_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b12:	f001 fb65 	bl	80021e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b1e:	2307      	movs	r3, #7
 8000b20:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000b28:	f002 f810 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f001 fb55 	bl	80021e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <MX_ADC1_Init+0x94>)
 8000b44:	f002 f802 	bl	8002b4c <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000b4e:	f001 fb47 	bl	80021e0 <Error_Handler>
  }

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000026c 	.word	0x2000026c
 8000b60:	40012400 	.word	0x40012400

08000b64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <HAL_ADC_MspInit+0xd0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d152      	bne.n	8000c2a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	4a25      	ldr	r2, [pc, #148]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6193      	str	r3, [r2, #24]
 8000ba8:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <HAL_ADC_MspInit+0xd4>)
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	481e      	ldr	r0, [pc, #120]	; (8000c3c <HAL_ADC_MspInit+0xd8>)
 8000bc4:	f002 fb72 	bl	80032ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <HAL_ADC_MspInit+0xe0>)
 8000bcc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000be6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000bf8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bfe:	4810      	ldr	r0, [pc, #64]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000c00:	f002 f9f4 	bl	8002fec <HAL_DMA_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 8000c0a:	f001 fae9 	bl	80021e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000c12:	621a      	str	r2, [r3, #32]
 8000c14:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_ADC_MspInit+0xdc>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2012      	movs	r0, #18
 8000c20:	f002 f9ad 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c24:	2012      	movs	r0, #18
 8000c26:	f002 f9c6 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40012400 	.word	0x40012400
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800
 8000c40:	2000029c 	.word	0x2000029c
 8000c44:	40020008 	.word	0x40020008

08000c48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_DMA_Init+0x38>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	200b      	movs	r0, #11
 8000c6c:	f002 f987 	bl	8002f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c70:	200b      	movs	r0, #11
 8000c72:	f002 f9a0 	bl	8002fb6 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c98:	4b5c      	ldr	r3, [pc, #368]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	4a5b      	ldr	r2, [pc, #364]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b59      	ldr	r3, [pc, #356]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb0:	4b56      	ldr	r3, [pc, #344]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a55      	ldr	r2, [pc, #340]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cb6:	f043 0320 	orr.w	r3, r3, #32
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b53      	ldr	r3, [pc, #332]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b50      	ldr	r3, [pc, #320]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a4f      	ldr	r2, [pc, #316]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b4d      	ldr	r3, [pc, #308]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b4a      	ldr	r3, [pc, #296]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a49      	ldr	r2, [pc, #292]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b47      	ldr	r3, [pc, #284]	; (8000e0c <MX_GPIO_Init+0x188>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfe:	4844      	ldr	r0, [pc, #272]	; (8000e10 <MX_GPIO_Init+0x18c>)
 8000d00:	f002 fc45 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAB_Vo_Pin|HAB_Io_Pin, GPIO_PIN_SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000d0a:	4842      	ldr	r0, [pc, #264]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000d0c:	f002 fc3f 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Vo_Pin|LED_Io_Pin|Relay_Fte_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d16:	483f      	ldr	r0, [pc, #252]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000d18:	f002 fc39 	bl	800358e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000d22:	483d      	ldr	r0, [pc, #244]	; (8000e18 <MX_GPIO_Init+0x194>)
 8000d24:	f002 fc33 	bl	800358e <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_onBoard_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_onBoard_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4833      	ldr	r0, [pc, #204]	; (8000e10 <MX_GPIO_Init+0x18c>)
 8000d42:	f002 fab3 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Pul_hab_Vo_Pin|Pul_hab_Io_Pin;
 8000d46:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	4619      	mov	r1, r3
 8000d5a:	482d      	ldr	r0, [pc, #180]	; (8000e10 <MX_GPIO_Init+0x18c>)
 8000d5c:	f002 faa6 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = P_Temp_Vo_Pin|P_OL_Vo_Pin|Rep_Pote_Vo_Pin|P_Temp_Io_Pin;
 8000d60:	23f0      	movs	r3, #240	; 0xf0
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	4829      	ldr	r0, [pc, #164]	; (8000e18 <MX_GPIO_Init+0x194>)
 8000d74:	f002 fa9a 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = P_OL_Io_Pin|Rep_Pote_Io_Pin;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4822      	ldr	r0, [pc, #136]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000d8c:	f002 fa8e 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HAB_Vo_Pin|HAB_Io_Pin|Relay_Fte_Pin;
 8000d90:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0310 	add.w	r3, r7, #16
 8000da6:	4619      	mov	r1, r3
 8000da8:	481a      	ldr	r0, [pc, #104]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000daa:	f002 fa7f 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Vo_Pin|LED_Io_Pin|LCD_RS_Pin;
 8000dae:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000dc8:	f002 fa70 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000dcc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000dd0:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_GPIO_Init+0x194>)
 8000de6:	f002 fa61 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Rango_Io_A_Pin|Rango_Io_B_Pin|Rango_Io_C_Pin;
 8000dea:	2338      	movs	r3, #56	; 0x38
 8000dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_GPIO_Init+0x190>)
 8000dfe:	f002 fa55 	bl	80032ac <HAL_GPIO_Init>

}
 8000e02:	bf00      	nop
 8000e04:	3720      	adds	r7, #32
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40011000 	.word	0x40011000
 8000e14:	40010c00 	.word	0x40010c00
 8000e18:	40010800 	.word	0x40010800

08000e1c <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4819      	ldr	r0, [pc, #100]	; (8000e8c <LCD_Init+0x70>)
 8000e28:	f002 fbb1 	bl	800358e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	4817      	ldr	r0, [pc, #92]	; (8000e90 <LCD_Init+0x74>)
 8000e34:	f002 fbab 	bl	800358e <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8000e38:	2010      	movs	r0, #16
 8000e3a:	f001 fcc1 	bl	80027c0 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f828 	bl	8000e94 <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8000e44:	2005      	movs	r0, #5
 8000e46:	f001 fcbb 	bl	80027c0 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f822 	bl	8000e94 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f001 fcb5 	bl	80027c0 <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f000 f81c 	bl	8000e94 <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f000 f819 	bl	8000e94 <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 fcac 	bl	80027c0 <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8000e68:	2028      	movs	r0, #40	; 0x28
 8000e6a:	f000 f8a7 	bl	8000fbc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 8000e6e:	2008      	movs	r0, #8
 8000e70:	f000 f8a4 	bl	8000fbc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f000 f8a1 	bl	8000fbc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 8000e7a:	2006      	movs	r0, #6
 8000e7c:	f000 f89e 	bl	8000fbc <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 8000e80:	200c      	movs	r0, #12
 8000e82:	f000 f89b 	bl	8000fbc <LCD_SendInstruction>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40010c00 	.word	0x40010c00
 8000e90:	40010800 	.word	0x40010800

08000e94 <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d006      	beq.n	8000eb6 <LCD_SendNibble+0x22>
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eae:	4832      	ldr	r0, [pc, #200]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000eb0:	f002 fb6d 	bl	800358e <HAL_GPIO_WritePin>
 8000eb4:	e005      	b.n	8000ec2 <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	482e      	ldr	r0, [pc, #184]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000ebe:	f002 fb66 	bl	800358e <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d006      	beq.n	8000eda <LCD_SendNibble+0x46>
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000ed4:	f002 fb5b 	bl	800358e <HAL_GPIO_WritePin>
 8000ed8:	e005      	b.n	8000ee6 <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee0:	4825      	ldr	r0, [pc, #148]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000ee2:	f002 fb54 	bl	800358e <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <LCD_SendNibble+0x6a>
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef6:	4820      	ldr	r0, [pc, #128]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000ef8:	f002 fb49 	bl	800358e <HAL_GPIO_WritePin>
 8000efc:	e005      	b.n	8000f0a <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000f06:	f002 fb42 	bl	800358e <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d006      	beq.n	8000f22 <LCD_SendNibble+0x8e>
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f1a:	4817      	ldr	r0, [pc, #92]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000f1c:	f002 fb37 	bl	800358e <HAL_GPIO_WritePin>
 8000f20:	e005      	b.n	8000f2e <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f28:	4813      	ldr	r0, [pc, #76]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000f2a:	f002 fb30 	bl	800358e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f34:	4810      	ldr	r0, [pc, #64]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000f36:	f002 fb2a 	bl	800358e <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < 720; i++); //HAL_Delay(1);//LCD_usDelay(5);
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	81fb      	strh	r3, [r7, #14]
 8000f3e:	e002      	b.n	8000f46 <LCD_SendNibble+0xb2>
 8000f40:	89fb      	ldrh	r3, [r7, #14]
 8000f42:	3301      	adds	r3, #1
 8000f44:	81fb      	strh	r3, [r7, #14]
 8000f46:	89fb      	ldrh	r3, [r7, #14]
 8000f48:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000f4c:	d3f8      	bcc.n	8000f40 <LCD_SendNibble+0xac>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <LCD_SendNibble+0xe4>)
 8000f56:	f002 fb1a 	bl	800358e <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < 720; i++); //HAL_Delay(1);//LCD_usDelay(5);
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	81bb      	strh	r3, [r7, #12]
 8000f5e:	e002      	b.n	8000f66 <LCD_SendNibble+0xd2>
 8000f60:	89bb      	ldrh	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	81bb      	strh	r3, [r7, #12]
 8000f66:	89bb      	ldrh	r3, [r7, #12]
 8000f68:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000f6c:	d3f8      	bcc.n	8000f60 <LCD_SendNibble+0xcc>
}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40010800 	.word	0x40010800

08000f7c <LCD_SendChar>:


/* Envía un caracter al display */
void LCD_SendChar(char theChar)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 1);//LCD_PORT->SET = LCD_RS;
 8000f86:	2201      	movs	r2, #1
 8000f88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <LCD_SendChar+0x3c>)
 8000f8e:	f002 fafe 	bl	800358e <HAL_GPIO_WritePin>

	LCD_SendByte(theChar);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f841 	bl	800101c <LCD_SendByte>

	for (uint16_t i = 0; i < 7200; i++);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	e002      	b.n	8000fa6 <LCD_SendChar+0x2a>
 8000fa0:	89fb      	ldrh	r3, [r7, #14]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	81fb      	strh	r3, [r7, #14]
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000fac:	d3f8      	bcc.n	8000fa0 <LCD_SendChar+0x24>
	//HAL_Delay(1);//LCD_usDelay(50);
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <LCD_SendInstruction>:


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <LCD_SendInstruction+0x58>)
 8000fce:	f002 fade 	bl	800358e <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f821 	bl	800101c <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d10a      	bne.n	8000ff6 <LCD_SendInstruction+0x3a>
		for (uint32_t i = 0; i < 288000; i++); //HAL_Delay(2);//LCD_usDelay(2000);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	e002      	b.n	8000fec <LCD_SendInstruction+0x30>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <LCD_SendInstruction+0x5c>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d9f8      	bls.n	8000fe6 <LCD_SendInstruction+0x2a>
	else
		for (uint16_t i = 0; i < 7200; i++); //HAL_Delay(1);//LCD_usDelay(50);
}
 8000ff4:	e009      	b.n	800100a <LCD_SendInstruction+0x4e>
		for (uint16_t i = 0; i < 7200; i++); //HAL_Delay(1);//LCD_usDelay(50);
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	817b      	strh	r3, [r7, #10]
 8000ffa:	e002      	b.n	8001002 <LCD_SendInstruction+0x46>
 8000ffc:	897b      	ldrh	r3, [r7, #10]
 8000ffe:	3301      	adds	r3, #1
 8001000:	817b      	strh	r3, [r7, #10]
 8001002:	897b      	ldrh	r3, [r7, #10]
 8001004:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001008:	d3f8      	bcc.n	8000ffc <LCD_SendInstruction+0x40>
}
 800100a:	bf00      	nop
 800100c:	3710      	adds	r7, #16
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40010c00 	.word	0x40010c00
 8001018:	000464ff 	.word	0x000464ff

0800101c <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	091b      	lsrs	r3, r3, #4
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff2d 	bl	8000e94 <LCD_SendNibble>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <LCD_GoToxy>:


/* Posiciona el cursor en la columna x - fila y */
void LCD_GoToxy(uint8_t x, uint8_t y)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	460a      	mov	r2, r1
 800104c:	71fb      	strb	r3, [r7, #7]
 800104e:	4613      	mov	r3, r2
 8001050:	71bb      	strb	r3, [r7, #6]
	if (y == 0)
 8001052:	79bb      	ldrb	r3, [r7, #6]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d106      	bne.n	8001066 <LCD_GoToxy+0x24>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	3b80      	subs	r3, #128	; 0x80
 800105c:	b2db      	uxtb	r3, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ffac 	bl	8000fbc <LCD_SendInstruction>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
    else if (y == 2)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
    else if (y == 3)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
}
 8001064:	e01c      	b.n	80010a0 <LCD_GoToxy+0x5e>
    else if (y == 1)
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d106      	bne.n	800107a <LCD_GoToxy+0x38>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	3b40      	subs	r3, #64	; 0x40
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ffa2 	bl	8000fbc <LCD_SendInstruction>
}
 8001078:	e012      	b.n	80010a0 <LCD_GoToxy+0x5e>
    else if (y == 2)
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d106      	bne.n	800108e <LCD_GoToxy+0x4c>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3b6c      	subs	r3, #108	; 0x6c
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff98 	bl	8000fbc <LCD_SendInstruction>
}
 800108c:	e008      	b.n	80010a0 <LCD_GoToxy+0x5e>
    else if (y == 3)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d105      	bne.n	80010a0 <LCD_GoToxy+0x5e>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b2c      	subs	r3, #44	; 0x2c
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ff8e 	bl	8000fbc <LCD_SendInstruction>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <LCD_Print>:


/* Envía un string al display */
void LCD_Print(char *p)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	while(*p != 0){
 80010b0:	e007      	b.n	80010c2 <LCD_Print+0x1a>
		LCD_SendChar(*p);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff60 	bl	8000f7c <LCD_SendChar>
		p++;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3301      	adds	r3, #1
 80010c0:	607b      	str	r3, [r7, #4]
	while(*p != 0){
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f3      	bne.n	80010b2 <LCD_Print+0xa>
	}
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010da:	f001 fb0f 	bl	80026fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010de:	f000 fad1 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e2:	f7ff fdcf 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e6:	f7ff fdaf 	bl	8000c48 <MX_DMA_Init>
  MX_ADC1_Init();
 80010ea:	f7ff fced 	bl	8000ac8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80010ee:	f001 f945 	bl	800237c <MX_TIM3_Init>
  MX_TIM4_Init();
 80010f2:	f001 f98f 	bl	8002414 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80010f6:	f001 fa67 	bl	80025c8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);  //captura fase
 80010fa:	4873      	ldr	r0, [pc, #460]	; (80012c8 <main+0x1f4>)
 80010fc:	f002 ff82 	bl	8004004 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim2);  //refresco de 10 ms.
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); //captura fase
 8001100:	2100      	movs	r1, #0
 8001102:	4871      	ldr	r0, [pc, #452]	; (80012c8 <main+0x1f4>)
 8001104:	f003 f820 	bl	8004148 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3); //captura fase
 8001108:	2108      	movs	r1, #8
 800110a:	486f      	ldr	r0, [pc, #444]	; (80012c8 <main+0x1f4>)
 800110c:	f003 f81c 	bl	8004148 <HAL_TIM_IC_Start_IT>

  LCD_Init();
 8001110:	f7ff fe84 	bl	8000e1c <LCD_Init>

  LCD_GoToxy(7, 1);
 8001114:	2101      	movs	r1, #1
 8001116:	2007      	movs	r0, #7
 8001118:	f7ff ff93 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, "OELEC");
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <main+0x1f8>)
 800111e:	4a6c      	ldr	r2, [pc, #432]	; (80012d0 <main+0x1fc>)
 8001120:	6810      	ldr	r0, [r2, #0]
 8001122:	6018      	str	r0, [r3, #0]
 8001124:	8892      	ldrh	r2, [r2, #4]
 8001126:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 8001128:	4868      	ldr	r0, [pc, #416]	; (80012cc <main+0x1f8>)
 800112a:	f7ff ffbd 	bl	80010a8 <LCD_Print>
  LCD_GoToxy(6, 2);
 800112e:	2102      	movs	r1, #2
 8001130:	2006      	movs	r0, #6
 8001132:	f7ff ff86 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, "GIM50v5");
 8001136:	4a65      	ldr	r2, [pc, #404]	; (80012cc <main+0x1f8>)
 8001138:	4b66      	ldr	r3, [pc, #408]	; (80012d4 <main+0x200>)
 800113a:	cb03      	ldmia	r3!, {r0, r1}
 800113c:	6010      	str	r0, [r2, #0]
 800113e:	6051      	str	r1, [r2, #4]
  LCD_Print(texto);
 8001140:	4862      	ldr	r0, [pc, #392]	; (80012cc <main+0x1f8>)
 8001142:	f7ff ffb1 	bl	80010a8 <LCD_Print>

  //Led de la placa
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800114c:	4862      	ldr	r0, [pc, #392]	; (80012d8 <main+0x204>)
 800114e:	f002 fa1e 	bl	800358e <HAL_GPIO_WritePin>


  //Tiempo de arranque para la fuente de 48V, los leds actuan de testigo
  HAL_GPIO_WritePin(LED_Vo_GPIO_Port,LED_Vo_Pin, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001158:	4860      	ldr	r0, [pc, #384]	; (80012dc <main+0x208>)
 800115a:	f002 fa18 	bl	800358e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Io_GPIO_Port,LED_Io_Pin, 1);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001164:	485d      	ldr	r0, [pc, #372]	; (80012dc <main+0x208>)
 8001166:	f002 fa12 	bl	800358e <HAL_GPIO_WritePin>


  HAL_Delay(3000);
 800116a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800116e:	f001 fb27 	bl	80027c0 <HAL_Delay>


  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1);
 8001172:	2201      	movs	r2, #1
 8001174:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001178:	4858      	ldr	r0, [pc, #352]	; (80012dc <main+0x208>)
 800117a:	f002 fa08 	bl	800358e <HAL_GPIO_WritePin>
  flag_relay=1;
 800117e:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <main+0x20c>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]

  HAL_Delay(800);
 8001184:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001188:	f001 fb1a 	bl	80027c0 <HAL_Delay>

  LCD_GoToxy(5, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	2005      	movs	r0, #5
 8001190:	f7ff ff57 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, "MEDICIONES");
 8001194:	4a4d      	ldr	r2, [pc, #308]	; (80012cc <main+0x1f8>)
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <main+0x210>)
 8001198:	cb03      	ldmia	r3!, {r0, r1}
 800119a:	6010      	str	r0, [r2, #0]
 800119c:	6051      	str	r1, [r2, #4]
 800119e:	8819      	ldrh	r1, [r3, #0]
 80011a0:	789b      	ldrb	r3, [r3, #2]
 80011a2:	8111      	strh	r1, [r2, #8]
 80011a4:	7293      	strb	r3, [r2, #10]
  LCD_Print(texto);
 80011a6:	4849      	ldr	r0, [pc, #292]	; (80012cc <main+0x1f8>)
 80011a8:	f7ff ff7e 	bl	80010a8 <LCD_Print>
  LCD_GoToxy(0, 1);
 80011ac:	2101      	movs	r1, #1
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff ff47 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, "  Vo:");
 80011b4:	4b45      	ldr	r3, [pc, #276]	; (80012cc <main+0x1f8>)
 80011b6:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <main+0x214>)
 80011b8:	6810      	ldr	r0, [r2, #0]
 80011ba:	6018      	str	r0, [r3, #0]
 80011bc:	8892      	ldrh	r2, [r2, #4]
 80011be:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 80011c0:	4842      	ldr	r0, [pc, #264]	; (80012cc <main+0x1f8>)
 80011c2:	f7ff ff71 	bl	80010a8 <LCD_Print>
  LCD_GoToxy(0, 2);
 80011c6:	2102      	movs	r1, #2
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff ff3a 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, "  Io:");
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <main+0x1f8>)
 80011d0:	4a46      	ldr	r2, [pc, #280]	; (80012ec <main+0x218>)
 80011d2:	6810      	ldr	r0, [r2, #0]
 80011d4:	6018      	str	r0, [r3, #0]
 80011d6:	8892      	ldrh	r2, [r2, #4]
 80011d8:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 80011da:	483c      	ldr	r0, [pc, #240]	; (80012cc <main+0x1f8>)
 80011dc:	f7ff ff64 	bl	80010a8 <LCD_Print>
  LCD_GoToxy(0, 3);
 80011e0:	2103      	movs	r1, #3
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff2d 	bl	8001042 <LCD_GoToxy>
  sprintf(texto, " Phi:");
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <main+0x1f8>)
 80011ea:	4a41      	ldr	r2, [pc, #260]	; (80012f0 <main+0x21c>)
 80011ec:	6810      	ldr	r0, [r2, #0]
 80011ee:	6018      	str	r0, [r3, #0]
 80011f0:	8892      	ldrh	r2, [r2, #4]
 80011f2:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 80011f4:	4835      	ldr	r0, [pc, #212]	; (80012cc <main+0x1f8>)
 80011f6:	f7ff ff57 	bl	80010a8 <LCD_Print>
  HAL_Delay(200);
 80011fa:	20c8      	movs	r0, #200	; 0xc8
 80011fc:	f001 fae0 	bl	80027c0 <HAL_Delay>

  HAL_GPIO_WritePin(LED_Vo_GPIO_Port,LED_Vo_Pin, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4835      	ldr	r0, [pc, #212]	; (80012dc <main+0x208>)
 8001208:	f002 f9c1 	bl	800358e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Io_GPIO_Port,LED_Io_Pin, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001212:	4832      	ldr	r0, [pc, #200]	; (80012dc <main+0x208>)
 8001214:	f002 f9bb 	bl	800358e <HAL_GPIO_WritePin>



  HAL_TIM_Base_Start(&htim3); //sincro ADC
 8001218:	4836      	ldr	r0, [pc, #216]	; (80012f4 <main+0x220>)
 800121a:	f002 fef3 	bl	8004004 <HAL_TIM_Base_Start>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	  }
*/
	  if (count_tick != 0){ //acciones del systickHandler
 800121e:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <main+0x224>)
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d041      	beq.n	80012aa <main+0x1d6>

		  if (refrescaPantalla != 0){
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <main+0x228>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d006      	beq.n	800123c <main+0x168>
			  refrescaPantalla--;
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <main+0x228>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b31      	ldr	r3, [pc, #196]	; (80012fc <main+0x228>)
 8001238:	801a      	strh	r2, [r3, #0]
 800123a:	e001      	b.n	8001240 <main+0x16c>
		  }else{
			  imprimePantalla();
 800123c:	f000 fb68 	bl	8001910 <imprimePantalla>
		  }

		  if (periodo_BoardLed != 0){
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <main+0x22c>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <main+0x182>
			  periodo_BoardLed--;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <main+0x22c>)
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	3b01      	subs	r3, #1
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <main+0x22c>)
 8001252:	801a      	strh	r2, [r3, #0]
 8001254:	e002      	b.n	800125c <main+0x188>
		  }else{
//			  HAL_GPIO_TogglePin(LED_Board_GPIO_Port, LED_Board_Pin);
			  periodo_BoardLed = PERIODO_BOARDLED;
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <main+0x22c>)
 8001258:	22fa      	movs	r2, #250	; 0xfa
 800125a:	801a      	strh	r2, [r3, #0]
		  }

		  if (lectura_entradas != 0){
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <main+0x230>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d006      	beq.n	8001272 <main+0x19e>
			  lectura_entradas--;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <main+0x230>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	3b01      	subs	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b25      	ldr	r3, [pc, #148]	; (8001304 <main+0x230>)
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e001      	b.n	8001276 <main+0x1a2>
		  }else{
			  update_entradas();
 8001272:	f000 fe7d 	bl	8001f70 <update_entradas>
		  }

		  if (lectura_proteccion != 0){
 8001276:	4b24      	ldr	r3, [pc, #144]	; (8001308 <main+0x234>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d006      	beq.n	800128c <main+0x1b8>
			  lectura_proteccion--;
 800127e:	4b22      	ldr	r3, [pc, #136]	; (8001308 <main+0x234>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	3b01      	subs	r3, #1
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <main+0x234>)
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e001      	b.n	8001290 <main+0x1bc>
		  }else{
			  update_proteccion();
 800128c:	f000 fee2 	bl	8002054 <update_proteccion>
		  }

		  if (transitorioFunete != 0)
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <main+0x238>)
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d005      	beq.n	80012a4 <main+0x1d0>
			  transitorioFunete--;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <main+0x238>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b1a      	ldr	r3, [pc, #104]	; (800130c <main+0x238>)
 80012a2:	801a      	strh	r2, [r3, #0]

		  count_tick = 0;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <main+0x224>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	801a      	strh	r2, [r3, #0]
	  } //fin if (count_tick != 0)

	  check_entradas();
 80012aa:	f000 fe83 	bl	8001fb4 <check_entradas>
	  check_proteccion();
 80012ae:	f000 fef3 	bl	8002098 <check_proteccion>

	  switch (status_adc) {
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <main+0x23c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d003      	beq.n	80012c2 <main+0x1ee>
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	f000 80cd 	beq.w	800145a <main+0x386>
			  status_adc = 0;

			  //HAL_ADC_Start_DMA(&hadc1, muestras, sizeof(muestras));

		  default:
		  break;
 80012c0:	e191      	b.n	80015e6 <main+0x512>
			  for (uint16_t i = 0; i < 200; i+=2){
 80012c2:	2300      	movs	r3, #0
 80012c4:	80fb      	strh	r3, [r7, #6]
 80012c6:	e051      	b.n	800136c <main+0x298>
 80012c8:	20000950 	.word	0x20000950
 80012cc:	200002e0 	.word	0x200002e0
 80012d0:	08007218 	.word	0x08007218
 80012d4:	08007220 	.word	0x08007220
 80012d8:	40011000 	.word	0x40011000
 80012dc:	40010c00 	.word	0x40010c00
 80012e0:	20000256 	.word	0x20000256
 80012e4:	08007228 	.word	0x08007228
 80012e8:	08007234 	.word	0x08007234
 80012ec:	0800723c 	.word	0x0800723c
 80012f0:	08007244 	.word	0x08007244
 80012f4:	20000998 	.word	0x20000998
 80012f8:	20000254 	.word	0x20000254
 80012fc:	2000000e 	.word	0x2000000e
 8001300:	20000010 	.word	0x20000010
 8001304:	20000000 	.word	0x20000000
 8001308:	20000001 	.word	0x20000001
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000244 	.word	0x20000244
				  aux_muestra_v =muestras[i] - offset_adc;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <main+0x38c>)
 8001318:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800131c:	4b51      	ldr	r3, [pc, #324]	; (8001464 <main+0x390>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	4a51      	ldr	r2, [pc, #324]	; (8001468 <main+0x394>)
 8001324:	6013      	str	r3, [r2, #0]
				  aux_muestra_i =muestras[i+1] - offset_adc;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	3301      	adds	r3, #1
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <main+0x38c>)
 800132c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <main+0x390>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	4a4d      	ldr	r2, [pc, #308]	; (800146c <main+0x398>)
 8001338:	6013      	str	r3, [r2, #0]
				  acumulaV += aux_muestra_v*aux_muestra_v;
 800133a:	4b4b      	ldr	r3, [pc, #300]	; (8001468 <main+0x394>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <main+0x394>)
 8001340:	6812      	ldr	r2, [r2, #0]
 8001342:	fb02 f203 	mul.w	r2, r2, r3
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <main+0x39c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <main+0x39c>)
 800134e:	6013      	str	r3, [r2, #0]
				  acumulaI += aux_muestra_i*aux_muestra_i;
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <main+0x398>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a45      	ldr	r2, [pc, #276]	; (800146c <main+0x398>)
 8001356:	6812      	ldr	r2, [r2, #0]
 8001358:	fb02 f203 	mul.w	r2, r2, r3
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <main+0x3a0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	4a44      	ldr	r2, [pc, #272]	; (8001474 <main+0x3a0>)
 8001364:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	3302      	adds	r3, #2
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	2bc7      	cmp	r3, #199	; 0xc7
 8001370:	d9d0      	bls.n	8001314 <main+0x240>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 8001372:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <main+0x39c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f844 	bl	8000404 <__aeabi_i2d>
 800137c:	4603      	mov	r3, r0
 800137e:	460c      	mov	r4, r1
 8001380:	4618      	mov	r0, r3
 8001382:	4621      	mov	r1, r4
 8001384:	f005 fe3a 	bl	8006ffc <sqrt>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <main+0x3a4>)
 800138e:	f7ff f9cd 	bl	800072c <__aeabi_ddiv>
 8001392:	4603      	mov	r3, r0
 8001394:	460c      	mov	r4, r1
 8001396:	4618      	mov	r0, r3
 8001398:	4621      	mov	r1, r4
 800139a:	f7ff fb75 	bl	8000a88 <__aeabi_d2uiz>
 800139e:	4602      	mov	r2, r0
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <main+0x3a8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <main+0x3a8>)
 80013aa:	601a      	str	r2, [r3, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 80013ac:	4b31      	ldr	r3, [pc, #196]	; (8001474 <main+0x3a0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f827 	bl	8000404 <__aeabi_i2d>
 80013b6:	4603      	mov	r3, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	4618      	mov	r0, r3
 80013bc:	4621      	mov	r1, r4
 80013be:	f005 fe1d 	bl	8006ffc <sqrt>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b2c      	ldr	r3, [pc, #176]	; (8001478 <main+0x3a4>)
 80013c8:	f7ff f9b0 	bl	800072c <__aeabi_ddiv>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	4618      	mov	r0, r3
 80013d2:	4621      	mov	r1, r4
 80013d4:	f7ff fb58 	bl	8000a88 <__aeabi_d2uiz>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <main+0x3ac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <main+0x3ac>)
 80013e4:	601a      	str	r2, [r3, #0]
			  cuenta_RMS_samplesV++;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <main+0x3b0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	3301      	adds	r3, #1
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b25      	ldr	r3, [pc, #148]	; (8001484 <main+0x3b0>)
 80013f0:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <main+0x3b4>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <main+0x3b4>)
 80013fc:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <main+0x3b0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b0a      	cmp	r3, #10
 8001404:	d11f      	bne.n	8001446 <main+0x372>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <main+0x3a8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a20      	ldr	r2, [pc, #128]	; (800148c <main+0x3b8>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	1092      	asrs	r2, r2, #2
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a1e      	ldr	r2, [pc, #120]	; (8001490 <main+0x3bc>)
 8001418:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <main+0x3ac>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a1b      	ldr	r2, [pc, #108]	; (800148c <main+0x3b8>)
 8001420:	fb82 1203 	smull	r1, r2, r2, r3
 8001424:	1092      	asrs	r2, r2, #2
 8001426:	17db      	asrs	r3, r3, #31
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <main+0x3c0>)
 800142c:	6013      	str	r3, [r2, #0]
				  cuenta_RMS_samplesV = 0;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <main+0x3b0>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <main+0x3a8>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <main+0x3b4>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <main+0x3ac>)
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <main+0x39c>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <main+0x3a0>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <main+0x3c4>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
		  break;
 8001458:	e0c6      	b.n	80015e8 <main+0x514>
			  for (uint16_t i = 200; i < 400; i+=2){
 800145a:	23c8      	movs	r3, #200	; 0xc8
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	e049      	b.n	80014f4 <main+0x420>
 8001460:	20000300 	.word	0x20000300
 8001464:	20000004 	.word	0x20000004
 8001468:	20000220 	.word	0x20000220
 800146c:	20000224 	.word	0x20000224
 8001470:	20000228 	.word	0x20000228
 8001474:	2000022c 	.word	0x2000022c
 8001478:	40240000 	.word	0x40240000
 800147c:	20000230 	.word	0x20000230
 8001480:	20000234 	.word	0x20000234
 8001484:	20000238 	.word	0x20000238
 8001488:	20000239 	.word	0x20000239
 800148c:	66666667 	.word	0x66666667
 8001490:	2000023c 	.word	0x2000023c
 8001494:	20000240 	.word	0x20000240
 8001498:	20000244 	.word	0x20000244
				  aux_muestra_v =muestras[i] - offset_adc;
 800149c:	88bb      	ldrh	r3, [r7, #4]
 800149e:	4a66      	ldr	r2, [pc, #408]	; (8001638 <main+0x564>)
 80014a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a4:	4b65      	ldr	r3, [pc, #404]	; (800163c <main+0x568>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	4a65      	ldr	r2, [pc, #404]	; (8001640 <main+0x56c>)
 80014ac:	6013      	str	r3, [r2, #0]
				  aux_muestra_i =muestras[i+1] - offset_adc;
 80014ae:	88bb      	ldrh	r3, [r7, #4]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a61      	ldr	r2, [pc, #388]	; (8001638 <main+0x564>)
 80014b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014b8:	4b60      	ldr	r3, [pc, #384]	; (800163c <main+0x568>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	4a61      	ldr	r2, [pc, #388]	; (8001644 <main+0x570>)
 80014c0:	6013      	str	r3, [r2, #0]
				  acumulaV += aux_muestra_v*aux_muestra_v;
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <main+0x56c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <main+0x56c>)
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	fb02 f203 	mul.w	r2, r2, r3
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <main+0x574>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a5c      	ldr	r2, [pc, #368]	; (8001648 <main+0x574>)
 80014d6:	6013      	str	r3, [r2, #0]
				  acumulaI += aux_muestra_i*aux_muestra_i;
 80014d8:	4b5a      	ldr	r3, [pc, #360]	; (8001644 <main+0x570>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a59      	ldr	r2, [pc, #356]	; (8001644 <main+0x570>)
 80014de:	6812      	ldr	r2, [r2, #0]
 80014e0:	fb02 f203 	mul.w	r2, r2, r3
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <main+0x578>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a58      	ldr	r2, [pc, #352]	; (800164c <main+0x578>)
 80014ec:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	3302      	adds	r3, #2
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	88bb      	ldrh	r3, [r7, #4]
 80014f6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80014fa:	d3cf      	bcc.n	800149c <main+0x3c8>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 80014fc:	4b52      	ldr	r3, [pc, #328]	; (8001648 <main+0x574>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe ff7f 	bl	8000404 <__aeabi_i2d>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	4618      	mov	r0, r3
 800150c:	4621      	mov	r1, r4
 800150e:	f005 fd75 	bl	8006ffc <sqrt>
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <main+0x57c>)
 8001518:	f7ff f908 	bl	800072c <__aeabi_ddiv>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	f7ff fab0 	bl	8000a88 <__aeabi_d2uiz>
 8001528:	4602      	mov	r2, r0
 800152a:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <main+0x580>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4b48      	ldr	r3, [pc, #288]	; (8001654 <main+0x580>)
 8001534:	601a      	str	r2, [r3, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <main+0x578>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ff62 	bl	8000404 <__aeabi_i2d>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4618      	mov	r0, r3
 8001546:	4621      	mov	r1, r4
 8001548:	f005 fd58 	bl	8006ffc <sqrt>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <main+0x57c>)
 8001552:	f7ff f8eb 	bl	800072c <__aeabi_ddiv>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	4618      	mov	r0, r3
 800155c:	4621      	mov	r1, r4
 800155e:	f7ff fa93 	bl	8000a88 <__aeabi_d2uiz>
 8001562:	4602      	mov	r2, r0
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <main+0x584>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4413      	add	r3, r2
 800156a:	461a      	mov	r2, r3
 800156c:	4b3a      	ldr	r3, [pc, #232]	; (8001658 <main+0x584>)
 800156e:	601a      	str	r2, [r3, #0]
			  cuenta_RMS_samplesV++;
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <main+0x588>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b38      	ldr	r3, [pc, #224]	; (800165c <main+0x588>)
 800157a:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 800157c:	4b38      	ldr	r3, [pc, #224]	; (8001660 <main+0x58c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b36      	ldr	r3, [pc, #216]	; (8001660 <main+0x58c>)
 8001586:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <main+0x588>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b0a      	cmp	r3, #10
 800158e:	d121      	bne.n	80015d4 <main+0x500>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <main+0x580>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a33      	ldr	r2, [pc, #204]	; (8001664 <main+0x590>)
 8001596:	fb82 1203 	smull	r1, r2, r2, r3
 800159a:	1092      	asrs	r2, r2, #2
 800159c:	17db      	asrs	r3, r3, #31
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4a31      	ldr	r2, [pc, #196]	; (8001668 <main+0x594>)
 80015a2:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <main+0x584>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2e      	ldr	r2, [pc, #184]	; (8001664 <main+0x590>)
 80015aa:	fb82 1203 	smull	r1, r2, r2, r3
 80015ae:	1092      	asrs	r2, r2, #2
 80015b0:	17db      	asrs	r3, r3, #31
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	4a2d      	ldr	r2, [pc, #180]	; (800166c <main+0x598>)
 80015b6:	6013      	str	r3, [r2, #0]
				  valor_mediciones ();
 80015b8:	f000 f8c0 	bl	800173c <valor_mediciones>
				  cuenta_RMS_samplesV = 0;
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <main+0x588>)
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 80015c2:	4b24      	ldr	r3, [pc, #144]	; (8001654 <main+0x580>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 80015c8:	4b25      	ldr	r3, [pc, #148]	; (8001660 <main+0x58c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <main+0x584>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
			  acumulaV = 0;
 80015d4:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <main+0x574>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <main+0x578>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
			  status_adc = 0;
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <main+0x59c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	701a      	strb	r2, [r3, #0]
		  break;
 80015e6:	bf00      	nop
	  } //fin switch(status_adc)


	  if (cuenta_fase == 5){
 80015e8:	4b22      	ldr	r3, [pc, #136]	; (8001674 <main+0x5a0>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d120      	bne.n	8001632 <main+0x55e>

		  if (acum_fase > 4500){ //mayor que 180 grados.
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <main+0x5a4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f241 1294 	movw	r2, #4500	; 0x1194
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d90b      	bls.n	8001614 <main+0x540>
			  valor_fase = acum_fase * 4 / 10 - 3600; //acum_fase * 0.04 - 360.0
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <main+0x5a4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4a1e      	ldr	r2, [pc, #120]	; (800167c <main+0x5a8>)
 8001604:	fba2 2303 	umull	r2, r3, r2, r3
 8001608:	08db      	lsrs	r3, r3, #3
 800160a:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <main+0x5ac>)
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e008      	b.n	8001626 <main+0x552>
		  }else{
			  valor_fase = acum_fase * 4 / 10; //acum_fase * 0.04
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <main+0x5a4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4a18      	ldr	r2, [pc, #96]	; (800167c <main+0x5a8>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	08db      	lsrs	r3, r3, #3
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <main+0x5ac>)
 8001624:	6013      	str	r3, [r2, #0]
		  }

		  acum_fase = 0;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <main+0x5a4>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
		  cuenta_fase = 0;
 800162c:	4b11      	ldr	r3, [pc, #68]	; (8001674 <main+0x5a0>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
	  } //fin if cuenta_fase

	  protecciones ();
 8001632:	f000 fa85 	bl	8001b40 <protecciones>
	  if (count_tick != 0){ //acciones del systickHandler
 8001636:	e5f2      	b.n	800121e <main+0x14a>
 8001638:	20000300 	.word	0x20000300
 800163c:	20000004 	.word	0x20000004
 8001640:	20000220 	.word	0x20000220
 8001644:	20000224 	.word	0x20000224
 8001648:	20000228 	.word	0x20000228
 800164c:	2000022c 	.word	0x2000022c
 8001650:	40240000 	.word	0x40240000
 8001654:	20000230 	.word	0x20000230
 8001658:	20000234 	.word	0x20000234
 800165c:	20000238 	.word	0x20000238
 8001660:	20000239 	.word	0x20000239
 8001664:	66666667 	.word	0x66666667
 8001668:	2000023c 	.word	0x2000023c
 800166c:	20000240 	.word	0x20000240
 8001670:	20000244 	.word	0x20000244
 8001674:	2000024c 	.word	0x2000024c
 8001678:	20000248 	.word	0x20000248
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	20000250 	.word	0x20000250

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	; 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800168e:	2228      	movs	r2, #40	; 0x28
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fc6c 	bl	8004f70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c2:	2301      	movs	r3, #1
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80016d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016da:	4618      	mov	r0, r3
 80016dc:	f001 ff70 	bl	80035c0 <HAL_RCC_OscConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016e6:	f000 fd7b 	bl	80021e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ea:	230f      	movs	r3, #15
 80016ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2102      	movs	r1, #2
 8001706:	4618      	mov	r0, r3
 8001708:	f002 f9da 	bl	8003ac0 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001712:	f000 fd65 	bl	80021e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001716:	2302      	movs	r3, #2
 8001718:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800171a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800171e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f002 fb68 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800172e:	f000 fd57 	bl	80021e0 <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <valor_mediciones>:

/* USER CODE BEGIN 4 */
void valor_mediciones (void){
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

	switch (RANGO_I){
 8001740:	4b68      	ldr	r3, [pc, #416]	; (80018e4 <valor_mediciones+0x1a8>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	3b02      	subs	r3, #2
 800174c:	2b05      	cmp	r3, #5
 800174e:	d80f      	bhi.n	8001770 <valor_mediciones+0x34>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <valor_mediciones+0x1c>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001797 	.word	0x08001797
 800175c:	080017bd 	.word	0x080017bd
 8001760:	080017f1 	.word	0x080017f1
 8001764:	08001825 	.word	0x08001825
 8001768:	08001859 	.word	0x08001859
 800176c:	0800188d 	.word	0x0800188d

		default:
		case 1:
			//convierte a float 500mA
			coefRango_Io = 4488;
 8001770:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <valor_mediciones+0x1ac>)
 8001772:	f241 1288 	movw	r2, #4488	; 0x1188
 8001776:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000);
 8001778:	4b5c      	ldr	r3, [pc, #368]	; (80018ec <valor_mediciones+0x1b0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <valor_mediciones+0x1ac>)
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4a5a      	ldr	r2, [pc, #360]	; (80018f0 <valor_mediciones+0x1b4>)
 8001786:	fb82 1203 	smull	r1, r2, r2, r3
 800178a:	1312      	asrs	r2, r2, #12
 800178c:	17db      	asrs	r3, r3, #31
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <valor_mediciones+0x1b8>)
 8001792:	6013      	str	r3, [r2, #0]
		break;
 8001794:	e094      	b.n	80018c0 <valor_mediciones+0x184>
		case 2:
			//convierte a float 1A
			coefRango_Io = 897;
 8001796:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <valor_mediciones+0x1ac>)
 8001798:	f240 3281 	movw	r2, #897	; 0x381
 800179c:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000);
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <valor_mediciones+0x1b0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <valor_mediciones+0x1ac>)
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	4a51      	ldr	r2, [pc, #324]	; (80018f0 <valor_mediciones+0x1b4>)
 80017ac:	fb82 1203 	smull	r1, r2, r2, r3
 80017b0:	1312      	asrs	r2, r2, #12
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	4a4f      	ldr	r2, [pc, #316]	; (80018f4 <valor_mediciones+0x1b8>)
 80017b8:	6013      	str	r3, [r2, #0]
		break;
 80017ba:	e081      	b.n	80018c0 <valor_mediciones+0x184>
		case 3:
			//convierte a float 2A
			coefRango_Io = 1309; //0.001309;
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <valor_mediciones+0x1ac>)
 80017be:	f240 521d 	movw	r2, #1309	; 0x51d
 80017c2:	601a      	str	r2, [r3, #0]
			Imax = 268; //2.68;
 80017c4:	4b4c      	ldr	r3, [pc, #304]	; (80018f8 <valor_mediciones+0x1bc>)
 80017c6:	f44f 7286 	mov.w	r2, #268	; 0x10c
 80017ca:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000 - Imax);
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <valor_mediciones+0x1b0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a45      	ldr	r2, [pc, #276]	; (80018e8 <valor_mediciones+0x1ac>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	4a45      	ldr	r2, [pc, #276]	; (80018f0 <valor_mediciones+0x1b4>)
 80017da:	fb82 1203 	smull	r1, r2, r2, r3
 80017de:	1312      	asrs	r2, r2, #12
 80017e0:	17db      	asrs	r3, r3, #31
 80017e2:	1ad2      	subs	r2, r2, r3
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <valor_mediciones+0x1bc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <valor_mediciones+0x1b8>)
 80017ec:	6013      	str	r3, [r2, #0]
		break;
 80017ee:	e067      	b.n	80018c0 <valor_mediciones+0x184>
		case 4:
			//convierte a float 5A
			coefRango_Io = 3273; //0.003273;
 80017f0:	4b3d      	ldr	r3, [pc, #244]	; (80018e8 <valor_mediciones+0x1ac>)
 80017f2:	f640 42c9 	movw	r2, #3273	; 0xcc9
 80017f6:	601a      	str	r2, [r3, #0]
			Imax = 670; //6.7;
 80017f8:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <valor_mediciones+0x1bc>)
 80017fa:	f240 229e 	movw	r2, #670	; 0x29e
 80017fe:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000 - Imax);
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <valor_mediciones+0x1b0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a38      	ldr	r2, [pc, #224]	; (80018e8 <valor_mediciones+0x1ac>)
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	fb02 f303 	mul.w	r3, r2, r3
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <valor_mediciones+0x1b4>)
 800180e:	fb82 1203 	smull	r1, r2, r2, r3
 8001812:	1312      	asrs	r2, r2, #12
 8001814:	17db      	asrs	r3, r3, #31
 8001816:	1ad2      	subs	r2, r2, r3
 8001818:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <valor_mediciones+0x1bc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	4a35      	ldr	r2, [pc, #212]	; (80018f4 <valor_mediciones+0x1b8>)
 8001820:	6013      	str	r3, [r2, #0]
		break;
 8001822:	e04d      	b.n	80018c0 <valor_mediciones+0x184>
		case 5:
			//convierte a float 10A
			coefRango_Io = 6546; //0.006546;
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <valor_mediciones+0x1ac>)
 8001826:	f641 1292 	movw	r2, #6546	; 0x1992
 800182a:	601a      	str	r2, [r3, #0]
			Imax = 1340; //13.4;
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <valor_mediciones+0x1bc>)
 800182e:	f240 523c 	movw	r2, #1340	; 0x53c
 8001832:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000 - Imax);
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <valor_mediciones+0x1b0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	; (80018e8 <valor_mediciones+0x1ac>)
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <valor_mediciones+0x1b4>)
 8001842:	fb82 1203 	smull	r1, r2, r2, r3
 8001846:	1312      	asrs	r2, r2, #12
 8001848:	17db      	asrs	r3, r3, #31
 800184a:	1ad2      	subs	r2, r2, r3
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <valor_mediciones+0x1bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <valor_mediciones+0x1b8>)
 8001854:	6013      	str	r3, [r2, #0]
		break;
 8001856:	e033      	b.n	80018c0 <valor_mediciones+0x184>
		case 6:
			//convierte a float 20A
			coefRango_Io = 1309; //0.01309;
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <valor_mediciones+0x1ac>)
 800185a:	f240 521d 	movw	r2, #1309	; 0x51d
 800185e:	601a      	str	r2, [r3, #0]
			Imax = 2680; //26.8;
 8001860:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <valor_mediciones+0x1bc>)
 8001862:	f640 2278 	movw	r2, #2680	; 0xa78
 8001866:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 1000 - Imax);
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <valor_mediciones+0x1b0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1e      	ldr	r2, [pc, #120]	; (80018e8 <valor_mediciones+0x1ac>)
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <valor_mediciones+0x1c0>)
 8001876:	fb82 1203 	smull	r1, r2, r2, r3
 800187a:	1192      	asrs	r2, r2, #6
 800187c:	17db      	asrs	r3, r3, #31
 800187e:	1ad2      	subs	r2, r2, r3
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <valor_mediciones+0x1bc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <valor_mediciones+0x1b8>)
 8001888:	6013      	str	r3, [r2, #0]
		break;
 800188a:	e019      	b.n	80018c0 <valor_mediciones+0x184>
		case 7:
			//convierte a float 50A
			coefRango_Io = 32725; //0.032725;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <valor_mediciones+0x1ac>)
 800188e:	f647 72d5 	movw	r2, #32725	; 0x7fd5
 8001892:	601a      	str	r2, [r3, #0]
			Imax = 6700; //67.0;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <valor_mediciones+0x1bc>)
 8001896:	f641 222c 	movw	r2, #6700	; 0x1a2c
 800189a:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000 - Imax);
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <valor_mediciones+0x1b0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <valor_mediciones+0x1ac>)
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	fb02 f303 	mul.w	r3, r2, r3
 80018a8:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <valor_mediciones+0x1b4>)
 80018aa:	fb82 1203 	smull	r1, r2, r2, r3
 80018ae:	1312      	asrs	r2, r2, #12
 80018b0:	17db      	asrs	r3, r3, #31
 80018b2:	1ad2      	subs	r2, r2, r3
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <valor_mediciones+0x1bc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <valor_mediciones+0x1b8>)
 80018bc:	6013      	str	r3, [r2, #0]
		break;
 80018be:	bf00      	nop

	} //fin switch RANG_I

	valor_Vo = (RMS_samplesV * coefRango_Vo / 100);
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <valor_mediciones+0x1c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <valor_mediciones+0x1c8>)
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <valor_mediciones+0x1cc>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1152      	asrs	r2, r2, #5
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	4a0c      	ldr	r2, [pc, #48]	; (800190c <valor_mediciones+0x1d0>)
 80018da:	6013      	str	r3, [r2, #0]

} //fin valor_mediciones()
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40010c00 	.word	0x40010c00
 80018e8:	20000940 	.word	0x20000940
 80018ec:	20000240 	.word	0x20000240
 80018f0:	68db8bad 	.word	0x68db8bad
 80018f4:	20000948 	.word	0x20000948
 80018f8:	20000944 	.word	0x20000944
 80018fc:	10624dd3 	.word	0x10624dd3
 8001900:	2000023c 	.word	0x2000023c
 8001904:	20000008 	.word	0x20000008
 8001908:	51eb851f 	.word	0x51eb851f
 800190c:	2000094c 	.word	0x2000094c

08001910 <imprimePantalla>:

void imprimePantalla(void) {
 8001910:	b598      	push	{r3, r4, r7, lr}
 8001912:	af00      	add	r7, sp, #0

	valor_mediciones();
 8001914:	f7ff ff12 	bl	800173c <valor_mediciones>

//	LCD_GoToxy(5, 0);
//	sprintf(texto, "MEDICIONES");
	//LCD_Print("Titulo");
//	LCD_Print(texto);
	LCD_GoToxy(5, 1);
 8001918:	2101      	movs	r1, #1
 800191a:	2005      	movs	r0, #5
 800191c:	f7ff fb91 	bl	8001042 <LCD_GoToxy>

	LCD_Print("               ");
 8001920:	4875      	ldr	r0, [pc, #468]	; (8001af8 <imprimePantalla+0x1e8>)
 8001922:	f7ff fbc1 	bl	80010a8 <LCD_Print>
	LCD_GoToxy(5, 1);
 8001926:	2101      	movs	r1, #1
 8001928:	2005      	movs	r0, #5
 800192a:	f7ff fb8a 	bl	8001042 <LCD_GoToxy>
	switch (status_proteccionVo) {
 800192e:	4b73      	ldr	r3, [pc, #460]	; (8001afc <imprimePantalla+0x1ec>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d83d      	bhi.n	80019b2 <imprimePantalla+0xa2>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <imprimePantalla+0x2c>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	080019a3 	.word	0x080019a3
 8001940:	0800194d 	.word	0x0800194d
 8001944:	08001983 	.word	0x08001983
 8001948:	08001993 	.word	0x08001993
		default:
		break;
		case P_OK:
//				sprintf(texto, "Tension: %3.2f [V]", valor_Vo);
			sprintf(texto, " %d.%d [V]", valor_Vo / 100, valor_Vo % 100);
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <imprimePantalla+0x1f0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <imprimePantalla+0x1f4>)
 8001952:	fb82 1203 	smull	r1, r2, r2, r3
 8001956:	1152      	asrs	r2, r2, #5
 8001958:	17db      	asrs	r3, r3, #31
 800195a:	1ad0      	subs	r0, r2, r3
 800195c:	4b68      	ldr	r3, [pc, #416]	; (8001b00 <imprimePantalla+0x1f0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a68      	ldr	r2, [pc, #416]	; (8001b04 <imprimePantalla+0x1f4>)
 8001962:	fb82 1203 	smull	r1, r2, r2, r3
 8001966:	1151      	asrs	r1, r2, #5
 8001968:	17da      	asrs	r2, r3, #31
 800196a:	1a8a      	subs	r2, r1, r2
 800196c:	2164      	movs	r1, #100	; 0x64
 800196e:	fb01 f202 	mul.w	r2, r1, r2
 8001972:	1a9a      	subs	r2, r3, r2
 8001974:	4613      	mov	r3, r2
 8001976:	4602      	mov	r2, r0
 8001978:	4963      	ldr	r1, [pc, #396]	; (8001b08 <imprimePantalla+0x1f8>)
 800197a:	4864      	ldr	r0, [pc, #400]	; (8001b0c <imprimePantalla+0x1fc>)
 800197c:	f003 ff50 	bl	8005820 <siprintf>

		break;
 8001980:	e018      	b.n	80019b4 <imprimePantalla+0xa4>
		case P_TEMP:
			sprintf(texto, " Sobretemp.");
 8001982:	4a62      	ldr	r2, [pc, #392]	; (8001b0c <imprimePantalla+0x1fc>)
 8001984:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <imprimePantalla+0x200>)
 8001986:	4614      	mov	r4, r2
 8001988:	cb07      	ldmia	r3!, {r0, r1, r2}
 800198a:	6020      	str	r0, [r4, #0]
 800198c:	6061      	str	r1, [r4, #4]
 800198e:	60a2      	str	r2, [r4, #8]
		break;
 8001990:	e010      	b.n	80019b4 <imprimePantalla+0xa4>
		case P_OL:
			sprintf(texto, " Sobrecarga");
 8001992:	4a5e      	ldr	r2, [pc, #376]	; (8001b0c <imprimePantalla+0x1fc>)
 8001994:	4b5f      	ldr	r3, [pc, #380]	; (8001b14 <imprimePantalla+0x204>)
 8001996:	4614      	mov	r4, r2
 8001998:	cb07      	ldmia	r3!, {r0, r1, r2}
 800199a:	6020      	str	r0, [r4, #0]
 800199c:	6061      	str	r1, [r4, #4]
 800199e:	60a2      	str	r2, [r4, #8]
		break;
 80019a0:	e008      	b.n	80019b4 <imprimePantalla+0xa4>
		case P_APAGADO:
			sprintf(texto, " ---    ");
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <imprimePantalla+0x1fc>)
 80019a4:	4b5c      	ldr	r3, [pc, #368]	; (8001b18 <imprimePantalla+0x208>)
 80019a6:	cb03      	ldmia	r3!, {r0, r1}
 80019a8:	6010      	str	r0, [r2, #0]
 80019aa:	6051      	str	r1, [r2, #4]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	7213      	strb	r3, [r2, #8]
		break;
 80019b0:	e000      	b.n	80019b4 <imprimePantalla+0xa4>
		break;
 80019b2:	bf00      	nop
	} //fin switch flag_protecV
	LCD_Print(texto);
 80019b4:	4855      	ldr	r0, [pc, #340]	; (8001b0c <imprimePantalla+0x1fc>)
 80019b6:	f7ff fb77 	bl	80010a8 <LCD_Print>
	LCD_GoToxy(5, 2);
 80019ba:	2102      	movs	r1, #2
 80019bc:	2005      	movs	r0, #5
 80019be:	f7ff fb40 	bl	8001042 <LCD_GoToxy>
	LCD_Print("               ");
 80019c2:	484d      	ldr	r0, [pc, #308]	; (8001af8 <imprimePantalla+0x1e8>)
 80019c4:	f7ff fb70 	bl	80010a8 <LCD_Print>
	LCD_GoToxy(5, 2);
 80019c8:	2102      	movs	r1, #2
 80019ca:	2005      	movs	r0, #5
 80019cc:	f7ff fb39 	bl	8001042 <LCD_GoToxy>
	switch (status_proteccionIo) {
 80019d0:	4b52      	ldr	r3, [pc, #328]	; (8001b1c <imprimePantalla+0x20c>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d860      	bhi.n	8001a9a <imprimePantalla+0x18a>
 80019d8:	a201      	add	r2, pc, #4	; (adr r2, 80019e0 <imprimePantalla+0xd0>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	08001a8b 	.word	0x08001a8b
 80019e4:	080019f1 	.word	0x080019f1
 80019e8:	08001a6b 	.word	0x08001a6b
 80019ec:	08001a7b 	.word	0x08001a7b
		default:
		break;
		case P_OK:
			if (RANGO_I == 1)
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <imprimePantalla+0x210>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d11a      	bne.n	8001a34 <imprimePantalla+0x124>
//					sprintf(texto, "Corriente: %5.2f[mA]", valor_Io);
				sprintf(texto, " %d.%d[mA]", valor_Io / 100, valor_Io % 100);
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <imprimePantalla+0x214>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a40      	ldr	r2, [pc, #256]	; (8001b04 <imprimePantalla+0x1f4>)
 8001a04:	fb82 1203 	smull	r1, r2, r2, r3
 8001a08:	1152      	asrs	r2, r2, #5
 8001a0a:	17db      	asrs	r3, r3, #31
 8001a0c:	1ad0      	subs	r0, r2, r3
 8001a0e:	4b45      	ldr	r3, [pc, #276]	; (8001b24 <imprimePantalla+0x214>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <imprimePantalla+0x1f4>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1151      	asrs	r1, r2, #5
 8001a1a:	17da      	asrs	r2, r3, #31
 8001a1c:	1a8a      	subs	r2, r1, r2
 8001a1e:	2164      	movs	r1, #100	; 0x64
 8001a20:	fb01 f202 	mul.w	r2, r1, r2
 8001a24:	1a9a      	subs	r2, r3, r2
 8001a26:	4613      	mov	r3, r2
 8001a28:	4602      	mov	r2, r0
 8001a2a:	493f      	ldr	r1, [pc, #252]	; (8001b28 <imprimePantalla+0x218>)
 8001a2c:	4837      	ldr	r0, [pc, #220]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a2e:	f003 fef7 	bl	8005820 <siprintf>
			else
//					sprintf(texto, "Corriente: %4.2f [A]", valor_Io);
				sprintf(texto, " %d.%d [A]", valor_Io / 100, valor_Io % 100);
		break;
 8001a32:	e033      	b.n	8001a9c <imprimePantalla+0x18c>
				sprintf(texto, " %d.%d [A]", valor_Io / 100, valor_Io % 100);
 8001a34:	4b3b      	ldr	r3, [pc, #236]	; (8001b24 <imprimePantalla+0x214>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <imprimePantalla+0x1f4>)
 8001a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a3e:	1152      	asrs	r2, r2, #5
 8001a40:	17db      	asrs	r3, r3, #31
 8001a42:	1ad0      	subs	r0, r2, r3
 8001a44:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <imprimePantalla+0x214>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a2e      	ldr	r2, [pc, #184]	; (8001b04 <imprimePantalla+0x1f4>)
 8001a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4e:	1151      	asrs	r1, r2, #5
 8001a50:	17da      	asrs	r2, r3, #31
 8001a52:	1a8a      	subs	r2, r1, r2
 8001a54:	2164      	movs	r1, #100	; 0x64
 8001a56:	fb01 f202 	mul.w	r2, r1, r2
 8001a5a:	1a9a      	subs	r2, r3, r2
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4932      	ldr	r1, [pc, #200]	; (8001b2c <imprimePantalla+0x21c>)
 8001a62:	482a      	ldr	r0, [pc, #168]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a64:	f003 fedc 	bl	8005820 <siprintf>
		break;
 8001a68:	e018      	b.n	8001a9c <imprimePantalla+0x18c>
		case P_TEMP:
			sprintf(texto, " Sobretemp.");
 8001a6a:	4a28      	ldr	r2, [pc, #160]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <imprimePantalla+0x200>)
 8001a6e:	4614      	mov	r4, r2
 8001a70:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a72:	6020      	str	r0, [r4, #0]
 8001a74:	6061      	str	r1, [r4, #4]
 8001a76:	60a2      	str	r2, [r4, #8]
		break;
 8001a78:	e010      	b.n	8001a9c <imprimePantalla+0x18c>
		case P_OL:
			sprintf(texto, " Sobrecarga");
 8001a7a:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <imprimePantalla+0x204>)
 8001a7e:	4614      	mov	r4, r2
 8001a80:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a82:	6020      	str	r0, [r4, #0]
 8001a84:	6061      	str	r1, [r4, #4]
 8001a86:	60a2      	str	r2, [r4, #8]
		break;
 8001a88:	e008      	b.n	8001a9c <imprimePantalla+0x18c>
		case P_APAGADO:
			sprintf(texto, " ---    ");
 8001a8a:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a8c:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <imprimePantalla+0x208>)
 8001a8e:	cb03      	ldmia	r3!, {r0, r1}
 8001a90:	6010      	str	r0, [r2, #0]
 8001a92:	6051      	str	r1, [r2, #4]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	7213      	strb	r3, [r2, #8]
		break;
 8001a98:	e000      	b.n	8001a9c <imprimePantalla+0x18c>
		break;
 8001a9a:	bf00      	nop

	} //fin switch flag_protecI
	LCD_Print(texto);
 8001a9c:	481b      	ldr	r0, [pc, #108]	; (8001b0c <imprimePantalla+0x1fc>)
 8001a9e:	f7ff fb03 	bl	80010a8 <LCD_Print>
	LCD_GoToxy(5, 3);
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	2005      	movs	r0, #5
 8001aa6:	f7ff facc 	bl	8001042 <LCD_GoToxy>
	LCD_Print("               ");
 8001aaa:	4813      	ldr	r0, [pc, #76]	; (8001af8 <imprimePantalla+0x1e8>)
 8001aac:	f7ff fafc 	bl	80010a8 <LCD_Print>
	LCD_GoToxy(5, 3);
 8001ab0:	2103      	movs	r1, #3
 8001ab2:	2005      	movs	r0, #5
 8001ab4:	f7ff fac5 	bl	8001042 <LCD_GoToxy>
	sprintf(texto, " %d.%d [deg]", valor_fase / 10, valor_fase % 10);
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <imprimePantalla+0x220>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1d      	ldr	r2, [pc, #116]	; (8001b34 <imprimePantalla+0x224>)
 8001abe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac2:	08d8      	lsrs	r0, r3, #3
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <imprimePantalla+0x220>)
 8001ac6:	6819      	ldr	r1, [r3, #0]
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <imprimePantalla+0x224>)
 8001aca:	fba3 2301 	umull	r2, r3, r3, r1
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	1aca      	subs	r2, r1, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	4602      	mov	r2, r0
 8001ade:	4916      	ldr	r1, [pc, #88]	; (8001b38 <imprimePantalla+0x228>)
 8001ae0:	480a      	ldr	r0, [pc, #40]	; (8001b0c <imprimePantalla+0x1fc>)
 8001ae2:	f003 fe9d 	bl	8005820 <siprintf>
	LCD_Print(texto);
 8001ae6:	4809      	ldr	r0, [pc, #36]	; (8001b0c <imprimePantalla+0x1fc>)
 8001ae8:	f7ff fade 	bl	80010a8 <LCD_Print>

	refrescaPantalla = 500;
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <imprimePantalla+0x22c>)
 8001aee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001af2:	801a      	strh	r2, [r3, #0]

} //fin imprimePantalla ()
 8001af4:	bf00      	nop
 8001af6:	bd98      	pop	{r3, r4, r7, pc}
 8001af8:	0800724c 	.word	0x0800724c
 8001afc:	20000257 	.word	0x20000257
 8001b00:	2000094c 	.word	0x2000094c
 8001b04:	51eb851f 	.word	0x51eb851f
 8001b08:	0800725c 	.word	0x0800725c
 8001b0c:	200002e0 	.word	0x200002e0
 8001b10:	08007268 	.word	0x08007268
 8001b14:	08007274 	.word	0x08007274
 8001b18:	08007280 	.word	0x08007280
 8001b1c:	20000258 	.word	0x20000258
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	20000948 	.word	0x20000948
 8001b28:	0800728c 	.word	0x0800728c
 8001b2c:	08007298 	.word	0x08007298
 8001b30:	20000250 	.word	0x20000250
 8001b34:	cccccccd 	.word	0xcccccccd
 8001b38:	080072a4 	.word	0x080072a4
 8001b3c:	2000000e 	.word	0x2000000e

08001b40 <protecciones>:


void protecciones (void){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0

	//HAL_Delay(100);
//	HAL_GPIO_TogglePin(LED_Board_GPIO_Port, LED_Board_Pin);
	p_tempVo = HAL_GPIO_ReadPin(P_Temp_Vo_GPIO_Port, P_Temp_Vo_Pin);
 8001b44:	2110      	movs	r1, #16
 8001b46:	48b2      	ldr	r0, [pc, #712]	; (8001e10 <protecciones+0x2d0>)
 8001b48:	f001 fd0a 	bl	8003560 <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4bb0      	ldr	r3, [pc, #704]	; (8001e14 <protecciones+0x2d4>)
 8001b52:	701a      	strb	r2, [r3, #0]
	p_tempIo = HAL_GPIO_ReadPin(P_Temp_Io_GPIO_Port, P_Temp_Io_Pin);
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	48ae      	ldr	r0, [pc, #696]	; (8001e10 <protecciones+0x2d0>)
 8001b58:	f001 fd02 	bl	8003560 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4bad      	ldr	r3, [pc, #692]	; (8001e18 <protecciones+0x2d8>)
 8001b62:	701a      	strb	r2, [r3, #0]
	poteVo = HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin);
 8001b64:	2140      	movs	r1, #64	; 0x40
 8001b66:	48aa      	ldr	r0, [pc, #680]	; (8001e10 <protecciones+0x2d0>)
 8001b68:	f001 fcfa 	bl	8003560 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461a      	mov	r2, r3
 8001b70:	4baa      	ldr	r3, [pc, #680]	; (8001e1c <protecciones+0x2dc>)
 8001b72:	701a      	strb	r2, [r3, #0]
	poteIo = HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin);
 8001b74:	2102      	movs	r1, #2
 8001b76:	48aa      	ldr	r0, [pc, #680]	; (8001e20 <protecciones+0x2e0>)
 8001b78:	f001 fcf2 	bl	8003560 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4ba8      	ldr	r3, [pc, #672]	; (8001e24 <protecciones+0x2e4>)
 8001b82:	701a      	strb	r2, [r3, #0]

	switch (status_proteccionVo) {
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <protecciones+0x2e8>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b06      	cmp	r3, #6
 8001b8a:	f200 80c7 	bhi.w	8001d1c <protecciones+0x1dc>
 8001b8e:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <protecciones+0x54>)
 8001b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b94:	08001bb1 	.word	0x08001bb1
 8001b98:	08001c0f 	.word	0x08001c0f
 8001b9c:	08001c65 	.word	0x08001c65
 8001ba0:	08001c65 	.word	0x08001c65
 8001ba4:	08001d1d 	.word	0x08001d1d
 8001ba8:	08001c65 	.word	0x08001c65
 8001bac:	08001cd9 	.word	0x08001cd9
		case P_APAGADO:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //fuente prendida
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bb6:	489a      	ldr	r0, [pc, #616]	; (8001e20 <protecciones+0x2e0>)
 8001bb8:	f001 fce9 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 1); //apaga HAB
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	4897      	ldr	r0, [pc, #604]	; (8001e20 <protecciones+0x2e0>)
 8001bc4:	f001 fce3 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 0); //y apaga el led
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4894      	ldr	r0, [pc, #592]	; (8001e20 <protecciones+0x2e0>)
 8001bd0:	f001 fcdd 	bl	800358e <HAL_GPIO_WritePin>

			if (poteVo != 0)
 8001bd4:	4b91      	ldr	r3, [pc, #580]	; (8001e1c <protecciones+0x2dc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f040 80a1 	bne.w	8001d20 <protecciones+0x1e0>
				break; //pote distinto de 0
			if (p_tempVo != 0)
 8001bde:	4b8d      	ldr	r3, [pc, #564]	; (8001e14 <protecciones+0x2d4>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 809e 	bne.w	8001d24 <protecciones+0x1e4>
				break; //hay alerta de temperatura
			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L)
 8001be8:	4b90      	ldr	r3, [pc, #576]	; (8001e2c <protecciones+0x2ec>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	f000 80ac 	beq.w	8001d4a <protecciones+0x20a>
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <protecciones+0x2ec>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	f000 80a7 	beq.w	8001d4a <protecciones+0x20a>
				break; //hay alerta de sobre carga

			if (pulsadorVo == FALL)
 8001bfc:	4b8c      	ldr	r3, [pc, #560]	; (8001e30 <protecciones+0x2f0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	f040 8091 	bne.w	8001d28 <protecciones+0x1e8>
				status_proteccionVo = P_OK;
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <protecciones+0x2e8>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		break;
 8001c0c:	e08c      	b.n	8001d28 <protecciones+0x1e8>
		case P_OK:

			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 0); //prende HAB
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c14:	4882      	ldr	r0, [pc, #520]	; (8001e20 <protecciones+0x2e0>)
 8001c16:	f001 fcba 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 1); //y prende el led
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c20:	487f      	ldr	r0, [pc, #508]	; (8001e20 <protecciones+0x2e0>)
 8001c22:	f001 fcb4 	bl	800358e <HAL_GPIO_WritePin>

			if (pulsadorVo == FALL) {
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <protecciones+0x2f0>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d103      	bne.n	8001c36 <protecciones+0xf6>
				status_proteccionVo = P_APAGADO;
 8001c2e:	4b7e      	ldr	r3, [pc, #504]	; (8001e28 <protecciones+0x2e8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
				//avisa por pantalla
				break;
 8001c34:	e089      	b.n	8001d4a <protecciones+0x20a>
			}

			if (p_tempVo != 0) {
 8001c36:	4b77      	ldr	r3, [pc, #476]	; (8001e14 <protecciones+0x2d4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <protecciones+0x106>
				status_proteccionVo = P_TEMP;
 8001c3e:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <protecciones+0x2e8>)
 8001c40:	2202      	movs	r2, #2
 8001c42:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 8001c44:	e081      	b.n	8001d4a <protecciones+0x20a>
			}

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 8001c46:	4b79      	ldr	r3, [pc, #484]	; (8001e2c <protecciones+0x2ec>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d003      	beq.n	8001c56 <protecciones+0x116>
 8001c4e:	4b77      	ldr	r3, [pc, #476]	; (8001e2c <protecciones+0x2ec>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d16a      	bne.n	8001d2c <protecciones+0x1ec>
				status_proteccionVo = P_OL;
 8001c56:	4b74      	ldr	r3, [pc, #464]	; (8001e28 <protecciones+0x2e8>)
 8001c58:	2203      	movs	r2, #3
 8001c5a:	701a      	strb	r2, [r3, #0]
				flag_relay = 1;
 8001c5c:	4b75      	ldr	r3, [pc, #468]	; (8001e34 <protecciones+0x2f4>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 8001c62:	e072      	b.n	8001d4a <protecciones+0x20a>
		break;
		case P_TEMP:
		case P_OL:
		case P_DESHAB:

			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 1); //apaga HAB
 8001c64:	2201      	movs	r2, #1
 8001c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6a:	486d      	ldr	r0, [pc, #436]	; (8001e20 <protecciones+0x2e0>)
 8001c6c:	f001 fc8f 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 0); //y apaga el led
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c76:	486a      	ldr	r0, [pc, #424]	; (8001e20 <protecciones+0x2e0>)
 8001c78:	f001 fc89 	bl	800358e <HAL_GPIO_WritePin>
			if (flag_relay != 0)
 8001c7c:	4b6d      	ldr	r3, [pc, #436]	; (8001e34 <protecciones+0x2f4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <protecciones+0x150>
				HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c8a:	4865      	ldr	r0, [pc, #404]	; (8001e20 <protecciones+0x2e0>)
 8001c8c:	f001 fc7f 	bl	800358e <HAL_GPIO_WritePin>

			if (p_tempVo != 0)
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <protecciones+0x2d4>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d14b      	bne.n	8001d30 <protecciones+0x1f0>
				break; //hay alerta de temperatura

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <protecciones+0x2ec>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d054      	beq.n	8001d4a <protecciones+0x20a>
 8001ca0:	4b62      	ldr	r3, [pc, #392]	; (8001e2c <protecciones+0x2ec>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d050      	beq.n	8001d4a <protecciones+0x20a>
				break; //hay alerta de sobre tensión
			}

			if (poteVo != 0)
 8001ca8:	4b5c      	ldr	r3, [pc, #368]	; (8001e1c <protecciones+0x2dc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d141      	bne.n	8001d34 <protecciones+0x1f4>
				break; // pote distinto de 0

			if (pulsadorVo == FALL) {
 8001cb0:	4b5f      	ldr	r3, [pc, #380]	; (8001e30 <protecciones+0x2f0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d13f      	bne.n	8001d38 <protecciones+0x1f8>

				if (flag_relay != 0) {
 8001cb8:	4b5e      	ldr	r3, [pc, #376]	; (8001e34 <protecciones+0x2f4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <protecciones+0x190>
					status_proteccionVo = P_FUENTE;
 8001cc0:	4b59      	ldr	r3, [pc, #356]	; (8001e28 <protecciones+0x2e8>)
 8001cc2:	2206      	movs	r2, #6
 8001cc4:	701a      	strb	r2, [r3, #0]
					transitorioFunete = 1000; //en ms.
 8001cc6:	4b5c      	ldr	r3, [pc, #368]	; (8001e38 <protecciones+0x2f8>)
 8001cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ccc:	801a      	strh	r2, [r3, #0]
				} else {
					status_proteccionVo = P_OK;
				}
			}

		break;
 8001cce:	e033      	b.n	8001d38 <protecciones+0x1f8>
					status_proteccionVo = P_OK;
 8001cd0:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <protecciones+0x2e8>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
		break;
 8001cd6:	e02f      	b.n	8001d38 <protecciones+0x1f8>
		case P_FUENTE:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //prende fuente
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cde:	4850      	ldr	r0, [pc, #320]	; (8001e20 <protecciones+0x2e0>)
 8001ce0:	f001 fc55 	bl	800358e <HAL_GPIO_WritePin>

			if (transitorioFunete != 0) {
 8001ce4:	4b54      	ldr	r3, [pc, #336]	; (8001e38 <protecciones+0x2f8>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d127      	bne.n	8001d3c <protecciones+0x1fc>
				break; //fatal para el descuento de 1s.
			}

			if (p_tempVo != 0) {
 8001cec:	4b49      	ldr	r3, [pc, #292]	; (8001e14 <protecciones+0x2d4>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d125      	bne.n	8001d40 <protecciones+0x200>
				break; //hay alerta de temperatura
			}

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <protecciones+0x2ec>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d026      	beq.n	8001d4a <protecciones+0x20a>
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <protecciones+0x2ec>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d022      	beq.n	8001d4a <protecciones+0x20a>
				break; //hay alerta de sobre carga
			}

			if (poteVo != 0) {
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <protecciones+0x2dc>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d11b      	bne.n	8001d44 <protecciones+0x204>
				break; //pote distinto de 0.
			}

			if (pulsadorVo == FALL) {
 8001d0c:	4b48      	ldr	r3, [pc, #288]	; (8001e30 <protecciones+0x2f0>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d119      	bne.n	8001d48 <protecciones+0x208>
				status_proteccionVo = P_OK;
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <protecciones+0x2e8>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001d1a:	e015      	b.n	8001d48 <protecciones+0x208>
		default:
		break;
 8001d1c:	bf00      	nop
 8001d1e:	e014      	b.n	8001d4a <protecciones+0x20a>
				break; //pote distinto de 0
 8001d20:	bf00      	nop
 8001d22:	e012      	b.n	8001d4a <protecciones+0x20a>
				break; //hay alerta de temperatura
 8001d24:	bf00      	nop
 8001d26:	e010      	b.n	8001d4a <protecciones+0x20a>
		break;
 8001d28:	bf00      	nop
 8001d2a:	e00e      	b.n	8001d4a <protecciones+0x20a>
		break;
 8001d2c:	bf00      	nop
 8001d2e:	e00c      	b.n	8001d4a <protecciones+0x20a>
				break; //hay alerta de temperatura
 8001d30:	bf00      	nop
 8001d32:	e00a      	b.n	8001d4a <protecciones+0x20a>
				break; // pote distinto de 0
 8001d34:	bf00      	nop
 8001d36:	e008      	b.n	8001d4a <protecciones+0x20a>
		break;
 8001d38:	bf00      	nop
 8001d3a:	e006      	b.n	8001d4a <protecciones+0x20a>
				break; //fatal para el descuento de 1s.
 8001d3c:	bf00      	nop
 8001d3e:	e004      	b.n	8001d4a <protecciones+0x20a>
				break; //hay alerta de temperatura
 8001d40:	bf00      	nop
 8001d42:	e002      	b.n	8001d4a <protecciones+0x20a>
				break; //pote distinto de 0.
 8001d44:	bf00      	nop
 8001d46:	e000      	b.n	8001d4a <protecciones+0x20a>
		break;
 8001d48:	bf00      	nop

	} //end switch status_proteccionVo

	switch (status_proteccionIo) {
 8001d4a:	4b3c      	ldr	r3, [pc, #240]	; (8001e3c <protecciones+0x2fc>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	f200 80e5 	bhi.w	8001f1e <protecciones+0x3de>
 8001d54:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <protecciones+0x21c>)
 8001d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5a:	bf00      	nop
 8001d5c:	08001d79 	.word	0x08001d79
 8001d60:	08001dd7 	.word	0x08001dd7
 8001d64:	08001e67 	.word	0x08001e67
 8001d68:	08001e67 	.word	0x08001e67
 8001d6c:	08001f1f 	.word	0x08001f1f
 8001d70:	08001e67 	.word	0x08001e67
 8001d74:	08001edb 	.word	0x08001edb
		case P_APAGADO:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //fuente prendida
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d7e:	4828      	ldr	r0, [pc, #160]	; (8001e20 <protecciones+0x2e0>)
 8001d80:	f001 fc05 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 1); //apaga HAB
 8001d84:	2201      	movs	r2, #1
 8001d86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d8a:	4825      	ldr	r0, [pc, #148]	; (8001e20 <protecciones+0x2e0>)
 8001d8c:	f001 fbff 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 0); //y apaga el led
 8001d90:	2200      	movs	r2, #0
 8001d92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d96:	4822      	ldr	r0, [pc, #136]	; (8001e20 <protecciones+0x2e0>)
 8001d98:	f001 fbf9 	bl	800358e <HAL_GPIO_WritePin>

			if (poteIo != 0)
 8001d9c:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <protecciones+0x2e4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f040 80be 	bne.w	8001f22 <protecciones+0x3e2>
				break; //pote distinto de 0
			if (p_tempIo != 0)
 8001da6:	4b1c      	ldr	r3, [pc, #112]	; (8001e18 <protecciones+0x2d8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f040 80bb 	bne.w	8001f26 <protecciones+0x3e6>
				break; //hay alerta de temperatura
			if (P_OL_Io == RISE || P_OL_Io == HIGH_L)
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <protecciones+0x300>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	f000 80c9 	beq.w	8001f4c <protecciones+0x40c>
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <protecciones+0x300>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	f000 80c4 	beq.w	8001f4c <protecciones+0x40c>
				break; //hay alerta de sobre carga

			if (pulsadorIo == FALL)
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <protecciones+0x304>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	f040 80ae 	bne.w	8001f2a <protecciones+0x3ea>
				status_proteccionIo = P_OK;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <protecciones+0x2fc>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
		break;
 8001dd4:	e0a9      	b.n	8001f2a <protecciones+0x3ea>
		case P_OK:

			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 0); //prende HAB
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <protecciones+0x2e0>)
 8001dde:	f001 fbd6 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 1); //y prende el led
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <protecciones+0x2e0>)
 8001dea:	f001 fbd0 	bl	800358e <HAL_GPIO_WritePin>

			if (pulsadorIo == FALL) {
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <protecciones+0x304>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <protecciones+0x2be>
				status_proteccionIo = P_APAGADO;
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <protecciones+0x2fc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
				//avisa por pantalla
				break;
 8001dfc:	e0a6      	b.n	8001f4c <protecciones+0x40c>
			}

			if (p_tempIo != 0) {
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <protecciones+0x2d8>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <protecciones+0x308>
				status_proteccionIo = P_TEMP;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <protecciones+0x2fc>)
 8001e08:	2202      	movs	r2, #2
 8001e0a:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 8001e0c:	e09e      	b.n	8001f4c <protecciones+0x40c>
 8001e0e:	bf00      	nop
 8001e10:	40010800 	.word	0x40010800
 8001e14:	20000259 	.word	0x20000259
 8001e18:	2000025a 	.word	0x2000025a
 8001e1c:	2000025b 	.word	0x2000025b
 8001e20:	40010c00 	.word	0x40010c00
 8001e24:	2000025c 	.word	0x2000025c
 8001e28:	20000257 	.word	0x20000257
 8001e2c:	20000212 	.word	0x20000212
 8001e30:	20000210 	.word	0x20000210
 8001e34:	20000256 	.word	0x20000256
 8001e38:	2000000c 	.word	0x2000000c
 8001e3c:	20000258 	.word	0x20000258
 8001e40:	20000213 	.word	0x20000213
 8001e44:	20000211 	.word	0x20000211
			}

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 8001e48:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <protecciones+0x410>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <protecciones+0x318>
 8001e50:	4b3f      	ldr	r3, [pc, #252]	; (8001f50 <protecciones+0x410>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d16a      	bne.n	8001f2e <protecciones+0x3ee>
				status_proteccionIo = P_OL;
 8001e58:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <protecciones+0x414>)
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	701a      	strb	r2, [r3, #0]
				flag_relay = 1;
 8001e5e:	4b3e      	ldr	r3, [pc, #248]	; (8001f58 <protecciones+0x418>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 8001e64:	e072      	b.n	8001f4c <protecciones+0x40c>
		break;
		case P_TEMP:
		case P_OL:
		case P_DESHAB:

			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 1); //apaga HAB
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e6c:	483b      	ldr	r0, [pc, #236]	; (8001f5c <protecciones+0x41c>)
 8001e6e:	f001 fb8e 	bl	800358e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 0); //y apaga el led
 8001e72:	2200      	movs	r2, #0
 8001e74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e78:	4838      	ldr	r0, [pc, #224]	; (8001f5c <protecciones+0x41c>)
 8001e7a:	f001 fb88 	bl	800358e <HAL_GPIO_WritePin>
			if (flag_relay != 0)
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <protecciones+0x418>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <protecciones+0x352>
				HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 8001e86:	2200      	movs	r2, #0
 8001e88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e8c:	4833      	ldr	r0, [pc, #204]	; (8001f5c <protecciones+0x41c>)
 8001e8e:	f001 fb7e 	bl	800358e <HAL_GPIO_WritePin>

			if (p_tempIo != 0)
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <protecciones+0x420>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d14b      	bne.n	8001f32 <protecciones+0x3f2>
				break; //hay alerta de temperatura

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <protecciones+0x410>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d054      	beq.n	8001f4c <protecciones+0x40c>
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <protecciones+0x410>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d050      	beq.n	8001f4c <protecciones+0x40c>
				break; //hay alerta de sobre tensión
			}

			if (poteIo != 0)
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <protecciones+0x424>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d141      	bne.n	8001f36 <protecciones+0x3f6>
				break; // pote distinto de 0

			if (pulsadorIo == FALL) {
 8001eb2:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <protecciones+0x428>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d13f      	bne.n	8001f3a <protecciones+0x3fa>

				if (flag_relay != 0) {
 8001eba:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <protecciones+0x418>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d007      	beq.n	8001ed2 <protecciones+0x392>
					status_proteccionIo = P_FUENTE;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <protecciones+0x414>)
 8001ec4:	2206      	movs	r2, #6
 8001ec6:	701a      	strb	r2, [r3, #0]
					transitorioFunete = 1000; //en ms.
 8001ec8:	4b28      	ldr	r3, [pc, #160]	; (8001f6c <protecciones+0x42c>)
 8001eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ece:	801a      	strh	r2, [r3, #0]
				} else {
					status_proteccionIo = P_OK;
				}
			}

		break;
 8001ed0:	e033      	b.n	8001f3a <protecciones+0x3fa>
					status_proteccionIo = P_OK;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <protecciones+0x414>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	701a      	strb	r2, [r3, #0]
		break;
 8001ed8:	e02f      	b.n	8001f3a <protecciones+0x3fa>
		case P_FUENTE:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //prende fuente
 8001eda:	2201      	movs	r2, #1
 8001edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ee0:	481e      	ldr	r0, [pc, #120]	; (8001f5c <protecciones+0x41c>)
 8001ee2:	f001 fb54 	bl	800358e <HAL_GPIO_WritePin>

			if (transitorioFunete != 0) {
 8001ee6:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <protecciones+0x42c>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d127      	bne.n	8001f3e <protecciones+0x3fe>
				break; //fatal para el descuento de 1s.
			}

			if (p_tempIo != 0) {
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <protecciones+0x420>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d125      	bne.n	8001f42 <protecciones+0x402>
				break; //hay alerta de temperatura
			}

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <protecciones+0x410>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d026      	beq.n	8001f4c <protecciones+0x40c>
 8001efe:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <protecciones+0x410>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d022      	beq.n	8001f4c <protecciones+0x40c>
				break; //hay alerta de sobre carga
			}

			if (poteIo != 0) {
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <protecciones+0x424>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11b      	bne.n	8001f46 <protecciones+0x406>
				break; //pote distinto de 0.
			}

			if (pulsadorIo == FALL) {
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <protecciones+0x428>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d119      	bne.n	8001f4a <protecciones+0x40a>
				status_proteccionIo = P_OK;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <protecciones+0x414>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
			}

		break;
 8001f1c:	e015      	b.n	8001f4a <protecciones+0x40a>
		default:
		break;
 8001f1e:	bf00      	nop
 8001f20:	e014      	b.n	8001f4c <protecciones+0x40c>
				break; //pote distinto de 0
 8001f22:	bf00      	nop
 8001f24:	e012      	b.n	8001f4c <protecciones+0x40c>
				break; //hay alerta de temperatura
 8001f26:	bf00      	nop
 8001f28:	e010      	b.n	8001f4c <protecciones+0x40c>
		break;
 8001f2a:	bf00      	nop
 8001f2c:	e00e      	b.n	8001f4c <protecciones+0x40c>
		break;
 8001f2e:	bf00      	nop
 8001f30:	e00c      	b.n	8001f4c <protecciones+0x40c>
				break; //hay alerta de temperatura
 8001f32:	bf00      	nop
 8001f34:	e00a      	b.n	8001f4c <protecciones+0x40c>
				break; // pote distinto de 0
 8001f36:	bf00      	nop
 8001f38:	e008      	b.n	8001f4c <protecciones+0x40c>
		break;
 8001f3a:	bf00      	nop
 8001f3c:	e006      	b.n	8001f4c <protecciones+0x40c>
				break; //fatal para el descuento de 1s.
 8001f3e:	bf00      	nop
 8001f40:	e004      	b.n	8001f4c <protecciones+0x40c>
				break; //hay alerta de temperatura
 8001f42:	bf00      	nop
 8001f44:	e002      	b.n	8001f4c <protecciones+0x40c>
				break; //pote distinto de 0.
 8001f46:	bf00      	nop
 8001f48:	e000      	b.n	8001f4c <protecciones+0x40c>
		break;
 8001f4a:	bf00      	nop
		  }
		  break;
	  } //Fin switch Io
*/

} //fin protecciones ()
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000213 	.word	0x20000213
 8001f54:	20000258 	.word	0x20000258
 8001f58:	20000256 	.word	0x20000256
 8001f5c:	40010c00 	.word	0x40010c00
 8001f60:	2000025a 	.word	0x2000025a
 8001f64:	2000025c 	.word	0x2000025c
 8001f68:	20000211 	.word	0x20000211
 8001f6c:	2000000c 	.word	0x2000000c

08001f70 <update_entradas>:

void  update_entradas(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0

	read_pulsadorVo = HAL_GPIO_ReadPin(Pul_hab_Vo_GPIO_Port, Pul_hab_Vo_Pin);
 8001f74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f78:	480a      	ldr	r0, [pc, #40]	; (8001fa4 <update_entradas+0x34>)
 8001f7a:	f001 faf1 	bl	8003560 <HAL_GPIO_ReadPin>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	461a      	mov	r2, r3
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <update_entradas+0x38>)
 8001f84:	701a      	strb	r2, [r3, #0]
	read_pulsadorIo = HAL_GPIO_ReadPin(Pul_hab_Io_GPIO_Port, Pul_hab_Io_Pin);
 8001f86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f8a:	4806      	ldr	r0, [pc, #24]	; (8001fa4 <update_entradas+0x34>)
 8001f8c:	f001 fae8 	bl	8003560 <HAL_GPIO_ReadPin>
 8001f90:	4603      	mov	r3, r0
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <update_entradas+0x3c>)
 8001f96:	701a      	strb	r2, [r3, #0]

	lectura_entradas = 100;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <update_entradas+0x40>)
 8001f9a:	2264      	movs	r2, #100	; 0x64
 8001f9c:	701a      	strb	r2, [r3, #0]

} //fin update_entradas()
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	20000214 	.word	0x20000214
 8001fac:	20000215 	.word	0x20000215
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <check_entradas>:

void check_entradas (void){
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

	if (read_pulsadorVo) {
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <check_entradas+0x88>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <check_entradas+0x24>
		if (last_pulsadorVo) {
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <check_entradas+0x8c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <check_entradas+0x1c>
			pulsadorVo = HIGH_L;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <check_entradas+0x90>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e00e      	b.n	8001fee <check_entradas+0x3a>
		} else {
			pulsadorVo = RISE;
 8001fd0:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <check_entradas+0x90>)
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	701a      	strb	r2, [r3, #0]
 8001fd6:	e00a      	b.n	8001fee <check_entradas+0x3a>
		}
	} else {
		if (last_pulsadorVo) {
 8001fd8:	4b19      	ldr	r3, [pc, #100]	; (8002040 <check_entradas+0x8c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <check_entradas+0x34>
			pulsadorVo = FALL;
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <check_entradas+0x90>)
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <check_entradas+0x3a>
		} else {
			pulsadorVo = LOW_L;
 8001fe8:	4b16      	ldr	r3, [pc, #88]	; (8002044 <check_entradas+0x90>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
		}
	} //end if pulsadorVo

	if (read_pulsadorIo) {
 8001fee:	4b16      	ldr	r3, [pc, #88]	; (8002048 <check_entradas+0x94>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <check_entradas+0x5a>
		if (last_pulsadorIo) {
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <check_entradas+0x98>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <check_entradas+0x52>
			pulsadorIo = HIGH_L;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <check_entradas+0x9c>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	e00e      	b.n	8002024 <check_entradas+0x70>
		} else {
			pulsadorIo = RISE;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <check_entradas+0x9c>)
 8002008:	2203      	movs	r2, #3
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e00a      	b.n	8002024 <check_entradas+0x70>
		}
	} else {
		if (last_pulsadorIo) {
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <check_entradas+0x98>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <check_entradas+0x6a>
			pulsadorIo = FALL;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <check_entradas+0x9c>)
 8002018:	2202      	movs	r2, #2
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e002      	b.n	8002024 <check_entradas+0x70>
		} else {
			pulsadorIo = LOW_L;
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <check_entradas+0x9c>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
		}
	} //end if pulsadorIo

	last_pulsadorIo = read_pulsadorIo;
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <check_entradas+0x94>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <check_entradas+0x98>)
 800202a:	701a      	strb	r2, [r3, #0]
	last_pulsadorVo = read_pulsadorVo;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <check_entradas+0x88>)
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <check_entradas+0x8c>)
 8002032:	701a      	strb	r2, [r3, #0]

} //fin check_entradas()
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr
 800203c:	20000214 	.word	0x20000214
 8002040:	20000218 	.word	0x20000218
 8002044:	20000210 	.word	0x20000210
 8002048:	20000215 	.word	0x20000215
 800204c:	20000219 	.word	0x20000219
 8002050:	20000211 	.word	0x20000211

08002054 <update_proteccion>:
 * Detalle: lee el las entradas de las protecciones de sobre carga, tras cumplirse
 * 			el tiempo de lectura (condicion externa a la funcion)
 *
 *
 */
void  update_proteccion(void){
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0

	read_OL_Vo = HAL_GPIO_ReadPin(P_OL_Vo_GPIO_Port, P_OL_Vo_Pin);
 8002058:	2120      	movs	r1, #32
 800205a:	480a      	ldr	r0, [pc, #40]	; (8002084 <update_proteccion+0x30>)
 800205c:	f001 fa80 	bl	8003560 <HAL_GPIO_ReadPin>
 8002060:	4603      	mov	r3, r0
 8002062:	461a      	mov	r2, r3
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <update_proteccion+0x34>)
 8002066:	701a      	strb	r2, [r3, #0]
	read_OL_Io = HAL_GPIO_ReadPin(P_OL_Io_GPIO_Port, P_OL_Io_Pin);
 8002068:	2101      	movs	r1, #1
 800206a:	4808      	ldr	r0, [pc, #32]	; (800208c <update_proteccion+0x38>)
 800206c:	f001 fa78 	bl	8003560 <HAL_GPIO_ReadPin>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	4b06      	ldr	r3, [pc, #24]	; (8002090 <update_proteccion+0x3c>)
 8002076:	701a      	strb	r2, [r3, #0]

	lectura_proteccion = 10;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <update_proteccion+0x40>)
 800207a:	220a      	movs	r2, #10
 800207c:	701a      	strb	r2, [r3, #0]

} //fin update_entradas()
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40010800 	.word	0x40010800
 8002088:	20000216 	.word	0x20000216
 800208c:	40010c00 	.word	0x40010c00
 8002090:	20000217 	.word	0x20000217
 8002094:	20000001 	.word	0x20000001

08002098 <check_proteccion>:

void check_proteccion (void){
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0

	if (read_OL_Vo) {
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <check_proteccion+0x88>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <check_proteccion+0x24>
			if (last_OL_Vo) {
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <check_proteccion+0x8c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <check_proteccion+0x1c>
				P_OL_Vo = HIGH_L;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <check_proteccion+0x90>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e00e      	b.n	80020d2 <check_proteccion+0x3a>
			} else {
				P_OL_Vo = RISE;
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <check_proteccion+0x90>)
 80020b6:	2203      	movs	r2, #3
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e00a      	b.n	80020d2 <check_proteccion+0x3a>
			}
		} else {
			if (last_OL_Vo) {
 80020bc:	4b19      	ldr	r3, [pc, #100]	; (8002124 <check_proteccion+0x8c>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <check_proteccion+0x34>
				P_OL_Vo = FALL;
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <check_proteccion+0x90>)
 80020c6:	2202      	movs	r2, #2
 80020c8:	701a      	strb	r2, [r3, #0]
 80020ca:	e002      	b.n	80020d2 <check_proteccion+0x3a>
			} else {
				P_OL_Vo = LOW_L;
 80020cc:	4b16      	ldr	r3, [pc, #88]	; (8002128 <check_proteccion+0x90>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
			}
		} //end if P_OL_Vo

		if (read_OL_Io) {
 80020d2:	4b16      	ldr	r3, [pc, #88]	; (800212c <check_proteccion+0x94>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <check_proteccion+0x5a>
			if (last_OL_Io) {
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <check_proteccion+0x98>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <check_proteccion+0x52>
				P_OL_Io = HIGH_L;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <check_proteccion+0x9c>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
 80020e8:	e00e      	b.n	8002108 <check_proteccion+0x70>
			} else {
				P_OL_Io = RISE;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <check_proteccion+0x9c>)
 80020ec:	2203      	movs	r2, #3
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e00a      	b.n	8002108 <check_proteccion+0x70>
			}
		} else {
			if (last_OL_Io) {
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <check_proteccion+0x98>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <check_proteccion+0x6a>
				P_OL_Io = FALL;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <check_proteccion+0x9c>)
 80020fc:	2202      	movs	r2, #2
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	e002      	b.n	8002108 <check_proteccion+0x70>
			} else {
				P_OL_Io = LOW_L;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <check_proteccion+0x9c>)
 8002104:	2200      	movs	r2, #0
 8002106:	701a      	strb	r2, [r3, #0]
			}
		} //end if P_OL_Io

		last_OL_Io = read_OL_Io;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <check_proteccion+0x94>)
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b08      	ldr	r3, [pc, #32]	; (8002130 <check_proteccion+0x98>)
 800210e:	701a      	strb	r2, [r3, #0]
		last_OL_Vo = read_OL_Vo;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <check_proteccion+0x88>)
 8002112:	781a      	ldrb	r2, [r3, #0]
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <check_proteccion+0x8c>)
 8002116:	701a      	strb	r2, [r3, #0]
} //fin check_proteccion ()
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000216 	.word	0x20000216
 8002124:	2000021a 	.word	0x2000021a
 8002128:	20000212 	.word	0x20000212
 800212c:	20000217 	.word	0x20000217
 8002130:	2000021b 	.word	0x2000021b
 8002134:	20000213 	.word	0x20000213

08002138 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002148:	d108      	bne.n	800215c <HAL_TIM_PeriodElapsedCallback+0x24>
		flagTIM2 = 1;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
		count_tick ++;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800215a:	801a      	strh	r2, [r3, #0]
	}
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	2000021c 	.word	0x2000021c
 800216c:	20000254 	.word	0x20000254

08002170 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
	status_adc = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	//HAL_TIM_Base_Stop(&htim3); //sincro ADC
	status_adc = 2;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_ADC_ConvCpltCallback+0x18>)
 800217a:	2202      	movs	r2, #2
 800217c:	701a      	strb	r2, [r3, #0]
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000244 	.word	0x20000244

0800218c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7f1b      	ldrb	r3, [r3, #28]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d103      	bne.n	80021a4 <HAL_TIM_IC_CaptureCallback+0x18>

		__HAL_TIM_SET_COUNTER (&htim4, 0);
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	625a      	str	r2, [r3, #36]	; 0x24

	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 descendente
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7f1b      	ldrb	r3, [r3, #28]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d10d      	bne.n	80021c8 <HAL_TIM_IC_CaptureCallback+0x3c>

		acum_fase += __HAL_TIM_GET_COUNTER (&htim4);
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80021ba:	6013      	str	r3, [r2, #0]
		cuenta_fase++;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x50>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	3301      	adds	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_TIM_IC_CaptureCallback+0x50>)
 80021c6:	701a      	strb	r2, [r3, #0]

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

} //fin HAL_TIM_IC_CaptureCallback()
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000950 	.word	0x20000950
 80021d8:	20000248 	.word	0x20000248
 80021dc:	2000024c 	.word	0x2000024c

080021e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_MspInit+0x5c>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a14      	ldr	r2, [pc, #80]	; (8002248 <HAL_MspInit+0x5c>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_MspInit+0x5c>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_MspInit+0x5c>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_MspInit+0x5c>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <HAL_MspInit+0x5c>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_MspInit+0x60>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <HAL_MspInit+0x60>)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40021000 	.word	0x40021000
 800224c:	40010000 	.word	0x40010000

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002260:	2200      	movs	r2, #0
 8002262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002266:	4802      	ldr	r0, [pc, #8]	; (8002270 <HardFault_Handler+0x14>)
 8002268:	f001 f991 	bl	800358e <HAL_GPIO_WritePin>
 800226c:	e7f8      	b.n	8002260 <HardFault_Handler+0x4>
 800226e:	bf00      	nop
 8002270:	40011000 	.word	0x40011000

08002274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002278:	e7fe      	b.n	8002278 <MemManage_Handler+0x4>

0800227a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800227a:	b480      	push	{r7}
 800227c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227e:	e7fe      	b.n	800227e <BusFault_Handler+0x4>

08002280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <UsageFault_Handler+0x4>

08002286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr

08002292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
	...

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint16_t count_tick;
	count_tick ++;
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <SysTick_Handler+0x18>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <SysTick_Handler+0x18>)
 80022ba:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 fa64 	bl	8002788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000254 	.word	0x20000254

080022c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ce:	f000 fee7 	bl	80030a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2000029c 	.word	0x2000029c

080022dc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <ADC1_2_IRQHandler+0x10>)
 80022e2:	f000 fb67 	bl	80029b4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000026c 	.word	0x2000026c

080022f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <TIM4_IRQHandler+0x10>)
 80022f6:	f002 f82d 	bl	8004354 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000950 	.word	0x20000950

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f002 fdf2 	bl	8004f1c <__errno>
 8002338:	4602      	mov	r2, r0
 800233a:	230c      	movs	r3, #12
 800233c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20005000 	.word	0x20005000
 8002364:	00000400 	.word	0x00000400
 8002368:	20000260 	.word	0x20000260
 800236c:	20000a30 	.word	0x20000a30

08002370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002390:	463b      	mov	r3, r7
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_TIM3_Init+0x90>)
 800239a:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <MX_TIM3_Init+0x94>)
 800239c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_TIM3_Init+0x90>)
 80023a0:	2247      	movs	r2, #71	; 0x47
 80023a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_TIM3_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_TIM3_Init+0x90>)
 80023ac:	2263      	movs	r2, #99	; 0x63
 80023ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_TIM3_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <MX_TIM3_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023bc:	4813      	ldr	r0, [pc, #76]	; (800240c <MX_TIM3_Init+0x90>)
 80023be:	f001 fdd1 	bl	8003f64 <HAL_TIM_Base_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80023c8:	f7ff ff0a 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	4619      	mov	r1, r3
 80023d8:	480c      	ldr	r0, [pc, #48]	; (800240c <MX_TIM3_Init+0x90>)
 80023da:	f002 f957 	bl	800468c <HAL_TIM_ConfigClockSource>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80023e4:	f7ff fefc 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023e8:	2320      	movs	r3, #32
 80023ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f0:	463b      	mov	r3, r7
 80023f2:	4619      	mov	r1, r3
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <MX_TIM3_Init+0x90>)
 80023f6:	f002 fc45 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002400:	f7ff feee 	bl	80021e0 <Error_Handler>
  }

}
 8002404:	bf00      	nop
 8002406:	3718      	adds	r7, #24
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000998 	.word	0x20000998
 8002410:	40000400 	.word	0x40000400

08002414 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800241a:	f107 0318 	add.w	r3, r7, #24
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	609a      	str	r2, [r3, #8]
 8002426:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	f107 0310 	add.w	r3, r7, #16
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002432:	463b      	mov	r3, r7
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 800243e:	4b32      	ldr	r3, [pc, #200]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002440:	4a32      	ldr	r2, [pc, #200]	; (800250c <MX_TIM4_Init+0xf8>)
 8002442:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002446:	f240 321f 	movw	r2, #799	; 0x31f
 800244a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b2e      	ldr	r3, [pc, #184]	; (8002508 <MX_TIM4_Init+0xf4>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002454:	f242 7210 	movw	r2, #10000	; 0x2710
 8002458:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245a:	4b2b      	ldr	r3, [pc, #172]	; (8002508 <MX_TIM4_Init+0xf4>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002462:	2200      	movs	r2, #0
 8002464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002466:	4828      	ldr	r0, [pc, #160]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002468:	f001 fd7c 	bl	8003f64 <HAL_TIM_Base_Init>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002472:	f7ff feb5 	bl	80021e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4619      	mov	r1, r3
 8002482:	4821      	ldr	r0, [pc, #132]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002484:	f002 f902 	bl	800468c <HAL_TIM_ConfigClockSource>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800248e:	f7ff fea7 	bl	80021e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002492:	481d      	ldr	r0, [pc, #116]	; (8002508 <MX_TIM4_Init+0xf4>)
 8002494:	f001 fe00 	bl	8004098 <HAL_TIM_IC_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800249e:	f7ff fe9f 	bl	80021e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4619      	mov	r1, r3
 80024b0:	4815      	ldr	r0, [pc, #84]	; (8002508 <MX_TIM4_Init+0xf4>)
 80024b2:	f002 fbe7 	bl	8004c84 <HAL_TIMEx_MasterConfigSynchronization>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80024bc:	f7ff fe90 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024c0:	2300      	movs	r3, #0
 80024c2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80024c4:	2301      	movs	r3, #1
 80024c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	4619      	mov	r1, r3
 80024d6:	480c      	ldr	r0, [pc, #48]	; (8002508 <MX_TIM4_Init+0xf4>)
 80024d8:	f002 f844 	bl	8004564 <HAL_TIM_IC_ConfigChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80024e2:	f7ff fe7d 	bl	80021e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80024e6:	2302      	movs	r3, #2
 80024e8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80024ea:	463b      	mov	r3, r7
 80024ec:	2208      	movs	r2, #8
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <MX_TIM4_Init+0xf4>)
 80024f2:	f002 f837 	bl	8004564 <HAL_TIM_IC_ConfigChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80024fc:	f7ff fe70 	bl	80021e0 <Error_Handler>
  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000950 	.word	0x20000950
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	; 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0318 	add.w	r3, r7, #24
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <HAL_TIM_Base_MspInit+0xa8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10c      	bne.n	800254a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a21      	ldr	r2, [pc, #132]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 8002536:	f043 0302 	orr.w	r3, r3, #2
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	617b      	str	r3, [r7, #20]
 8002546:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002548:	e031      	b.n	80025ae <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_TIM_Base_MspInit+0xb0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d12c      	bne.n	80025ae <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	61d3      	str	r3, [r2, #28]
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6193      	str	r3, [r2, #24]
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <HAL_TIM_Base_MspInit+0xac>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002584:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800258e:	2301      	movs	r3, #1
 8002590:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 0318 	add.w	r3, r7, #24
 8002596:	4619      	mov	r1, r3
 8002598:	480a      	ldr	r0, [pc, #40]	; (80025c4 <HAL_TIM_Base_MspInit+0xb4>)
 800259a:	f000 fe87 	bl	80032ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	201e      	movs	r0, #30
 80025a4:	f000 fceb 	bl	8002f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025a8:	201e      	movs	r0, #30
 80025aa:	f000 fd04 	bl	8002fb6 <HAL_NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	; 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40000800 	.word	0x40000800
 80025c4:	40010c00 	.word	0x40010c00

080025c8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <MX_USART2_UART_Init+0x50>)
 80025d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025ee:	220c      	movs	r2, #12
 80025f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025fe:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_USART2_UART_Init+0x4c>)
 8002600:	f002 fbb0 	bl	8004d64 <HAL_UART_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800260a:	f7ff fde9 	bl	80021e0 <Error_Handler>
  }

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200009e0 	.word	0x200009e0
 8002618:	40004400 	.word	0x40004400

0800261c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_UART_MspInit+0x88>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d12f      	bne.n	800269c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4a19      	ldr	r2, [pc, #100]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 8002642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002646:	61d3      	str	r3, [r2, #28]
 8002648:	4b17      	ldr	r3, [pc, #92]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a13      	ldr	r2, [pc, #76]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_UART_MspInit+0x8c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800266c:	2304      	movs	r3, #4
 800266e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002674:	2303      	movs	r3, #3
 8002676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 0310 	add.w	r3, r7, #16
 800267c:	4619      	mov	r1, r3
 800267e:	480b      	ldr	r0, [pc, #44]	; (80026ac <HAL_UART_MspInit+0x90>)
 8002680:	f000 fe14 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002684:	2308      	movs	r3, #8
 8002686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_UART_MspInit+0x90>)
 8002698:	f000 fe08 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40004400 	.word	0x40004400
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010800 	.word	0x40010800

080026b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026b0:	480c      	ldr	r0, [pc, #48]	; (80026e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026b2:	490d      	ldr	r1, [pc, #52]	; (80026e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b8:	e002      	b.n	80026c0 <LoopCopyDataInit>

080026ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026be:	3304      	adds	r3, #4

080026c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026c4:	d3f9      	bcc.n	80026ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c8:	4c0a      	ldr	r4, [pc, #40]	; (80026f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026cc:	e001      	b.n	80026d2 <LoopFillZerobss>

080026ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026d0:	3204      	adds	r2, #4

080026d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026d4:	d3fb      	bcc.n	80026ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026d6:	f7ff fe4b 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f002 fc25 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026de:	f7fe fcf9 	bl	80010d4 <main>
  bx lr
 80026e2:	4770      	bx	lr
  ldr r0, =_sdata
 80026e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026ec:	08007550 	.word	0x08007550
  ldr r2, =_sbss
 80026f0:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80026f4:	20000a2c 	.word	0x20000a2c

080026f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f8:	e7fe      	b.n	80026f8 <CAN1_RX1_IRQHandler>
	...

080026fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_Init+0x28>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_Init+0x28>)
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270c:	2003      	movs	r0, #3
 800270e:	f000 fc2b 	bl	8002f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002712:	2000      	movs	r0, #0
 8002714:	f000 f808 	bl	8002728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002718:	f7ff fd68 	bl	80021ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x54>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_InitTick+0x58>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	4619      	mov	r1, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002742:	fbb2 f3f3 	udiv	r3, r2, r3
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fc43 	bl	8002fd2 <HAL_SYSTICK_Config>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e00e      	b.n	8002774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b0f      	cmp	r3, #15
 800275a:	d80a      	bhi.n	8002772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800275c:	2200      	movs	r2, #0
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002764:	f000 fc0b 	bl	8002f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002768:	4a06      	ldr	r2, [pc, #24]	; (8002784 <HAL_InitTick+0x5c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	e000      	b.n	8002774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000014 	.word	0x20000014
 8002780:	2000001c 	.word	0x2000001c
 8002784:	20000018 	.word	0x20000018

08002788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <HAL_IncTick+0x1c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_IncTick+0x20>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <HAL_IncTick+0x20>)
 800279a:	6013      	str	r3, [r2, #0]
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	2000001c 	.word	0x2000001c
 80027a8:	20000a24 	.word	0x20000a24

080027ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b02      	ldr	r3, [pc, #8]	; (80027bc <HAL_GetTick+0x10>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	20000a24 	.word	0x20000a24

080027c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c8:	f7ff fff0 	bl	80027ac <HAL_GetTick>
 80027cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d005      	beq.n	80027e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <HAL_Delay+0x40>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027e6:	bf00      	nop
 80027e8:	f7ff ffe0 	bl	80027ac <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d8f7      	bhi.n	80027e8 <HAL_Delay+0x28>
  {
  }
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000001c 	.word	0x2000001c

08002804 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e0be      	b.n	80029a4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fe f98e 	bl	8000b64 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fa77 	bl	8002d3c <ADC_ConversionStop_Disable>
 800284e:	4603      	mov	r3, r0
 8002850:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8099 	bne.w	8002992 <HAL_ADC_Init+0x18e>
 8002860:	7dfb      	ldrb	r3, [r7, #23]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f040 8095 	bne.w	8002992 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002870:	f023 0302 	bic.w	r3, r3, #2
 8002874:	f043 0202 	orr.w	r2, r3, #2
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002884:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	7b1b      	ldrb	r3, [r3, #12]
 800288a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800288c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289c:	d003      	beq.n	80028a6 <HAL_ADC_Init+0xa2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_ADC_Init+0xa8>
 80028a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028aa:	e000      	b.n	80028ae <HAL_ADC_Init+0xaa>
 80028ac:	2300      	movs	r3, #0
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7d1b      	ldrb	r3, [r3, #20]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d119      	bne.n	80028f0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	035a      	lsls	r2, r3, #13
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e00b      	b.n	80028f0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	f043 0220 	orr.w	r2, r3, #32
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	4b28      	ldr	r3, [pc, #160]	; (80029ac <HAL_ADC_Init+0x1a8>)
 800290c:	4013      	ands	r3, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6812      	ldr	r2, [r2, #0]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002920:	d003      	beq.n	800292a <HAL_ADC_Init+0x126>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d104      	bne.n	8002934 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	3b01      	subs	r3, #1
 8002930:	051b      	lsls	r3, r3, #20
 8002932:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	430a      	orrs	r2, r1
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_ADC_Init+0x1ac>)
 8002950:	4013      	ands	r3, r2
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	429a      	cmp	r2, r3
 8002956:	d10b      	bne.n	8002970 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	f023 0303 	bic.w	r3, r3, #3
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800296e:	e018      	b.n	80029a2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	f023 0312 	bic.w	r3, r3, #18
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002990:	e007      	b.n	80029a2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	f043 0210 	orr.w	r2, r3, #16
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	ffe1f7fd 	.word	0xffe1f7fd
 80029b0:	ff1f0efe 	.word	0xff1f0efe

080029b4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	d140      	bne.n	8002a4c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d139      	bne.n	8002a4c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d105      	bne.n	80029f0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80029fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029fe:	d11d      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d119      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0220 	bic.w	r2, r2, #32
 8002a16:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fb97 	bl	8002170 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0212 	mvn.w	r2, #18
 8002a4a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b80      	cmp	r3, #128	; 0x80
 8002a58:	d14f      	bne.n	8002afa <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d148      	bne.n	8002afa <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002a8a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002a8e:	d012      	beq.n	8002ab6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d125      	bne.n	8002aea <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002aa8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002aac:	d11d      	bne.n	8002aea <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d119      	bne.n	8002aea <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f967 	bl	8002dbe <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 020c 	mvn.w	r2, #12
 8002af8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b04:	2b40      	cmp	r3, #64	; 0x40
 8002b06:	d114      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10d      	bne.n	8002b32 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f809 	bl	8002b3a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x20>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0dc      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x1da>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b06      	cmp	r3, #6
 8002b7a:	d81c      	bhi.n	8002bb6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b05      	subs	r3, #5
 8002b8e:	221f      	movs	r2, #31
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	4019      	ands	r1, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6818      	ldr	r0, [r3, #0]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b05      	subs	r3, #5
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb4:	e03c      	b.n	8002c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b0c      	cmp	r3, #12
 8002bbc:	d81c      	bhi.n	8002bf8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	3b23      	subs	r3, #35	; 0x23
 8002bd0:	221f      	movs	r2, #31
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	4019      	ands	r1, r3
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6818      	ldr	r0, [r3, #0]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	3b23      	subs	r3, #35	; 0x23
 8002bea:	fa00 f203 	lsl.w	r2, r0, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf6:	e01b      	b.n	8002c30 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	3b41      	subs	r3, #65	; 0x41
 8002c0a:	221f      	movs	r2, #31
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	4019      	ands	r1, r3
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	3b41      	subs	r3, #65	; 0x41
 8002c24:	fa00 f203 	lsl.w	r2, r0, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	d91c      	bls.n	8002c72 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68d9      	ldr	r1, [r3, #12]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	3b1e      	subs	r3, #30
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	4019      	ands	r1, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6898      	ldr	r0, [r3, #8]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	fa00 f203 	lsl.w	r2, r0, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	e019      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6919      	ldr	r1, [r3, #16]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	4413      	add	r3, r2
 8002c82:	2207      	movs	r2, #7
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	4019      	ands	r1, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6898      	ldr	r0, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2b10      	cmp	r3, #16
 8002cac:	d003      	beq.n	8002cb6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cb2:	2b11      	cmp	r3, #17
 8002cb4:	d132      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1d      	ldr	r2, [pc, #116]	; (8002d30 <HAL_ADC_ConfigChannel+0x1e4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d125      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d126      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002cdc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d11a      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce6:	4b13      	ldr	r3, [pc, #76]	; (8002d34 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <HAL_ADC_ConfigChannel+0x1ec>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9a      	lsrs	r2, r3, #18
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x1b2>
 8002d0a:	e007      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	f043 0220 	orr.w	r2, r3, #32
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40012400 	.word	0x40012400
 8002d34:	20000014 	.word	0x20000014
 8002d38:	431bde83 	.word	0x431bde83

08002d3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d12e      	bne.n	8002db4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d66:	f7ff fd21 	bl	80027ac <HAL_GetTick>
 8002d6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d6c:	e01b      	b.n	8002da6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d6e:	f7ff fd1d 	bl	80027ac <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d914      	bls.n	8002da6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10d      	bne.n	8002da6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8e:	f043 0210 	orr.w	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f043 0201 	orr.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e007      	b.n	8002db6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d0dc      	beq.n	8002d6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e02:	4a04      	ldr	r2, [pc, #16]	; (8002e14 <__NVIC_SetPriorityGrouping+0x44>)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	60d3      	str	r3, [r2, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <__NVIC_GetPriorityGrouping+0x18>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	f003 0307 	and.w	r3, r3, #7
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	e000ed00 	.word	0xe000ed00

08002e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	db0b      	blt.n	8002e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	f003 021f 	and.w	r2, r3, #31
 8002e4c:	4906      	ldr	r1, [pc, #24]	; (8002e68 <__NVIC_EnableIRQ+0x34>)
 8002e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	2001      	movs	r0, #1
 8002e56:	fa00 f202 	lsl.w	r2, r0, r2
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0a      	blt.n	8002e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	490c      	ldr	r1, [pc, #48]	; (8002eb8 <__NVIC_SetPriority+0x4c>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	0112      	lsls	r2, r2, #4
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	440b      	add	r3, r1
 8002e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e94:	e00a      	b.n	8002eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <__NVIC_SetPriority+0x50>)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	3b04      	subs	r3, #4
 8002ea4:	0112      	lsls	r2, r2, #4
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	761a      	strb	r2, [r3, #24]
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	e000e100 	.word	0xe000e100
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b089      	sub	sp, #36	; 0x24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f1c3 0307 	rsb	r3, r3, #7
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	bf28      	it	cs
 8002ede:	2304      	movcs	r3, #4
 8002ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	2b06      	cmp	r3, #6
 8002ee8:	d902      	bls.n	8002ef0 <NVIC_EncodePriority+0x30>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3b03      	subs	r3, #3
 8002eee:	e000      	b.n	8002ef2 <NVIC_EncodePriority+0x32>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	401a      	ands	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f12:	43d9      	mvns	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f18:	4313      	orrs	r3, r2
         );
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3724      	adds	r7, #36	; 0x24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f34:	d301      	bcc.n	8002f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f36:	2301      	movs	r3, #1
 8002f38:	e00f      	b.n	8002f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <SysTick_Config+0x40>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f42:	210f      	movs	r1, #15
 8002f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f48:	f7ff ff90 	bl	8002e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <SysTick_Config+0x40>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <SysTick_Config+0x40>)
 8002f54:	2207      	movs	r2, #7
 8002f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff ff2d 	bl	8002dd0 <__NVIC_SetPriorityGrouping>
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
 8002f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f90:	f7ff ff42 	bl	8002e18 <__NVIC_GetPriorityGrouping>
 8002f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	6978      	ldr	r0, [r7, #20]
 8002f9c:	f7ff ff90 	bl	8002ec0 <NVIC_EncodePriority>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff5f 	bl	8002e6c <__NVIC_SetPriority>
}
 8002fae:	bf00      	nop
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff35 	bl	8002e34 <__NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b082      	sub	sp, #8
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff ffa2 	bl	8002f24 <SysTick_Config>
 8002fe0:	4603      	mov	r3, r0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e043      	b.n	800308a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_DMA_Init+0xa8>)
 800300a:	4413      	add	r3, r2
 800300c:	4a22      	ldr	r2, [pc, #136]	; (8003098 <HAL_DMA_Init+0xac>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_DMA_Init+0xb0>)
 800301e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003036:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800303a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003044:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003050:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr
 8003094:	bffdfff8 	.word	0xbffdfff8
 8003098:	cccccccd 	.word	0xcccccccd
 800309c:	40020000 	.word	0x40020000

080030a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2204      	movs	r2, #4
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d04f      	beq.n	8003168 <HAL_DMA_IRQHandler+0xc8>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04a      	beq.n	8003168 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d107      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a66      	ldr	r2, [pc, #408]	; (8003290 <HAL_DMA_IRQHandler+0x1f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d029      	beq.n	800314e <HAL_DMA_IRQHandler+0xae>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_DMA_IRQHandler+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_DMA_IRQHandler+0xaa>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a63      	ldr	r2, [pc, #396]	; (8003298 <HAL_DMA_IRQHandler+0x1f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0xa4>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a62      	ldr	r2, [pc, #392]	; (800329c <HAL_DMA_IRQHandler+0x1fc>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d012      	beq.n	800313e <HAL_DMA_IRQHandler+0x9e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_DMA_IRQHandler+0x200>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00a      	beq.n	8003138 <HAL_DMA_IRQHandler+0x98>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <HAL_DMA_IRQHandler+0x204>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d102      	bne.n	8003132 <HAL_DMA_IRQHandler+0x92>
 800312c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003130:	e00e      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 8003132:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003136:	e00b      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 8003138:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800313c:	e008      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 800313e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003142:	e005      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 8003144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003148:	e002      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 800314a:	2340      	movs	r3, #64	; 0x40
 800314c:	e000      	b.n	8003150 <HAL_DMA_IRQHandler+0xb0>
 800314e:	2304      	movs	r3, #4
 8003150:	4a55      	ldr	r2, [pc, #340]	; (80032a8 <HAL_DMA_IRQHandler+0x208>)
 8003152:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8094 	beq.w	8003286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003166:	e08e      	b.n	8003286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2202      	movs	r2, #2
 800316e:	409a      	lsls	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d056      	beq.n	8003226 <HAL_DMA_IRQHandler+0x186>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d051      	beq.n	8003226 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10b      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 020a 	bic.w	r2, r2, #10
 800319e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a38      	ldr	r2, [pc, #224]	; (8003290 <HAL_DMA_IRQHandler+0x1f0>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d029      	beq.n	8003206 <HAL_DMA_IRQHandler+0x166>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a37      	ldr	r2, [pc, #220]	; (8003294 <HAL_DMA_IRQHandler+0x1f4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_IRQHandler+0x162>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a35      	ldr	r2, [pc, #212]	; (8003298 <HAL_DMA_IRQHandler+0x1f8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01a      	beq.n	80031fc <HAL_DMA_IRQHandler+0x15c>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a34      	ldr	r2, [pc, #208]	; (800329c <HAL_DMA_IRQHandler+0x1fc>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d012      	beq.n	80031f6 <HAL_DMA_IRQHandler+0x156>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a32      	ldr	r2, [pc, #200]	; (80032a0 <HAL_DMA_IRQHandler+0x200>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00a      	beq.n	80031f0 <HAL_DMA_IRQHandler+0x150>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a31      	ldr	r2, [pc, #196]	; (80032a4 <HAL_DMA_IRQHandler+0x204>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d102      	bne.n	80031ea <HAL_DMA_IRQHandler+0x14a>
 80031e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031e8:	e00e      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 80031ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ee:	e00b      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f4:	e008      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 80031f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031fa:	e005      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 80031fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003200:	e002      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 8003202:	2320      	movs	r3, #32
 8003204:	e000      	b.n	8003208 <HAL_DMA_IRQHandler+0x168>
 8003206:	2302      	movs	r3, #2
 8003208:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <HAL_DMA_IRQHandler+0x208>)
 800320a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b00      	cmp	r3, #0
 800321a:	d034      	beq.n	8003286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003224:	e02f      	b.n	8003286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2208      	movs	r2, #8
 800322c:	409a      	lsls	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4013      	ands	r3, r2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d028      	beq.n	8003288 <HAL_DMA_IRQHandler+0x1e8>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020e 	bic.w	r2, r2, #14
 800324e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	2101      	movs	r1, #1
 800325a:	fa01 f202 	lsl.w	r2, r1, r2
 800325e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    }
  }
  return;
 8003286:	bf00      	nop
 8003288:	bf00      	nop
}
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40020008 	.word	0x40020008
 8003294:	4002001c 	.word	0x4002001c
 8003298:	40020030 	.word	0x40020030
 800329c:	40020044 	.word	0x40020044
 80032a0:	40020058 	.word	0x40020058
 80032a4:	4002006c 	.word	0x4002006c
 80032a8:	40020000 	.word	0x40020000

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b08b      	sub	sp, #44	; 0x2c
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032b6:	2300      	movs	r3, #0
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032be:	e127      	b.n	8003510 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032c0:	2201      	movs	r2, #1
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	429a      	cmp	r2, r3
 80032da:	f040 8116 	bne.w	800350a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b12      	cmp	r3, #18
 80032e4:	d034      	beq.n	8003350 <HAL_GPIO_Init+0xa4>
 80032e6:	2b12      	cmp	r3, #18
 80032e8:	d80d      	bhi.n	8003306 <HAL_GPIO_Init+0x5a>
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d02b      	beq.n	8003346 <HAL_GPIO_Init+0x9a>
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d804      	bhi.n	80032fc <HAL_GPIO_Init+0x50>
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d031      	beq.n	800335a <HAL_GPIO_Init+0xae>
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d01c      	beq.n	8003334 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032fa:	e048      	b.n	800338e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d043      	beq.n	8003388 <HAL_GPIO_Init+0xdc>
 8003300:	2b11      	cmp	r3, #17
 8003302:	d01b      	beq.n	800333c <HAL_GPIO_Init+0x90>
          break;
 8003304:	e043      	b.n	800338e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003306:	4a89      	ldr	r2, [pc, #548]	; (800352c <HAL_GPIO_Init+0x280>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d026      	beq.n	800335a <HAL_GPIO_Init+0xae>
 800330c:	4a87      	ldr	r2, [pc, #540]	; (800352c <HAL_GPIO_Init+0x280>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d806      	bhi.n	8003320 <HAL_GPIO_Init+0x74>
 8003312:	4a87      	ldr	r2, [pc, #540]	; (8003530 <HAL_GPIO_Init+0x284>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d020      	beq.n	800335a <HAL_GPIO_Init+0xae>
 8003318:	4a86      	ldr	r2, [pc, #536]	; (8003534 <HAL_GPIO_Init+0x288>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_GPIO_Init+0xae>
          break;
 800331e:	e036      	b.n	800338e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003320:	4a85      	ldr	r2, [pc, #532]	; (8003538 <HAL_GPIO_Init+0x28c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0xae>
 8003326:	4a85      	ldr	r2, [pc, #532]	; (800353c <HAL_GPIO_Init+0x290>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d016      	beq.n	800335a <HAL_GPIO_Init+0xae>
 800332c:	4a84      	ldr	r2, [pc, #528]	; (8003540 <HAL_GPIO_Init+0x294>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_GPIO_Init+0xae>
          break;
 8003332:	e02c      	b.n	800338e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	623b      	str	r3, [r7, #32]
          break;
 800333a:	e028      	b.n	800338e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	3304      	adds	r3, #4
 8003342:	623b      	str	r3, [r7, #32]
          break;
 8003344:	e023      	b.n	800338e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	3308      	adds	r3, #8
 800334c:	623b      	str	r3, [r7, #32]
          break;
 800334e:	e01e      	b.n	800338e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	330c      	adds	r3, #12
 8003356:	623b      	str	r3, [r7, #32]
          break;
 8003358:	e019      	b.n	800338e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003362:	2304      	movs	r3, #4
 8003364:	623b      	str	r3, [r7, #32]
          break;
 8003366:	e012      	b.n	800338e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003370:	2308      	movs	r3, #8
 8003372:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	611a      	str	r2, [r3, #16]
          break;
 800337a:	e008      	b.n	800338e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800337c:	2308      	movs	r3, #8
 800337e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69fa      	ldr	r2, [r7, #28]
 8003384:	615a      	str	r2, [r3, #20]
          break;
 8003386:	e002      	b.n	800338e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003388:	2300      	movs	r3, #0
 800338a:	623b      	str	r3, [r7, #32]
          break;
 800338c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2bff      	cmp	r3, #255	; 0xff
 8003392:	d801      	bhi.n	8003398 <HAL_GPIO_Init+0xec>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	e001      	b.n	800339c <HAL_GPIO_Init+0xf0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2bff      	cmp	r3, #255	; 0xff
 80033a2:	d802      	bhi.n	80033aa <HAL_GPIO_Init+0xfe>
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	e002      	b.n	80033b0 <HAL_GPIO_Init+0x104>
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	3b08      	subs	r3, #8
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	210f      	movs	r1, #15
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	401a      	ands	r2, r3
 80033c2:	6a39      	ldr	r1, [r7, #32]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	fa01 f303 	lsl.w	r3, r1, r3
 80033ca:	431a      	orrs	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 8096 	beq.w	800350a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033de:	4b59      	ldr	r3, [pc, #356]	; (8003544 <HAL_GPIO_Init+0x298>)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	4a58      	ldr	r2, [pc, #352]	; (8003544 <HAL_GPIO_Init+0x298>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6193      	str	r3, [r2, #24]
 80033ea:	4b56      	ldr	r3, [pc, #344]	; (8003544 <HAL_GPIO_Init+0x298>)
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033f6:	4a54      	ldr	r2, [pc, #336]	; (8003548 <HAL_GPIO_Init+0x29c>)
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	089b      	lsrs	r3, r3, #2
 80033fc:	3302      	adds	r3, #2
 80033fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003402:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	220f      	movs	r2, #15
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4b      	ldr	r2, [pc, #300]	; (800354c <HAL_GPIO_Init+0x2a0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x19e>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4a      	ldr	r2, [pc, #296]	; (8003550 <HAL_GPIO_Init+0x2a4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x19a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a49      	ldr	r2, [pc, #292]	; (8003554 <HAL_GPIO_Init+0x2a8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x196>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a48      	ldr	r2, [pc, #288]	; (8003558 <HAL_GPIO_Init+0x2ac>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x192>
 800343a:	2303      	movs	r3, #3
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x1a0>
 800343e:	2304      	movs	r3, #4
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x1a0>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x1a0>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x1a0>
 800344a:	2300      	movs	r3, #0
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800345c:	493a      	ldr	r1, [pc, #232]	; (8003548 <HAL_GPIO_Init+0x29c>)
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d006      	beq.n	8003484 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003476:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_GPIO_Init+0x2b0>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4938      	ldr	r1, [pc, #224]	; (800355c <HAL_GPIO_Init+0x2b0>)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
 8003482:	e006      	b.n	8003492 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003484:	4b35      	ldr	r3, [pc, #212]	; (800355c <HAL_GPIO_Init+0x2b0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	43db      	mvns	r3, r3
 800348c:	4933      	ldr	r1, [pc, #204]	; (800355c <HAL_GPIO_Init+0x2b0>)
 800348e:	4013      	ands	r3, r2
 8003490:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800349e:	4b2f      	ldr	r3, [pc, #188]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	492e      	ldr	r1, [pc, #184]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e006      	b.n	80034ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034ac:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	4929      	ldr	r1, [pc, #164]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d006      	beq.n	80034d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	4924      	ldr	r1, [pc, #144]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
 80034d2:	e006      	b.n	80034e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034d4:	4b21      	ldr	r3, [pc, #132]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	43db      	mvns	r3, r3
 80034dc:	491f      	ldr	r1, [pc, #124]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034de:	4013      	ands	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d006      	beq.n	80034fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80034ee:	4b1b      	ldr	r3, [pc, #108]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	491a      	ldr	r1, [pc, #104]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60cb      	str	r3, [r1, #12]
 80034fa:	e006      	b.n	800350a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80034fc:	4b17      	ldr	r3, [pc, #92]	; (800355c <HAL_GPIO_Init+0x2b0>)
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	43db      	mvns	r3, r3
 8003504:	4915      	ldr	r1, [pc, #84]	; (800355c <HAL_GPIO_Init+0x2b0>)
 8003506:	4013      	ands	r3, r2
 8003508:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	3301      	adds	r3, #1
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	f47f aed0 	bne.w	80032c0 <HAL_GPIO_Init+0x14>
  }
}
 8003520:	bf00      	nop
 8003522:	372c      	adds	r7, #44	; 0x2c
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	10210000 	.word	0x10210000
 8003530:	10110000 	.word	0x10110000
 8003534:	10120000 	.word	0x10120000
 8003538:	10310000 	.word	0x10310000
 800353c:	10320000 	.word	0x10320000
 8003540:	10220000 	.word	0x10220000
 8003544:	40021000 	.word	0x40021000
 8003548:	40010000 	.word	0x40010000
 800354c:	40010800 	.word	0x40010800
 8003550:	40010c00 	.word	0x40010c00
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	40010400 	.word	0x40010400

08003560 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	887b      	ldrh	r3, [r7, #2]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003578:	2301      	movs	r3, #1
 800357a:	73fb      	strb	r3, [r7, #15]
 800357c:	e001      	b.n	8003582 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003582:	7bfb      	ldrb	r3, [r7, #15]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	807b      	strh	r3, [r7, #2]
 800359a:	4613      	mov	r3, r2
 800359c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800359e:	787b      	ldrb	r3, [r7, #1]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035aa:	e003      	b.n	80035b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]
}
 80035b4:	bf00      	nop
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bc80      	pop	{r7}
 80035bc:	4770      	bx	lr
	...

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e26c      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8087 	beq.w	80036ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e0:	4b92      	ldr	r3, [pc, #584]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d00c      	beq.n	8003606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035ec:	4b8f      	ldr	r3, [pc, #572]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d112      	bne.n	800361e <HAL_RCC_OscConfig+0x5e>
 80035f8:	4b8c      	ldr	r3, [pc, #560]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d10b      	bne.n	800361e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003606:	4b89      	ldr	r3, [pc, #548]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d06c      	beq.n	80036ec <HAL_RCC_OscConfig+0x12c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d168      	bne.n	80036ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e246      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d106      	bne.n	8003636 <HAL_RCC_OscConfig+0x76>
 8003628:	4b80      	ldr	r3, [pc, #512]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7f      	ldr	r2, [pc, #508]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e02e      	b.n	8003694 <HAL_RCC_OscConfig+0xd4>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d10c      	bne.n	8003658 <HAL_RCC_OscConfig+0x98>
 800363e:	4b7b      	ldr	r3, [pc, #492]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a7a      	ldr	r2, [pc, #488]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	4b78      	ldr	r3, [pc, #480]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a77      	ldr	r2, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xd4>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0xbc>
 8003662:	4b72      	ldr	r3, [pc, #456]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a71      	ldr	r2, [pc, #452]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b6f      	ldr	r3, [pc, #444]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a6e      	ldr	r2, [pc, #440]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xd4>
 800367c:	4b6b      	ldr	r3, [pc, #428]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a6a      	ldr	r2, [pc, #424]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b68      	ldr	r3, [pc, #416]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a67      	ldr	r2, [pc, #412]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff f886 	bl	80027ac <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a4:	f7ff f882 	bl	80027ac <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1fa      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b5d      	ldr	r3, [pc, #372]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe4>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7ff f872 	bl	80027ac <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036cc:	f7ff f86e 	bl	80027ac <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1e6      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b53      	ldr	r3, [pc, #332]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x10c>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036fa:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x18c>
 8003712:	4b46      	ldr	r3, [pc, #280]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b43      	ldr	r3, [pc, #268]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x176>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1ba      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b3d      	ldr	r3, [pc, #244]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4939      	ldr	r1, [pc, #228]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7ff f827 	bl	80027ac <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003762:	f7ff f823 	bl	80027ac <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e19b      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4927      	ldr	r1, [pc, #156]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCC_OscConfig+0x270>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7ff f806 	bl	80027ac <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037a4:	f7ff f802 	bl	80027ac <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e17a      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d03a      	beq.n	8003844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d019      	beq.n	800380a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b17      	ldr	r3, [pc, #92]	; (8003834 <HAL_RCC_OscConfig+0x274>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037dc:	f7fe ffe6 	bl	80027ac <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe ffe2 	bl	80027ac <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e15a      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <HAL_RCC_OscConfig+0x26c>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003802:	2001      	movs	r0, #1
 8003804:	f000 fada 	bl	8003dbc <RCC_Delay>
 8003808:	e01c      	b.n	8003844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <HAL_RCC_OscConfig+0x274>)
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe ffcc 	bl	80027ac <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003816:	e00f      	b.n	8003838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fe ffc8 	bl	80027ac <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d908      	bls.n	8003838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e140      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	42420000 	.word	0x42420000
 8003834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003838:	4b9e      	ldr	r3, [pc, #632]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e9      	bne.n	8003818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80a6 	beq.w	800399e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003856:	4b97      	ldr	r3, [pc, #604]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10d      	bne.n	800387e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003862:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4a93      	ldr	r2, [pc, #588]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	61d3      	str	r3, [r2, #28]
 800386e:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b8e      	ldr	r3, [pc, #568]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a8a      	ldr	r2, [pc, #552]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fe ff89 	bl	80027ac <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7fe ff85 	bl	80027ac <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	; 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0fd      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <HAL_RCC_OscConfig+0x4f8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x312>
 80038c4:	4b7b      	ldr	r3, [pc, #492]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	4a7a      	ldr	r2, [pc, #488]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6213      	str	r3, [r2, #32]
 80038d0:	e02d      	b.n	800392e <HAL_RCC_OscConfig+0x36e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x334>
 80038da:	4b76      	ldr	r3, [pc, #472]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4a75      	ldr	r2, [pc, #468]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	6213      	str	r3, [r2, #32]
 80038e6:	4b73      	ldr	r3, [pc, #460]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	4a72      	ldr	r2, [pc, #456]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	f023 0304 	bic.w	r3, r3, #4
 80038f0:	6213      	str	r3, [r2, #32]
 80038f2:	e01c      	b.n	800392e <HAL_RCC_OscConfig+0x36e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b05      	cmp	r3, #5
 80038fa:	d10c      	bne.n	8003916 <HAL_RCC_OscConfig+0x356>
 80038fc:	4b6d      	ldr	r3, [pc, #436]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4a6c      	ldr	r2, [pc, #432]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	f043 0304 	orr.w	r3, r3, #4
 8003906:	6213      	str	r3, [r2, #32]
 8003908:	4b6a      	ldr	r3, [pc, #424]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	4a69      	ldr	r2, [pc, #420]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 800390e:	f043 0301 	orr.w	r3, r3, #1
 8003912:	6213      	str	r3, [r2, #32]
 8003914:	e00b      	b.n	800392e <HAL_RCC_OscConfig+0x36e>
 8003916:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4a66      	ldr	r2, [pc, #408]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	6213      	str	r3, [r2, #32]
 8003922:	4b64      	ldr	r3, [pc, #400]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4a63      	ldr	r2, [pc, #396]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003928:	f023 0304 	bic.w	r3, r3, #4
 800392c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d015      	beq.n	8003962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003936:	f7fe ff39 	bl	80027ac <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	e00a      	b.n	8003954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800393e:	f7fe ff35 	bl	80027ac <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	f241 3288 	movw	r2, #5000	; 0x1388
 800394c:	4293      	cmp	r3, r2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0ab      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003954:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0ee      	beq.n	800393e <HAL_RCC_OscConfig+0x37e>
 8003960:	e014      	b.n	800398c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fe ff23 	bl	80027ac <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	e00a      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fe ff1f 	bl	80027ac <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e095      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003980:	4b4c      	ldr	r3, [pc, #304]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ee      	bne.n	800396a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d105      	bne.n	800399e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003992:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4a47      	ldr	r2, [pc, #284]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800399c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8081 	beq.w	8003aaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039a8:	4b42      	ldr	r3, [pc, #264]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d061      	beq.n	8003a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d146      	bne.n	8003a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_OscConfig+0x4fc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c2:	f7fe fef3 	bl	80027ac <HAL_GetTick>
 80039c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fe feef 	bl	80027ac <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e067      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d108      	bne.n	8003a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039f2:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	492d      	ldr	r1, [pc, #180]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a19      	ldr	r1, [r3, #32]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	430b      	orrs	r3, r1
 8003a16:	4927      	ldr	r1, [pc, #156]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a1c:	4b27      	ldr	r3, [pc, #156]	; (8003abc <HAL_RCC_OscConfig+0x4fc>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fe fec3 	bl	80027ac <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fe febf 	bl	80027ac <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e037      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x46a>
 8003a48:	e02f      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	; (8003abc <HAL_RCC_OscConfig+0x4fc>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a50:	f7fe feac 	bl	80027ac <HAL_GetTick>
 8003a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a58:	f7fe fea8 	bl	80027ac <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e020      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x498>
 8003a76:	e018      	b.n	8003aaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e013      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x4f4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e000      	b.n	8003aac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	42420060 	.word	0x42420060

08003ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0d0      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b67      	ldr	r3, [pc, #412]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4965      	ldr	r1, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d040      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d115      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e073      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06b      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4936      	ldr	r1, [pc, #216]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fdfc 	bl	80027ac <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe fdf8 	bl	80027ac <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e053      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2d      	ldr	r3, [pc, #180]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d210      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4922      	ldr	r1, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f821 	bl	8003c94 <HAL_RCC_GetSysClockFreq>
 8003c52:	4601      	mov	r1, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	5cd3      	ldrb	r3, [r2, r3]
 8003c62:	fa21 f303 	lsr.w	r3, r1, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1cc>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1d0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe fd5a 	bl	8002728 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40022000 	.word	0x40022000
 8003c84:	40021000 	.word	0x40021000
 8003c88:	080072c8 	.word	0x080072c8
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	20000018 	.word	0x20000018

08003c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c94:	b490      	push	{r4, r7}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c9a:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c9c:	1d3c      	adds	r4, r7, #4
 8003c9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ca4:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cbe:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x46>
 8003cd2:	e02d      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cd4:	4b1e      	ldr	r3, [pc, #120]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cd6:	623b      	str	r3, [r7, #32]
      break;
 8003cd8:	e02d      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	0c9b      	lsrs	r3, r3, #18
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003cec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d013      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	0c5b      	lsrs	r3, r3, #17
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003d06:	4413      	add	r3, r2
 8003d08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4a0f      	ldr	r2, [pc, #60]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d12:	fb02 f203 	mul.w	r2, r2, r3
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	e004      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	623b      	str	r3, [r7, #32]
      break;
 8003d2e:	e002      	b.n	8003d36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d30:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d32:	623b      	str	r3, [r7, #32]
      break;
 8003d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3728      	adds	r7, #40	; 0x28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bc90      	pop	{r4, r7}
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	080072b4 	.word	0x080072b4
 8003d48:	080072c4 	.word	0x080072c4
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	007a1200 	.word	0x007a1200
 8003d54:	003d0900 	.word	0x003d0900

08003d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d5c:	4b02      	ldr	r3, [pc, #8]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bc80      	pop	{r7}
 8003d66:	4770      	bx	lr
 8003d68:	20000014 	.word	0x20000014

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff2 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d74:	4601      	mov	r1, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	0a1b      	lsrs	r3, r3, #8
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4a03      	ldr	r2, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5cd3      	ldrb	r3, [r2, r3]
 8003d84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	080072d8 	.word	0x080072d8

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffde 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4601      	mov	r1, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	0adb      	lsrs	r3, r3, #11
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4a03      	ldr	r2, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5cd3      	ldrb	r3, [r2, r3]
 8003dac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40021000 	.word	0x40021000
 8003db8:	080072d8 	.word	0x080072d8

08003dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <RCC_Delay+0x34>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <RCC_Delay+0x38>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	0a5b      	lsrs	r3, r3, #9
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003dd8:	bf00      	nop
  }
  while (Delay --);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1e5a      	subs	r2, r3, #1
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f9      	bne.n	8003dd8 <RCC_Delay+0x1c>
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	20000014 	.word	0x20000014
 8003df4:	10624dd3 	.word	0x10624dd3

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d07d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e18:	4b4f      	ldr	r3, [pc, #316]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d10d      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4a4b      	ldr	r2, [pc, #300]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	61d3      	str	r3, [r2, #28]
 8003e30:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b46      	ldr	r3, [pc, #280]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d118      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4c:	4b43      	ldr	r3, [pc, #268]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a42      	ldr	r2, [pc, #264]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e58:	f7fe fca8 	bl	80027ac <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	e008      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e60:	f7fe fca4 	bl	80027ac <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	; 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e06d      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e7e:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e86:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02e      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d027      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ea6:	4b2e      	ldr	r3, [pc, #184]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eac:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eb2:	4a29      	ldr	r2, [pc, #164]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d014      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe fc73 	bl	80027ac <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fe fc6f 	bl	80027ac <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e036      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ee      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4917      	ldr	r1, [pc, #92]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d105      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f04:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f1c:	4b0e      	ldr	r3, [pc, #56]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	490b      	ldr	r1, [pc, #44]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d008      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4904      	ldr	r1, [pc, #16]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40007000 	.word	0x40007000
 8003f60:	42420440 	.word	0x42420440

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fe fac0 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fc44 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_TIM_Base_Start+0x88>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00e      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d009      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a14      	ldr	r2, [pc, #80]	; (8004090 <HAL_TIM_Base_Start+0x8c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_TIM_Base_Start+0x48>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a13      	ldr	r2, [pc, #76]	; (8004094 <HAL_TIM_Base_Start+0x90>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d111      	bne.n	8004070 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b06      	cmp	r3, #6
 800405c:	d010      	beq.n	8004080 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0201 	orr.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406e:	e007      	b.n	8004080 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800

08004098 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e041      	b.n	800412e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f839 	bl	8004136 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 fbaa 	bl	8004830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr

08004148 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d104      	bne.n	8004162 <HAL_TIM_IC_Start_IT+0x1a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e013      	b.n	800418a <HAL_TIM_IC_Start_IT+0x42>
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b04      	cmp	r3, #4
 8004166:	d104      	bne.n	8004172 <HAL_TIM_IC_Start_IT+0x2a>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e00b      	b.n	800418a <HAL_TIM_IC_Start_IT+0x42>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d104      	bne.n	8004182 <HAL_TIM_IC_Start_IT+0x3a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417e:	b2db      	uxtb	r3, r3
 8004180:	e003      	b.n	800418a <HAL_TIM_IC_Start_IT+0x42>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d104      	bne.n	800419c <HAL_TIM_IC_Start_IT+0x54>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004198:	b2db      	uxtb	r3, r3
 800419a:	e013      	b.n	80041c4 <HAL_TIM_IC_Start_IT+0x7c>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d104      	bne.n	80041ac <HAL_TIM_IC_Start_IT+0x64>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	e00b      	b.n	80041c4 <HAL_TIM_IC_Start_IT+0x7c>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d104      	bne.n	80041bc <HAL_TIM_IC_Start_IT+0x74>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e003      	b.n	80041c4 <HAL_TIM_IC_Start_IT+0x7c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d102      	bne.n	80041d2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041cc:	7bbb      	ldrb	r3, [r7, #14]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d001      	beq.n	80041d6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e0b3      	b.n	800433e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d104      	bne.n	80041e6 <HAL_TIM_IC_Start_IT+0x9e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041e4:	e013      	b.n	800420e <HAL_TIM_IC_Start_IT+0xc6>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_IC_Start_IT+0xae>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041f4:	e00b      	b.n	800420e <HAL_TIM_IC_Start_IT+0xc6>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_IC_Start_IT+0xbe>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004204:	e003      	b.n	800420e <HAL_TIM_IC_Start_IT+0xc6>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2202      	movs	r2, #2
 800420a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d104      	bne.n	800421e <HAL_TIM_IC_Start_IT+0xd6>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	e013      	b.n	8004246 <HAL_TIM_IC_Start_IT+0xfe>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	2b04      	cmp	r3, #4
 8004222:	d104      	bne.n	800422e <HAL_TIM_IC_Start_IT+0xe6>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800422c:	e00b      	b.n	8004246 <HAL_TIM_IC_Start_IT+0xfe>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b08      	cmp	r3, #8
 8004232:	d104      	bne.n	800423e <HAL_TIM_IC_Start_IT+0xf6>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423c:	e003      	b.n	8004246 <HAL_TIM_IC_Start_IT+0xfe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b0c      	cmp	r3, #12
 800424a:	d841      	bhi.n	80042d0 <HAL_TIM_IC_Start_IT+0x188>
 800424c:	a201      	add	r2, pc, #4	; (adr r2, 8004254 <HAL_TIM_IC_Start_IT+0x10c>)
 800424e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004252:	bf00      	nop
 8004254:	08004289 	.word	0x08004289
 8004258:	080042d1 	.word	0x080042d1
 800425c:	080042d1 	.word	0x080042d1
 8004260:	080042d1 	.word	0x080042d1
 8004264:	0800429b 	.word	0x0800429b
 8004268:	080042d1 	.word	0x080042d1
 800426c:	080042d1 	.word	0x080042d1
 8004270:	080042d1 	.word	0x080042d1
 8004274:	080042ad 	.word	0x080042ad
 8004278:	080042d1 	.word	0x080042d1
 800427c:	080042d1 	.word	0x080042d1
 8004280:	080042d1 	.word	0x080042d1
 8004284:	080042bf 	.word	0x080042bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0202 	orr.w	r2, r2, #2
 8004296:	60da      	str	r2, [r3, #12]
      break;
 8004298:	e01b      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0204 	orr.w	r2, r2, #4
 80042a8:	60da      	str	r2, [r3, #12]
      break;
 80042aa:	e012      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f042 0208 	orr.w	r2, r2, #8
 80042ba:	60da      	str	r2, [r3, #12]
      break;
 80042bc:	e009      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0210 	orr.w	r2, r2, #16
 80042cc:	60da      	str	r2, [r3, #12]
      break;
 80042ce:	e000      	b.n	80042d2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80042d0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2201      	movs	r2, #1
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fcad 	bl	8004c3a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a18      	ldr	r2, [pc, #96]	; (8004348 <HAL_TIM_IC_Start_IT+0x200>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <HAL_TIM_IC_Start_IT+0x1c0>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f2:	d009      	beq.n	8004308 <HAL_TIM_IC_Start_IT+0x1c0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <HAL_TIM_IC_Start_IT+0x204>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_TIM_IC_Start_IT+0x1c0>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a13      	ldr	r2, [pc, #76]	; (8004350 <HAL_TIM_IC_Start_IT+0x208>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b06      	cmp	r3, #6
 8004318:	d010      	beq.n	800433c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432a:	e007      	b.n	800433c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40000400 	.word	0x40000400
 8004350:	40000800 	.word	0x40000800

08004354 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d122      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b02      	cmp	r3, #2
 8004376:	d11b      	bne.n	80043b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0202 	mvn.w	r2, #2
 8004380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd fef8 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa2b 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa31 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d122      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b04      	cmp	r3, #4
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0204 	mvn.w	r2, #4
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fd fece 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa01 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa07 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b08      	cmp	r3, #8
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0308 	and.w	r3, r3, #8
 800441c:	2b08      	cmp	r3, #8
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0208 	mvn.w	r2, #8
 8004428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2204      	movs	r2, #4
 800442e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fd fea4 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9d7 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9dd 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b10      	cmp	r3, #16
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b10      	cmp	r3, #16
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0210 	mvn.w	r2, #16
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2208      	movs	r2, #8
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd fe7a 	bl	800218c <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f9ad 	bl	80047fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f9b3 	bl	800480c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0201 	mvn.w	r2, #1
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fe30 	bl	8002138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f0:	2b80      	cmp	r3, #128	; 0x80
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fc27 	bl	8004d52 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f977 	bl	800481e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b20      	cmp	r3, #32
 800453c:	d10e      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0320 	and.w	r3, r3, #32
 8004548:	2b20      	cmp	r3, #32
 800454a:	d107      	bne.n	800455c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0220 	mvn.w	r2, #32
 8004554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fbf2 	bl	8004d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455c:	bf00      	nop
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004576:	2b01      	cmp	r3, #1
 8004578:	d101      	bne.n	800457e <HAL_TIM_IC_ConfigChannel+0x1a>
 800457a:	2302      	movs	r3, #2
 800457c:	e082      	b.n	8004684 <HAL_TIM_IC_ConfigChannel+0x120>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11b      	bne.n	80045c4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6818      	ldr	r0, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f000 f9aa 	bl	80048f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	699a      	ldr	r2, [r3, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 020c 	bic.w	r2, r2, #12
 80045ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6999      	ldr	r1, [r3, #24]
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	619a      	str	r2, [r3, #24]
 80045c2:	e05a      	b.n	800467a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d11c      	bne.n	8004604 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	6819      	ldr	r1, [r3, #0]
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f000 fa13 	bl	8004a04 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80045ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6999      	ldr	r1, [r3, #24]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	021a      	lsls	r2, r3, #8
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	619a      	str	r2, [r3, #24]
 8004602:	e03a      	b.n	800467a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b08      	cmp	r3, #8
 8004608:	d11b      	bne.n	8004642 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f000 fa5e 	bl	8004ada <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020c 	bic.w	r2, r2, #12
 800462c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	69d9      	ldr	r1, [r3, #28]
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	61da      	str	r2, [r3, #28]
 8004640:	e01b      	b.n	800467a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	6819      	ldr	r1, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f000 fa7d 	bl	8004b50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	69da      	ldr	r2, [r3, #28]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004664:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69d9      	ldr	r1, [r3, #28]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_ConfigClockSource+0x18>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e0a6      	b.n	80047f2 <HAL_TIM_ConfigClockSource+0x166>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2b40      	cmp	r3, #64	; 0x40
 80046da:	d067      	beq.n	80047ac <HAL_TIM_ConfigClockSource+0x120>
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d80b      	bhi.n	80046f8 <HAL_TIM_ConfigClockSource+0x6c>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d073      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d802      	bhi.n	80046ee <HAL_TIM_ConfigClockSource+0x62>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d06f      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046ec:	e078      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d06c      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
 80046f2:	2b30      	cmp	r3, #48	; 0x30
 80046f4:	d06a      	beq.n	80047cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046f6:	e073      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d00d      	beq.n	8004718 <HAL_TIM_ConfigClockSource+0x8c>
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d804      	bhi.n	800470a <HAL_TIM_ConfigClockSource+0x7e>
 8004700:	2b50      	cmp	r3, #80	; 0x50
 8004702:	d033      	beq.n	800476c <HAL_TIM_ConfigClockSource+0xe0>
 8004704:	2b60      	cmp	r3, #96	; 0x60
 8004706:	d041      	beq.n	800478c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004708:	e06a      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800470a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800470e:	d066      	beq.n	80047de <HAL_TIM_ConfigClockSource+0x152>
 8004710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004714:	d017      	beq.n	8004746 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004716:	e063      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	6899      	ldr	r1, [r3, #8]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f000 fa68 	bl	8004bfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800473a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	609a      	str	r2, [r3, #8]
      break;
 8004744:	e04c      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	6899      	ldr	r1, [r3, #8]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f000 fa51 	bl	8004bfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004768:	609a      	str	r2, [r3, #8]
      break;
 800476a:	e039      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6859      	ldr	r1, [r3, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	461a      	mov	r2, r3
 800477a:	f000 f915 	bl	80049a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2150      	movs	r1, #80	; 0x50
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fa1f 	bl	8004bc8 <TIM_ITRx_SetConfig>
      break;
 800478a:	e029      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	6859      	ldr	r1, [r3, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	461a      	mov	r2, r3
 800479a:	f000 f96f 	bl	8004a7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2160      	movs	r1, #96	; 0x60
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa0f 	bl	8004bc8 <TIM_ITRx_SetConfig>
      break;
 80047aa:	e019      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	461a      	mov	r2, r3
 80047ba:	f000 f8f5 	bl	80049a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2140      	movs	r1, #64	; 0x40
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f9ff 	bl	8004bc8 <TIM_ITRx_SetConfig>
      break;
 80047ca:	e009      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f000 f9f6 	bl	8004bc8 <TIM_ITRx_SetConfig>
        break;
 80047dc:	e000      	b.n	80047e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80047de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	bc80      	pop	{r7}
 800480a:	4770      	bx	lr

0800480c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr

08004830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0xb8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00b      	beq.n	8004860 <TIM_Base_SetConfig+0x30>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d007      	beq.n	8004860 <TIM_Base_SetConfig+0x30>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a26      	ldr	r2, [pc, #152]	; (80048ec <TIM_Base_SetConfig+0xbc>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d003      	beq.n	8004860 <TIM_Base_SetConfig+0x30>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a25      	ldr	r2, [pc, #148]	; (80048f0 <TIM_Base_SetConfig+0xc0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d108      	bne.n	8004872 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004866:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <TIM_Base_SetConfig+0xb8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d00b      	beq.n	8004892 <TIM_Base_SetConfig+0x62>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004880:	d007      	beq.n	8004892 <TIM_Base_SetConfig+0x62>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a19      	ldr	r2, [pc, #100]	; (80048ec <TIM_Base_SetConfig+0xbc>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_Base_SetConfig+0x62>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <TIM_Base_SetConfig+0xc0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d108      	bne.n	80048a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <TIM_Base_SetConfig+0xb8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d103      	bne.n	80048d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	615a      	str	r2, [r3, #20]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bc80      	pop	{r7}
 80048e6:	4770      	bx	lr
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800

080048f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	607a      	str	r2, [r7, #4]
 8004900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <TIM_TI1_SetConfig+0xa8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_TI1_SetConfig+0x46>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d007      	beq.n	800493a <TIM_TI1_SetConfig+0x46>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4a1c      	ldr	r2, [pc, #112]	; (80049a0 <TIM_TI1_SetConfig+0xac>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_TI1_SetConfig+0x46>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4a1b      	ldr	r2, [pc, #108]	; (80049a4 <TIM_TI1_SetConfig+0xb0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <TIM_TI1_SetConfig+0x4a>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <TIM_TI1_SetConfig+0x4c>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e003      	b.n	800495e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	b2db      	uxtb	r3, r3
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f023 030a 	bic.w	r3, r3, #10
 8004978:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 030a 	and.w	r3, r3, #10
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	bc80      	pop	{r7}
 800499a:	4770      	bx	lr
 800499c:	40012c00 	.word	0x40012c00
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800

080049a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f023 0201 	bic.w	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f023 030a 	bic.w	r3, r3, #10
 80049e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	621a      	str	r2, [r3, #32]
}
 80049fa:	bf00      	nop
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bc80      	pop	{r7}
 8004a02:	4770      	bx	lr

08004a04 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f023 0210 	bic.w	r2, r3, #16
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	021b      	lsls	r3, r3, #8
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	031b      	lsls	r3, r3, #12
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a56:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	621a      	str	r2, [r3, #32]
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bc80      	pop	{r7}
 8004a7a:	4770      	bx	lr

08004a7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f023 0210 	bic.w	r2, r3, #16
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aa6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	031b      	lsls	r3, r3, #12
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	621a      	str	r2, [r3, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bc80      	pop	{r7}
 8004ad8:	4770      	bx	lr

08004ada <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b087      	sub	sp, #28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0303 	bic.w	r3, r3, #3
 8004b06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	021b      	lsls	r3, r3, #8
 8004b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	697a      	ldr	r2, [r7, #20]
 8004b3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	621a      	str	r2, [r3, #32]
}
 8004b46:	bf00      	nop
 8004b48:	371c      	adds	r7, #28
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	031b      	lsls	r3, r3, #12
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	031b      	lsls	r3, r3, #12
 8004ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f043 0307 	orr.w	r3, r3, #7
 8004bea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	021a      	lsls	r2, r3, #8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a1a      	ldr	r2, [r3, #32]
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c72:	431a      	orrs	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]
}
 8004c78:	bf00      	nop
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bc80      	pop	{r7}
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e046      	b.n	8004d2a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d009      	beq.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a12      	ldr	r2, [pc, #72]	; (8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a10      	ldr	r2, [pc, #64]	; (8004d3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10c      	bne.n	8004d18 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800

08004d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr

08004d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e03f      	b.n	8004df6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fd fc46 	bl	800261c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2224      	movs	r2, #36	; 0x24
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f829 	bl	8004e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2220      	movs	r2, #32
 8004df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68da      	ldr	r2, [r3, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689a      	ldr	r2, [r3, #8]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e3a:	f023 030c 	bic.w	r3, r3, #12
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6812      	ldr	r2, [r2, #0]
 8004e42:	68b9      	ldr	r1, [r7, #8]
 8004e44:	430b      	orrs	r3, r1
 8004e46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <UART_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d103      	bne.n	8004e70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe ff94 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	e002      	b.n	8004e76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e70:	f7fe ff7c 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004e74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	009a      	lsls	r2, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e8c:	4a22      	ldr	r2, [pc, #136]	; (8004f18 <UART_SetConfig+0x118>)
 8004e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e92:	095b      	lsrs	r3, r3, #5
 8004e94:	0119      	lsls	r1, r3, #4
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009a      	lsls	r2, r3, #2
 8004ea0:	441a      	add	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eac:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <UART_SetConfig+0x118>)
 8004eae:	fba3 0302 	umull	r0, r3, r3, r2
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	2064      	movs	r0, #100	; 0x64
 8004eb6:	fb00 f303 	mul.w	r3, r0, r3
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	3332      	adds	r3, #50	; 0x32
 8004ec0:	4a15      	ldr	r2, [pc, #84]	; (8004f18 <UART_SetConfig+0x118>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ecc:	4419      	add	r1, r3
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	009a      	lsls	r2, r3, #2
 8004ed8:	441a      	add	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <UART_SetConfig+0x118>)
 8004ee6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	2064      	movs	r0, #100	; 0x64
 8004eee:	fb00 f303 	mul.w	r3, r0, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	3332      	adds	r3, #50	; 0x32
 8004ef8:	4a07      	ldr	r2, [pc, #28]	; (8004f18 <UART_SetConfig+0x118>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	095b      	lsrs	r3, r3, #5
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	440a      	add	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f0c:	bf00      	nop
 8004f0e:	3710      	adds	r7, #16
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40013800 	.word	0x40013800
 8004f18:	51eb851f 	.word	0x51eb851f

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000020 	.word	0x20000020

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	2500      	movs	r5, #0
 8004f2c:	4e0c      	ldr	r6, [pc, #48]	; (8004f60 <__libc_init_array+0x38>)
 8004f2e:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f30:	1ba4      	subs	r4, r4, r6
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	42a5      	cmp	r5, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	f002 f962 	bl	8007200 <_init>
 8004f3c:	2500      	movs	r5, #0
 8004f3e:	4e0a      	ldr	r6, [pc, #40]	; (8004f68 <__libc_init_array+0x40>)
 8004f40:	4c0a      	ldr	r4, [pc, #40]	; (8004f6c <__libc_init_array+0x44>)
 8004f42:	1ba4      	subs	r4, r4, r6
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	42a5      	cmp	r5, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f50:	4798      	blx	r3
 8004f52:	3501      	adds	r5, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f5a:	4798      	blx	r3
 8004f5c:	3501      	adds	r5, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08007548 	.word	0x08007548
 8004f64:	08007548 	.word	0x08007548
 8004f68:	08007548 	.word	0x08007548
 8004f6c:	0800754c 	.word	0x0800754c

08004f70 <memset>:
 8004f70:	4603      	mov	r3, r0
 8004f72:	4402      	add	r2, r0
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d100      	bne.n	8004f7a <memset+0xa>
 8004f78:	4770      	bx	lr
 8004f7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7e:	e7f9      	b.n	8004f74 <memset+0x4>

08004f80 <__cvt>:
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f86:	461e      	mov	r6, r3
 8004f88:	bfbb      	ittet	lt
 8004f8a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004f8e:	461e      	movlt	r6, r3
 8004f90:	2300      	movge	r3, #0
 8004f92:	232d      	movlt	r3, #45	; 0x2d
 8004f94:	b088      	sub	sp, #32
 8004f96:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004f98:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8004f9c:	f027 0720 	bic.w	r7, r7, #32
 8004fa0:	2f46      	cmp	r7, #70	; 0x46
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004fa6:	700b      	strb	r3, [r1, #0]
 8004fa8:	d004      	beq.n	8004fb4 <__cvt+0x34>
 8004faa:	2f45      	cmp	r7, #69	; 0x45
 8004fac:	d100      	bne.n	8004fb0 <__cvt+0x30>
 8004fae:	3501      	adds	r5, #1
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e000      	b.n	8004fb6 <__cvt+0x36>
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	aa07      	add	r2, sp, #28
 8004fb8:	9204      	str	r2, [sp, #16]
 8004fba:	aa06      	add	r2, sp, #24
 8004fbc:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004fc0:	e9cd 3500 	strd	r3, r5, [sp]
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4633      	mov	r3, r6
 8004fc8:	f000 fcda 	bl	8005980 <_dtoa_r>
 8004fcc:	2f47      	cmp	r7, #71	; 0x47
 8004fce:	4680      	mov	r8, r0
 8004fd0:	d102      	bne.n	8004fd8 <__cvt+0x58>
 8004fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fd4:	07db      	lsls	r3, r3, #31
 8004fd6:	d526      	bpl.n	8005026 <__cvt+0xa6>
 8004fd8:	2f46      	cmp	r7, #70	; 0x46
 8004fda:	eb08 0905 	add.w	r9, r8, r5
 8004fde:	d111      	bne.n	8005004 <__cvt+0x84>
 8004fe0:	f898 3000 	ldrb.w	r3, [r8]
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d10a      	bne.n	8004ffe <__cvt+0x7e>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2300      	movs	r3, #0
 8004fec:	4620      	mov	r0, r4
 8004fee:	4631      	mov	r1, r6
 8004ff0:	f7fb fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8004ff4:	b918      	cbnz	r0, 8004ffe <__cvt+0x7e>
 8004ff6:	f1c5 0501 	rsb	r5, r5, #1
 8004ffa:	f8ca 5000 	str.w	r5, [sl]
 8004ffe:	f8da 3000 	ldr.w	r3, [sl]
 8005002:	4499      	add	r9, r3
 8005004:	2200      	movs	r2, #0
 8005006:	2300      	movs	r3, #0
 8005008:	4620      	mov	r0, r4
 800500a:	4631      	mov	r1, r6
 800500c:	f7fb fccc 	bl	80009a8 <__aeabi_dcmpeq>
 8005010:	b938      	cbnz	r0, 8005022 <__cvt+0xa2>
 8005012:	2230      	movs	r2, #48	; 0x30
 8005014:	9b07      	ldr	r3, [sp, #28]
 8005016:	454b      	cmp	r3, r9
 8005018:	d205      	bcs.n	8005026 <__cvt+0xa6>
 800501a:	1c59      	adds	r1, r3, #1
 800501c:	9107      	str	r1, [sp, #28]
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	e7f8      	b.n	8005014 <__cvt+0x94>
 8005022:	f8cd 901c 	str.w	r9, [sp, #28]
 8005026:	4640      	mov	r0, r8
 8005028:	9b07      	ldr	r3, [sp, #28]
 800502a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800502c:	eba3 0308 	sub.w	r3, r3, r8
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	b008      	add	sp, #32
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005038 <__exponent>:
 8005038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800503a:	2900      	cmp	r1, #0
 800503c:	bfb4      	ite	lt
 800503e:	232d      	movlt	r3, #45	; 0x2d
 8005040:	232b      	movge	r3, #43	; 0x2b
 8005042:	4604      	mov	r4, r0
 8005044:	bfb8      	it	lt
 8005046:	4249      	neglt	r1, r1
 8005048:	2909      	cmp	r1, #9
 800504a:	f804 2b02 	strb.w	r2, [r4], #2
 800504e:	7043      	strb	r3, [r0, #1]
 8005050:	dd21      	ble.n	8005096 <__exponent+0x5e>
 8005052:	f10d 0307 	add.w	r3, sp, #7
 8005056:	461f      	mov	r7, r3
 8005058:	260a      	movs	r6, #10
 800505a:	fb91 f5f6 	sdiv	r5, r1, r6
 800505e:	fb06 1115 	mls	r1, r6, r5, r1
 8005062:	2d09      	cmp	r5, #9
 8005064:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005068:	f803 1c01 	strb.w	r1, [r3, #-1]
 800506c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005070:	4629      	mov	r1, r5
 8005072:	dc09      	bgt.n	8005088 <__exponent+0x50>
 8005074:	3130      	adds	r1, #48	; 0x30
 8005076:	3b02      	subs	r3, #2
 8005078:	f802 1c01 	strb.w	r1, [r2, #-1]
 800507c:	42bb      	cmp	r3, r7
 800507e:	4622      	mov	r2, r4
 8005080:	d304      	bcc.n	800508c <__exponent+0x54>
 8005082:	1a10      	subs	r0, r2, r0
 8005084:	b003      	add	sp, #12
 8005086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005088:	4613      	mov	r3, r2
 800508a:	e7e6      	b.n	800505a <__exponent+0x22>
 800508c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005090:	f804 2b01 	strb.w	r2, [r4], #1
 8005094:	e7f2      	b.n	800507c <__exponent+0x44>
 8005096:	2330      	movs	r3, #48	; 0x30
 8005098:	4419      	add	r1, r3
 800509a:	7083      	strb	r3, [r0, #2]
 800509c:	1d02      	adds	r2, r0, #4
 800509e:	70c1      	strb	r1, [r0, #3]
 80050a0:	e7ef      	b.n	8005082 <__exponent+0x4a>
	...

080050a4 <_printf_float>:
 80050a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a8:	b091      	sub	sp, #68	; 0x44
 80050aa:	460c      	mov	r4, r1
 80050ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80050ae:	4693      	mov	fp, r2
 80050b0:	461e      	mov	r6, r3
 80050b2:	4605      	mov	r5, r0
 80050b4:	f001 fa18 	bl	80064e8 <_localeconv_r>
 80050b8:	6803      	ldr	r3, [r0, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	9309      	str	r3, [sp, #36]	; 0x24
 80050be:	f7fb f847 	bl	8000150 <strlen>
 80050c2:	2300      	movs	r3, #0
 80050c4:	930e      	str	r3, [sp, #56]	; 0x38
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	900a      	str	r0, [sp, #40]	; 0x28
 80050ca:	3307      	adds	r3, #7
 80050cc:	f023 0307 	bic.w	r3, r3, #7
 80050d0:	f103 0208 	add.w	r2, r3, #8
 80050d4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80050d8:	f8d4 a000 	ldr.w	sl, [r4]
 80050dc:	603a      	str	r2, [r7, #0]
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80050e6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80050ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80050ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80050f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050f4:	4ba6      	ldr	r3, [pc, #664]	; (8005390 <_printf_float+0x2ec>)
 80050f6:	4638      	mov	r0, r7
 80050f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80050fa:	f7fb fc87 	bl	8000a0c <__aeabi_dcmpun>
 80050fe:	bb68      	cbnz	r0, 800515c <_printf_float+0xb8>
 8005100:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005104:	4ba2      	ldr	r3, [pc, #648]	; (8005390 <_printf_float+0x2ec>)
 8005106:	4638      	mov	r0, r7
 8005108:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800510a:	f7fb fc61 	bl	80009d0 <__aeabi_dcmple>
 800510e:	bb28      	cbnz	r0, 800515c <_printf_float+0xb8>
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	4638      	mov	r0, r7
 8005116:	4649      	mov	r1, r9
 8005118:	f7fb fc50 	bl	80009bc <__aeabi_dcmplt>
 800511c:	b110      	cbz	r0, 8005124 <_printf_float+0x80>
 800511e:	232d      	movs	r3, #45	; 0x2d
 8005120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005124:	4f9b      	ldr	r7, [pc, #620]	; (8005394 <_printf_float+0x2f0>)
 8005126:	4b9c      	ldr	r3, [pc, #624]	; (8005398 <_printf_float+0x2f4>)
 8005128:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800512c:	bf98      	it	ls
 800512e:	461f      	movls	r7, r3
 8005130:	2303      	movs	r3, #3
 8005132:	f04f 0900 	mov.w	r9, #0
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	f02a 0304 	bic.w	r3, sl, #4
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	9600      	str	r6, [sp, #0]
 8005140:	465b      	mov	r3, fp
 8005142:	aa0f      	add	r2, sp, #60	; 0x3c
 8005144:	4621      	mov	r1, r4
 8005146:	4628      	mov	r0, r5
 8005148:	f000 f9e2 	bl	8005510 <_printf_common>
 800514c:	3001      	adds	r0, #1
 800514e:	f040 8090 	bne.w	8005272 <_printf_float+0x1ce>
 8005152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005156:	b011      	add	sp, #68	; 0x44
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	463a      	mov	r2, r7
 800515e:	464b      	mov	r3, r9
 8005160:	4638      	mov	r0, r7
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb fc52 	bl	8000a0c <__aeabi_dcmpun>
 8005168:	b110      	cbz	r0, 8005170 <_printf_float+0xcc>
 800516a:	4f8c      	ldr	r7, [pc, #560]	; (800539c <_printf_float+0x2f8>)
 800516c:	4b8c      	ldr	r3, [pc, #560]	; (80053a0 <_printf_float+0x2fc>)
 800516e:	e7db      	b.n	8005128 <_printf_float+0x84>
 8005170:	6863      	ldr	r3, [r4, #4]
 8005172:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	a80d      	add	r0, sp, #52	; 0x34
 800517a:	a90e      	add	r1, sp, #56	; 0x38
 800517c:	d140      	bne.n	8005200 <_printf_float+0x15c>
 800517e:	2306      	movs	r3, #6
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	f04f 0c00 	mov.w	ip, #0
 8005186:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800518a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	6022      	str	r2, [r4, #0]
 8005192:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	463a      	mov	r2, r7
 800519a:	464b      	mov	r3, r9
 800519c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80051a0:	4628      	mov	r0, r5
 80051a2:	f7ff feed 	bl	8004f80 <__cvt>
 80051a6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80051aa:	2b47      	cmp	r3, #71	; 0x47
 80051ac:	4607      	mov	r7, r0
 80051ae:	d109      	bne.n	80051c4 <_printf_float+0x120>
 80051b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051b2:	1cd8      	adds	r0, r3, #3
 80051b4:	db02      	blt.n	80051bc <_printf_float+0x118>
 80051b6:	6862      	ldr	r2, [r4, #4]
 80051b8:	4293      	cmp	r3, r2
 80051ba:	dd47      	ble.n	800524c <_printf_float+0x1a8>
 80051bc:	f1a8 0802 	sub.w	r8, r8, #2
 80051c0:	fa5f f888 	uxtb.w	r8, r8
 80051c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80051c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051ca:	d824      	bhi.n	8005216 <_printf_float+0x172>
 80051cc:	3901      	subs	r1, #1
 80051ce:	4642      	mov	r2, r8
 80051d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80051d4:	910d      	str	r1, [sp, #52]	; 0x34
 80051d6:	f7ff ff2f 	bl	8005038 <__exponent>
 80051da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051dc:	4681      	mov	r9, r0
 80051de:	1813      	adds	r3, r2, r0
 80051e0:	2a01      	cmp	r2, #1
 80051e2:	6123      	str	r3, [r4, #16]
 80051e4:	dc02      	bgt.n	80051ec <_printf_float+0x148>
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	07d1      	lsls	r1, r2, #31
 80051ea:	d501      	bpl.n	80051f0 <_printf_float+0x14c>
 80051ec:	3301      	adds	r3, #1
 80051ee:	6123      	str	r3, [r4, #16]
 80051f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0a2      	beq.n	800513e <_printf_float+0x9a>
 80051f8:	232d      	movs	r3, #45	; 0x2d
 80051fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051fe:	e79e      	b.n	800513e <_printf_float+0x9a>
 8005200:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005204:	f000 816e 	beq.w	80054e4 <_printf_float+0x440>
 8005208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800520c:	d1b9      	bne.n	8005182 <_printf_float+0xde>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1b7      	bne.n	8005182 <_printf_float+0xde>
 8005212:	2301      	movs	r3, #1
 8005214:	e7b4      	b.n	8005180 <_printf_float+0xdc>
 8005216:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800521a:	d119      	bne.n	8005250 <_printf_float+0x1ac>
 800521c:	2900      	cmp	r1, #0
 800521e:	6863      	ldr	r3, [r4, #4]
 8005220:	dd0c      	ble.n	800523c <_printf_float+0x198>
 8005222:	6121      	str	r1, [r4, #16]
 8005224:	b913      	cbnz	r3, 800522c <_printf_float+0x188>
 8005226:	6822      	ldr	r2, [r4, #0]
 8005228:	07d2      	lsls	r2, r2, #31
 800522a:	d502      	bpl.n	8005232 <_printf_float+0x18e>
 800522c:	3301      	adds	r3, #1
 800522e:	440b      	add	r3, r1
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005234:	f04f 0900 	mov.w	r9, #0
 8005238:	65a3      	str	r3, [r4, #88]	; 0x58
 800523a:	e7d9      	b.n	80051f0 <_printf_float+0x14c>
 800523c:	b913      	cbnz	r3, 8005244 <_printf_float+0x1a0>
 800523e:	6822      	ldr	r2, [r4, #0]
 8005240:	07d0      	lsls	r0, r2, #31
 8005242:	d501      	bpl.n	8005248 <_printf_float+0x1a4>
 8005244:	3302      	adds	r3, #2
 8005246:	e7f3      	b.n	8005230 <_printf_float+0x18c>
 8005248:	2301      	movs	r3, #1
 800524a:	e7f1      	b.n	8005230 <_printf_float+0x18c>
 800524c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005250:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005254:	4293      	cmp	r3, r2
 8005256:	db05      	blt.n	8005264 <_printf_float+0x1c0>
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	6123      	str	r3, [r4, #16]
 800525c:	07d1      	lsls	r1, r2, #31
 800525e:	d5e8      	bpl.n	8005232 <_printf_float+0x18e>
 8005260:	3301      	adds	r3, #1
 8005262:	e7e5      	b.n	8005230 <_printf_float+0x18c>
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfcc      	ite	gt
 8005268:	2301      	movgt	r3, #1
 800526a:	f1c3 0302 	rsble	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	e7de      	b.n	8005230 <_printf_float+0x18c>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	055a      	lsls	r2, r3, #21
 8005276:	d407      	bmi.n	8005288 <_printf_float+0x1e4>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	463a      	mov	r2, r7
 800527c:	4659      	mov	r1, fp
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	3001      	adds	r0, #1
 8005284:	d129      	bne.n	80052da <_printf_float+0x236>
 8005286:	e764      	b.n	8005152 <_printf_float+0xae>
 8005288:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800528c:	f240 80d7 	bls.w	800543e <_printf_float+0x39a>
 8005290:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005294:	2200      	movs	r2, #0
 8005296:	2300      	movs	r3, #0
 8005298:	f7fb fb86 	bl	80009a8 <__aeabi_dcmpeq>
 800529c:	b388      	cbz	r0, 8005302 <_printf_float+0x25e>
 800529e:	2301      	movs	r3, #1
 80052a0:	4a40      	ldr	r2, [pc, #256]	; (80053a4 <_printf_float+0x300>)
 80052a2:	4659      	mov	r1, fp
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b0      	blx	r6
 80052a8:	3001      	adds	r0, #1
 80052aa:	f43f af52 	beq.w	8005152 <_printf_float+0xae>
 80052ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80052b2:	429a      	cmp	r2, r3
 80052b4:	db02      	blt.n	80052bc <_printf_float+0x218>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	07d8      	lsls	r0, r3, #31
 80052ba:	d50e      	bpl.n	80052da <_printf_float+0x236>
 80052bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052c0:	4659      	mov	r1, fp
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b0      	blx	r6
 80052c6:	3001      	adds	r0, #1
 80052c8:	f43f af43 	beq.w	8005152 <_printf_float+0xae>
 80052cc:	2700      	movs	r7, #0
 80052ce:	f104 081a 	add.w	r8, r4, #26
 80052d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052d4:	3b01      	subs	r3, #1
 80052d6:	42bb      	cmp	r3, r7
 80052d8:	dc09      	bgt.n	80052ee <_printf_float+0x24a>
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	079f      	lsls	r7, r3, #30
 80052de:	f100 80fd 	bmi.w	80054dc <_printf_float+0x438>
 80052e2:	68e0      	ldr	r0, [r4, #12]
 80052e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e6:	4298      	cmp	r0, r3
 80052e8:	bfb8      	it	lt
 80052ea:	4618      	movlt	r0, r3
 80052ec:	e733      	b.n	8005156 <_printf_float+0xb2>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4642      	mov	r2, r8
 80052f2:	4659      	mov	r1, fp
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f af2a 	beq.w	8005152 <_printf_float+0xae>
 80052fe:	3701      	adds	r7, #1
 8005300:	e7e7      	b.n	80052d2 <_printf_float+0x22e>
 8005302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	dc2b      	bgt.n	8005360 <_printf_float+0x2bc>
 8005308:	2301      	movs	r3, #1
 800530a:	4a26      	ldr	r2, [pc, #152]	; (80053a4 <_printf_float+0x300>)
 800530c:	4659      	mov	r1, fp
 800530e:	4628      	mov	r0, r5
 8005310:	47b0      	blx	r6
 8005312:	3001      	adds	r0, #1
 8005314:	f43f af1d 	beq.w	8005152 <_printf_float+0xae>
 8005318:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800531a:	b923      	cbnz	r3, 8005326 <_printf_float+0x282>
 800531c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800531e:	b913      	cbnz	r3, 8005326 <_printf_float+0x282>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	d5d9      	bpl.n	80052da <_printf_float+0x236>
 8005326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532a:	4659      	mov	r1, fp
 800532c:	4628      	mov	r0, r5
 800532e:	47b0      	blx	r6
 8005330:	3001      	adds	r0, #1
 8005332:	f43f af0e 	beq.w	8005152 <_printf_float+0xae>
 8005336:	f04f 0800 	mov.w	r8, #0
 800533a:	f104 091a 	add.w	r9, r4, #26
 800533e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005340:	425b      	negs	r3, r3
 8005342:	4543      	cmp	r3, r8
 8005344:	dc01      	bgt.n	800534a <_printf_float+0x2a6>
 8005346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005348:	e797      	b.n	800527a <_printf_float+0x1d6>
 800534a:	2301      	movs	r3, #1
 800534c:	464a      	mov	r2, r9
 800534e:	4659      	mov	r1, fp
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	3001      	adds	r0, #1
 8005356:	f43f aefc 	beq.w	8005152 <_printf_float+0xae>
 800535a:	f108 0801 	add.w	r8, r8, #1
 800535e:	e7ee      	b.n	800533e <_printf_float+0x29a>
 8005360:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005364:	429a      	cmp	r2, r3
 8005366:	bfa8      	it	ge
 8005368:	461a      	movge	r2, r3
 800536a:	2a00      	cmp	r2, #0
 800536c:	4690      	mov	r8, r2
 800536e:	dd07      	ble.n	8005380 <_printf_float+0x2dc>
 8005370:	4613      	mov	r3, r2
 8005372:	4659      	mov	r1, fp
 8005374:	463a      	mov	r2, r7
 8005376:	4628      	mov	r0, r5
 8005378:	47b0      	blx	r6
 800537a:	3001      	adds	r0, #1
 800537c:	f43f aee9 	beq.w	8005152 <_printf_float+0xae>
 8005380:	f104 031a 	add.w	r3, r4, #26
 8005384:	f04f 0a00 	mov.w	sl, #0
 8005388:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800538c:	930b      	str	r3, [sp, #44]	; 0x2c
 800538e:	e015      	b.n	80053bc <_printf_float+0x318>
 8005390:	7fefffff 	.word	0x7fefffff
 8005394:	080072e4 	.word	0x080072e4
 8005398:	080072e0 	.word	0x080072e0
 800539c:	080072ec 	.word	0x080072ec
 80053a0:	080072e8 	.word	0x080072e8
 80053a4:	080072f0 	.word	0x080072f0
 80053a8:	2301      	movs	r3, #1
 80053aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053ac:	4659      	mov	r1, fp
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b0      	blx	r6
 80053b2:	3001      	adds	r0, #1
 80053b4:	f43f aecd 	beq.w	8005152 <_printf_float+0xae>
 80053b8:	f10a 0a01 	add.w	sl, sl, #1
 80053bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80053c0:	eba9 0308 	sub.w	r3, r9, r8
 80053c4:	4553      	cmp	r3, sl
 80053c6:	dcef      	bgt.n	80053a8 <_printf_float+0x304>
 80053c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80053cc:	429a      	cmp	r2, r3
 80053ce:	444f      	add	r7, r9
 80053d0:	db14      	blt.n	80053fc <_printf_float+0x358>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	07da      	lsls	r2, r3, #31
 80053d6:	d411      	bmi.n	80053fc <_printf_float+0x358>
 80053d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053dc:	eba3 0209 	sub.w	r2, r3, r9
 80053e0:	eba3 0901 	sub.w	r9, r3, r1
 80053e4:	4591      	cmp	r9, r2
 80053e6:	bfa8      	it	ge
 80053e8:	4691      	movge	r9, r2
 80053ea:	f1b9 0f00 	cmp.w	r9, #0
 80053ee:	dc0d      	bgt.n	800540c <_printf_float+0x368>
 80053f0:	2700      	movs	r7, #0
 80053f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80053f6:	f104 081a 	add.w	r8, r4, #26
 80053fa:	e018      	b.n	800542e <_printf_float+0x38a>
 80053fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005400:	4659      	mov	r1, fp
 8005402:	4628      	mov	r0, r5
 8005404:	47b0      	blx	r6
 8005406:	3001      	adds	r0, #1
 8005408:	d1e6      	bne.n	80053d8 <_printf_float+0x334>
 800540a:	e6a2      	b.n	8005152 <_printf_float+0xae>
 800540c:	464b      	mov	r3, r9
 800540e:	463a      	mov	r2, r7
 8005410:	4659      	mov	r1, fp
 8005412:	4628      	mov	r0, r5
 8005414:	47b0      	blx	r6
 8005416:	3001      	adds	r0, #1
 8005418:	d1ea      	bne.n	80053f0 <_printf_float+0x34c>
 800541a:	e69a      	b.n	8005152 <_printf_float+0xae>
 800541c:	2301      	movs	r3, #1
 800541e:	4642      	mov	r2, r8
 8005420:	4659      	mov	r1, fp
 8005422:	4628      	mov	r0, r5
 8005424:	47b0      	blx	r6
 8005426:	3001      	adds	r0, #1
 8005428:	f43f ae93 	beq.w	8005152 <_printf_float+0xae>
 800542c:	3701      	adds	r7, #1
 800542e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	eba3 0309 	sub.w	r3, r3, r9
 8005438:	42bb      	cmp	r3, r7
 800543a:	dcef      	bgt.n	800541c <_printf_float+0x378>
 800543c:	e74d      	b.n	80052da <_printf_float+0x236>
 800543e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005440:	2a01      	cmp	r2, #1
 8005442:	dc01      	bgt.n	8005448 <_printf_float+0x3a4>
 8005444:	07db      	lsls	r3, r3, #31
 8005446:	d538      	bpl.n	80054ba <_printf_float+0x416>
 8005448:	2301      	movs	r3, #1
 800544a:	463a      	mov	r2, r7
 800544c:	4659      	mov	r1, fp
 800544e:	4628      	mov	r0, r5
 8005450:	47b0      	blx	r6
 8005452:	3001      	adds	r0, #1
 8005454:	f43f ae7d 	beq.w	8005152 <_printf_float+0xae>
 8005458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800545c:	4659      	mov	r1, fp
 800545e:	4628      	mov	r0, r5
 8005460:	47b0      	blx	r6
 8005462:	3001      	adds	r0, #1
 8005464:	f107 0701 	add.w	r7, r7, #1
 8005468:	f43f ae73 	beq.w	8005152 <_printf_float+0xae>
 800546c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005472:	2200      	movs	r2, #0
 8005474:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8005478:	2300      	movs	r3, #0
 800547a:	f7fb fa95 	bl	80009a8 <__aeabi_dcmpeq>
 800547e:	b9c0      	cbnz	r0, 80054b2 <_printf_float+0x40e>
 8005480:	4643      	mov	r3, r8
 8005482:	463a      	mov	r2, r7
 8005484:	4659      	mov	r1, fp
 8005486:	4628      	mov	r0, r5
 8005488:	47b0      	blx	r6
 800548a:	3001      	adds	r0, #1
 800548c:	d10d      	bne.n	80054aa <_printf_float+0x406>
 800548e:	e660      	b.n	8005152 <_printf_float+0xae>
 8005490:	2301      	movs	r3, #1
 8005492:	4642      	mov	r2, r8
 8005494:	4659      	mov	r1, fp
 8005496:	4628      	mov	r0, r5
 8005498:	47b0      	blx	r6
 800549a:	3001      	adds	r0, #1
 800549c:	f43f ae59 	beq.w	8005152 <_printf_float+0xae>
 80054a0:	3701      	adds	r7, #1
 80054a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a4:	3b01      	subs	r3, #1
 80054a6:	42bb      	cmp	r3, r7
 80054a8:	dcf2      	bgt.n	8005490 <_printf_float+0x3ec>
 80054aa:	464b      	mov	r3, r9
 80054ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80054b0:	e6e4      	b.n	800527c <_printf_float+0x1d8>
 80054b2:	2700      	movs	r7, #0
 80054b4:	f104 081a 	add.w	r8, r4, #26
 80054b8:	e7f3      	b.n	80054a2 <_printf_float+0x3fe>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7e1      	b.n	8005482 <_printf_float+0x3de>
 80054be:	2301      	movs	r3, #1
 80054c0:	4642      	mov	r2, r8
 80054c2:	4659      	mov	r1, fp
 80054c4:	4628      	mov	r0, r5
 80054c6:	47b0      	blx	r6
 80054c8:	3001      	adds	r0, #1
 80054ca:	f43f ae42 	beq.w	8005152 <_printf_float+0xae>
 80054ce:	3701      	adds	r7, #1
 80054d0:	68e3      	ldr	r3, [r4, #12]
 80054d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80054d4:	1a9b      	subs	r3, r3, r2
 80054d6:	42bb      	cmp	r3, r7
 80054d8:	dcf1      	bgt.n	80054be <_printf_float+0x41a>
 80054da:	e702      	b.n	80052e2 <_printf_float+0x23e>
 80054dc:	2700      	movs	r7, #0
 80054de:	f104 0819 	add.w	r8, r4, #25
 80054e2:	e7f5      	b.n	80054d0 <_printf_float+0x42c>
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f43f ae94 	beq.w	8005212 <_printf_float+0x16e>
 80054ea:	f04f 0c00 	mov.w	ip, #0
 80054ee:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80054f2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80054f6:	6022      	str	r2, [r4, #0]
 80054f8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80054fc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	463a      	mov	r2, r7
 8005504:	464b      	mov	r3, r9
 8005506:	4628      	mov	r0, r5
 8005508:	f7ff fd3a 	bl	8004f80 <__cvt>
 800550c:	4607      	mov	r7, r0
 800550e:	e64f      	b.n	80051b0 <_printf_float+0x10c>

08005510 <_printf_common>:
 8005510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005514:	4691      	mov	r9, r2
 8005516:	461f      	mov	r7, r3
 8005518:	688a      	ldr	r2, [r1, #8]
 800551a:	690b      	ldr	r3, [r1, #16]
 800551c:	4606      	mov	r6, r0
 800551e:	4293      	cmp	r3, r2
 8005520:	bfb8      	it	lt
 8005522:	4613      	movlt	r3, r2
 8005524:	f8c9 3000 	str.w	r3, [r9]
 8005528:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800552c:	460c      	mov	r4, r1
 800552e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005532:	b112      	cbz	r2, 800553a <_printf_common+0x2a>
 8005534:	3301      	adds	r3, #1
 8005536:	f8c9 3000 	str.w	r3, [r9]
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	0699      	lsls	r1, r3, #26
 800553e:	bf42      	ittt	mi
 8005540:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005544:	3302      	addmi	r3, #2
 8005546:	f8c9 3000 	strmi.w	r3, [r9]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	f015 0506 	ands.w	r5, r5, #6
 8005550:	d107      	bne.n	8005562 <_printf_common+0x52>
 8005552:	f104 0a19 	add.w	sl, r4, #25
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	f8d9 2000 	ldr.w	r2, [r9]
 800555c:	1a9b      	subs	r3, r3, r2
 800555e:	42ab      	cmp	r3, r5
 8005560:	dc29      	bgt.n	80055b6 <_printf_common+0xa6>
 8005562:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005566:	6822      	ldr	r2, [r4, #0]
 8005568:	3300      	adds	r3, #0
 800556a:	bf18      	it	ne
 800556c:	2301      	movne	r3, #1
 800556e:	0692      	lsls	r2, r2, #26
 8005570:	d42e      	bmi.n	80055d0 <_printf_common+0xc0>
 8005572:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005576:	4639      	mov	r1, r7
 8005578:	4630      	mov	r0, r6
 800557a:	47c0      	blx	r8
 800557c:	3001      	adds	r0, #1
 800557e:	d021      	beq.n	80055c4 <_printf_common+0xb4>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	68e5      	ldr	r5, [r4, #12]
 8005584:	f003 0306 	and.w	r3, r3, #6
 8005588:	2b04      	cmp	r3, #4
 800558a:	bf18      	it	ne
 800558c:	2500      	movne	r5, #0
 800558e:	f8d9 2000 	ldr.w	r2, [r9]
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	bf08      	it	eq
 8005598:	1aad      	subeq	r5, r5, r2
 800559a:	68a3      	ldr	r3, [r4, #8]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	bf08      	it	eq
 80055a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055a4:	4293      	cmp	r3, r2
 80055a6:	bfc4      	itt	gt
 80055a8:	1a9b      	subgt	r3, r3, r2
 80055aa:	18ed      	addgt	r5, r5, r3
 80055ac:	341a      	adds	r4, #26
 80055ae:	454d      	cmp	r5, r9
 80055b0:	d11a      	bne.n	80055e8 <_printf_common+0xd8>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e008      	b.n	80055c8 <_printf_common+0xb8>
 80055b6:	2301      	movs	r3, #1
 80055b8:	4652      	mov	r2, sl
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	47c0      	blx	r8
 80055c0:	3001      	adds	r0, #1
 80055c2:	d103      	bne.n	80055cc <_printf_common+0xbc>
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055cc:	3501      	adds	r5, #1
 80055ce:	e7c2      	b.n	8005556 <_printf_common+0x46>
 80055d0:	2030      	movs	r0, #48	; 0x30
 80055d2:	18e1      	adds	r1, r4, r3
 80055d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055de:	4422      	add	r2, r4
 80055e0:	3302      	adds	r3, #2
 80055e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055e6:	e7c4      	b.n	8005572 <_printf_common+0x62>
 80055e8:	2301      	movs	r3, #1
 80055ea:	4622      	mov	r2, r4
 80055ec:	4639      	mov	r1, r7
 80055ee:	4630      	mov	r0, r6
 80055f0:	47c0      	blx	r8
 80055f2:	3001      	adds	r0, #1
 80055f4:	d0e6      	beq.n	80055c4 <_printf_common+0xb4>
 80055f6:	f109 0901 	add.w	r9, r9, #1
 80055fa:	e7d8      	b.n	80055ae <_printf_common+0x9e>

080055fc <_printf_i>:
 80055fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005600:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005604:	460c      	mov	r4, r1
 8005606:	7e09      	ldrb	r1, [r1, #24]
 8005608:	b085      	sub	sp, #20
 800560a:	296e      	cmp	r1, #110	; 0x6e
 800560c:	4617      	mov	r7, r2
 800560e:	4606      	mov	r6, r0
 8005610:	4698      	mov	r8, r3
 8005612:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005614:	f000 80b3 	beq.w	800577e <_printf_i+0x182>
 8005618:	d822      	bhi.n	8005660 <_printf_i+0x64>
 800561a:	2963      	cmp	r1, #99	; 0x63
 800561c:	d036      	beq.n	800568c <_printf_i+0x90>
 800561e:	d80a      	bhi.n	8005636 <_printf_i+0x3a>
 8005620:	2900      	cmp	r1, #0
 8005622:	f000 80b9 	beq.w	8005798 <_printf_i+0x19c>
 8005626:	2958      	cmp	r1, #88	; 0x58
 8005628:	f000 8083 	beq.w	8005732 <_printf_i+0x136>
 800562c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005630:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005634:	e032      	b.n	800569c <_printf_i+0xa0>
 8005636:	2964      	cmp	r1, #100	; 0x64
 8005638:	d001      	beq.n	800563e <_printf_i+0x42>
 800563a:	2969      	cmp	r1, #105	; 0x69
 800563c:	d1f6      	bne.n	800562c <_printf_i+0x30>
 800563e:	6820      	ldr	r0, [r4, #0]
 8005640:	6813      	ldr	r3, [r2, #0]
 8005642:	0605      	lsls	r5, r0, #24
 8005644:	f103 0104 	add.w	r1, r3, #4
 8005648:	d52a      	bpl.n	80056a0 <_printf_i+0xa4>
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	da03      	bge.n	800565a <_printf_i+0x5e>
 8005652:	222d      	movs	r2, #45	; 0x2d
 8005654:	425b      	negs	r3, r3
 8005656:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800565a:	486f      	ldr	r0, [pc, #444]	; (8005818 <_printf_i+0x21c>)
 800565c:	220a      	movs	r2, #10
 800565e:	e039      	b.n	80056d4 <_printf_i+0xd8>
 8005660:	2973      	cmp	r1, #115	; 0x73
 8005662:	f000 809d 	beq.w	80057a0 <_printf_i+0x1a4>
 8005666:	d808      	bhi.n	800567a <_printf_i+0x7e>
 8005668:	296f      	cmp	r1, #111	; 0x6f
 800566a:	d020      	beq.n	80056ae <_printf_i+0xb2>
 800566c:	2970      	cmp	r1, #112	; 0x70
 800566e:	d1dd      	bne.n	800562c <_printf_i+0x30>
 8005670:	6823      	ldr	r3, [r4, #0]
 8005672:	f043 0320 	orr.w	r3, r3, #32
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	e003      	b.n	8005682 <_printf_i+0x86>
 800567a:	2975      	cmp	r1, #117	; 0x75
 800567c:	d017      	beq.n	80056ae <_printf_i+0xb2>
 800567e:	2978      	cmp	r1, #120	; 0x78
 8005680:	d1d4      	bne.n	800562c <_printf_i+0x30>
 8005682:	2378      	movs	r3, #120	; 0x78
 8005684:	4865      	ldr	r0, [pc, #404]	; (800581c <_printf_i+0x220>)
 8005686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568a:	e055      	b.n	8005738 <_printf_i+0x13c>
 800568c:	6813      	ldr	r3, [r2, #0]
 800568e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005692:	1d19      	adds	r1, r3, #4
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6011      	str	r1, [r2, #0]
 8005698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800569c:	2301      	movs	r3, #1
 800569e:	e08c      	b.n	80057ba <_printf_i+0x1be>
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056a6:	6011      	str	r1, [r2, #0]
 80056a8:	bf18      	it	ne
 80056aa:	b21b      	sxthne	r3, r3
 80056ac:	e7cf      	b.n	800564e <_printf_i+0x52>
 80056ae:	6813      	ldr	r3, [r2, #0]
 80056b0:	6825      	ldr	r5, [r4, #0]
 80056b2:	1d18      	adds	r0, r3, #4
 80056b4:	6010      	str	r0, [r2, #0]
 80056b6:	0628      	lsls	r0, r5, #24
 80056b8:	d501      	bpl.n	80056be <_printf_i+0xc2>
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	e002      	b.n	80056c4 <_printf_i+0xc8>
 80056be:	0668      	lsls	r0, r5, #25
 80056c0:	d5fb      	bpl.n	80056ba <_printf_i+0xbe>
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	296f      	cmp	r1, #111	; 0x6f
 80056c6:	bf14      	ite	ne
 80056c8:	220a      	movne	r2, #10
 80056ca:	2208      	moveq	r2, #8
 80056cc:	4852      	ldr	r0, [pc, #328]	; (8005818 <_printf_i+0x21c>)
 80056ce:	2100      	movs	r1, #0
 80056d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d4:	6865      	ldr	r5, [r4, #4]
 80056d6:	2d00      	cmp	r5, #0
 80056d8:	60a5      	str	r5, [r4, #8]
 80056da:	f2c0 8095 	blt.w	8005808 <_printf_i+0x20c>
 80056de:	6821      	ldr	r1, [r4, #0]
 80056e0:	f021 0104 	bic.w	r1, r1, #4
 80056e4:	6021      	str	r1, [r4, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d13d      	bne.n	8005766 <_printf_i+0x16a>
 80056ea:	2d00      	cmp	r5, #0
 80056ec:	f040 808e 	bne.w	800580c <_printf_i+0x210>
 80056f0:	4665      	mov	r5, ip
 80056f2:	2a08      	cmp	r2, #8
 80056f4:	d10b      	bne.n	800570e <_printf_i+0x112>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	07db      	lsls	r3, r3, #31
 80056fa:	d508      	bpl.n	800570e <_printf_i+0x112>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	6862      	ldr	r2, [r4, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	bfde      	ittt	le
 8005704:	2330      	movle	r3, #48	; 0x30
 8005706:	f805 3c01 	strble.w	r3, [r5, #-1]
 800570a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800570e:	ebac 0305 	sub.w	r3, ip, r5
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	f8cd 8000 	str.w	r8, [sp]
 8005718:	463b      	mov	r3, r7
 800571a:	aa03      	add	r2, sp, #12
 800571c:	4621      	mov	r1, r4
 800571e:	4630      	mov	r0, r6
 8005720:	f7ff fef6 	bl	8005510 <_printf_common>
 8005724:	3001      	adds	r0, #1
 8005726:	d14d      	bne.n	80057c4 <_printf_i+0x1c8>
 8005728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800572c:	b005      	add	sp, #20
 800572e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005732:	4839      	ldr	r0, [pc, #228]	; (8005818 <_printf_i+0x21c>)
 8005734:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005738:	6813      	ldr	r3, [r2, #0]
 800573a:	6821      	ldr	r1, [r4, #0]
 800573c:	1d1d      	adds	r5, r3, #4
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6015      	str	r5, [r2, #0]
 8005742:	060a      	lsls	r2, r1, #24
 8005744:	d50b      	bpl.n	800575e <_printf_i+0x162>
 8005746:	07ca      	lsls	r2, r1, #31
 8005748:	bf44      	itt	mi
 800574a:	f041 0120 	orrmi.w	r1, r1, #32
 800574e:	6021      	strmi	r1, [r4, #0]
 8005750:	b91b      	cbnz	r3, 800575a <_printf_i+0x15e>
 8005752:	6822      	ldr	r2, [r4, #0]
 8005754:	f022 0220 	bic.w	r2, r2, #32
 8005758:	6022      	str	r2, [r4, #0]
 800575a:	2210      	movs	r2, #16
 800575c:	e7b7      	b.n	80056ce <_printf_i+0xd2>
 800575e:	064d      	lsls	r5, r1, #25
 8005760:	bf48      	it	mi
 8005762:	b29b      	uxthmi	r3, r3
 8005764:	e7ef      	b.n	8005746 <_printf_i+0x14a>
 8005766:	4665      	mov	r5, ip
 8005768:	fbb3 f1f2 	udiv	r1, r3, r2
 800576c:	fb02 3311 	mls	r3, r2, r1, r3
 8005770:	5cc3      	ldrb	r3, [r0, r3]
 8005772:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005776:	460b      	mov	r3, r1
 8005778:	2900      	cmp	r1, #0
 800577a:	d1f5      	bne.n	8005768 <_printf_i+0x16c>
 800577c:	e7b9      	b.n	80056f2 <_printf_i+0xf6>
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	6825      	ldr	r5, [r4, #0]
 8005782:	1d18      	adds	r0, r3, #4
 8005784:	6961      	ldr	r1, [r4, #20]
 8005786:	6010      	str	r0, [r2, #0]
 8005788:	0628      	lsls	r0, r5, #24
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	d501      	bpl.n	8005792 <_printf_i+0x196>
 800578e:	6019      	str	r1, [r3, #0]
 8005790:	e002      	b.n	8005798 <_printf_i+0x19c>
 8005792:	066a      	lsls	r2, r5, #25
 8005794:	d5fb      	bpl.n	800578e <_printf_i+0x192>
 8005796:	8019      	strh	r1, [r3, #0]
 8005798:	2300      	movs	r3, #0
 800579a:	4665      	mov	r5, ip
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	e7b9      	b.n	8005714 <_printf_i+0x118>
 80057a0:	6813      	ldr	r3, [r2, #0]
 80057a2:	1d19      	adds	r1, r3, #4
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	681d      	ldr	r5, [r3, #0]
 80057a8:	6862      	ldr	r2, [r4, #4]
 80057aa:	2100      	movs	r1, #0
 80057ac:	4628      	mov	r0, r5
 80057ae:	f000 feb1 	bl	8006514 <memchr>
 80057b2:	b108      	cbz	r0, 80057b8 <_printf_i+0x1bc>
 80057b4:	1b40      	subs	r0, r0, r5
 80057b6:	6060      	str	r0, [r4, #4]
 80057b8:	6863      	ldr	r3, [r4, #4]
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	2300      	movs	r3, #0
 80057be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057c2:	e7a7      	b.n	8005714 <_printf_i+0x118>
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	462a      	mov	r2, r5
 80057c8:	4639      	mov	r1, r7
 80057ca:	4630      	mov	r0, r6
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0aa      	beq.n	8005728 <_printf_i+0x12c>
 80057d2:	6823      	ldr	r3, [r4, #0]
 80057d4:	079b      	lsls	r3, r3, #30
 80057d6:	d413      	bmi.n	8005800 <_printf_i+0x204>
 80057d8:	68e0      	ldr	r0, [r4, #12]
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	4298      	cmp	r0, r3
 80057de:	bfb8      	it	lt
 80057e0:	4618      	movlt	r0, r3
 80057e2:	e7a3      	b.n	800572c <_printf_i+0x130>
 80057e4:	2301      	movs	r3, #1
 80057e6:	464a      	mov	r2, r9
 80057e8:	4639      	mov	r1, r7
 80057ea:	4630      	mov	r0, r6
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d09a      	beq.n	8005728 <_printf_i+0x12c>
 80057f2:	3501      	adds	r5, #1
 80057f4:	68e3      	ldr	r3, [r4, #12]
 80057f6:	9a03      	ldr	r2, [sp, #12]
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	42ab      	cmp	r3, r5
 80057fc:	dcf2      	bgt.n	80057e4 <_printf_i+0x1e8>
 80057fe:	e7eb      	b.n	80057d8 <_printf_i+0x1dc>
 8005800:	2500      	movs	r5, #0
 8005802:	f104 0919 	add.w	r9, r4, #25
 8005806:	e7f5      	b.n	80057f4 <_printf_i+0x1f8>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ac      	bne.n	8005766 <_printf_i+0x16a>
 800580c:	7803      	ldrb	r3, [r0, #0]
 800580e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005816:	e76c      	b.n	80056f2 <_printf_i+0xf6>
 8005818:	080072f2 	.word	0x080072f2
 800581c:	08007303 	.word	0x08007303

08005820 <siprintf>:
 8005820:	b40e      	push	{r1, r2, r3}
 8005822:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005826:	b500      	push	{lr}
 8005828:	b09c      	sub	sp, #112	; 0x70
 800582a:	ab1d      	add	r3, sp, #116	; 0x74
 800582c:	9002      	str	r0, [sp, #8]
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	9107      	str	r1, [sp, #28]
 8005832:	9104      	str	r1, [sp, #16]
 8005834:	4808      	ldr	r0, [pc, #32]	; (8005858 <siprintf+0x38>)
 8005836:	4909      	ldr	r1, [pc, #36]	; (800585c <siprintf+0x3c>)
 8005838:	f853 2b04 	ldr.w	r2, [r3], #4
 800583c:	9105      	str	r1, [sp, #20]
 800583e:	6800      	ldr	r0, [r0, #0]
 8005840:	a902      	add	r1, sp, #8
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	f001 fa6a 	bl	8006d1c <_svfiprintf_r>
 8005848:	2200      	movs	r2, #0
 800584a:	9b02      	ldr	r3, [sp, #8]
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	b01c      	add	sp, #112	; 0x70
 8005850:	f85d eb04 	ldr.w	lr, [sp], #4
 8005854:	b003      	add	sp, #12
 8005856:	4770      	bx	lr
 8005858:	20000020 	.word	0x20000020
 800585c:	ffff0208 	.word	0xffff0208

08005860 <quorem>:
 8005860:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005864:	6903      	ldr	r3, [r0, #16]
 8005866:	690c      	ldr	r4, [r1, #16]
 8005868:	4680      	mov	r8, r0
 800586a:	42a3      	cmp	r3, r4
 800586c:	f2c0 8084 	blt.w	8005978 <quorem+0x118>
 8005870:	3c01      	subs	r4, #1
 8005872:	f101 0714 	add.w	r7, r1, #20
 8005876:	f100 0614 	add.w	r6, r0, #20
 800587a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800587e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005882:	3501      	adds	r5, #1
 8005884:	fbb0 f5f5 	udiv	r5, r0, r5
 8005888:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800588c:	eb06 030c 	add.w	r3, r6, ip
 8005890:	eb07 090c 	add.w	r9, r7, ip
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	b39d      	cbz	r5, 8005900 <quorem+0xa0>
 8005898:	f04f 0a00 	mov.w	sl, #0
 800589c:	4638      	mov	r0, r7
 800589e:	46b6      	mov	lr, r6
 80058a0:	46d3      	mov	fp, sl
 80058a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80058a6:	b293      	uxth	r3, r2
 80058a8:	fb05 a303 	mla	r3, r5, r3, sl
 80058ac:	0c12      	lsrs	r2, r2, #16
 80058ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058b2:	fb05 a202 	mla	r2, r5, r2, sl
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	ebab 0303 	sub.w	r3, fp, r3
 80058bc:	f8de b000 	ldr.w	fp, [lr]
 80058c0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80058c4:	fa1f fb8b 	uxth.w	fp, fp
 80058c8:	445b      	add	r3, fp
 80058ca:	fa1f fb82 	uxth.w	fp, r2
 80058ce:	f8de 2000 	ldr.w	r2, [lr]
 80058d2:	4581      	cmp	r9, r0
 80058d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80058d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058e2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80058e6:	f84e 3b04 	str.w	r3, [lr], #4
 80058ea:	d2da      	bcs.n	80058a2 <quorem+0x42>
 80058ec:	f856 300c 	ldr.w	r3, [r6, ip]
 80058f0:	b933      	cbnz	r3, 8005900 <quorem+0xa0>
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	3b04      	subs	r3, #4
 80058f6:	429e      	cmp	r6, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	d331      	bcc.n	8005960 <quorem+0x100>
 80058fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8005900:	4640      	mov	r0, r8
 8005902:	f001 f835 	bl	8006970 <__mcmp>
 8005906:	2800      	cmp	r0, #0
 8005908:	db26      	blt.n	8005958 <quorem+0xf8>
 800590a:	4630      	mov	r0, r6
 800590c:	f04f 0c00 	mov.w	ip, #0
 8005910:	3501      	adds	r5, #1
 8005912:	f857 1b04 	ldr.w	r1, [r7], #4
 8005916:	f8d0 e000 	ldr.w	lr, [r0]
 800591a:	b28b      	uxth	r3, r1
 800591c:	ebac 0303 	sub.w	r3, ip, r3
 8005920:	fa1f f28e 	uxth.w	r2, lr
 8005924:	4413      	add	r3, r2
 8005926:	0c0a      	lsrs	r2, r1, #16
 8005928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800592c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005930:	b29b      	uxth	r3, r3
 8005932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005936:	45b9      	cmp	r9, r7
 8005938:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800593c:	f840 3b04 	str.w	r3, [r0], #4
 8005940:	d2e7      	bcs.n	8005912 <quorem+0xb2>
 8005942:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005946:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800594a:	b92a      	cbnz	r2, 8005958 <quorem+0xf8>
 800594c:	3b04      	subs	r3, #4
 800594e:	429e      	cmp	r6, r3
 8005950:	461a      	mov	r2, r3
 8005952:	d30b      	bcc.n	800596c <quorem+0x10c>
 8005954:	f8c8 4010 	str.w	r4, [r8, #16]
 8005958:	4628      	mov	r0, r5
 800595a:	b003      	add	sp, #12
 800595c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	3b04      	subs	r3, #4
 8005964:	2a00      	cmp	r2, #0
 8005966:	d1c9      	bne.n	80058fc <quorem+0x9c>
 8005968:	3c01      	subs	r4, #1
 800596a:	e7c4      	b.n	80058f6 <quorem+0x96>
 800596c:	6812      	ldr	r2, [r2, #0]
 800596e:	3b04      	subs	r3, #4
 8005970:	2a00      	cmp	r2, #0
 8005972:	d1ef      	bne.n	8005954 <quorem+0xf4>
 8005974:	3c01      	subs	r4, #1
 8005976:	e7ea      	b.n	800594e <quorem+0xee>
 8005978:	2000      	movs	r0, #0
 800597a:	e7ee      	b.n	800595a <quorem+0xfa>
 800597c:	0000      	movs	r0, r0
	...

08005980 <_dtoa_r>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	4616      	mov	r6, r2
 8005986:	461f      	mov	r7, r3
 8005988:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800598a:	b095      	sub	sp, #84	; 0x54
 800598c:	4604      	mov	r4, r0
 800598e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005992:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005996:	b93d      	cbnz	r5, 80059a8 <_dtoa_r+0x28>
 8005998:	2010      	movs	r0, #16
 800599a:	f000 fdb3 	bl	8006504 <malloc>
 800599e:	6260      	str	r0, [r4, #36]	; 0x24
 80059a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80059a4:	6005      	str	r5, [r0, #0]
 80059a6:	60c5      	str	r5, [r0, #12]
 80059a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059aa:	6819      	ldr	r1, [r3, #0]
 80059ac:	b151      	cbz	r1, 80059c4 <_dtoa_r+0x44>
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	2301      	movs	r3, #1
 80059b2:	4093      	lsls	r3, r2
 80059b4:	604a      	str	r2, [r1, #4]
 80059b6:	608b      	str	r3, [r1, #8]
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 fdf8 	bl	80065ae <_Bfree>
 80059be:	2200      	movs	r2, #0
 80059c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	1e3b      	subs	r3, r7, #0
 80059c6:	bfaf      	iteee	ge
 80059c8:	2300      	movge	r3, #0
 80059ca:	2201      	movlt	r2, #1
 80059cc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80059d0:	9303      	strlt	r3, [sp, #12]
 80059d2:	bfac      	ite	ge
 80059d4:	f8c8 3000 	strge.w	r3, [r8]
 80059d8:	f8c8 2000 	strlt.w	r2, [r8]
 80059dc:	4bae      	ldr	r3, [pc, #696]	; (8005c98 <_dtoa_r+0x318>)
 80059de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80059e2:	ea33 0308 	bics.w	r3, r3, r8
 80059e6:	d11b      	bne.n	8005a20 <_dtoa_r+0xa0>
 80059e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80059ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	9b02      	ldr	r3, [sp, #8]
 80059f2:	b923      	cbnz	r3, 80059fe <_dtoa_r+0x7e>
 80059f4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f000 8545 	beq.w	8006488 <_dtoa_r+0xb08>
 80059fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a00:	b953      	cbnz	r3, 8005a18 <_dtoa_r+0x98>
 8005a02:	4ba6      	ldr	r3, [pc, #664]	; (8005c9c <_dtoa_r+0x31c>)
 8005a04:	e021      	b.n	8005a4a <_dtoa_r+0xca>
 8005a06:	4ba6      	ldr	r3, [pc, #664]	; (8005ca0 <_dtoa_r+0x320>)
 8005a08:	9306      	str	r3, [sp, #24]
 8005a0a:	3308      	adds	r3, #8
 8005a0c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	9806      	ldr	r0, [sp, #24]
 8005a12:	b015      	add	sp, #84	; 0x54
 8005a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a18:	4ba0      	ldr	r3, [pc, #640]	; (8005c9c <_dtoa_r+0x31c>)
 8005a1a:	9306      	str	r3, [sp, #24]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	e7f5      	b.n	8005a0c <_dtoa_r+0x8c>
 8005a20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2300      	movs	r3, #0
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f7fa ffbc 	bl	80009a8 <__aeabi_dcmpeq>
 8005a30:	4682      	mov	sl, r0
 8005a32:	b160      	cbz	r0, 8005a4e <_dtoa_r+0xce>
 8005a34:	2301      	movs	r3, #1
 8005a36:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8520 	beq.w	8006482 <_dtoa_r+0xb02>
 8005a42:	4b98      	ldr	r3, [pc, #608]	; (8005ca4 <_dtoa_r+0x324>)
 8005a44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	e7e0      	b.n	8005a10 <_dtoa_r+0x90>
 8005a4e:	ab12      	add	r3, sp, #72	; 0x48
 8005a50:	9301      	str	r3, [sp, #4]
 8005a52:	ab13      	add	r3, sp, #76	; 0x4c
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	4632      	mov	r2, r6
 8005a58:	463b      	mov	r3, r7
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f001 f800 	bl	8006a60 <__d2b>
 8005a60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005a64:	4683      	mov	fp, r0
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	d07d      	beq.n	8005b66 <_dtoa_r+0x1e6>
 8005a6a:	46b0      	mov	r8, r6
 8005a6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a70:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005a74:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005a78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a7c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005a80:	2200      	movs	r2, #0
 8005a82:	4b89      	ldr	r3, [pc, #548]	; (8005ca8 <_dtoa_r+0x328>)
 8005a84:	4640      	mov	r0, r8
 8005a86:	4649      	mov	r1, r9
 8005a88:	f7fa fb6e 	bl	8000168 <__aeabi_dsub>
 8005a8c:	a37c      	add	r3, pc, #496	; (adr r3, 8005c80 <_dtoa_r+0x300>)
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	a37c      	add	r3, pc, #496	; (adr r3, 8005c88 <_dtoa_r+0x308>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fb66 	bl	800016c <__adddf3>
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	460f      	mov	r7, r1
 8005aa6:	f7fa fcad 	bl	8000404 <__aeabi_i2d>
 8005aaa:	a379      	add	r3, pc, #484	; (adr r3, 8005c90 <_dtoa_r+0x310>)
 8005aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab0:	f7fa fd12 	bl	80004d8 <__aeabi_dmul>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4630      	mov	r0, r6
 8005aba:	4639      	mov	r1, r7
 8005abc:	f7fa fb56 	bl	800016c <__adddf3>
 8005ac0:	4606      	mov	r6, r0
 8005ac2:	460f      	mov	r7, r1
 8005ac4:	f7fa ffb8 	bl	8000a38 <__aeabi_d2iz>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4682      	mov	sl, r0
 8005acc:	2300      	movs	r3, #0
 8005ace:	4630      	mov	r0, r6
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	f7fa ff73 	bl	80009bc <__aeabi_dcmplt>
 8005ad6:	b148      	cbz	r0, 8005aec <_dtoa_r+0x16c>
 8005ad8:	4650      	mov	r0, sl
 8005ada:	f7fa fc93 	bl	8000404 <__aeabi_i2d>
 8005ade:	4632      	mov	r2, r6
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	f7fa ff61 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae6:	b908      	cbnz	r0, 8005aec <_dtoa_r+0x16c>
 8005ae8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005aec:	f1ba 0f16 	cmp.w	sl, #22
 8005af0:	d85a      	bhi.n	8005ba8 <_dtoa_r+0x228>
 8005af2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005af6:	496d      	ldr	r1, [pc, #436]	; (8005cac <_dtoa_r+0x32c>)
 8005af8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b00:	f7fa ff7a 	bl	80009f8 <__aeabi_dcmpgt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d051      	beq.n	8005bac <_dtoa_r+0x22c>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b12:	1b5d      	subs	r5, r3, r5
 8005b14:	1e6b      	subs	r3, r5, #1
 8005b16:	9307      	str	r3, [sp, #28]
 8005b18:	bf43      	ittte	mi
 8005b1a:	2300      	movmi	r3, #0
 8005b1c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005b20:	9307      	strmi	r3, [sp, #28]
 8005b22:	f04f 0900 	movpl.w	r9, #0
 8005b26:	f1ba 0f00 	cmp.w	sl, #0
 8005b2a:	db41      	blt.n	8005bb0 <_dtoa_r+0x230>
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005b32:	4453      	add	r3, sl
 8005b34:	9307      	str	r3, [sp, #28]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9308      	str	r3, [sp, #32]
 8005b3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b3c:	2b09      	cmp	r3, #9
 8005b3e:	f200 808f 	bhi.w	8005c60 <_dtoa_r+0x2e0>
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	bfc4      	itt	gt
 8005b46:	3b04      	subgt	r3, #4
 8005b48:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005b4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b4c:	bfc8      	it	gt
 8005b4e:	2500      	movgt	r5, #0
 8005b50:	f1a3 0302 	sub.w	r3, r3, #2
 8005b54:	bfd8      	it	le
 8005b56:	2501      	movle	r5, #1
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	f200 808d 	bhi.w	8005c78 <_dtoa_r+0x2f8>
 8005b5e:	e8df f003 	tbb	[pc, r3]
 8005b62:	7d7b      	.short	0x7d7b
 8005b64:	6f2f      	.short	0x6f2f
 8005b66:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005b6a:	441d      	add	r5, r3
 8005b6c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005b70:	2820      	cmp	r0, #32
 8005b72:	dd13      	ble.n	8005b9c <_dtoa_r+0x21c>
 8005b74:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005b78:	9b02      	ldr	r3, [sp, #8]
 8005b7a:	fa08 f800 	lsl.w	r8, r8, r0
 8005b7e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005b82:	fa23 f000 	lsr.w	r0, r3, r0
 8005b86:	ea48 0000 	orr.w	r0, r8, r0
 8005b8a:	f7fa fc2b 	bl	80003e4 <__aeabi_ui2d>
 8005b8e:	2301      	movs	r3, #1
 8005b90:	4680      	mov	r8, r0
 8005b92:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005b96:	3d01      	subs	r5, #1
 8005b98:	9310      	str	r3, [sp, #64]	; 0x40
 8005b9a:	e771      	b.n	8005a80 <_dtoa_r+0x100>
 8005b9c:	9b02      	ldr	r3, [sp, #8]
 8005b9e:	f1c0 0020 	rsb	r0, r0, #32
 8005ba2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ba6:	e7f0      	b.n	8005b8a <_dtoa_r+0x20a>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e7b0      	b.n	8005b0e <_dtoa_r+0x18e>
 8005bac:	900d      	str	r0, [sp, #52]	; 0x34
 8005bae:	e7af      	b.n	8005b10 <_dtoa_r+0x190>
 8005bb0:	f1ca 0300 	rsb	r3, sl, #0
 8005bb4:	9308      	str	r3, [sp, #32]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	eba9 090a 	sub.w	r9, r9, sl
 8005bbc:	930c      	str	r3, [sp, #48]	; 0x30
 8005bbe:	e7bc      	b.n	8005b3a <_dtoa_r+0x1ba>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	dd74      	ble.n	8005cb4 <_dtoa_r+0x334>
 8005bca:	4698      	mov	r8, r3
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005bd2:	6072      	str	r2, [r6, #4]
 8005bd4:	2204      	movs	r2, #4
 8005bd6:	f102 0014 	add.w	r0, r2, #20
 8005bda:	4298      	cmp	r0, r3
 8005bdc:	6871      	ldr	r1, [r6, #4]
 8005bde:	d96e      	bls.n	8005cbe <_dtoa_r+0x33e>
 8005be0:	4620      	mov	r0, r4
 8005be2:	f000 fcb0 	bl	8006546 <_Balloc>
 8005be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be8:	6030      	str	r0, [r6, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b8 0f0e 	cmp.w	r8, #14
 8005bf0:	9306      	str	r3, [sp, #24]
 8005bf2:	f200 80ed 	bhi.w	8005dd0 <_dtoa_r+0x450>
 8005bf6:	2d00      	cmp	r5, #0
 8005bf8:	f000 80ea 	beq.w	8005dd0 <_dtoa_r+0x450>
 8005bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c00:	f1ba 0f00 	cmp.w	sl, #0
 8005c04:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005c08:	dd77      	ble.n	8005cfa <_dtoa_r+0x37a>
 8005c0a:	4a28      	ldr	r2, [pc, #160]	; (8005cac <_dtoa_r+0x32c>)
 8005c0c:	f00a 030f 	and.w	r3, sl, #15
 8005c10:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005c14:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c18:	06f0      	lsls	r0, r6, #27
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005c22:	d568      	bpl.n	8005cf6 <_dtoa_r+0x376>
 8005c24:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005c28:	4b21      	ldr	r3, [pc, #132]	; (8005cb0 <_dtoa_r+0x330>)
 8005c2a:	2503      	movs	r5, #3
 8005c2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c30:	f7fa fd7c 	bl	800072c <__aeabi_ddiv>
 8005c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c38:	f006 060f 	and.w	r6, r6, #15
 8005c3c:	4f1c      	ldr	r7, [pc, #112]	; (8005cb0 <_dtoa_r+0x330>)
 8005c3e:	e04f      	b.n	8005ce0 <_dtoa_r+0x360>
 8005c40:	2301      	movs	r3, #1
 8005c42:	9309      	str	r3, [sp, #36]	; 0x24
 8005c44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005c46:	4453      	add	r3, sl
 8005c48:	f103 0801 	add.w	r8, r3, #1
 8005c4c:	9304      	str	r3, [sp, #16]
 8005c4e:	4643      	mov	r3, r8
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bfb8      	it	lt
 8005c54:	2301      	movlt	r3, #1
 8005c56:	e7ba      	b.n	8005bce <_dtoa_r+0x24e>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e7b2      	b.n	8005bc2 <_dtoa_r+0x242>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e7f0      	b.n	8005c42 <_dtoa_r+0x2c2>
 8005c60:	2501      	movs	r5, #1
 8005c62:	2300      	movs	r3, #0
 8005c64:	9509      	str	r5, [sp, #36]	; 0x24
 8005c66:	931e      	str	r3, [sp, #120]	; 0x78
 8005c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	9304      	str	r3, [sp, #16]
 8005c70:	4698      	mov	r8, r3
 8005c72:	2312      	movs	r3, #18
 8005c74:	921f      	str	r2, [sp, #124]	; 0x7c
 8005c76:	e7aa      	b.n	8005bce <_dtoa_r+0x24e>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7c:	e7f4      	b.n	8005c68 <_dtoa_r+0x2e8>
 8005c7e:	bf00      	nop
 8005c80:	636f4361 	.word	0x636f4361
 8005c84:	3fd287a7 	.word	0x3fd287a7
 8005c88:	8b60c8b3 	.word	0x8b60c8b3
 8005c8c:	3fc68a28 	.word	0x3fc68a28
 8005c90:	509f79fb 	.word	0x509f79fb
 8005c94:	3fd34413 	.word	0x3fd34413
 8005c98:	7ff00000 	.word	0x7ff00000
 8005c9c:	0800731d 	.word	0x0800731d
 8005ca0:	08007314 	.word	0x08007314
 8005ca4:	080072f1 	.word	0x080072f1
 8005ca8:	3ff80000 	.word	0x3ff80000
 8005cac:	08007350 	.word	0x08007350
 8005cb0:	08007328 	.word	0x08007328
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	4698      	mov	r8, r3
 8005cba:	461a      	mov	r2, r3
 8005cbc:	e7da      	b.n	8005c74 <_dtoa_r+0x2f4>
 8005cbe:	3101      	adds	r1, #1
 8005cc0:	6071      	str	r1, [r6, #4]
 8005cc2:	0052      	lsls	r2, r2, #1
 8005cc4:	e787      	b.n	8005bd6 <_dtoa_r+0x256>
 8005cc6:	07f1      	lsls	r1, r6, #31
 8005cc8:	d508      	bpl.n	8005cdc <_dtoa_r+0x35c>
 8005cca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005cda:	3501      	adds	r5, #1
 8005cdc:	1076      	asrs	r6, r6, #1
 8005cde:	3708      	adds	r7, #8
 8005ce0:	2e00      	cmp	r6, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <_dtoa_r+0x346>
 8005ce4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cec:	f7fa fd1e 	bl	800072c <__aeabi_ddiv>
 8005cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf4:	e01b      	b.n	8005d2e <_dtoa_r+0x3ae>
 8005cf6:	2502      	movs	r5, #2
 8005cf8:	e7a0      	b.n	8005c3c <_dtoa_r+0x2bc>
 8005cfa:	f000 80a4 	beq.w	8005e46 <_dtoa_r+0x4c6>
 8005cfe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005d02:	f1ca 0600 	rsb	r6, sl, #0
 8005d06:	4ba0      	ldr	r3, [pc, #640]	; (8005f88 <_dtoa_r+0x608>)
 8005d08:	f006 020f 	and.w	r2, r6, #15
 8005d0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f7fa fbe0 	bl	80004d8 <__aeabi_dmul>
 8005d18:	2502      	movs	r5, #2
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d20:	4f9a      	ldr	r7, [pc, #616]	; (8005f8c <_dtoa_r+0x60c>)
 8005d22:	1136      	asrs	r6, r6, #4
 8005d24:	2e00      	cmp	r6, #0
 8005d26:	f040 8083 	bne.w	8005e30 <_dtoa_r+0x4b0>
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e0      	bne.n	8005cf0 <_dtoa_r+0x370>
 8005d2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 808a 	beq.w	8005e4a <_dtoa_r+0x4ca>
 8005d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d3a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d3e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d42:	2200      	movs	r2, #0
 8005d44:	4b92      	ldr	r3, [pc, #584]	; (8005f90 <_dtoa_r+0x610>)
 8005d46:	f7fa fe39 	bl	80009bc <__aeabi_dcmplt>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d07d      	beq.n	8005e4a <_dtoa_r+0x4ca>
 8005d4e:	f1b8 0f00 	cmp.w	r8, #0
 8005d52:	d07a      	beq.n	8005e4a <_dtoa_r+0x4ca>
 8005d54:	9b04      	ldr	r3, [sp, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	dd36      	ble.n	8005dc8 <_dtoa_r+0x448>
 8005d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4b8c      	ldr	r3, [pc, #560]	; (8005f94 <_dtoa_r+0x614>)
 8005d62:	f7fa fbb9 	bl	80004d8 <__aeabi_dmul>
 8005d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d6a:	9e04      	ldr	r6, [sp, #16]
 8005d6c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8005d70:	3501      	adds	r5, #1
 8005d72:	4628      	mov	r0, r5
 8005d74:	f7fa fb46 	bl	8000404 <__aeabi_i2d>
 8005d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d7c:	f7fa fbac 	bl	80004d8 <__aeabi_dmul>
 8005d80:	2200      	movs	r2, #0
 8005d82:	4b85      	ldr	r3, [pc, #532]	; (8005f98 <_dtoa_r+0x618>)
 8005d84:	f7fa f9f2 	bl	800016c <__adddf3>
 8005d88:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005d8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d90:	950b      	str	r5, [sp, #44]	; 0x2c
 8005d92:	2e00      	cmp	r6, #0
 8005d94:	d15c      	bne.n	8005e50 <_dtoa_r+0x4d0>
 8005d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	4b7f      	ldr	r3, [pc, #508]	; (8005f9c <_dtoa_r+0x61c>)
 8005d9e:	f7fa f9e3 	bl	8000168 <__aeabi_dsub>
 8005da2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005da4:	462b      	mov	r3, r5
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	f7fa fe25 	bl	80009f8 <__aeabi_dcmpgt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f040 8281 	bne.w	80062b6 <_dtoa_r+0x936>
 8005db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005dbe:	f7fa fdfd 	bl	80009bc <__aeabi_dcmplt>
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	f040 8275 	bne.w	80062b2 <_dtoa_r+0x932>
 8005dc8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005dd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f2c0 814b 	blt.w	800606e <_dtoa_r+0x6ee>
 8005dd8:	f1ba 0f0e 	cmp.w	sl, #14
 8005ddc:	f300 8147 	bgt.w	800606e <_dtoa_r+0x6ee>
 8005de0:	4b69      	ldr	r3, [pc, #420]	; (8005f88 <_dtoa_r+0x608>)
 8005de2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005dee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f280 80d7 	bge.w	8005fa4 <_dtoa_r+0x624>
 8005df6:	f1b8 0f00 	cmp.w	r8, #0
 8005dfa:	f300 80d3 	bgt.w	8005fa4 <_dtoa_r+0x624>
 8005dfe:	f040 8257 	bne.w	80062b0 <_dtoa_r+0x930>
 8005e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e06:	2200      	movs	r2, #0
 8005e08:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <_dtoa_r+0x61c>)
 8005e0a:	f7fa fb65 	bl	80004d8 <__aeabi_dmul>
 8005e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e12:	f7fa fde7 	bl	80009e4 <__aeabi_dcmpge>
 8005e16:	4646      	mov	r6, r8
 8005e18:	4647      	mov	r7, r8
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	f040 822d 	bne.w	800627a <_dtoa_r+0x8fa>
 8005e20:	9b06      	ldr	r3, [sp, #24]
 8005e22:	9a06      	ldr	r2, [sp, #24]
 8005e24:	1c5d      	adds	r5, r3, #1
 8005e26:	2331      	movs	r3, #49	; 0x31
 8005e28:	f10a 0a01 	add.w	sl, sl, #1
 8005e2c:	7013      	strb	r3, [r2, #0]
 8005e2e:	e228      	b.n	8006282 <_dtoa_r+0x902>
 8005e30:	07f2      	lsls	r2, r6, #31
 8005e32:	d505      	bpl.n	8005e40 <_dtoa_r+0x4c0>
 8005e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e38:	f7fa fb4e 	bl	80004d8 <__aeabi_dmul>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	3501      	adds	r5, #1
 8005e40:	1076      	asrs	r6, r6, #1
 8005e42:	3708      	adds	r7, #8
 8005e44:	e76e      	b.n	8005d24 <_dtoa_r+0x3a4>
 8005e46:	2502      	movs	r5, #2
 8005e48:	e771      	b.n	8005d2e <_dtoa_r+0x3ae>
 8005e4a:	4657      	mov	r7, sl
 8005e4c:	4646      	mov	r6, r8
 8005e4e:	e790      	b.n	8005d72 <_dtoa_r+0x3f2>
 8005e50:	4b4d      	ldr	r3, [pc, #308]	; (8005f88 <_dtoa_r+0x608>)
 8005e52:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005e56:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d048      	beq.n	8005ef2 <_dtoa_r+0x572>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	2000      	movs	r0, #0
 8005e66:	494e      	ldr	r1, [pc, #312]	; (8005fa0 <_dtoa_r+0x620>)
 8005e68:	f7fa fc60 	bl	800072c <__aeabi_ddiv>
 8005e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005e70:	f7fa f97a 	bl	8000168 <__aeabi_dsub>
 8005e74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005e78:	9d06      	ldr	r5, [sp, #24]
 8005e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e7e:	f7fa fddb 	bl	8000a38 <__aeabi_d2iz>
 8005e82:	9011      	str	r0, [sp, #68]	; 0x44
 8005e84:	f7fa fabe 	bl	8000404 <__aeabi_i2d>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e90:	f7fa f96a 	bl	8000168 <__aeabi_dsub>
 8005e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e9a:	3330      	adds	r3, #48	; 0x30
 8005e9c:	f805 3b01 	strb.w	r3, [r5], #1
 8005ea0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ea4:	f7fa fd8a 	bl	80009bc <__aeabi_dcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d163      	bne.n	8005f74 <_dtoa_r+0x5f4>
 8005eac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb0:	2000      	movs	r0, #0
 8005eb2:	4937      	ldr	r1, [pc, #220]	; (8005f90 <_dtoa_r+0x610>)
 8005eb4:	f7fa f958 	bl	8000168 <__aeabi_dsub>
 8005eb8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ebc:	f7fa fd7e 	bl	80009bc <__aeabi_dcmplt>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	f040 80b5 	bne.w	8006030 <_dtoa_r+0x6b0>
 8005ec6:	9b06      	ldr	r3, [sp, #24]
 8005ec8:	1aeb      	subs	r3, r5, r3
 8005eca:	429e      	cmp	r6, r3
 8005ecc:	f77f af7c 	ble.w	8005dc8 <_dtoa_r+0x448>
 8005ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	4b2f      	ldr	r3, [pc, #188]	; (8005f94 <_dtoa_r+0x614>)
 8005ed8:	f7fa fafe 	bl	80004d8 <__aeabi_dmul>
 8005edc:	2200      	movs	r2, #0
 8005ede:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee6:	4b2b      	ldr	r3, [pc, #172]	; (8005f94 <_dtoa_r+0x614>)
 8005ee8:	f7fa faf6 	bl	80004d8 <__aeabi_dmul>
 8005eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef0:	e7c3      	b.n	8005e7a <_dtoa_r+0x4fa>
 8005ef2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005ef6:	f7fa faef 	bl	80004d8 <__aeabi_dmul>
 8005efa:	9b06      	ldr	r3, [sp, #24]
 8005efc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005f00:	199d      	adds	r5, r3, r6
 8005f02:	461e      	mov	r6, r3
 8005f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f08:	f7fa fd96 	bl	8000a38 <__aeabi_d2iz>
 8005f0c:	9011      	str	r0, [sp, #68]	; 0x44
 8005f0e:	f7fa fa79 	bl	8000404 <__aeabi_i2d>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f1a:	f7fa f925 	bl	8000168 <__aeabi_dsub>
 8005f1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f24:	3330      	adds	r3, #48	; 0x30
 8005f26:	f806 3b01 	strb.w	r3, [r6], #1
 8005f2a:	42ae      	cmp	r6, r5
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	d124      	bne.n	8005f7c <_dtoa_r+0x5fc>
 8005f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f36:	4b1a      	ldr	r3, [pc, #104]	; (8005fa0 <_dtoa_r+0x620>)
 8005f38:	f7fa f918 	bl	800016c <__adddf3>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f44:	f7fa fd58 	bl	80009f8 <__aeabi_dcmpgt>
 8005f48:	2800      	cmp	r0, #0
 8005f4a:	d171      	bne.n	8006030 <_dtoa_r+0x6b0>
 8005f4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005f50:	2000      	movs	r0, #0
 8005f52:	4913      	ldr	r1, [pc, #76]	; (8005fa0 <_dtoa_r+0x620>)
 8005f54:	f7fa f908 	bl	8000168 <__aeabi_dsub>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f60:	f7fa fd2c 	bl	80009bc <__aeabi_dcmplt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f43f af2f 	beq.w	8005dc8 <_dtoa_r+0x448>
 8005f6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f6e:	1e6a      	subs	r2, r5, #1
 8005f70:	2b30      	cmp	r3, #48	; 0x30
 8005f72:	d001      	beq.n	8005f78 <_dtoa_r+0x5f8>
 8005f74:	46ba      	mov	sl, r7
 8005f76:	e04a      	b.n	800600e <_dtoa_r+0x68e>
 8005f78:	4615      	mov	r5, r2
 8005f7a:	e7f6      	b.n	8005f6a <_dtoa_r+0x5ea>
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <_dtoa_r+0x614>)
 8005f7e:	f7fa faab 	bl	80004d8 <__aeabi_dmul>
 8005f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f86:	e7bd      	b.n	8005f04 <_dtoa_r+0x584>
 8005f88:	08007350 	.word	0x08007350
 8005f8c:	08007328 	.word	0x08007328
 8005f90:	3ff00000 	.word	0x3ff00000
 8005f94:	40240000 	.word	0x40240000
 8005f98:	401c0000 	.word	0x401c0000
 8005f9c:	40140000 	.word	0x40140000
 8005fa0:	3fe00000 	.word	0x3fe00000
 8005fa4:	9d06      	ldr	r5, [sp, #24]
 8005fa6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fae:	4630      	mov	r0, r6
 8005fb0:	4639      	mov	r1, r7
 8005fb2:	f7fa fbbb 	bl	800072c <__aeabi_ddiv>
 8005fb6:	f7fa fd3f 	bl	8000a38 <__aeabi_d2iz>
 8005fba:	4681      	mov	r9, r0
 8005fbc:	f7fa fa22 	bl	8000404 <__aeabi_i2d>
 8005fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc4:	f7fa fa88 	bl	80004d8 <__aeabi_dmul>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4630      	mov	r0, r6
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa f8ca 	bl	8000168 <__aeabi_dsub>
 8005fd4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8005fdc:	9e06      	ldr	r6, [sp, #24]
 8005fde:	4602      	mov	r2, r0
 8005fe0:	1bae      	subs	r6, r5, r6
 8005fe2:	45b0      	cmp	r8, r6
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	d135      	bne.n	8006054 <_dtoa_r+0x6d4>
 8005fe8:	f7fa f8c0 	bl	800016c <__adddf3>
 8005fec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	460f      	mov	r7, r1
 8005ff4:	f7fa fd00 	bl	80009f8 <__aeabi_dcmpgt>
 8005ff8:	b9c8      	cbnz	r0, 800602e <_dtoa_r+0x6ae>
 8005ffa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ffe:	4630      	mov	r0, r6
 8006000:	4639      	mov	r1, r7
 8006002:	f7fa fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006006:	b110      	cbz	r0, 800600e <_dtoa_r+0x68e>
 8006008:	f019 0f01 	tst.w	r9, #1
 800600c:	d10f      	bne.n	800602e <_dtoa_r+0x6ae>
 800600e:	4659      	mov	r1, fp
 8006010:	4620      	mov	r0, r4
 8006012:	f000 facc 	bl	80065ae <_Bfree>
 8006016:	2300      	movs	r3, #0
 8006018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800601a:	702b      	strb	r3, [r5, #0]
 800601c:	f10a 0301 	add.w	r3, sl, #1
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006024:	2b00      	cmp	r3, #0
 8006026:	f43f acf3 	beq.w	8005a10 <_dtoa_r+0x90>
 800602a:	601d      	str	r5, [r3, #0]
 800602c:	e4f0      	b.n	8005a10 <_dtoa_r+0x90>
 800602e:	4657      	mov	r7, sl
 8006030:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006034:	1e6b      	subs	r3, r5, #1
 8006036:	2a39      	cmp	r2, #57	; 0x39
 8006038:	d106      	bne.n	8006048 <_dtoa_r+0x6c8>
 800603a:	9a06      	ldr	r2, [sp, #24]
 800603c:	429a      	cmp	r2, r3
 800603e:	d107      	bne.n	8006050 <_dtoa_r+0x6d0>
 8006040:	2330      	movs	r3, #48	; 0x30
 8006042:	7013      	strb	r3, [r2, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	3701      	adds	r7, #1
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	3201      	adds	r2, #1
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e791      	b.n	8005f74 <_dtoa_r+0x5f4>
 8006050:	461d      	mov	r5, r3
 8006052:	e7ed      	b.n	8006030 <_dtoa_r+0x6b0>
 8006054:	2200      	movs	r2, #0
 8006056:	4b99      	ldr	r3, [pc, #612]	; (80062bc <_dtoa_r+0x93c>)
 8006058:	f7fa fa3e 	bl	80004d8 <__aeabi_dmul>
 800605c:	2200      	movs	r2, #0
 800605e:	2300      	movs	r3, #0
 8006060:	4606      	mov	r6, r0
 8006062:	460f      	mov	r7, r1
 8006064:	f7fa fca0 	bl	80009a8 <__aeabi_dcmpeq>
 8006068:	2800      	cmp	r0, #0
 800606a:	d09e      	beq.n	8005faa <_dtoa_r+0x62a>
 800606c:	e7cf      	b.n	800600e <_dtoa_r+0x68e>
 800606e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006070:	2a00      	cmp	r2, #0
 8006072:	f000 8088 	beq.w	8006186 <_dtoa_r+0x806>
 8006076:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006078:	2a01      	cmp	r2, #1
 800607a:	dc6d      	bgt.n	8006158 <_dtoa_r+0x7d8>
 800607c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800607e:	2a00      	cmp	r2, #0
 8006080:	d066      	beq.n	8006150 <_dtoa_r+0x7d0>
 8006082:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006086:	464d      	mov	r5, r9
 8006088:	9e08      	ldr	r6, [sp, #32]
 800608a:	9a07      	ldr	r2, [sp, #28]
 800608c:	2101      	movs	r1, #1
 800608e:	441a      	add	r2, r3
 8006090:	4620      	mov	r0, r4
 8006092:	4499      	add	r9, r3
 8006094:	9207      	str	r2, [sp, #28]
 8006096:	f000 fb2a 	bl	80066ee <__i2b>
 800609a:	4607      	mov	r7, r0
 800609c:	2d00      	cmp	r5, #0
 800609e:	dd0b      	ble.n	80060b8 <_dtoa_r+0x738>
 80060a0:	9b07      	ldr	r3, [sp, #28]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	dd08      	ble.n	80060b8 <_dtoa_r+0x738>
 80060a6:	42ab      	cmp	r3, r5
 80060a8:	bfa8      	it	ge
 80060aa:	462b      	movge	r3, r5
 80060ac:	9a07      	ldr	r2, [sp, #28]
 80060ae:	eba9 0903 	sub.w	r9, r9, r3
 80060b2:	1aed      	subs	r5, r5, r3
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	9307      	str	r3, [sp, #28]
 80060b8:	9b08      	ldr	r3, [sp, #32]
 80060ba:	b1eb      	cbz	r3, 80060f8 <_dtoa_r+0x778>
 80060bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d065      	beq.n	800618e <_dtoa_r+0x80e>
 80060c2:	b18e      	cbz	r6, 80060e8 <_dtoa_r+0x768>
 80060c4:	4639      	mov	r1, r7
 80060c6:	4632      	mov	r2, r6
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fbaf 	bl	800682c <__pow5mult>
 80060ce:	465a      	mov	r2, fp
 80060d0:	4601      	mov	r1, r0
 80060d2:	4607      	mov	r7, r0
 80060d4:	4620      	mov	r0, r4
 80060d6:	f000 fb13 	bl	8006700 <__multiply>
 80060da:	4659      	mov	r1, fp
 80060dc:	900a      	str	r0, [sp, #40]	; 0x28
 80060de:	4620      	mov	r0, r4
 80060e0:	f000 fa65 	bl	80065ae <_Bfree>
 80060e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e6:	469b      	mov	fp, r3
 80060e8:	9b08      	ldr	r3, [sp, #32]
 80060ea:	1b9a      	subs	r2, r3, r6
 80060ec:	d004      	beq.n	80060f8 <_dtoa_r+0x778>
 80060ee:	4659      	mov	r1, fp
 80060f0:	4620      	mov	r0, r4
 80060f2:	f000 fb9b 	bl	800682c <__pow5mult>
 80060f6:	4683      	mov	fp, r0
 80060f8:	2101      	movs	r1, #1
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 faf7 	bl	80066ee <__i2b>
 8006100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006102:	4606      	mov	r6, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 81c6 	beq.w	8006496 <_dtoa_r+0xb16>
 800610a:	461a      	mov	r2, r3
 800610c:	4601      	mov	r1, r0
 800610e:	4620      	mov	r0, r4
 8006110:	f000 fb8c 	bl	800682c <__pow5mult>
 8006114:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006116:	4606      	mov	r6, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	dc3e      	bgt.n	800619a <_dtoa_r+0x81a>
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d137      	bne.n	8006192 <_dtoa_r+0x812>
 8006122:	9b03      	ldr	r3, [sp, #12]
 8006124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006128:	2b00      	cmp	r3, #0
 800612a:	d134      	bne.n	8006196 <_dtoa_r+0x816>
 800612c:	9b03      	ldr	r3, [sp, #12]
 800612e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006132:	0d1b      	lsrs	r3, r3, #20
 8006134:	051b      	lsls	r3, r3, #20
 8006136:	b12b      	cbz	r3, 8006144 <_dtoa_r+0x7c4>
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	f109 0901 	add.w	r9, r9, #1
 800613e:	3301      	adds	r3, #1
 8006140:	9307      	str	r3, [sp, #28]
 8006142:	2301      	movs	r3, #1
 8006144:	9308      	str	r3, [sp, #32]
 8006146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006148:	2b00      	cmp	r3, #0
 800614a:	d128      	bne.n	800619e <_dtoa_r+0x81e>
 800614c:	2001      	movs	r0, #1
 800614e:	e02e      	b.n	80061ae <_dtoa_r+0x82e>
 8006150:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006152:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006156:	e796      	b.n	8006086 <_dtoa_r+0x706>
 8006158:	9b08      	ldr	r3, [sp, #32]
 800615a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800615e:	42b3      	cmp	r3, r6
 8006160:	bfb7      	itett	lt
 8006162:	9b08      	ldrlt	r3, [sp, #32]
 8006164:	1b9e      	subge	r6, r3, r6
 8006166:	1af2      	sublt	r2, r6, r3
 8006168:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800616a:	bfbf      	itttt	lt
 800616c:	9608      	strlt	r6, [sp, #32]
 800616e:	189b      	addlt	r3, r3, r2
 8006170:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006172:	2600      	movlt	r6, #0
 8006174:	f1b8 0f00 	cmp.w	r8, #0
 8006178:	bfb9      	ittee	lt
 800617a:	eba9 0508 	sublt.w	r5, r9, r8
 800617e:	2300      	movlt	r3, #0
 8006180:	464d      	movge	r5, r9
 8006182:	4643      	movge	r3, r8
 8006184:	e781      	b.n	800608a <_dtoa_r+0x70a>
 8006186:	9e08      	ldr	r6, [sp, #32]
 8006188:	464d      	mov	r5, r9
 800618a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800618c:	e786      	b.n	800609c <_dtoa_r+0x71c>
 800618e:	9a08      	ldr	r2, [sp, #32]
 8006190:	e7ad      	b.n	80060ee <_dtoa_r+0x76e>
 8006192:	2300      	movs	r3, #0
 8006194:	e7d6      	b.n	8006144 <_dtoa_r+0x7c4>
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	e7d4      	b.n	8006144 <_dtoa_r+0x7c4>
 800619a:	2300      	movs	r3, #0
 800619c:	9308      	str	r3, [sp, #32]
 800619e:	6933      	ldr	r3, [r6, #16]
 80061a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061a4:	6918      	ldr	r0, [r3, #16]
 80061a6:	f000 fa54 	bl	8006652 <__hi0bits>
 80061aa:	f1c0 0020 	rsb	r0, r0, #32
 80061ae:	9b07      	ldr	r3, [sp, #28]
 80061b0:	4418      	add	r0, r3
 80061b2:	f010 001f 	ands.w	r0, r0, #31
 80061b6:	d047      	beq.n	8006248 <_dtoa_r+0x8c8>
 80061b8:	f1c0 0320 	rsb	r3, r0, #32
 80061bc:	2b04      	cmp	r3, #4
 80061be:	dd3b      	ble.n	8006238 <_dtoa_r+0x8b8>
 80061c0:	9b07      	ldr	r3, [sp, #28]
 80061c2:	f1c0 001c 	rsb	r0, r0, #28
 80061c6:	4481      	add	r9, r0
 80061c8:	4405      	add	r5, r0
 80061ca:	4403      	add	r3, r0
 80061cc:	9307      	str	r3, [sp, #28]
 80061ce:	f1b9 0f00 	cmp.w	r9, #0
 80061d2:	dd05      	ble.n	80061e0 <_dtoa_r+0x860>
 80061d4:	4659      	mov	r1, fp
 80061d6:	464a      	mov	r2, r9
 80061d8:	4620      	mov	r0, r4
 80061da:	f000 fb75 	bl	80068c8 <__lshift>
 80061de:	4683      	mov	fp, r0
 80061e0:	9b07      	ldr	r3, [sp, #28]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	dd05      	ble.n	80061f2 <_dtoa_r+0x872>
 80061e6:	4631      	mov	r1, r6
 80061e8:	461a      	mov	r2, r3
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fb6c 	bl	80068c8 <__lshift>
 80061f0:	4606      	mov	r6, r0
 80061f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f4:	b353      	cbz	r3, 800624c <_dtoa_r+0x8cc>
 80061f6:	4631      	mov	r1, r6
 80061f8:	4658      	mov	r0, fp
 80061fa:	f000 fbb9 	bl	8006970 <__mcmp>
 80061fe:	2800      	cmp	r0, #0
 8006200:	da24      	bge.n	800624c <_dtoa_r+0x8cc>
 8006202:	2300      	movs	r3, #0
 8006204:	4659      	mov	r1, fp
 8006206:	220a      	movs	r2, #10
 8006208:	4620      	mov	r0, r4
 800620a:	f000 f9e7 	bl	80065dc <__multadd>
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006210:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006214:	4683      	mov	fp, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 8144 	beq.w	80064a4 <_dtoa_r+0xb24>
 800621c:	2300      	movs	r3, #0
 800621e:	4639      	mov	r1, r7
 8006220:	220a      	movs	r2, #10
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f9da 	bl	80065dc <__multadd>
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	4607      	mov	r7, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	dc4d      	bgt.n	80062cc <_dtoa_r+0x94c>
 8006230:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006232:	2b02      	cmp	r3, #2
 8006234:	dd4a      	ble.n	80062cc <_dtoa_r+0x94c>
 8006236:	e011      	b.n	800625c <_dtoa_r+0x8dc>
 8006238:	d0c9      	beq.n	80061ce <_dtoa_r+0x84e>
 800623a:	9a07      	ldr	r2, [sp, #28]
 800623c:	331c      	adds	r3, #28
 800623e:	441a      	add	r2, r3
 8006240:	4499      	add	r9, r3
 8006242:	441d      	add	r5, r3
 8006244:	4613      	mov	r3, r2
 8006246:	e7c1      	b.n	80061cc <_dtoa_r+0x84c>
 8006248:	4603      	mov	r3, r0
 800624a:	e7f6      	b.n	800623a <_dtoa_r+0x8ba>
 800624c:	f1b8 0f00 	cmp.w	r8, #0
 8006250:	dc36      	bgt.n	80062c0 <_dtoa_r+0x940>
 8006252:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006254:	2b02      	cmp	r3, #2
 8006256:	dd33      	ble.n	80062c0 <_dtoa_r+0x940>
 8006258:	f8cd 8010 	str.w	r8, [sp, #16]
 800625c:	9b04      	ldr	r3, [sp, #16]
 800625e:	b963      	cbnz	r3, 800627a <_dtoa_r+0x8fa>
 8006260:	4631      	mov	r1, r6
 8006262:	2205      	movs	r2, #5
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f9b9 	bl	80065dc <__multadd>
 800626a:	4601      	mov	r1, r0
 800626c:	4606      	mov	r6, r0
 800626e:	4658      	mov	r0, fp
 8006270:	f000 fb7e 	bl	8006970 <__mcmp>
 8006274:	2800      	cmp	r0, #0
 8006276:	f73f add3 	bgt.w	8005e20 <_dtoa_r+0x4a0>
 800627a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800627c:	9d06      	ldr	r5, [sp, #24]
 800627e:	ea6f 0a03 	mvn.w	sl, r3
 8006282:	f04f 0900 	mov.w	r9, #0
 8006286:	4631      	mov	r1, r6
 8006288:	4620      	mov	r0, r4
 800628a:	f000 f990 	bl	80065ae <_Bfree>
 800628e:	2f00      	cmp	r7, #0
 8006290:	f43f aebd 	beq.w	800600e <_dtoa_r+0x68e>
 8006294:	f1b9 0f00 	cmp.w	r9, #0
 8006298:	d005      	beq.n	80062a6 <_dtoa_r+0x926>
 800629a:	45b9      	cmp	r9, r7
 800629c:	d003      	beq.n	80062a6 <_dtoa_r+0x926>
 800629e:	4649      	mov	r1, r9
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f984 	bl	80065ae <_Bfree>
 80062a6:	4639      	mov	r1, r7
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f980 	bl	80065ae <_Bfree>
 80062ae:	e6ae      	b.n	800600e <_dtoa_r+0x68e>
 80062b0:	2600      	movs	r6, #0
 80062b2:	4637      	mov	r7, r6
 80062b4:	e7e1      	b.n	800627a <_dtoa_r+0x8fa>
 80062b6:	46ba      	mov	sl, r7
 80062b8:	4637      	mov	r7, r6
 80062ba:	e5b1      	b.n	8005e20 <_dtoa_r+0x4a0>
 80062bc:	40240000 	.word	0x40240000
 80062c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c2:	f8cd 8010 	str.w	r8, [sp, #16]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80f3 	beq.w	80064b2 <_dtoa_r+0xb32>
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	dd05      	ble.n	80062dc <_dtoa_r+0x95c>
 80062d0:	4639      	mov	r1, r7
 80062d2:	462a      	mov	r2, r5
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 faf7 	bl	80068c8 <__lshift>
 80062da:	4607      	mov	r7, r0
 80062dc:	9b08      	ldr	r3, [sp, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d04c      	beq.n	800637c <_dtoa_r+0x9fc>
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4620      	mov	r0, r4
 80062e6:	f000 f92e 	bl	8006546 <_Balloc>
 80062ea:	4605      	mov	r5, r0
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	f107 010c 	add.w	r1, r7, #12
 80062f2:	3202      	adds	r2, #2
 80062f4:	0092      	lsls	r2, r2, #2
 80062f6:	300c      	adds	r0, #12
 80062f8:	f000 f91a 	bl	8006530 <memcpy>
 80062fc:	2201      	movs	r2, #1
 80062fe:	4629      	mov	r1, r5
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fae1 	bl	80068c8 <__lshift>
 8006306:	46b9      	mov	r9, r7
 8006308:	4607      	mov	r7, r0
 800630a:	9b06      	ldr	r3, [sp, #24]
 800630c:	9307      	str	r3, [sp, #28]
 800630e:	9b02      	ldr	r3, [sp, #8]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	9308      	str	r3, [sp, #32]
 8006316:	4631      	mov	r1, r6
 8006318:	4658      	mov	r0, fp
 800631a:	f7ff faa1 	bl	8005860 <quorem>
 800631e:	4649      	mov	r1, r9
 8006320:	4605      	mov	r5, r0
 8006322:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006326:	4658      	mov	r0, fp
 8006328:	f000 fb22 	bl	8006970 <__mcmp>
 800632c:	463a      	mov	r2, r7
 800632e:	9002      	str	r0, [sp, #8]
 8006330:	4631      	mov	r1, r6
 8006332:	4620      	mov	r0, r4
 8006334:	f000 fb36 	bl	80069a4 <__mdiff>
 8006338:	68c3      	ldr	r3, [r0, #12]
 800633a:	4602      	mov	r2, r0
 800633c:	bb03      	cbnz	r3, 8006380 <_dtoa_r+0xa00>
 800633e:	4601      	mov	r1, r0
 8006340:	9009      	str	r0, [sp, #36]	; 0x24
 8006342:	4658      	mov	r0, fp
 8006344:	f000 fb14 	bl	8006970 <__mcmp>
 8006348:	4603      	mov	r3, r0
 800634a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800634c:	4611      	mov	r1, r2
 800634e:	4620      	mov	r0, r4
 8006350:	9309      	str	r3, [sp, #36]	; 0x24
 8006352:	f000 f92c 	bl	80065ae <_Bfree>
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	b9a3      	cbnz	r3, 8006384 <_dtoa_r+0xa04>
 800635a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800635c:	b992      	cbnz	r2, 8006384 <_dtoa_r+0xa04>
 800635e:	9a08      	ldr	r2, [sp, #32]
 8006360:	b982      	cbnz	r2, 8006384 <_dtoa_r+0xa04>
 8006362:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006366:	d029      	beq.n	80063bc <_dtoa_r+0xa3c>
 8006368:	9b02      	ldr	r3, [sp, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	dd01      	ble.n	8006372 <_dtoa_r+0x9f2>
 800636e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006372:	9b07      	ldr	r3, [sp, #28]
 8006374:	1c5d      	adds	r5, r3, #1
 8006376:	f883 8000 	strb.w	r8, [r3]
 800637a:	e784      	b.n	8006286 <_dtoa_r+0x906>
 800637c:	4638      	mov	r0, r7
 800637e:	e7c2      	b.n	8006306 <_dtoa_r+0x986>
 8006380:	2301      	movs	r3, #1
 8006382:	e7e3      	b.n	800634c <_dtoa_r+0x9cc>
 8006384:	9a02      	ldr	r2, [sp, #8]
 8006386:	2a00      	cmp	r2, #0
 8006388:	db04      	blt.n	8006394 <_dtoa_r+0xa14>
 800638a:	d123      	bne.n	80063d4 <_dtoa_r+0xa54>
 800638c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800638e:	bb0a      	cbnz	r2, 80063d4 <_dtoa_r+0xa54>
 8006390:	9a08      	ldr	r2, [sp, #32]
 8006392:	b9fa      	cbnz	r2, 80063d4 <_dtoa_r+0xa54>
 8006394:	2b00      	cmp	r3, #0
 8006396:	ddec      	ble.n	8006372 <_dtoa_r+0x9f2>
 8006398:	4659      	mov	r1, fp
 800639a:	2201      	movs	r2, #1
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fa93 	bl	80068c8 <__lshift>
 80063a2:	4631      	mov	r1, r6
 80063a4:	4683      	mov	fp, r0
 80063a6:	f000 fae3 	bl	8006970 <__mcmp>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	dc03      	bgt.n	80063b6 <_dtoa_r+0xa36>
 80063ae:	d1e0      	bne.n	8006372 <_dtoa_r+0x9f2>
 80063b0:	f018 0f01 	tst.w	r8, #1
 80063b4:	d0dd      	beq.n	8006372 <_dtoa_r+0x9f2>
 80063b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063ba:	d1d8      	bne.n	800636e <_dtoa_r+0x9ee>
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	9a07      	ldr	r2, [sp, #28]
 80063c0:	1c5d      	adds	r5, r3, #1
 80063c2:	2339      	movs	r3, #57	; 0x39
 80063c4:	7013      	strb	r3, [r2, #0]
 80063c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ca:	1e6a      	subs	r2, r5, #1
 80063cc:	2b39      	cmp	r3, #57	; 0x39
 80063ce:	d04d      	beq.n	800646c <_dtoa_r+0xaec>
 80063d0:	3301      	adds	r3, #1
 80063d2:	e052      	b.n	800647a <_dtoa_r+0xafa>
 80063d4:	9a07      	ldr	r2, [sp, #28]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f102 0501 	add.w	r5, r2, #1
 80063dc:	dd06      	ble.n	80063ec <_dtoa_r+0xa6c>
 80063de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80063e2:	d0eb      	beq.n	80063bc <_dtoa_r+0xa3c>
 80063e4:	f108 0801 	add.w	r8, r8, #1
 80063e8:	9b07      	ldr	r3, [sp, #28]
 80063ea:	e7c4      	b.n	8006376 <_dtoa_r+0x9f6>
 80063ec:	9b06      	ldr	r3, [sp, #24]
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	1aeb      	subs	r3, r5, r3
 80063f2:	4293      	cmp	r3, r2
 80063f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 80063f8:	d021      	beq.n	800643e <_dtoa_r+0xabe>
 80063fa:	4659      	mov	r1, fp
 80063fc:	2300      	movs	r3, #0
 80063fe:	220a      	movs	r2, #10
 8006400:	4620      	mov	r0, r4
 8006402:	f000 f8eb 	bl	80065dc <__multadd>
 8006406:	45b9      	cmp	r9, r7
 8006408:	4683      	mov	fp, r0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	f04f 020a 	mov.w	r2, #10
 8006412:	4649      	mov	r1, r9
 8006414:	4620      	mov	r0, r4
 8006416:	d105      	bne.n	8006424 <_dtoa_r+0xaa4>
 8006418:	f000 f8e0 	bl	80065dc <__multadd>
 800641c:	4681      	mov	r9, r0
 800641e:	4607      	mov	r7, r0
 8006420:	9507      	str	r5, [sp, #28]
 8006422:	e778      	b.n	8006316 <_dtoa_r+0x996>
 8006424:	f000 f8da 	bl	80065dc <__multadd>
 8006428:	4639      	mov	r1, r7
 800642a:	4681      	mov	r9, r0
 800642c:	2300      	movs	r3, #0
 800642e:	220a      	movs	r2, #10
 8006430:	4620      	mov	r0, r4
 8006432:	f000 f8d3 	bl	80065dc <__multadd>
 8006436:	4607      	mov	r7, r0
 8006438:	e7f2      	b.n	8006420 <_dtoa_r+0xaa0>
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	4659      	mov	r1, fp
 8006440:	2201      	movs	r2, #1
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fa40 	bl	80068c8 <__lshift>
 8006448:	4631      	mov	r1, r6
 800644a:	4683      	mov	fp, r0
 800644c:	f000 fa90 	bl	8006970 <__mcmp>
 8006450:	2800      	cmp	r0, #0
 8006452:	dcb8      	bgt.n	80063c6 <_dtoa_r+0xa46>
 8006454:	d102      	bne.n	800645c <_dtoa_r+0xadc>
 8006456:	f018 0f01 	tst.w	r8, #1
 800645a:	d1b4      	bne.n	80063c6 <_dtoa_r+0xa46>
 800645c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006460:	1e6a      	subs	r2, r5, #1
 8006462:	2b30      	cmp	r3, #48	; 0x30
 8006464:	f47f af0f 	bne.w	8006286 <_dtoa_r+0x906>
 8006468:	4615      	mov	r5, r2
 800646a:	e7f7      	b.n	800645c <_dtoa_r+0xadc>
 800646c:	9b06      	ldr	r3, [sp, #24]
 800646e:	4293      	cmp	r3, r2
 8006470:	d105      	bne.n	800647e <_dtoa_r+0xafe>
 8006472:	2331      	movs	r3, #49	; 0x31
 8006474:	9a06      	ldr	r2, [sp, #24]
 8006476:	f10a 0a01 	add.w	sl, sl, #1
 800647a:	7013      	strb	r3, [r2, #0]
 800647c:	e703      	b.n	8006286 <_dtoa_r+0x906>
 800647e:	4615      	mov	r5, r2
 8006480:	e7a1      	b.n	80063c6 <_dtoa_r+0xa46>
 8006482:	4b17      	ldr	r3, [pc, #92]	; (80064e0 <_dtoa_r+0xb60>)
 8006484:	f7ff bae1 	b.w	8005a4a <_dtoa_r+0xca>
 8006488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800648a:	2b00      	cmp	r3, #0
 800648c:	f47f aabb 	bne.w	8005a06 <_dtoa_r+0x86>
 8006490:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <_dtoa_r+0xb64>)
 8006492:	f7ff bada 	b.w	8005a4a <_dtoa_r+0xca>
 8006496:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006498:	2b01      	cmp	r3, #1
 800649a:	f77f ae3f 	ble.w	800611c <_dtoa_r+0x79c>
 800649e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064a0:	9308      	str	r3, [sp, #32]
 80064a2:	e653      	b.n	800614c <_dtoa_r+0x7cc>
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	dc03      	bgt.n	80064b2 <_dtoa_r+0xb32>
 80064aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	f73f aed5 	bgt.w	800625c <_dtoa_r+0x8dc>
 80064b2:	9d06      	ldr	r5, [sp, #24]
 80064b4:	4631      	mov	r1, r6
 80064b6:	4658      	mov	r0, fp
 80064b8:	f7ff f9d2 	bl	8005860 <quorem>
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80064c2:	f805 8b01 	strb.w	r8, [r5], #1
 80064c6:	9a04      	ldr	r2, [sp, #16]
 80064c8:	1aeb      	subs	r3, r5, r3
 80064ca:	429a      	cmp	r2, r3
 80064cc:	ddb5      	ble.n	800643a <_dtoa_r+0xaba>
 80064ce:	4659      	mov	r1, fp
 80064d0:	2300      	movs	r3, #0
 80064d2:	220a      	movs	r2, #10
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f881 	bl	80065dc <__multadd>
 80064da:	4683      	mov	fp, r0
 80064dc:	e7ea      	b.n	80064b4 <_dtoa_r+0xb34>
 80064de:	bf00      	nop
 80064e0:	080072f0 	.word	0x080072f0
 80064e4:	08007314 	.word	0x08007314

080064e8 <_localeconv_r>:
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <_localeconv_r+0x14>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6a18      	ldr	r0, [r3, #32]
 80064ee:	4b04      	ldr	r3, [pc, #16]	; (8006500 <_localeconv_r+0x18>)
 80064f0:	2800      	cmp	r0, #0
 80064f2:	bf08      	it	eq
 80064f4:	4618      	moveq	r0, r3
 80064f6:	30f0      	adds	r0, #240	; 0xf0
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000020 	.word	0x20000020
 8006500:	20000084 	.word	0x20000084

08006504 <malloc>:
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <malloc+0xc>)
 8006506:	4601      	mov	r1, r0
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f000 bb53 	b.w	8006bb4 <_malloc_r>
 800650e:	bf00      	nop
 8006510:	20000020 	.word	0x20000020

08006514 <memchr>:
 8006514:	b510      	push	{r4, lr}
 8006516:	b2c9      	uxtb	r1, r1
 8006518:	4402      	add	r2, r0
 800651a:	4290      	cmp	r0, r2
 800651c:	4603      	mov	r3, r0
 800651e:	d101      	bne.n	8006524 <memchr+0x10>
 8006520:	2300      	movs	r3, #0
 8006522:	e003      	b.n	800652c <memchr+0x18>
 8006524:	781c      	ldrb	r4, [r3, #0]
 8006526:	3001      	adds	r0, #1
 8006528:	428c      	cmp	r4, r1
 800652a:	d1f6      	bne.n	800651a <memchr+0x6>
 800652c:	4618      	mov	r0, r3
 800652e:	bd10      	pop	{r4, pc}

08006530 <memcpy>:
 8006530:	b510      	push	{r4, lr}
 8006532:	1e43      	subs	r3, r0, #1
 8006534:	440a      	add	r2, r1
 8006536:	4291      	cmp	r1, r2
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	bd10      	pop	{r4, pc}
 800653c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006540:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006544:	e7f7      	b.n	8006536 <memcpy+0x6>

08006546 <_Balloc>:
 8006546:	b570      	push	{r4, r5, r6, lr}
 8006548:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800654a:	4604      	mov	r4, r0
 800654c:	460e      	mov	r6, r1
 800654e:	b93d      	cbnz	r5, 8006560 <_Balloc+0x1a>
 8006550:	2010      	movs	r0, #16
 8006552:	f7ff ffd7 	bl	8006504 <malloc>
 8006556:	6260      	str	r0, [r4, #36]	; 0x24
 8006558:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800655c:	6005      	str	r5, [r0, #0]
 800655e:	60c5      	str	r5, [r0, #12]
 8006560:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006562:	68eb      	ldr	r3, [r5, #12]
 8006564:	b183      	cbz	r3, 8006588 <_Balloc+0x42>
 8006566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800656e:	b9b8      	cbnz	r0, 80065a0 <_Balloc+0x5a>
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f506 	lsl.w	r5, r1, r6
 8006576:	1d6a      	adds	r2, r5, #5
 8006578:	0092      	lsls	r2, r2, #2
 800657a:	4620      	mov	r0, r4
 800657c:	f000 fabf 	bl	8006afe <_calloc_r>
 8006580:	b160      	cbz	r0, 800659c <_Balloc+0x56>
 8006582:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006586:	e00e      	b.n	80065a6 <_Balloc+0x60>
 8006588:	2221      	movs	r2, #33	; 0x21
 800658a:	2104      	movs	r1, #4
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fab6 	bl	8006afe <_calloc_r>
 8006592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006594:	60e8      	str	r0, [r5, #12]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e4      	bne.n	8006566 <_Balloc+0x20>
 800659c:	2000      	movs	r0, #0
 800659e:	bd70      	pop	{r4, r5, r6, pc}
 80065a0:	6802      	ldr	r2, [r0, #0]
 80065a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80065a6:	2300      	movs	r3, #0
 80065a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065ac:	e7f7      	b.n	800659e <_Balloc+0x58>

080065ae <_Bfree>:
 80065ae:	b570      	push	{r4, r5, r6, lr}
 80065b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065b2:	4606      	mov	r6, r0
 80065b4:	460d      	mov	r5, r1
 80065b6:	b93c      	cbnz	r4, 80065c8 <_Bfree+0x1a>
 80065b8:	2010      	movs	r0, #16
 80065ba:	f7ff ffa3 	bl	8006504 <malloc>
 80065be:	6270      	str	r0, [r6, #36]	; 0x24
 80065c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065c4:	6004      	str	r4, [r0, #0]
 80065c6:	60c4      	str	r4, [r0, #12]
 80065c8:	b13d      	cbz	r5, 80065da <_Bfree+0x2c>
 80065ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80065cc:	686a      	ldr	r2, [r5, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065d4:	6029      	str	r1, [r5, #0]
 80065d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80065da:	bd70      	pop	{r4, r5, r6, pc}

080065dc <__multadd>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	461f      	mov	r7, r3
 80065e2:	4606      	mov	r6, r0
 80065e4:	460c      	mov	r4, r1
 80065e6:	2300      	movs	r3, #0
 80065e8:	690d      	ldr	r5, [r1, #16]
 80065ea:	f101 0c14 	add.w	ip, r1, #20
 80065ee:	f8dc 0000 	ldr.w	r0, [ip]
 80065f2:	3301      	adds	r3, #1
 80065f4:	b281      	uxth	r1, r0
 80065f6:	fb02 7101 	mla	r1, r2, r1, r7
 80065fa:	0c00      	lsrs	r0, r0, #16
 80065fc:	0c0f      	lsrs	r7, r1, #16
 80065fe:	fb02 7000 	mla	r0, r2, r0, r7
 8006602:	b289      	uxth	r1, r1
 8006604:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006608:	429d      	cmp	r5, r3
 800660a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800660e:	f84c 1b04 	str.w	r1, [ip], #4
 8006612:	dcec      	bgt.n	80065ee <__multadd+0x12>
 8006614:	b1d7      	cbz	r7, 800664c <__multadd+0x70>
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	42ab      	cmp	r3, r5
 800661a:	dc12      	bgt.n	8006642 <__multadd+0x66>
 800661c:	6861      	ldr	r1, [r4, #4]
 800661e:	4630      	mov	r0, r6
 8006620:	3101      	adds	r1, #1
 8006622:	f7ff ff90 	bl	8006546 <_Balloc>
 8006626:	4680      	mov	r8, r0
 8006628:	6922      	ldr	r2, [r4, #16]
 800662a:	f104 010c 	add.w	r1, r4, #12
 800662e:	3202      	adds	r2, #2
 8006630:	0092      	lsls	r2, r2, #2
 8006632:	300c      	adds	r0, #12
 8006634:	f7ff ff7c 	bl	8006530 <memcpy>
 8006638:	4621      	mov	r1, r4
 800663a:	4630      	mov	r0, r6
 800663c:	f7ff ffb7 	bl	80065ae <_Bfree>
 8006640:	4644      	mov	r4, r8
 8006642:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006646:	3501      	adds	r5, #1
 8006648:	615f      	str	r7, [r3, #20]
 800664a:	6125      	str	r5, [r4, #16]
 800664c:	4620      	mov	r0, r4
 800664e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006652 <__hi0bits>:
 8006652:	0c02      	lsrs	r2, r0, #16
 8006654:	0412      	lsls	r2, r2, #16
 8006656:	4603      	mov	r3, r0
 8006658:	b9b2      	cbnz	r2, 8006688 <__hi0bits+0x36>
 800665a:	0403      	lsls	r3, r0, #16
 800665c:	2010      	movs	r0, #16
 800665e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006662:	bf04      	itt	eq
 8006664:	021b      	lsleq	r3, r3, #8
 8006666:	3008      	addeq	r0, #8
 8006668:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800666c:	bf04      	itt	eq
 800666e:	011b      	lsleq	r3, r3, #4
 8006670:	3004      	addeq	r0, #4
 8006672:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006676:	bf04      	itt	eq
 8006678:	009b      	lsleq	r3, r3, #2
 800667a:	3002      	addeq	r0, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	db06      	blt.n	800668e <__hi0bits+0x3c>
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	d503      	bpl.n	800668c <__hi0bits+0x3a>
 8006684:	3001      	adds	r0, #1
 8006686:	4770      	bx	lr
 8006688:	2000      	movs	r0, #0
 800668a:	e7e8      	b.n	800665e <__hi0bits+0xc>
 800668c:	2020      	movs	r0, #32
 800668e:	4770      	bx	lr

08006690 <__lo0bits>:
 8006690:	6803      	ldr	r3, [r0, #0]
 8006692:	4601      	mov	r1, r0
 8006694:	f013 0207 	ands.w	r2, r3, #7
 8006698:	d00b      	beq.n	80066b2 <__lo0bits+0x22>
 800669a:	07da      	lsls	r2, r3, #31
 800669c:	d423      	bmi.n	80066e6 <__lo0bits+0x56>
 800669e:	0798      	lsls	r0, r3, #30
 80066a0:	bf49      	itett	mi
 80066a2:	085b      	lsrmi	r3, r3, #1
 80066a4:	089b      	lsrpl	r3, r3, #2
 80066a6:	2001      	movmi	r0, #1
 80066a8:	600b      	strmi	r3, [r1, #0]
 80066aa:	bf5c      	itt	pl
 80066ac:	600b      	strpl	r3, [r1, #0]
 80066ae:	2002      	movpl	r0, #2
 80066b0:	4770      	bx	lr
 80066b2:	b298      	uxth	r0, r3
 80066b4:	b9a8      	cbnz	r0, 80066e2 <__lo0bits+0x52>
 80066b6:	2010      	movs	r0, #16
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066be:	bf04      	itt	eq
 80066c0:	0a1b      	lsreq	r3, r3, #8
 80066c2:	3008      	addeq	r0, #8
 80066c4:	071a      	lsls	r2, r3, #28
 80066c6:	bf04      	itt	eq
 80066c8:	091b      	lsreq	r3, r3, #4
 80066ca:	3004      	addeq	r0, #4
 80066cc:	079a      	lsls	r2, r3, #30
 80066ce:	bf04      	itt	eq
 80066d0:	089b      	lsreq	r3, r3, #2
 80066d2:	3002      	addeq	r0, #2
 80066d4:	07da      	lsls	r2, r3, #31
 80066d6:	d402      	bmi.n	80066de <__lo0bits+0x4e>
 80066d8:	085b      	lsrs	r3, r3, #1
 80066da:	d006      	beq.n	80066ea <__lo0bits+0x5a>
 80066dc:	3001      	adds	r0, #1
 80066de:	600b      	str	r3, [r1, #0]
 80066e0:	4770      	bx	lr
 80066e2:	4610      	mov	r0, r2
 80066e4:	e7e9      	b.n	80066ba <__lo0bits+0x2a>
 80066e6:	2000      	movs	r0, #0
 80066e8:	4770      	bx	lr
 80066ea:	2020      	movs	r0, #32
 80066ec:	4770      	bx	lr

080066ee <__i2b>:
 80066ee:	b510      	push	{r4, lr}
 80066f0:	460c      	mov	r4, r1
 80066f2:	2101      	movs	r1, #1
 80066f4:	f7ff ff27 	bl	8006546 <_Balloc>
 80066f8:	2201      	movs	r2, #1
 80066fa:	6144      	str	r4, [r0, #20]
 80066fc:	6102      	str	r2, [r0, #16]
 80066fe:	bd10      	pop	{r4, pc}

08006700 <__multiply>:
 8006700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	4614      	mov	r4, r2
 8006706:	690a      	ldr	r2, [r1, #16]
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	4688      	mov	r8, r1
 800670c:	429a      	cmp	r2, r3
 800670e:	bfbe      	ittt	lt
 8006710:	460b      	movlt	r3, r1
 8006712:	46a0      	movlt	r8, r4
 8006714:	461c      	movlt	r4, r3
 8006716:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800671a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800671e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006722:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006726:	eb07 0609 	add.w	r6, r7, r9
 800672a:	42b3      	cmp	r3, r6
 800672c:	bfb8      	it	lt
 800672e:	3101      	addlt	r1, #1
 8006730:	f7ff ff09 	bl	8006546 <_Balloc>
 8006734:	f100 0514 	add.w	r5, r0, #20
 8006738:	462b      	mov	r3, r5
 800673a:	2200      	movs	r2, #0
 800673c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006740:	4573      	cmp	r3, lr
 8006742:	d316      	bcc.n	8006772 <__multiply+0x72>
 8006744:	f104 0214 	add.w	r2, r4, #20
 8006748:	f108 0114 	add.w	r1, r8, #20
 800674c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006750:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	9201      	str	r2, [sp, #4]
 800675a:	4293      	cmp	r3, r2
 800675c:	d80c      	bhi.n	8006778 <__multiply+0x78>
 800675e:	2e00      	cmp	r6, #0
 8006760:	dd03      	ble.n	800676a <__multiply+0x6a>
 8006762:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006766:	2b00      	cmp	r3, #0
 8006768:	d05d      	beq.n	8006826 <__multiply+0x126>
 800676a:	6106      	str	r6, [r0, #16]
 800676c:	b003      	add	sp, #12
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	f843 2b04 	str.w	r2, [r3], #4
 8006776:	e7e3      	b.n	8006740 <__multiply+0x40>
 8006778:	f8b2 b000 	ldrh.w	fp, [r2]
 800677c:	f1bb 0f00 	cmp.w	fp, #0
 8006780:	d023      	beq.n	80067ca <__multiply+0xca>
 8006782:	4689      	mov	r9, r1
 8006784:	46ac      	mov	ip, r5
 8006786:	f04f 0800 	mov.w	r8, #0
 800678a:	f859 4b04 	ldr.w	r4, [r9], #4
 800678e:	f8dc a000 	ldr.w	sl, [ip]
 8006792:	b2a3      	uxth	r3, r4
 8006794:	fa1f fa8a 	uxth.w	sl, sl
 8006798:	fb0b a303 	mla	r3, fp, r3, sl
 800679c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80067a0:	f8dc 4000 	ldr.w	r4, [ip]
 80067a4:	4443      	add	r3, r8
 80067a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80067ae:	46e2      	mov	sl, ip
 80067b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067ba:	454f      	cmp	r7, r9
 80067bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80067c0:	f84a 3b04 	str.w	r3, [sl], #4
 80067c4:	d82b      	bhi.n	800681e <__multiply+0x11e>
 80067c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80067ca:	9b01      	ldr	r3, [sp, #4]
 80067cc:	3204      	adds	r2, #4
 80067ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80067d2:	f1ba 0f00 	cmp.w	sl, #0
 80067d6:	d020      	beq.n	800681a <__multiply+0x11a>
 80067d8:	4689      	mov	r9, r1
 80067da:	46a8      	mov	r8, r5
 80067dc:	f04f 0b00 	mov.w	fp, #0
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80067e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80067f0:	46c4      	mov	ip, r8
 80067f2:	445c      	add	r4, fp
 80067f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067f8:	f84c 3b04 	str.w	r3, [ip], #4
 80067fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006800:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	fb0a b303 	mla	r3, sl, r3, fp
 800680a:	454f      	cmp	r7, r9
 800680c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006810:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006814:	d805      	bhi.n	8006822 <__multiply+0x122>
 8006816:	f8c8 3004 	str.w	r3, [r8, #4]
 800681a:	3504      	adds	r5, #4
 800681c:	e79b      	b.n	8006756 <__multiply+0x56>
 800681e:	46d4      	mov	ip, sl
 8006820:	e7b3      	b.n	800678a <__multiply+0x8a>
 8006822:	46e0      	mov	r8, ip
 8006824:	e7dd      	b.n	80067e2 <__multiply+0xe2>
 8006826:	3e01      	subs	r6, #1
 8006828:	e799      	b.n	800675e <__multiply+0x5e>
	...

0800682c <__pow5mult>:
 800682c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006830:	4615      	mov	r5, r2
 8006832:	f012 0203 	ands.w	r2, r2, #3
 8006836:	4606      	mov	r6, r0
 8006838:	460f      	mov	r7, r1
 800683a:	d007      	beq.n	800684c <__pow5mult+0x20>
 800683c:	4c21      	ldr	r4, [pc, #132]	; (80068c4 <__pow5mult+0x98>)
 800683e:	3a01      	subs	r2, #1
 8006840:	2300      	movs	r3, #0
 8006842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006846:	f7ff fec9 	bl	80065dc <__multadd>
 800684a:	4607      	mov	r7, r0
 800684c:	10ad      	asrs	r5, r5, #2
 800684e:	d035      	beq.n	80068bc <__pow5mult+0x90>
 8006850:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006852:	b93c      	cbnz	r4, 8006864 <__pow5mult+0x38>
 8006854:	2010      	movs	r0, #16
 8006856:	f7ff fe55 	bl	8006504 <malloc>
 800685a:	6270      	str	r0, [r6, #36]	; 0x24
 800685c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006860:	6004      	str	r4, [r0, #0]
 8006862:	60c4      	str	r4, [r0, #12]
 8006864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800686c:	b94c      	cbnz	r4, 8006882 <__pow5mult+0x56>
 800686e:	f240 2171 	movw	r1, #625	; 0x271
 8006872:	4630      	mov	r0, r6
 8006874:	f7ff ff3b 	bl	80066ee <__i2b>
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006880:	6003      	str	r3, [r0, #0]
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	07eb      	lsls	r3, r5, #31
 8006888:	d50a      	bpl.n	80068a0 <__pow5mult+0x74>
 800688a:	4639      	mov	r1, r7
 800688c:	4622      	mov	r2, r4
 800688e:	4630      	mov	r0, r6
 8006890:	f7ff ff36 	bl	8006700 <__multiply>
 8006894:	4681      	mov	r9, r0
 8006896:	4639      	mov	r1, r7
 8006898:	4630      	mov	r0, r6
 800689a:	f7ff fe88 	bl	80065ae <_Bfree>
 800689e:	464f      	mov	r7, r9
 80068a0:	106d      	asrs	r5, r5, #1
 80068a2:	d00b      	beq.n	80068bc <__pow5mult+0x90>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	b938      	cbnz	r0, 80068b8 <__pow5mult+0x8c>
 80068a8:	4622      	mov	r2, r4
 80068aa:	4621      	mov	r1, r4
 80068ac:	4630      	mov	r0, r6
 80068ae:	f7ff ff27 	bl	8006700 <__multiply>
 80068b2:	6020      	str	r0, [r4, #0]
 80068b4:	f8c0 8000 	str.w	r8, [r0]
 80068b8:	4604      	mov	r4, r0
 80068ba:	e7e4      	b.n	8006886 <__pow5mult+0x5a>
 80068bc:	4638      	mov	r0, r7
 80068be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c2:	bf00      	nop
 80068c4:	08007418 	.word	0x08007418

080068c8 <__lshift>:
 80068c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068cc:	460c      	mov	r4, r1
 80068ce:	4607      	mov	r7, r0
 80068d0:	4616      	mov	r6, r2
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068d8:	eb0a 0903 	add.w	r9, sl, r3
 80068dc:	6849      	ldr	r1, [r1, #4]
 80068de:	68a3      	ldr	r3, [r4, #8]
 80068e0:	f109 0501 	add.w	r5, r9, #1
 80068e4:	42ab      	cmp	r3, r5
 80068e6:	db32      	blt.n	800694e <__lshift+0x86>
 80068e8:	4638      	mov	r0, r7
 80068ea:	f7ff fe2c 	bl	8006546 <_Balloc>
 80068ee:	2300      	movs	r3, #0
 80068f0:	4680      	mov	r8, r0
 80068f2:	461a      	mov	r2, r3
 80068f4:	f100 0114 	add.w	r1, r0, #20
 80068f8:	4553      	cmp	r3, sl
 80068fa:	db2b      	blt.n	8006954 <__lshift+0x8c>
 80068fc:	6920      	ldr	r0, [r4, #16]
 80068fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006902:	f104 0314 	add.w	r3, r4, #20
 8006906:	f016 021f 	ands.w	r2, r6, #31
 800690a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800690e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006912:	d025      	beq.n	8006960 <__lshift+0x98>
 8006914:	2000      	movs	r0, #0
 8006916:	f1c2 0e20 	rsb	lr, r2, #32
 800691a:	468a      	mov	sl, r1
 800691c:	681e      	ldr	r6, [r3, #0]
 800691e:	4096      	lsls	r6, r2
 8006920:	4330      	orrs	r0, r6
 8006922:	f84a 0b04 	str.w	r0, [sl], #4
 8006926:	f853 0b04 	ldr.w	r0, [r3], #4
 800692a:	459c      	cmp	ip, r3
 800692c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006930:	d814      	bhi.n	800695c <__lshift+0x94>
 8006932:	6048      	str	r0, [r1, #4]
 8006934:	b108      	cbz	r0, 800693a <__lshift+0x72>
 8006936:	f109 0502 	add.w	r5, r9, #2
 800693a:	3d01      	subs	r5, #1
 800693c:	4638      	mov	r0, r7
 800693e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006942:	4621      	mov	r1, r4
 8006944:	f7ff fe33 	bl	80065ae <_Bfree>
 8006948:	4640      	mov	r0, r8
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	3101      	adds	r1, #1
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	e7c7      	b.n	80068e4 <__lshift+0x1c>
 8006954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006958:	3301      	adds	r3, #1
 800695a:	e7cd      	b.n	80068f8 <__lshift+0x30>
 800695c:	4651      	mov	r1, sl
 800695e:	e7dc      	b.n	800691a <__lshift+0x52>
 8006960:	3904      	subs	r1, #4
 8006962:	f853 2b04 	ldr.w	r2, [r3], #4
 8006966:	459c      	cmp	ip, r3
 8006968:	f841 2f04 	str.w	r2, [r1, #4]!
 800696c:	d8f9      	bhi.n	8006962 <__lshift+0x9a>
 800696e:	e7e4      	b.n	800693a <__lshift+0x72>

08006970 <__mcmp>:
 8006970:	6903      	ldr	r3, [r0, #16]
 8006972:	690a      	ldr	r2, [r1, #16]
 8006974:	b530      	push	{r4, r5, lr}
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	d10c      	bne.n	8006994 <__mcmp+0x24>
 800697a:	0092      	lsls	r2, r2, #2
 800697c:	3014      	adds	r0, #20
 800697e:	3114      	adds	r1, #20
 8006980:	1884      	adds	r4, r0, r2
 8006982:	4411      	add	r1, r2
 8006984:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006988:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800698c:	4295      	cmp	r5, r2
 800698e:	d003      	beq.n	8006998 <__mcmp+0x28>
 8006990:	d305      	bcc.n	800699e <__mcmp+0x2e>
 8006992:	2301      	movs	r3, #1
 8006994:	4618      	mov	r0, r3
 8006996:	bd30      	pop	{r4, r5, pc}
 8006998:	42a0      	cmp	r0, r4
 800699a:	d3f3      	bcc.n	8006984 <__mcmp+0x14>
 800699c:	e7fa      	b.n	8006994 <__mcmp+0x24>
 800699e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069a2:	e7f7      	b.n	8006994 <__mcmp+0x24>

080069a4 <__mdiff>:
 80069a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a8:	460d      	mov	r5, r1
 80069aa:	4607      	mov	r7, r0
 80069ac:	4611      	mov	r1, r2
 80069ae:	4628      	mov	r0, r5
 80069b0:	4614      	mov	r4, r2
 80069b2:	f7ff ffdd 	bl	8006970 <__mcmp>
 80069b6:	1e06      	subs	r6, r0, #0
 80069b8:	d108      	bne.n	80069cc <__mdiff+0x28>
 80069ba:	4631      	mov	r1, r6
 80069bc:	4638      	mov	r0, r7
 80069be:	f7ff fdc2 	bl	8006546 <_Balloc>
 80069c2:	2301      	movs	r3, #1
 80069c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80069c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069cc:	bfa4      	itt	ge
 80069ce:	4623      	movge	r3, r4
 80069d0:	462c      	movge	r4, r5
 80069d2:	4638      	mov	r0, r7
 80069d4:	6861      	ldr	r1, [r4, #4]
 80069d6:	bfa6      	itte	ge
 80069d8:	461d      	movge	r5, r3
 80069da:	2600      	movge	r6, #0
 80069dc:	2601      	movlt	r6, #1
 80069de:	f7ff fdb2 	bl	8006546 <_Balloc>
 80069e2:	f04f 0e00 	mov.w	lr, #0
 80069e6:	60c6      	str	r6, [r0, #12]
 80069e8:	692b      	ldr	r3, [r5, #16]
 80069ea:	6926      	ldr	r6, [r4, #16]
 80069ec:	f104 0214 	add.w	r2, r4, #20
 80069f0:	f105 0914 	add.w	r9, r5, #20
 80069f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80069f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80069fc:	f100 0114 	add.w	r1, r0, #20
 8006a00:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a04:	f859 5b04 	ldr.w	r5, [r9], #4
 8006a08:	fa1f f38a 	uxth.w	r3, sl
 8006a0c:	4473      	add	r3, lr
 8006a0e:	b2ac      	uxth	r4, r5
 8006a10:	1b1b      	subs	r3, r3, r4
 8006a12:	0c2c      	lsrs	r4, r5, #16
 8006a14:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006a18:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006a22:	45c8      	cmp	r8, r9
 8006a24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006a28:	4694      	mov	ip, r2
 8006a2a:	f841 4b04 	str.w	r4, [r1], #4
 8006a2e:	d8e7      	bhi.n	8006a00 <__mdiff+0x5c>
 8006a30:	45bc      	cmp	ip, r7
 8006a32:	d304      	bcc.n	8006a3e <__mdiff+0x9a>
 8006a34:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a38:	b183      	cbz	r3, 8006a5c <__mdiff+0xb8>
 8006a3a:	6106      	str	r6, [r0, #16]
 8006a3c:	e7c4      	b.n	80069c8 <__mdiff+0x24>
 8006a3e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006a42:	b2a2      	uxth	r2, r4
 8006a44:	4472      	add	r2, lr
 8006a46:	1413      	asrs	r3, r2, #16
 8006a48:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a4c:	b292      	uxth	r2, r2
 8006a4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a52:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a56:	f841 2b04 	str.w	r2, [r1], #4
 8006a5a:	e7e9      	b.n	8006a30 <__mdiff+0x8c>
 8006a5c:	3e01      	subs	r6, #1
 8006a5e:	e7e9      	b.n	8006a34 <__mdiff+0x90>

08006a60 <__d2b>:
 8006a60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a64:	461c      	mov	r4, r3
 8006a66:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	4690      	mov	r8, r2
 8006a6e:	f7ff fd6a 	bl	8006546 <_Balloc>
 8006a72:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006a76:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006a7a:	4607      	mov	r7, r0
 8006a7c:	bb34      	cbnz	r4, 8006acc <__d2b+0x6c>
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	f1b8 0200 	subs.w	r2, r8, #0
 8006a84:	d027      	beq.n	8006ad6 <__d2b+0x76>
 8006a86:	a802      	add	r0, sp, #8
 8006a88:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006a8c:	f7ff fe00 	bl	8006690 <__lo0bits>
 8006a90:	9900      	ldr	r1, [sp, #0]
 8006a92:	b1f0      	cbz	r0, 8006ad2 <__d2b+0x72>
 8006a94:	9a01      	ldr	r2, [sp, #4]
 8006a96:	f1c0 0320 	rsb	r3, r0, #32
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	40c2      	lsrs	r2, r0
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	9201      	str	r2, [sp, #4]
 8006aa6:	9b01      	ldr	r3, [sp, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	bf14      	ite	ne
 8006aac:	2102      	movne	r1, #2
 8006aae:	2101      	moveq	r1, #1
 8006ab0:	61bb      	str	r3, [r7, #24]
 8006ab2:	6139      	str	r1, [r7, #16]
 8006ab4:	b1c4      	cbz	r4, 8006ae8 <__d2b+0x88>
 8006ab6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006aba:	4404      	add	r4, r0
 8006abc:	6034      	str	r4, [r6, #0]
 8006abe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ac2:	6028      	str	r0, [r5, #0]
 8006ac4:	4638      	mov	r0, r7
 8006ac6:	b002      	add	sp, #8
 8006ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006acc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ad0:	e7d5      	b.n	8006a7e <__d2b+0x1e>
 8006ad2:	6179      	str	r1, [r7, #20]
 8006ad4:	e7e7      	b.n	8006aa6 <__d2b+0x46>
 8006ad6:	a801      	add	r0, sp, #4
 8006ad8:	f7ff fdda 	bl	8006690 <__lo0bits>
 8006adc:	2101      	movs	r1, #1
 8006ade:	9b01      	ldr	r3, [sp, #4]
 8006ae0:	6139      	str	r1, [r7, #16]
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	3020      	adds	r0, #32
 8006ae6:	e7e5      	b.n	8006ab4 <__d2b+0x54>
 8006ae8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006aec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006af0:	6030      	str	r0, [r6, #0]
 8006af2:	6918      	ldr	r0, [r3, #16]
 8006af4:	f7ff fdad 	bl	8006652 <__hi0bits>
 8006af8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006afc:	e7e1      	b.n	8006ac2 <__d2b+0x62>

08006afe <_calloc_r>:
 8006afe:	b538      	push	{r3, r4, r5, lr}
 8006b00:	fb02 f401 	mul.w	r4, r2, r1
 8006b04:	4621      	mov	r1, r4
 8006b06:	f000 f855 	bl	8006bb4 <_malloc_r>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	b118      	cbz	r0, 8006b16 <_calloc_r+0x18>
 8006b0e:	4622      	mov	r2, r4
 8006b10:	2100      	movs	r1, #0
 8006b12:	f7fe fa2d 	bl	8004f70 <memset>
 8006b16:	4628      	mov	r0, r5
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b1c <_free_r>:
 8006b1c:	b538      	push	{r3, r4, r5, lr}
 8006b1e:	4605      	mov	r5, r0
 8006b20:	2900      	cmp	r1, #0
 8006b22:	d043      	beq.n	8006bac <_free_r+0x90>
 8006b24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b28:	1f0c      	subs	r4, r1, #4
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	bfb8      	it	lt
 8006b2e:	18e4      	addlt	r4, r4, r3
 8006b30:	f000 fa27 	bl	8006f82 <__malloc_lock>
 8006b34:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <_free_r+0x94>)
 8006b36:	6813      	ldr	r3, [r2, #0]
 8006b38:	4610      	mov	r0, r2
 8006b3a:	b933      	cbnz	r3, 8006b4a <_free_r+0x2e>
 8006b3c:	6063      	str	r3, [r4, #4]
 8006b3e:	6014      	str	r4, [r2, #0]
 8006b40:	4628      	mov	r0, r5
 8006b42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b46:	f000 ba1d 	b.w	8006f84 <__malloc_unlock>
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	d90b      	bls.n	8006b66 <_free_r+0x4a>
 8006b4e:	6821      	ldr	r1, [r4, #0]
 8006b50:	1862      	adds	r2, r4, r1
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bf01      	itttt	eq
 8006b56:	681a      	ldreq	r2, [r3, #0]
 8006b58:	685b      	ldreq	r3, [r3, #4]
 8006b5a:	1852      	addeq	r2, r2, r1
 8006b5c:	6022      	streq	r2, [r4, #0]
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	6004      	str	r4, [r0, #0]
 8006b62:	e7ed      	b.n	8006b40 <_free_r+0x24>
 8006b64:	4613      	mov	r3, r2
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	b10a      	cbz	r2, 8006b6e <_free_r+0x52>
 8006b6a:	42a2      	cmp	r2, r4
 8006b6c:	d9fa      	bls.n	8006b64 <_free_r+0x48>
 8006b6e:	6819      	ldr	r1, [r3, #0]
 8006b70:	1858      	adds	r0, r3, r1
 8006b72:	42a0      	cmp	r0, r4
 8006b74:	d10b      	bne.n	8006b8e <_free_r+0x72>
 8006b76:	6820      	ldr	r0, [r4, #0]
 8006b78:	4401      	add	r1, r0
 8006b7a:	1858      	adds	r0, r3, r1
 8006b7c:	4282      	cmp	r2, r0
 8006b7e:	6019      	str	r1, [r3, #0]
 8006b80:	d1de      	bne.n	8006b40 <_free_r+0x24>
 8006b82:	6810      	ldr	r0, [r2, #0]
 8006b84:	6852      	ldr	r2, [r2, #4]
 8006b86:	4401      	add	r1, r0
 8006b88:	6019      	str	r1, [r3, #0]
 8006b8a:	605a      	str	r2, [r3, #4]
 8006b8c:	e7d8      	b.n	8006b40 <_free_r+0x24>
 8006b8e:	d902      	bls.n	8006b96 <_free_r+0x7a>
 8006b90:	230c      	movs	r3, #12
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	e7d4      	b.n	8006b40 <_free_r+0x24>
 8006b96:	6820      	ldr	r0, [r4, #0]
 8006b98:	1821      	adds	r1, r4, r0
 8006b9a:	428a      	cmp	r2, r1
 8006b9c:	bf01      	itttt	eq
 8006b9e:	6811      	ldreq	r1, [r2, #0]
 8006ba0:	6852      	ldreq	r2, [r2, #4]
 8006ba2:	1809      	addeq	r1, r1, r0
 8006ba4:	6021      	streq	r1, [r4, #0]
 8006ba6:	6062      	str	r2, [r4, #4]
 8006ba8:	605c      	str	r4, [r3, #4]
 8006baa:	e7c9      	b.n	8006b40 <_free_r+0x24>
 8006bac:	bd38      	pop	{r3, r4, r5, pc}
 8006bae:	bf00      	nop
 8006bb0:	20000264 	.word	0x20000264

08006bb4 <_malloc_r>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	1ccd      	adds	r5, r1, #3
 8006bb8:	f025 0503 	bic.w	r5, r5, #3
 8006bbc:	3508      	adds	r5, #8
 8006bbe:	2d0c      	cmp	r5, #12
 8006bc0:	bf38      	it	cc
 8006bc2:	250c      	movcc	r5, #12
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	db01      	blt.n	8006bce <_malloc_r+0x1a>
 8006bca:	42a9      	cmp	r1, r5
 8006bcc:	d903      	bls.n	8006bd6 <_malloc_r+0x22>
 8006bce:	230c      	movs	r3, #12
 8006bd0:	6033      	str	r3, [r6, #0]
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
 8006bd6:	f000 f9d4 	bl	8006f82 <__malloc_lock>
 8006bda:	4a21      	ldr	r2, [pc, #132]	; (8006c60 <_malloc_r+0xac>)
 8006bdc:	6814      	ldr	r4, [r2, #0]
 8006bde:	4621      	mov	r1, r4
 8006be0:	b991      	cbnz	r1, 8006c08 <_malloc_r+0x54>
 8006be2:	4c20      	ldr	r4, [pc, #128]	; (8006c64 <_malloc_r+0xb0>)
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	b91b      	cbnz	r3, 8006bf0 <_malloc_r+0x3c>
 8006be8:	4630      	mov	r0, r6
 8006bea:	f000 f98f 	bl	8006f0c <_sbrk_r>
 8006bee:	6020      	str	r0, [r4, #0]
 8006bf0:	4629      	mov	r1, r5
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f000 f98a 	bl	8006f0c <_sbrk_r>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d124      	bne.n	8006c46 <_malloc_r+0x92>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	4630      	mov	r0, r6
 8006c00:	6033      	str	r3, [r6, #0]
 8006c02:	f000 f9bf 	bl	8006f84 <__malloc_unlock>
 8006c06:	e7e4      	b.n	8006bd2 <_malloc_r+0x1e>
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	1b5b      	subs	r3, r3, r5
 8006c0c:	d418      	bmi.n	8006c40 <_malloc_r+0x8c>
 8006c0e:	2b0b      	cmp	r3, #11
 8006c10:	d90f      	bls.n	8006c32 <_malloc_r+0x7e>
 8006c12:	600b      	str	r3, [r1, #0]
 8006c14:	18cc      	adds	r4, r1, r3
 8006c16:	50cd      	str	r5, [r1, r3]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f9b3 	bl	8006f84 <__malloc_unlock>
 8006c1e:	f104 000b 	add.w	r0, r4, #11
 8006c22:	1d23      	adds	r3, r4, #4
 8006c24:	f020 0007 	bic.w	r0, r0, #7
 8006c28:	1ac3      	subs	r3, r0, r3
 8006c2a:	d0d3      	beq.n	8006bd4 <_malloc_r+0x20>
 8006c2c:	425a      	negs	r2, r3
 8006c2e:	50e2      	str	r2, [r4, r3]
 8006c30:	e7d0      	b.n	8006bd4 <_malloc_r+0x20>
 8006c32:	684b      	ldr	r3, [r1, #4]
 8006c34:	428c      	cmp	r4, r1
 8006c36:	bf16      	itet	ne
 8006c38:	6063      	strne	r3, [r4, #4]
 8006c3a:	6013      	streq	r3, [r2, #0]
 8006c3c:	460c      	movne	r4, r1
 8006c3e:	e7eb      	b.n	8006c18 <_malloc_r+0x64>
 8006c40:	460c      	mov	r4, r1
 8006c42:	6849      	ldr	r1, [r1, #4]
 8006c44:	e7cc      	b.n	8006be0 <_malloc_r+0x2c>
 8006c46:	1cc4      	adds	r4, r0, #3
 8006c48:	f024 0403 	bic.w	r4, r4, #3
 8006c4c:	42a0      	cmp	r0, r4
 8006c4e:	d005      	beq.n	8006c5c <_malloc_r+0xa8>
 8006c50:	1a21      	subs	r1, r4, r0
 8006c52:	4630      	mov	r0, r6
 8006c54:	f000 f95a 	bl	8006f0c <_sbrk_r>
 8006c58:	3001      	adds	r0, #1
 8006c5a:	d0cf      	beq.n	8006bfc <_malloc_r+0x48>
 8006c5c:	6025      	str	r5, [r4, #0]
 8006c5e:	e7db      	b.n	8006c18 <_malloc_r+0x64>
 8006c60:	20000264 	.word	0x20000264
 8006c64:	20000268 	.word	0x20000268

08006c68 <__ssputs_r>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	688e      	ldr	r6, [r1, #8]
 8006c6e:	4682      	mov	sl, r0
 8006c70:	429e      	cmp	r6, r3
 8006c72:	460c      	mov	r4, r1
 8006c74:	4690      	mov	r8, r2
 8006c76:	4699      	mov	r9, r3
 8006c78:	d837      	bhi.n	8006cea <__ssputs_r+0x82>
 8006c7a:	898a      	ldrh	r2, [r1, #12]
 8006c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c80:	d031      	beq.n	8006ce6 <__ssputs_r+0x7e>
 8006c82:	2302      	movs	r3, #2
 8006c84:	6825      	ldr	r5, [r4, #0]
 8006c86:	6909      	ldr	r1, [r1, #16]
 8006c88:	1a6f      	subs	r7, r5, r1
 8006c8a:	6965      	ldr	r5, [r4, #20]
 8006c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c90:	fb95 f5f3 	sdiv	r5, r5, r3
 8006c94:	f109 0301 	add.w	r3, r9, #1
 8006c98:	443b      	add	r3, r7
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	bf38      	it	cc
 8006c9e:	461d      	movcc	r5, r3
 8006ca0:	0553      	lsls	r3, r2, #21
 8006ca2:	d530      	bpl.n	8006d06 <__ssputs_r+0x9e>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	f7ff ff85 	bl	8006bb4 <_malloc_r>
 8006caa:	4606      	mov	r6, r0
 8006cac:	b950      	cbnz	r0, 8006cc4 <__ssputs_r+0x5c>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cb4:	f8ca 3000 	str.w	r3, [sl]
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cbe:	81a3      	strh	r3, [r4, #12]
 8006cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc4:	463a      	mov	r2, r7
 8006cc6:	6921      	ldr	r1, [r4, #16]
 8006cc8:	f7ff fc32 	bl	8006530 <memcpy>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	6126      	str	r6, [r4, #16]
 8006cda:	443e      	add	r6, r7
 8006cdc:	6026      	str	r6, [r4, #0]
 8006cde:	464e      	mov	r6, r9
 8006ce0:	6165      	str	r5, [r4, #20]
 8006ce2:	1bed      	subs	r5, r5, r7
 8006ce4:	60a5      	str	r5, [r4, #8]
 8006ce6:	454e      	cmp	r6, r9
 8006ce8:	d900      	bls.n	8006cec <__ssputs_r+0x84>
 8006cea:	464e      	mov	r6, r9
 8006cec:	4632      	mov	r2, r6
 8006cee:	4641      	mov	r1, r8
 8006cf0:	6820      	ldr	r0, [r4, #0]
 8006cf2:	f000 f92d 	bl	8006f50 <memmove>
 8006cf6:	68a3      	ldr	r3, [r4, #8]
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	1b9b      	subs	r3, r3, r6
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	441e      	add	r6, r3
 8006d02:	6026      	str	r6, [r4, #0]
 8006d04:	e7dc      	b.n	8006cc0 <__ssputs_r+0x58>
 8006d06:	462a      	mov	r2, r5
 8006d08:	f000 f93d 	bl	8006f86 <_realloc_r>
 8006d0c:	4606      	mov	r6, r0
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d1e2      	bne.n	8006cd8 <__ssputs_r+0x70>
 8006d12:	6921      	ldr	r1, [r4, #16]
 8006d14:	4650      	mov	r0, sl
 8006d16:	f7ff ff01 	bl	8006b1c <_free_r>
 8006d1a:	e7c8      	b.n	8006cae <__ssputs_r+0x46>

08006d1c <_svfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	461d      	mov	r5, r3
 8006d22:	898b      	ldrh	r3, [r1, #12]
 8006d24:	b09d      	sub	sp, #116	; 0x74
 8006d26:	061f      	lsls	r7, r3, #24
 8006d28:	4680      	mov	r8, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	4616      	mov	r6, r2
 8006d2e:	d50f      	bpl.n	8006d50 <_svfiprintf_r+0x34>
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	b96b      	cbnz	r3, 8006d50 <_svfiprintf_r+0x34>
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	f7ff ff3d 	bl	8006bb4 <_malloc_r>
 8006d3a:	6020      	str	r0, [r4, #0]
 8006d3c:	6120      	str	r0, [r4, #16]
 8006d3e:	b928      	cbnz	r0, 8006d4c <_svfiprintf_r+0x30>
 8006d40:	230c      	movs	r3, #12
 8006d42:	f8c8 3000 	str.w	r3, [r8]
 8006d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d4a:	e0c8      	b.n	8006ede <_svfiprintf_r+0x1c2>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	6163      	str	r3, [r4, #20]
 8006d50:	2300      	movs	r3, #0
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	2320      	movs	r3, #32
 8006d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d5a:	2330      	movs	r3, #48	; 0x30
 8006d5c:	f04f 0b01 	mov.w	fp, #1
 8006d60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d64:	9503      	str	r5, [sp, #12]
 8006d66:	4637      	mov	r7, r6
 8006d68:	463d      	mov	r5, r7
 8006d6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006d6e:	b10b      	cbz	r3, 8006d74 <_svfiprintf_r+0x58>
 8006d70:	2b25      	cmp	r3, #37	; 0x25
 8006d72:	d13e      	bne.n	8006df2 <_svfiprintf_r+0xd6>
 8006d74:	ebb7 0a06 	subs.w	sl, r7, r6
 8006d78:	d00b      	beq.n	8006d92 <_svfiprintf_r+0x76>
 8006d7a:	4653      	mov	r3, sl
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	4621      	mov	r1, r4
 8006d80:	4640      	mov	r0, r8
 8006d82:	f7ff ff71 	bl	8006c68 <__ssputs_r>
 8006d86:	3001      	adds	r0, #1
 8006d88:	f000 80a4 	beq.w	8006ed4 <_svfiprintf_r+0x1b8>
 8006d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d8e:	4453      	add	r3, sl
 8006d90:	9309      	str	r3, [sp, #36]	; 0x24
 8006d92:	783b      	ldrb	r3, [r7, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 809d 	beq.w	8006ed4 <_svfiprintf_r+0x1b8>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006da4:	9304      	str	r3, [sp, #16]
 8006da6:	9307      	str	r3, [sp, #28]
 8006da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dac:	931a      	str	r3, [sp, #104]	; 0x68
 8006dae:	462f      	mov	r7, r5
 8006db0:	2205      	movs	r2, #5
 8006db2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006db6:	4850      	ldr	r0, [pc, #320]	; (8006ef8 <_svfiprintf_r+0x1dc>)
 8006db8:	f7ff fbac 	bl	8006514 <memchr>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	b9d0      	cbnz	r0, 8006df6 <_svfiprintf_r+0xda>
 8006dc0:	06d9      	lsls	r1, r3, #27
 8006dc2:	bf44      	itt	mi
 8006dc4:	2220      	movmi	r2, #32
 8006dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dca:	071a      	lsls	r2, r3, #28
 8006dcc:	bf44      	itt	mi
 8006dce:	222b      	movmi	r2, #43	; 0x2b
 8006dd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006dd4:	782a      	ldrb	r2, [r5, #0]
 8006dd6:	2a2a      	cmp	r2, #42	; 0x2a
 8006dd8:	d015      	beq.n	8006e06 <_svfiprintf_r+0xea>
 8006dda:	462f      	mov	r7, r5
 8006ddc:	2000      	movs	r0, #0
 8006dde:	250a      	movs	r5, #10
 8006de0:	9a07      	ldr	r2, [sp, #28]
 8006de2:	4639      	mov	r1, r7
 8006de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006de8:	3b30      	subs	r3, #48	; 0x30
 8006dea:	2b09      	cmp	r3, #9
 8006dec:	d94d      	bls.n	8006e8a <_svfiprintf_r+0x16e>
 8006dee:	b1b8      	cbz	r0, 8006e20 <_svfiprintf_r+0x104>
 8006df0:	e00f      	b.n	8006e12 <_svfiprintf_r+0xf6>
 8006df2:	462f      	mov	r7, r5
 8006df4:	e7b8      	b.n	8006d68 <_svfiprintf_r+0x4c>
 8006df6:	4a40      	ldr	r2, [pc, #256]	; (8006ef8 <_svfiprintf_r+0x1dc>)
 8006df8:	463d      	mov	r5, r7
 8006dfa:	1a80      	subs	r0, r0, r2
 8006dfc:	fa0b f000 	lsl.w	r0, fp, r0
 8006e00:	4318      	orrs	r0, r3
 8006e02:	9004      	str	r0, [sp, #16]
 8006e04:	e7d3      	b.n	8006dae <_svfiprintf_r+0x92>
 8006e06:	9a03      	ldr	r2, [sp, #12]
 8006e08:	1d11      	adds	r1, r2, #4
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	9103      	str	r1, [sp, #12]
 8006e0e:	2a00      	cmp	r2, #0
 8006e10:	db01      	blt.n	8006e16 <_svfiprintf_r+0xfa>
 8006e12:	9207      	str	r2, [sp, #28]
 8006e14:	e004      	b.n	8006e20 <_svfiprintf_r+0x104>
 8006e16:	4252      	negs	r2, r2
 8006e18:	f043 0302 	orr.w	r3, r3, #2
 8006e1c:	9207      	str	r2, [sp, #28]
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	783b      	ldrb	r3, [r7, #0]
 8006e22:	2b2e      	cmp	r3, #46	; 0x2e
 8006e24:	d10c      	bne.n	8006e40 <_svfiprintf_r+0x124>
 8006e26:	787b      	ldrb	r3, [r7, #1]
 8006e28:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2a:	d133      	bne.n	8006e94 <_svfiprintf_r+0x178>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	3702      	adds	r7, #2
 8006e30:	1d1a      	adds	r2, r3, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	9203      	str	r2, [sp, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfb8      	it	lt
 8006e3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006e3e:	9305      	str	r3, [sp, #20]
 8006e40:	4d2e      	ldr	r5, [pc, #184]	; (8006efc <_svfiprintf_r+0x1e0>)
 8006e42:	2203      	movs	r2, #3
 8006e44:	7839      	ldrb	r1, [r7, #0]
 8006e46:	4628      	mov	r0, r5
 8006e48:	f7ff fb64 	bl	8006514 <memchr>
 8006e4c:	b138      	cbz	r0, 8006e5e <_svfiprintf_r+0x142>
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	1b40      	subs	r0, r0, r5
 8006e52:	fa03 f000 	lsl.w	r0, r3, r0
 8006e56:	9b04      	ldr	r3, [sp, #16]
 8006e58:	3701      	adds	r7, #1
 8006e5a:	4303      	orrs	r3, r0
 8006e5c:	9304      	str	r3, [sp, #16]
 8006e5e:	7839      	ldrb	r1, [r7, #0]
 8006e60:	2206      	movs	r2, #6
 8006e62:	4827      	ldr	r0, [pc, #156]	; (8006f00 <_svfiprintf_r+0x1e4>)
 8006e64:	1c7e      	adds	r6, r7, #1
 8006e66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e6a:	f7ff fb53 	bl	8006514 <memchr>
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	d038      	beq.n	8006ee4 <_svfiprintf_r+0x1c8>
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <_svfiprintf_r+0x1e8>)
 8006e74:	bb13      	cbnz	r3, 8006ebc <_svfiprintf_r+0x1a0>
 8006e76:	9b03      	ldr	r3, [sp, #12]
 8006e78:	3307      	adds	r3, #7
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	3308      	adds	r3, #8
 8006e80:	9303      	str	r3, [sp, #12]
 8006e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e84:	444b      	add	r3, r9
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	e76d      	b.n	8006d66 <_svfiprintf_r+0x4a>
 8006e8a:	fb05 3202 	mla	r2, r5, r2, r3
 8006e8e:	2001      	movs	r0, #1
 8006e90:	460f      	mov	r7, r1
 8006e92:	e7a6      	b.n	8006de2 <_svfiprintf_r+0xc6>
 8006e94:	2300      	movs	r3, #0
 8006e96:	250a      	movs	r5, #10
 8006e98:	4619      	mov	r1, r3
 8006e9a:	3701      	adds	r7, #1
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ea4:	3a30      	subs	r2, #48	; 0x30
 8006ea6:	2a09      	cmp	r2, #9
 8006ea8:	d903      	bls.n	8006eb2 <_svfiprintf_r+0x196>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d0c8      	beq.n	8006e40 <_svfiprintf_r+0x124>
 8006eae:	9105      	str	r1, [sp, #20]
 8006eb0:	e7c6      	b.n	8006e40 <_svfiprintf_r+0x124>
 8006eb2:	fb05 2101 	mla	r1, r5, r1, r2
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4607      	mov	r7, r0
 8006eba:	e7f0      	b.n	8006e9e <_svfiprintf_r+0x182>
 8006ebc:	ab03      	add	r3, sp, #12
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <_svfiprintf_r+0x1ec>)
 8006ec4:	a904      	add	r1, sp, #16
 8006ec6:	4640      	mov	r0, r8
 8006ec8:	f7fe f8ec 	bl	80050a4 <_printf_float>
 8006ecc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ed0:	4681      	mov	r9, r0
 8006ed2:	d1d6      	bne.n	8006e82 <_svfiprintf_r+0x166>
 8006ed4:	89a3      	ldrh	r3, [r4, #12]
 8006ed6:	065b      	lsls	r3, r3, #25
 8006ed8:	f53f af35 	bmi.w	8006d46 <_svfiprintf_r+0x2a>
 8006edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ede:	b01d      	add	sp, #116	; 0x74
 8006ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	ab03      	add	r3, sp, #12
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	4622      	mov	r2, r4
 8006eea:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <_svfiprintf_r+0x1ec>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7fe fb84 	bl	80055fc <_printf_i>
 8006ef4:	e7ea      	b.n	8006ecc <_svfiprintf_r+0x1b0>
 8006ef6:	bf00      	nop
 8006ef8:	08007424 	.word	0x08007424
 8006efc:	0800742a 	.word	0x0800742a
 8006f00:	0800742e 	.word	0x0800742e
 8006f04:	080050a5 	.word	0x080050a5
 8006f08:	08006c69 	.word	0x08006c69

08006f0c <_sbrk_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	2300      	movs	r3, #0
 8006f10:	4c05      	ldr	r4, [pc, #20]	; (8006f28 <_sbrk_r+0x1c>)
 8006f12:	4605      	mov	r5, r0
 8006f14:	4608      	mov	r0, r1
 8006f16:	6023      	str	r3, [r4, #0]
 8006f18:	f7fb f9f4 	bl	8002304 <_sbrk>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_sbrk_r+0x1a>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_sbrk_r+0x1a>
 8006f24:	602b      	str	r3, [r5, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	20000a28 	.word	0x20000a28

08006f2c <__ascii_mbtowc>:
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	b901      	cbnz	r1, 8006f32 <__ascii_mbtowc+0x6>
 8006f30:	a901      	add	r1, sp, #4
 8006f32:	b142      	cbz	r2, 8006f46 <__ascii_mbtowc+0x1a>
 8006f34:	b14b      	cbz	r3, 8006f4a <__ascii_mbtowc+0x1e>
 8006f36:	7813      	ldrb	r3, [r2, #0]
 8006f38:	600b      	str	r3, [r1, #0]
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	1c10      	adds	r0, r2, #0
 8006f3e:	bf18      	it	ne
 8006f40:	2001      	movne	r0, #1
 8006f42:	b002      	add	sp, #8
 8006f44:	4770      	bx	lr
 8006f46:	4610      	mov	r0, r2
 8006f48:	e7fb      	b.n	8006f42 <__ascii_mbtowc+0x16>
 8006f4a:	f06f 0001 	mvn.w	r0, #1
 8006f4e:	e7f8      	b.n	8006f42 <__ascii_mbtowc+0x16>

08006f50 <memmove>:
 8006f50:	4288      	cmp	r0, r1
 8006f52:	b510      	push	{r4, lr}
 8006f54:	eb01 0302 	add.w	r3, r1, r2
 8006f58:	d807      	bhi.n	8006f6a <memmove+0x1a>
 8006f5a:	1e42      	subs	r2, r0, #1
 8006f5c:	4299      	cmp	r1, r3
 8006f5e:	d00a      	beq.n	8006f76 <memmove+0x26>
 8006f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f64:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006f68:	e7f8      	b.n	8006f5c <memmove+0xc>
 8006f6a:	4283      	cmp	r3, r0
 8006f6c:	d9f5      	bls.n	8006f5a <memmove+0xa>
 8006f6e:	1881      	adds	r1, r0, r2
 8006f70:	1ad2      	subs	r2, r2, r3
 8006f72:	42d3      	cmn	r3, r2
 8006f74:	d100      	bne.n	8006f78 <memmove+0x28>
 8006f76:	bd10      	pop	{r4, pc}
 8006f78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006f80:	e7f7      	b.n	8006f72 <memmove+0x22>

08006f82 <__malloc_lock>:
 8006f82:	4770      	bx	lr

08006f84 <__malloc_unlock>:
 8006f84:	4770      	bx	lr

08006f86 <_realloc_r>:
 8006f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4614      	mov	r4, r2
 8006f8c:	460e      	mov	r6, r1
 8006f8e:	b921      	cbnz	r1, 8006f9a <_realloc_r+0x14>
 8006f90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f94:	4611      	mov	r1, r2
 8006f96:	f7ff be0d 	b.w	8006bb4 <_malloc_r>
 8006f9a:	b922      	cbnz	r2, 8006fa6 <_realloc_r+0x20>
 8006f9c:	f7ff fdbe 	bl	8006b1c <_free_r>
 8006fa0:	4625      	mov	r5, r4
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fa6:	f000 f821 	bl	8006fec <_malloc_usable_size_r>
 8006faa:	42a0      	cmp	r0, r4
 8006fac:	d20f      	bcs.n	8006fce <_realloc_r+0x48>
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff fdff 	bl	8006bb4 <_malloc_r>
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d0f2      	beq.n	8006fa2 <_realloc_r+0x1c>
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	f7ff fab6 	bl	8006530 <memcpy>
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	4638      	mov	r0, r7
 8006fc8:	f7ff fda8 	bl	8006b1c <_free_r>
 8006fcc:	e7e9      	b.n	8006fa2 <_realloc_r+0x1c>
 8006fce:	4635      	mov	r5, r6
 8006fd0:	e7e7      	b.n	8006fa2 <_realloc_r+0x1c>

08006fd2 <__ascii_wctomb>:
 8006fd2:	b149      	cbz	r1, 8006fe8 <__ascii_wctomb+0x16>
 8006fd4:	2aff      	cmp	r2, #255	; 0xff
 8006fd6:	bf8b      	itete	hi
 8006fd8:	238a      	movhi	r3, #138	; 0x8a
 8006fda:	700a      	strbls	r2, [r1, #0]
 8006fdc:	6003      	strhi	r3, [r0, #0]
 8006fde:	2001      	movls	r0, #1
 8006fe0:	bf88      	it	hi
 8006fe2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006fe6:	4770      	bx	lr
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4770      	bx	lr

08006fec <_malloc_usable_size_r>:
 8006fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff0:	1f18      	subs	r0, r3, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfbc      	itt	lt
 8006ff6:	580b      	ldrlt	r3, [r1, r0]
 8006ff8:	18c0      	addlt	r0, r0, r3
 8006ffa:	4770      	bx	lr

08006ffc <sqrt>:
 8006ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007000:	b08b      	sub	sp, #44	; 0x2c
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	f000 f84d 	bl	80070a4 <__ieee754_sqrt>
 800700a:	4b24      	ldr	r3, [pc, #144]	; (800709c <sqrt+0xa0>)
 800700c:	4680      	mov	r8, r0
 800700e:	f993 a000 	ldrsb.w	sl, [r3]
 8007012:	4689      	mov	r9, r1
 8007014:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007018:	d02b      	beq.n	8007072 <sqrt+0x76>
 800701a:	4622      	mov	r2, r4
 800701c:	462b      	mov	r3, r5
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 fcf3 	bl	8000a0c <__aeabi_dcmpun>
 8007026:	4683      	mov	fp, r0
 8007028:	bb18      	cbnz	r0, 8007072 <sqrt+0x76>
 800702a:	2600      	movs	r6, #0
 800702c:	2700      	movs	r7, #0
 800702e:	4632      	mov	r2, r6
 8007030:	463b      	mov	r3, r7
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	f7f9 fcc1 	bl	80009bc <__aeabi_dcmplt>
 800703a:	b1d0      	cbz	r0, 8007072 <sqrt+0x76>
 800703c:	2301      	movs	r3, #1
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <sqrt+0xa4>)
 8007042:	f8cd b020 	str.w	fp, [sp, #32]
 8007046:	9301      	str	r3, [sp, #4]
 8007048:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800704c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007050:	f1ba 0f00 	cmp.w	sl, #0
 8007054:	d112      	bne.n	800707c <sqrt+0x80>
 8007056:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800705a:	4668      	mov	r0, sp
 800705c:	f000 f8ce 	bl	80071fc <matherr>
 8007060:	b1b8      	cbz	r0, 8007092 <sqrt+0x96>
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	b11b      	cbz	r3, 800706e <sqrt+0x72>
 8007066:	f7fd ff59 	bl	8004f1c <__errno>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	6003      	str	r3, [r0, #0]
 800706e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007072:	4640      	mov	r0, r8
 8007074:	4649      	mov	r1, r9
 8007076:	b00b      	add	sp, #44	; 0x2c
 8007078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	4630      	mov	r0, r6
 8007082:	4639      	mov	r1, r7
 8007084:	f7f9 fb52 	bl	800072c <__aeabi_ddiv>
 8007088:	f1ba 0f02 	cmp.w	sl, #2
 800708c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007090:	d1e3      	bne.n	800705a <sqrt+0x5e>
 8007092:	f7fd ff43 	bl	8004f1c <__errno>
 8007096:	2321      	movs	r3, #33	; 0x21
 8007098:	6003      	str	r3, [r0, #0]
 800709a:	e7e2      	b.n	8007062 <sqrt+0x66>
 800709c:	200001f0 	.word	0x200001f0
 80070a0:	08007540 	.word	0x08007540

080070a4 <__ieee754_sqrt>:
 80070a4:	4b54      	ldr	r3, [pc, #336]	; (80071f8 <__ieee754_sqrt+0x154>)
 80070a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070aa:	438b      	bics	r3, r1
 80070ac:	4606      	mov	r6, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	460a      	mov	r2, r1
 80070b2:	460c      	mov	r4, r1
 80070b4:	d10f      	bne.n	80070d6 <__ieee754_sqrt+0x32>
 80070b6:	4602      	mov	r2, r0
 80070b8:	460b      	mov	r3, r1
 80070ba:	f7f9 fa0d 	bl	80004d8 <__aeabi_dmul>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	4630      	mov	r0, r6
 80070c4:	4629      	mov	r1, r5
 80070c6:	f7f9 f851 	bl	800016c <__adddf3>
 80070ca:	4606      	mov	r6, r0
 80070cc:	460d      	mov	r5, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4629      	mov	r1, r5
 80070d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070d6:	2900      	cmp	r1, #0
 80070d8:	4607      	mov	r7, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	dc0e      	bgt.n	80070fc <__ieee754_sqrt+0x58>
 80070de:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80070e2:	ea5c 0707 	orrs.w	r7, ip, r7
 80070e6:	d0f2      	beq.n	80070ce <__ieee754_sqrt+0x2a>
 80070e8:	b141      	cbz	r1, 80070fc <__ieee754_sqrt+0x58>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	f7f9 f83b 	bl	8000168 <__aeabi_dsub>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	f7f9 fb19 	bl	800072c <__aeabi_ddiv>
 80070fa:	e7e6      	b.n	80070ca <__ieee754_sqrt+0x26>
 80070fc:	1512      	asrs	r2, r2, #20
 80070fe:	d074      	beq.n	80071ea <__ieee754_sqrt+0x146>
 8007100:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007104:	07d5      	lsls	r5, r2, #31
 8007106:	f04f 0500 	mov.w	r5, #0
 800710a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800710e:	bf48      	it	mi
 8007110:	0fd9      	lsrmi	r1, r3, #31
 8007112:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007116:	bf44      	itt	mi
 8007118:	005b      	lslmi	r3, r3, #1
 800711a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800711e:	1051      	asrs	r1, r2, #1
 8007120:	0fda      	lsrs	r2, r3, #31
 8007122:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007126:	4628      	mov	r0, r5
 8007128:	2216      	movs	r2, #22
 800712a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	1987      	adds	r7, r0, r6
 8007132:	42a7      	cmp	r7, r4
 8007134:	bfde      	ittt	le
 8007136:	19b8      	addle	r0, r7, r6
 8007138:	1be4      	suble	r4, r4, r7
 800713a:	19ad      	addle	r5, r5, r6
 800713c:	0fdf      	lsrs	r7, r3, #31
 800713e:	3a01      	subs	r2, #1
 8007140:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007144:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800714c:	d1f0      	bne.n	8007130 <__ieee754_sqrt+0x8c>
 800714e:	f04f 0c20 	mov.w	ip, #32
 8007152:	4696      	mov	lr, r2
 8007154:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007158:	4284      	cmp	r4, r0
 800715a:	eb06 070e 	add.w	r7, r6, lr
 800715e:	dc02      	bgt.n	8007166 <__ieee754_sqrt+0xc2>
 8007160:	d112      	bne.n	8007188 <__ieee754_sqrt+0xe4>
 8007162:	429f      	cmp	r7, r3
 8007164:	d810      	bhi.n	8007188 <__ieee754_sqrt+0xe4>
 8007166:	2f00      	cmp	r7, #0
 8007168:	eb07 0e06 	add.w	lr, r7, r6
 800716c:	da42      	bge.n	80071f4 <__ieee754_sqrt+0x150>
 800716e:	f1be 0f00 	cmp.w	lr, #0
 8007172:	db3f      	blt.n	80071f4 <__ieee754_sqrt+0x150>
 8007174:	f100 0801 	add.w	r8, r0, #1
 8007178:	1a24      	subs	r4, r4, r0
 800717a:	4640      	mov	r0, r8
 800717c:	429f      	cmp	r7, r3
 800717e:	bf88      	it	hi
 8007180:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8007184:	1bdb      	subs	r3, r3, r7
 8007186:	4432      	add	r2, r6
 8007188:	0064      	lsls	r4, r4, #1
 800718a:	f1bc 0c01 	subs.w	ip, ip, #1
 800718e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8007192:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007196:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800719a:	d1dd      	bne.n	8007158 <__ieee754_sqrt+0xb4>
 800719c:	4323      	orrs	r3, r4
 800719e:	d006      	beq.n	80071ae <__ieee754_sqrt+0x10a>
 80071a0:	1c54      	adds	r4, r2, #1
 80071a2:	bf0b      	itete	eq
 80071a4:	4662      	moveq	r2, ip
 80071a6:	3201      	addne	r2, #1
 80071a8:	3501      	addeq	r5, #1
 80071aa:	f022 0201 	bicne.w	r2, r2, #1
 80071ae:	106b      	asrs	r3, r5, #1
 80071b0:	0852      	lsrs	r2, r2, #1
 80071b2:	07e8      	lsls	r0, r5, #31
 80071b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80071b8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80071bc:	bf48      	it	mi
 80071be:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80071c2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 80071c6:	4616      	mov	r6, r2
 80071c8:	e781      	b.n	80070ce <__ieee754_sqrt+0x2a>
 80071ca:	0adc      	lsrs	r4, r3, #11
 80071cc:	3915      	subs	r1, #21
 80071ce:	055b      	lsls	r3, r3, #21
 80071d0:	2c00      	cmp	r4, #0
 80071d2:	d0fa      	beq.n	80071ca <__ieee754_sqrt+0x126>
 80071d4:	02e6      	lsls	r6, r4, #11
 80071d6:	d50a      	bpl.n	80071ee <__ieee754_sqrt+0x14a>
 80071d8:	f1c2 0020 	rsb	r0, r2, #32
 80071dc:	fa23 f000 	lsr.w	r0, r3, r0
 80071e0:	1e55      	subs	r5, r2, #1
 80071e2:	4093      	lsls	r3, r2
 80071e4:	4304      	orrs	r4, r0
 80071e6:	1b4a      	subs	r2, r1, r5
 80071e8:	e78a      	b.n	8007100 <__ieee754_sqrt+0x5c>
 80071ea:	4611      	mov	r1, r2
 80071ec:	e7f0      	b.n	80071d0 <__ieee754_sqrt+0x12c>
 80071ee:	0064      	lsls	r4, r4, #1
 80071f0:	3201      	adds	r2, #1
 80071f2:	e7ef      	b.n	80071d4 <__ieee754_sqrt+0x130>
 80071f4:	4680      	mov	r8, r0
 80071f6:	e7bf      	b.n	8007178 <__ieee754_sqrt+0xd4>
 80071f8:	7ff00000 	.word	0x7ff00000

080071fc <matherr>:
 80071fc:	2000      	movs	r0, #0
 80071fe:	4770      	bx	lr

08007200 <_init>:
 8007200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007202:	bf00      	nop
 8007204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007206:	bc08      	pop	{r3}
 8007208:	469e      	mov	lr, r3
 800720a:	4770      	bx	lr

0800720c <_fini>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	bf00      	nop
 8007210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007212:	bc08      	pop	{r3}
 8007214:	469e      	mov	lr, r3
 8007216:	4770      	bx	lr
