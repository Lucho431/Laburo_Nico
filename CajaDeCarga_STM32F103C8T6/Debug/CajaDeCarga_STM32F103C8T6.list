
CajaDeCarga_STM32F103C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007648  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08007758  08007758  00017758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ac8  08007ac8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08007ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  200001f4  08007cc4  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a20  08007cc4  00020a20  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eda3  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024ee  00000000  00000000  0002efc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e38  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d20  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019379  00000000  00000000  00033008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc3c  00000000  00000000  0004c381  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090ead  00000000  00000000  00058fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004474  00000000  00000000  000e9ee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007740 	.word	0x08007740

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08007740 	.word	0x08007740

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000ada:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <MX_ADC1_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000af2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000af6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000b06:	f002 f963 	bl	8002dd0 <HAL_ADC_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f001 fe52 	bl	80027b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_ADC1_Init+0x74>)
 8000b26:	f002 fbb9 	bl	800329c <HAL_ADC_ConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b30:	f001 fe42 	bl	80027b8 <Error_Handler>
  }

}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200002a0 	.word	0x200002a0
 8000b40:	40012400 	.word	0x40012400

08000b44 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <MX_ADC2_Init+0x78>)
 8000b58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b72:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b74:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000b82:	f002 f925 	bl	8002dd0 <HAL_ADC_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f001 fe14 	bl	80027b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000b98:	2307      	movs	r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_ADC2_Init+0x74>)
 8000ba2:	f002 fb7b 	bl	800329c <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000bac:	f001 fe04 	bl	80027b8 <Error_Handler>
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000270 	.word	0x20000270
 8000bbc:	40012800 	.word	0x40012800

08000bc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0318 	add.w	r3, r7, #24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <HAL_ADC_MspInit+0xdc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d12a      	bne.n	8000c36 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a2e      	ldr	r2, [pc, #184]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b2c      	ldr	r3, [pc, #176]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a28      	ldr	r2, [pc, #160]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4821      	ldr	r0, [pc, #132]	; (8000ca4 <HAL_ADC_MspInit+0xe4>)
 8000c20:	f002 fde6 	bl	80037f0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f002 fdaa 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c2e:	2012      	movs	r0, #18
 8000c30:	f002 fdc3 	bl	80037ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c34:	e02e      	b.n	8000c94 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_ADC_MspInit+0xe8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d129      	bne.n	8000c94 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_ADC_MspInit+0xe0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c70:	2302      	movs	r3, #2
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c78:	f107 0318 	add.w	r3, r7, #24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_ADC_MspInit+0xe4>)
 8000c80:	f002 fdb6 	bl	80037f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	2012      	movs	r0, #18
 8000c8a:	f002 fd7a 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c8e:	2012      	movs	r0, #18
 8000c90:	f002 fd93 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40012400 	.word	0x40012400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40012800 	.word	0x40012800

08000cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b088      	sub	sp, #32
 8000cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc0:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a5b      	ldr	r2, [pc, #364]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cc6:	f043 0310 	orr.w	r3, r3, #16
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b59      	ldr	r3, [pc, #356]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0310 	and.w	r3, r3, #16
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd8:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	4a55      	ldr	r2, [pc, #340]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cde:	f043 0320 	orr.w	r3, r3, #32
 8000ce2:	6193      	str	r3, [r2, #24]
 8000ce4:	4b53      	ldr	r3, [pc, #332]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	f003 0320 	and.w	r3, r3, #32
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b50      	ldr	r3, [pc, #320]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b4d      	ldr	r3, [pc, #308]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b4a      	ldr	r3, [pc, #296]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a49      	ldr	r2, [pc, #292]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <MX_GPIO_Init+0x188>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d26:	4844      	ldr	r0, [pc, #272]	; (8000e38 <MX_GPIO_Init+0x18c>)
 8000d28:	f002 fed3 	bl	8003ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HAB_Vo_Pin|HAB_Io_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000d32:	4842      	ldr	r0, [pc, #264]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000d34:	f002 fecd 	bl	8003ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Vo_Pin|LED_Io_Pin|Relay_Fte_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d3e:	483f      	ldr	r0, [pc, #252]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000d40:	f002 fec7 	bl	8003ad2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8000d4a:	483d      	ldr	r0, [pc, #244]	; (8000e40 <MX_GPIO_Init+0x194>)
 8000d4c:	f002 fec1 	bl	8003ad2 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_onBoard_Pin;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_onBoard_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4833      	ldr	r0, [pc, #204]	; (8000e38 <MX_GPIO_Init+0x18c>)
 8000d6a:	f002 fd41 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Pul_hab_Vo_Pin|Pul_hab_Io_Pin;
 8000d6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	4619      	mov	r1, r3
 8000d82:	482d      	ldr	r0, [pc, #180]	; (8000e38 <MX_GPIO_Init+0x18c>)
 8000d84:	f002 fd34 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = P_Temp_Vo_Pin|P_OL_Vo_Pin|Rep_Pote_Vo_Pin|P_Temp_Io_Pin;
 8000d88:	23f0      	movs	r3, #240	; 0xf0
 8000d8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4829      	ldr	r0, [pc, #164]	; (8000e40 <MX_GPIO_Init+0x194>)
 8000d9c:	f002 fd28 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = P_OL_Io_Pin|Rep_Pote_Io_Pin;
 8000da0:	2303      	movs	r3, #3
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4822      	ldr	r0, [pc, #136]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000db4:	f002 fd1c 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = HAB_Vo_Pin|HAB_Io_Pin|Relay_Fte_Pin;
 8000db8:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8000dbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481a      	ldr	r0, [pc, #104]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000dd2:	f002 fd0d 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Vo_Pin|LED_Io_Pin|LCD_RS_Pin;
 8000dd6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000dda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4813      	ldr	r0, [pc, #76]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000df0:	f002 fcfe 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8000df4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000df8:	613b      	str	r3, [r7, #16]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_GPIO_Init+0x194>)
 8000e0e:	f002 fcef 	bl	80037f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Rango_Io_A_Pin|Rango_Io_B_Pin|Rango_Io_C_Pin;
 8000e12:	2338      	movs	r3, #56	; 0x38
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4619      	mov	r1, r3
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_GPIO_Init+0x190>)
 8000e26:	f002 fce3 	bl	80037f0 <HAL_GPIO_Init>

}
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40011000 	.word	0x40011000
 8000e3c:	40010c00 	.word	0x40010c00
 8000e40:	40010800 	.word	0x40010800

08000e44 <LCD_Init>:
uint32_t usTicks;


/* Inicializa al display mediante instrucciones en modo 4-bit */
void LCD_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0


	/* Se inicializa al Timer 1 */
	//LCD_Tim1Init();

	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <LCD_Init+0x70>)
 8000e50:	f002 fe3f 	bl	8003ad2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <LCD_Init+0x74>)
 8000e5c:	f002 fe39 	bl	8003ad2 <HAL_GPIO_WritePin>



	/* Se envían tres nibbles 0x03 con los delays correspondientes */
	HAL_Delay(16);//LCD_usDelay(16000);
 8000e60:	2010      	movs	r0, #16
 8000e62:	f001 ff93 	bl	8002d8c <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f828 	bl	8000ebc <LCD_SendNibble>
	HAL_Delay(5);//LCD_usDelay(5000);
 8000e6c:	2005      	movs	r0, #5
 8000e6e:	f001 ff8d 	bl	8002d8c <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 f822 	bl	8000ebc <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(200);
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f001 ff87 	bl	8002d8c <HAL_Delay>
	LCD_SendNibble(0x03);
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f000 f81c 	bl	8000ebc <LCD_SendNibble>

	/* Se cambia a modo 4-bit */
	LCD_SendNibble(0x02);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 f819 	bl	8000ebc <LCD_SendNibble>
	HAL_Delay(1);//LCD_usDelay(1000);
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f001 ff7e 	bl	8002d8c <HAL_Delay>

	/* Se envían las instrucciones requeridas */
	LCD_SendInstruction(LCD_FUNCTION_SET_4BIT);
 8000e90:	2028      	movs	r0, #40	; 0x28
 8000e92:	f000 f8a7 	bl	8000fe4 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_OFF);
 8000e96:	2008      	movs	r0, #8
 8000e98:	f000 f8a4 	bl	8000fe4 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_CLEAR);
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f000 f8a1 	bl	8000fe4 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_ENTRY_MODE_SET);
 8000ea2:	2006      	movs	r0, #6
 8000ea4:	f000 f89e 	bl	8000fe4 <LCD_SendInstruction>
	LCD_SendInstruction(LCD_DISPLAY_ON);
 8000ea8:	200c      	movs	r0, #12
 8000eaa:	f000 f89b 	bl	8000fe4 <LCD_SendInstruction>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40010c00 	.word	0x40010c00
 8000eb8:	40010800 	.word	0x40010800

08000ebc <LCD_SendNibble>:


/* Envía un nibble al display */
void LCD_SendNibble(uint8_t theNibble)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
	/* Se coloca cada bit del nibble en el pin correspondiente */
	if (theNibble & 0x01) HAL_GPIO_WritePin(D4_Port, D4_Pin, 1);//(LCD_PORT->SET = LCD_D4);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d006      	beq.n	8000ede <LCD_SendNibble+0x22>
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed6:	4832      	ldr	r0, [pc, #200]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000ed8:	f002 fdfb 	bl	8003ad2 <HAL_GPIO_WritePin>
 8000edc:	e005      	b.n	8000eea <LCD_SendNibble+0x2e>
	else			   	  HAL_GPIO_WritePin(D4_Port, D4_Pin, 0);//(LCD_PORT->CLR = LCD_D4);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000ee6:	f002 fdf4 	bl	8003ad2 <HAL_GPIO_WritePin>

	if (theNibble & 0x02) HAL_GPIO_WritePin(D5_Port, D5_Pin, 1);//(LCD_PORT->SET = LCD_D5);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <LCD_SendNibble+0x46>
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efa:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000efc:	f002 fde9 	bl	8003ad2 <HAL_GPIO_WritePin>
 8000f00:	e005      	b.n	8000f0e <LCD_SendNibble+0x52>
	else			      HAL_GPIO_WritePin(D5_Port, D5_Pin, 0);//(LCD_PORT->CLR = LCD_D5);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f0a:	f002 fde2 	bl	8003ad2 <HAL_GPIO_WritePin>

	if (theNibble & 0x04) HAL_GPIO_WritePin(D6_Port, D6_Pin, 1);//(LCD_PORT->SET = LCD_D6);
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	f003 0304 	and.w	r3, r3, #4
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <LCD_SendNibble+0x6a>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f1e:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f20:	f002 fdd7 	bl	8003ad2 <HAL_GPIO_WritePin>
 8000f24:	e005      	b.n	8000f32 <LCD_SendNibble+0x76>
	else			   	  HAL_GPIO_WritePin(D6_Port, D6_Pin, 0);//(LCD_PORT->CLR = LCD_D6);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f2c:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f2e:	f002 fdd0 	bl	8003ad2 <HAL_GPIO_WritePin>

	if (theNibble & 0x08) HAL_GPIO_WritePin(D7_Port, D7_Pin, 1);//(LCD_PORT->SET = LCD_D7);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 0308 	and.w	r3, r3, #8
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <LCD_SendNibble+0x8e>
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	4817      	ldr	r0, [pc, #92]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f44:	f002 fdc5 	bl	8003ad2 <HAL_GPIO_WritePin>
 8000f48:	e005      	b.n	8000f56 <LCD_SendNibble+0x9a>
	else			      HAL_GPIO_WritePin(D7_Port, D7_Pin, 0);//(LCD_PORT->CLR = LCD_D7);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f50:	4813      	ldr	r0, [pc, #76]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f52:	f002 fdbe 	bl	8003ad2 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_Port, EN_Pin, 1);//LCD_PORT->SET = LCD_EN;
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	4810      	ldr	r0, [pc, #64]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f5e:	f002 fdb8 	bl	8003ad2 <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < 720; i++); //HAL_Delay(1);//LCD_usDelay(5);
 8000f62:	2300      	movs	r3, #0
 8000f64:	81fb      	strh	r3, [r7, #14]
 8000f66:	e002      	b.n	8000f6e <LCD_SendNibble+0xb2>
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	81fb      	strh	r3, [r7, #14]
 8000f6e:	89fb      	ldrh	r3, [r7, #14]
 8000f70:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000f74:	d3f8      	bcc.n	8000f68 <LCD_SendNibble+0xac>
	HAL_GPIO_WritePin(EN_Port, EN_Pin, 0);//LCD_PORT->CLR = LCD_EN;
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <LCD_SendNibble+0xe4>)
 8000f7e:	f002 fda8 	bl	8003ad2 <HAL_GPIO_WritePin>
	for (uint16_t i = 0; i < 720; i++); //HAL_Delay(1);//LCD_usDelay(5);
 8000f82:	2300      	movs	r3, #0
 8000f84:	81bb      	strh	r3, [r7, #12]
 8000f86:	e002      	b.n	8000f8e <LCD_SendNibble+0xd2>
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	81bb      	strh	r3, [r7, #12]
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8000f94:	d3f8      	bcc.n	8000f88 <LCD_SendNibble+0xcc>
}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010800 	.word	0x40010800

08000fa4 <LCD_SendChar>:


/* Envía un caracter al display */
void LCD_SendChar(char theChar)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 1);//LCD_PORT->SET = LCD_RS;
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LCD_SendChar+0x3c>)
 8000fb6:	f002 fd8c 	bl	8003ad2 <HAL_GPIO_WritePin>

	LCD_SendByte(theChar);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f841 	bl	8001044 <LCD_SendByte>

	for (uint16_t i = 0; i < 7200; i++);
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	81fb      	strh	r3, [r7, #14]
 8000fc6:	e002      	b.n	8000fce <LCD_SendChar+0x2a>
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	81fb      	strh	r3, [r7, #14]
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8000fd4:	d3f8      	bcc.n	8000fc8 <LCD_SendChar+0x24>
	//HAL_Delay(1);//LCD_usDelay(50);
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <LCD_SendInstruction>:


/* Envía una instrucción al display */
void LCD_SendInstruction(uint8_t theInstruction)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_Port, RS_Pin, 0);//LCD_PORT->CLR = LCD_RS;
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff4:	4811      	ldr	r0, [pc, #68]	; (800103c <LCD_SendInstruction+0x58>)
 8000ff6:	f002 fd6c 	bl	8003ad2 <HAL_GPIO_WritePin>

	LCD_SendByte(theInstruction);
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f821 	bl	8001044 <LCD_SendByte>

	if (theInstruction == LCD_DISPLAY_CLEAR)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10a      	bne.n	800101e <LCD_SendInstruction+0x3a>
		for (uint32_t i = 0; i < 288000; i++); //HAL_Delay(2);//LCD_usDelay(2000);
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	e002      	b.n	8001014 <LCD_SendInstruction+0x30>
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	4a0a      	ldr	r2, [pc, #40]	; (8001040 <LCD_SendInstruction+0x5c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d9f8      	bls.n	800100e <LCD_SendInstruction+0x2a>
	else
		for (uint16_t i = 0; i < 7200; i++); //HAL_Delay(1);//LCD_usDelay(50);
}
 800101c:	e009      	b.n	8001032 <LCD_SendInstruction+0x4e>
		for (uint16_t i = 0; i < 7200; i++); //HAL_Delay(1);//LCD_usDelay(50);
 800101e:	2300      	movs	r3, #0
 8001020:	817b      	strh	r3, [r7, #10]
 8001022:	e002      	b.n	800102a <LCD_SendInstruction+0x46>
 8001024:	897b      	ldrh	r3, [r7, #10]
 8001026:	3301      	adds	r3, #1
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	897b      	ldrh	r3, [r7, #10]
 800102c:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8001030:	d3f8      	bcc.n	8001024 <LCD_SendInstruction+0x40>
}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40010c00 	.word	0x40010c00
 8001040:	000464ff 	.word	0x000464ff

08001044 <LCD_SendByte>:


/* Envía un byte al display */
void LCD_SendByte(uint8_t theByte)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	/* Primero se envía la parte alta */
	LCD_SendNibble(theByte >> 4);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	091b      	lsrs	r3, r3, #4
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff31 	bl	8000ebc <LCD_SendNibble>

	/* Luego se envía la parte baja */
	LCD_SendNibble(theByte);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff2d 	bl	8000ebc <LCD_SendNibble>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <LCD_GoToxy>:


/* Posiciona el cursor en la columna x - fila y */
void LCD_GoToxy(uint8_t x, uint8_t y)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	460a      	mov	r2, r1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	4613      	mov	r3, r2
 8001078:	71bb      	strb	r3, [r7, #6]
	if (y == 0)
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <LCD_GoToxy+0x24>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3b80      	subs	r3, #128	; 0x80
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ffac 	bl	8000fe4 <LCD_SendInstruction>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
    else if (y == 2)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
    else if (y == 3)
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
}
 800108c:	e01c      	b.n	80010c8 <LCD_GoToxy+0x5e>
    else if (y == 1)
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d106      	bne.n	80010a2 <LCD_GoToxy+0x38>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	3b40      	subs	r3, #64	; 0x40
 8001098:	b2db      	uxtb	r3, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff ffa2 	bl	8000fe4 <LCD_SendInstruction>
}
 80010a0:	e012      	b.n	80010c8 <LCD_GoToxy+0x5e>
    else if (y == 2)
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d106      	bne.n	80010b6 <LCD_GoToxy+0x4c>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	3b6c      	subs	r3, #108	; 0x6c
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ff98 	bl	8000fe4 <LCD_SendInstruction>
}
 80010b4:	e008      	b.n	80010c8 <LCD_GoToxy+0x5e>
    else if (y == 3)
 80010b6:	79bb      	ldrb	r3, [r7, #6]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d105      	bne.n	80010c8 <LCD_GoToxy+0x5e>
    	LCD_SendInstruction(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	3b2c      	subs	r3, #44	; 0x2c
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff8e 	bl	8000fe4 <LCD_SendInstruction>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_Print>:


/* Envía un string al display */
void LCD_Print(char *p)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	while(*p != 0){
 80010d8:	e007      	b.n	80010ea <LCD_Print+0x1a>
		LCD_SendChar(*p);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff60 	bl	8000fa4 <LCD_SendChar>
		p++;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3301      	adds	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
	while(*p != 0){
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f3      	bne.n	80010da <LCD_Print+0xa>
	}
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f001 fde1 	bl	8002cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001106:	f000 fbf9 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110a:	f7ff fdcf 	bl	8000cac <MX_GPIO_Init>
  MX_ADC1_Init();
 800110e:	f7ff fcdb 	bl	8000ac8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001112:	f001 fc19 	bl	8002948 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001116:	f001 fc63 	bl	80029e0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800111a:	f001 fd3b 	bl	8002b94 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 800111e:	f7ff fd11 	bl	8000b44 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);  //captura fase
 8001122:	48ac      	ldr	r0, [pc, #688]	; (80013d4 <main+0x2d8>)
 8001124:	f003 fa10 	bl	8004548 <HAL_TIM_Base_Start>
//  HAL_TIM_Base_Start_IT(&htim2);  //refresco de 10 ms.
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1); //captura fase
 8001128:	2100      	movs	r1, #0
 800112a:	48aa      	ldr	r0, [pc, #680]	; (80013d4 <main+0x2d8>)
 800112c:	f003 faae 	bl	800468c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_3); //captura fase
 8001130:	2108      	movs	r1, #8
 8001132:	48a8      	ldr	r0, [pc, #672]	; (80013d4 <main+0x2d8>)
 8001134:	f003 faaa 	bl	800468c <HAL_TIM_IC_Start_IT>

  LCD_Init();
 8001138:	f7ff fe84 	bl	8000e44 <LCD_Init>
  LCD_GoToxy(7, 1);
 800113c:	2101      	movs	r1, #1
 800113e:	2007      	movs	r0, #7
 8001140:	f7ff ff93 	bl	800106a <LCD_GoToxy>
  sprintf(texto, "OELEC");
 8001144:	4ba4      	ldr	r3, [pc, #656]	; (80013d8 <main+0x2dc>)
 8001146:	4aa5      	ldr	r2, [pc, #660]	; (80013dc <main+0x2e0>)
 8001148:	6810      	ldr	r0, [r2, #0]
 800114a:	6018      	str	r0, [r3, #0]
 800114c:	8892      	ldrh	r2, [r2, #4]
 800114e:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 8001150:	48a1      	ldr	r0, [pc, #644]	; (80013d8 <main+0x2dc>)
 8001152:	f7ff ffbd 	bl	80010d0 <LCD_Print>
  LCD_GoToxy(6, 2);
 8001156:	2102      	movs	r1, #2
 8001158:	2006      	movs	r0, #6
 800115a:	f7ff ff86 	bl	800106a <LCD_GoToxy>
  sprintf(texto, "GIM50v5");
 800115e:	4a9e      	ldr	r2, [pc, #632]	; (80013d8 <main+0x2dc>)
 8001160:	4b9f      	ldr	r3, [pc, #636]	; (80013e0 <main+0x2e4>)
 8001162:	cb03      	ldmia	r3!, {r0, r1}
 8001164:	6010      	str	r0, [r2, #0]
 8001166:	6051      	str	r1, [r2, #4]
  LCD_Print(texto);
 8001168:	489b      	ldr	r0, [pc, #620]	; (80013d8 <main+0x2dc>)
 800116a:	f7ff ffb1 	bl	80010d0 <LCD_Print>

  //Led de la placa
  HAL_GPIO_WritePin(LED_onBoard_GPIO_Port, LED_onBoard_Pin, 1);
 800116e:	2201      	movs	r2, #1
 8001170:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001174:	489b      	ldr	r0, [pc, #620]	; (80013e4 <main+0x2e8>)
 8001176:	f002 fcac 	bl	8003ad2 <HAL_GPIO_WritePin>


  //Tiempo de arranque para la fuente de 48V, los leds actuan de testigo
  HAL_GPIO_WritePin(LED_Vo_GPIO_Port,LED_Vo_Pin, 1);
 800117a:	2201      	movs	r2, #1
 800117c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001180:	4899      	ldr	r0, [pc, #612]	; (80013e8 <main+0x2ec>)
 8001182:	f002 fca6 	bl	8003ad2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Io_GPIO_Port,LED_Io_Pin, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118c:	4896      	ldr	r0, [pc, #600]	; (80013e8 <main+0x2ec>)
 800118e:	f002 fca0 	bl	8003ad2 <HAL_GPIO_WritePin>


  HAL_Delay(3000);
 8001192:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001196:	f001 fdf9 	bl	8002d8c <HAL_Delay>


  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a0:	4891      	ldr	r0, [pc, #580]	; (80013e8 <main+0x2ec>)
 80011a2:	f002 fc96 	bl	8003ad2 <HAL_GPIO_WritePin>
  flag_relay=1;
 80011a6:	4b91      	ldr	r3, [pc, #580]	; (80013ec <main+0x2f0>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b0:	f001 fdec 	bl	8002d8c <HAL_Delay>

  LCD_Init();
 80011b4:	f7ff fe46 	bl	8000e44 <LCD_Init>
  LCD_GoToxy(5, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2005      	movs	r0, #5
 80011bc:	f7ff ff55 	bl	800106a <LCD_GoToxy>
  sprintf(texto, "MEDICIONES");
 80011c0:	4a85      	ldr	r2, [pc, #532]	; (80013d8 <main+0x2dc>)
 80011c2:	4b8b      	ldr	r3, [pc, #556]	; (80013f0 <main+0x2f4>)
 80011c4:	cb03      	ldmia	r3!, {r0, r1}
 80011c6:	6010      	str	r0, [r2, #0]
 80011c8:	6051      	str	r1, [r2, #4]
 80011ca:	8819      	ldrh	r1, [r3, #0]
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	8111      	strh	r1, [r2, #8]
 80011d0:	7293      	strb	r3, [r2, #10]
  LCD_Print(texto);
 80011d2:	4881      	ldr	r0, [pc, #516]	; (80013d8 <main+0x2dc>)
 80011d4:	f7ff ff7c 	bl	80010d0 <LCD_Print>
  LCD_GoToxy(0, 1);
 80011d8:	2101      	movs	r1, #1
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff ff45 	bl	800106a <LCD_GoToxy>
  sprintf(texto, "  Vo:");
 80011e0:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <main+0x2dc>)
 80011e2:	4a84      	ldr	r2, [pc, #528]	; (80013f4 <main+0x2f8>)
 80011e4:	6810      	ldr	r0, [r2, #0]
 80011e6:	6018      	str	r0, [r3, #0]
 80011e8:	8892      	ldrh	r2, [r2, #4]
 80011ea:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 80011ec:	487a      	ldr	r0, [pc, #488]	; (80013d8 <main+0x2dc>)
 80011ee:	f7ff ff6f 	bl	80010d0 <LCD_Print>
  LCD_GoToxy(0, 2);
 80011f2:	2102      	movs	r1, #2
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff ff38 	bl	800106a <LCD_GoToxy>
  sprintf(texto, "  Io:");
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <main+0x2dc>)
 80011fc:	4a7e      	ldr	r2, [pc, #504]	; (80013f8 <main+0x2fc>)
 80011fe:	6810      	ldr	r0, [r2, #0]
 8001200:	6018      	str	r0, [r3, #0]
 8001202:	8892      	ldrh	r2, [r2, #4]
 8001204:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 8001206:	4874      	ldr	r0, [pc, #464]	; (80013d8 <main+0x2dc>)
 8001208:	f7ff ff62 	bl	80010d0 <LCD_Print>
  LCD_GoToxy(0, 3);
 800120c:	2103      	movs	r1, #3
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff2b 	bl	800106a <LCD_GoToxy>
  sprintf(texto, " Phi:");
 8001214:	4b70      	ldr	r3, [pc, #448]	; (80013d8 <main+0x2dc>)
 8001216:	4a79      	ldr	r2, [pc, #484]	; (80013fc <main+0x300>)
 8001218:	6810      	ldr	r0, [r2, #0]
 800121a:	6018      	str	r0, [r3, #0]
 800121c:	8892      	ldrh	r2, [r2, #4]
 800121e:	809a      	strh	r2, [r3, #4]
  LCD_Print(texto);
 8001220:	486d      	ldr	r0, [pc, #436]	; (80013d8 <main+0x2dc>)
 8001222:	f7ff ff55 	bl	80010d0 <LCD_Print>
  HAL_Delay(200);
 8001226:	20c8      	movs	r0, #200	; 0xc8
 8001228:	f001 fdb0 	bl	8002d8c <HAL_Delay>

  HAL_GPIO_WritePin(LED_Vo_GPIO_Port,LED_Vo_Pin, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001232:	486d      	ldr	r0, [pc, #436]	; (80013e8 <main+0x2ec>)
 8001234:	f002 fc4d 	bl	8003ad2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_Io_GPIO_Port,LED_Io_Pin, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	486a      	ldr	r0, [pc, #424]	; (80013e8 <main+0x2ec>)
 8001240:	f002 fc47 	bl	8003ad2 <HAL_GPIO_WritePin>



  HAL_TIM_Base_Start(&htim3); //sincro ADC
 8001244:	486e      	ldr	r0, [pc, #440]	; (8001400 <main+0x304>)
 8001246:	f003 f97f 	bl	8004548 <HAL_TIM_Base_Start>

  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*) muestras, sizeof(muestras)); //ADC por DMA
  HAL_ADC_Start_IT(&hadc1);
 800124a:	486e      	ldr	r0, [pc, #440]	; (8001404 <main+0x308>)
 800124c:	f001 fe98 	bl	8002f80 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8001250:	486d      	ldr	r0, [pc, #436]	; (8001408 <main+0x30c>)
 8001252:	f001 fe95 	bl	8002f80 <HAL_ADC_Start_IT>

  last_rango_Io = RANGO_I;
 8001256:	4b64      	ldr	r3, [pc, #400]	; (80013e8 <main+0x2ec>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	08db      	lsrs	r3, r3, #3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b69      	ldr	r3, [pc, #420]	; (800140c <main+0x310>)
 8001266:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
	  }else{
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	  }
*/
	  if (count_tick != 0){ //acciones del systickHandler
 8001268:	4b69      	ldr	r3, [pc, #420]	; (8001410 <main+0x314>)
 800126a:	881b      	ldrh	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d041      	beq.n	80012f4 <main+0x1f8>

		  if (refrescaPantalla != 0){
 8001270:	4b68      	ldr	r3, [pc, #416]	; (8001414 <main+0x318>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <main+0x18a>
			  refrescaPantalla--;
 8001278:	4b66      	ldr	r3, [pc, #408]	; (8001414 <main+0x318>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <main+0x318>)
 8001282:	801a      	strh	r2, [r3, #0]
 8001284:	e001      	b.n	800128a <main+0x18e>
		  }else{
			  imprimePantalla();
 8001286:	f000 fc5b 	bl	8001b40 <imprimePantalla>
		  }

		  if (periodo_BoardLed != 0){
 800128a:	4b63      	ldr	r3, [pc, #396]	; (8001418 <main+0x31c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d006      	beq.n	80012a0 <main+0x1a4>
			  periodo_BoardLed--;
 8001292:	4b61      	ldr	r3, [pc, #388]	; (8001418 <main+0x31c>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b5f      	ldr	r3, [pc, #380]	; (8001418 <main+0x31c>)
 800129c:	801a      	strh	r2, [r3, #0]
 800129e:	e002      	b.n	80012a6 <main+0x1aa>
		  }else{
//			  HAL_GPIO_TogglePin(LED_Board_GPIO_Port, LED_Board_Pin);
			  periodo_BoardLed = PERIODO_BOARDLED;
 80012a0:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <main+0x31c>)
 80012a2:	22fa      	movs	r2, #250	; 0xfa
 80012a4:	801a      	strh	r2, [r3, #0]
		  }

		  if (lectura_entradas != 0){
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <main+0x320>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d006      	beq.n	80012bc <main+0x1c0>
			  lectura_entradas--;
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <main+0x320>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4b59      	ldr	r3, [pc, #356]	; (800141c <main+0x320>)
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	e001      	b.n	80012c0 <main+0x1c4>
		  }else{
			  update_entradas();
 80012bc:	f001 f92c 	bl	8002518 <update_entradas>
		  }

		  if (lectura_proteccion != 0){
 80012c0:	4b57      	ldr	r3, [pc, #348]	; (8001420 <main+0x324>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <main+0x1da>
			  lectura_proteccion--;
 80012c8:	4b55      	ldr	r3, [pc, #340]	; (8001420 <main+0x324>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <main+0x324>)
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e001      	b.n	80012da <main+0x1de>
		  }else{
			  update_proteccion();
 80012d6:	f001 f991 	bl	80025fc <update_proteccion>
		  }

		  if (transitorioFunete != 0)
 80012da:	4b52      	ldr	r3, [pc, #328]	; (8001424 <main+0x328>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d005      	beq.n	80012ee <main+0x1f2>
			  transitorioFunete--;
 80012e2:	4b50      	ldr	r3, [pc, #320]	; (8001424 <main+0x328>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b4e      	ldr	r3, [pc, #312]	; (8001424 <main+0x328>)
 80012ec:	801a      	strh	r2, [r3, #0]

		  count_tick = 0;
 80012ee:	4b48      	ldr	r3, [pc, #288]	; (8001410 <main+0x314>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
	  } //fin if (count_tick != 0)

	  check_entradas();
 80012f4:	f001 f932 	bl	800255c <check_entradas>
	  check_proteccion();
 80012f8:	f001 f9a2 	bl	8002640 <check_proteccion>

	  switch (status_adc) {
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <main+0x32c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b02      	cmp	r3, #2
 8001302:	f000 817a 	beq.w	80015fa <main+0x4fe>
 8001306:	2b03      	cmp	r3, #3
 8001308:	d003      	beq.n	8001312 <main+0x216>
 800130a:	2b01      	cmp	r3, #1
 800130c:	f000 80ae 	beq.w	800146c <main+0x370>

//			  status_adc = 0;
			  if (status_adc != 3) status_adc = 0;

		  default:
		  break;
 8001310:	e268      	b.n	80017e4 <main+0x6e8>
			  if (flag_adc1 != 0){
 8001312:	4b46      	ldr	r3, [pc, #280]	; (800142c <main+0x330>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d019      	beq.n	800134e <main+0x252>
				  muestras[num_muestraADC1] = HAL_ADC_GetValue(&hadc1);
 800131a:	483a      	ldr	r0, [pc, #232]	; (8001404 <main+0x308>)
 800131c:	f001 fee6 	bl	80030ec <HAL_ADC_GetValue>
 8001320:	4601      	mov	r1, r0
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <main+0x334>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b42      	ldr	r3, [pc, #264]	; (8001434 <main+0x338>)
 800132a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  if (num_muestraADC1 == 199)
 800132e:	4b40      	ldr	r3, [pc, #256]	; (8001430 <main+0x334>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2bc7      	cmp	r3, #199	; 0xc7
 8001334:	d102      	bne.n	800133c <main+0x240>
					  flag_mitadADC1 = 1;
 8001336:	4b40      	ldr	r3, [pc, #256]	; (8001438 <main+0x33c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
					  num_muestraADC1 += 2;
 800133c:	4b3c      	ldr	r3, [pc, #240]	; (8001430 <main+0x334>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	3302      	adds	r3, #2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <main+0x334>)
 8001346:	701a      	strb	r2, [r3, #0]
				  flag_adc1 = 0;
 8001348:	4b38      	ldr	r3, [pc, #224]	; (800142c <main+0x330>)
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]
			  if (flag_adc2 != 0){
 800134e:	4b3b      	ldr	r3, [pc, #236]	; (800143c <main+0x340>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d019      	beq.n	800138a <main+0x28e>
				  muestras[num_muestraADC2] = HAL_ADC_GetValue(&hadc2);
 8001356:	482c      	ldr	r0, [pc, #176]	; (8001408 <main+0x30c>)
 8001358:	f001 fec8 	bl	80030ec <HAL_ADC_GetValue>
 800135c:	4601      	mov	r1, r0
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <main+0x344>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b33      	ldr	r3, [pc, #204]	; (8001434 <main+0x338>)
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  if (num_muestraADC2 == 198)
 800136a:	4b35      	ldr	r3, [pc, #212]	; (8001440 <main+0x344>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2bc6      	cmp	r3, #198	; 0xc6
 8001370:	d102      	bne.n	8001378 <main+0x27c>
					  flag_mitadADC2 = 1;
 8001372:	4b34      	ldr	r3, [pc, #208]	; (8001444 <main+0x348>)
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
					  num_muestraADC2 += 2;
 8001378:	4b31      	ldr	r3, [pc, #196]	; (8001440 <main+0x344>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3302      	adds	r3, #2
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <main+0x344>)
 8001382:	701a      	strb	r2, [r3, #0]
				  flag_adc2 = 0;
 8001384:	4b2d      	ldr	r3, [pc, #180]	; (800143c <main+0x340>)
 8001386:	2200      	movs	r2, #0
 8001388:	701a      	strb	r2, [r3, #0]
			  if (flag_mitadADC1 != 0 && flag_mitadADC2 != 0){
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <main+0x33c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00d      	beq.n	80013ae <main+0x2b2>
 8001392:	4b2c      	ldr	r3, [pc, #176]	; (8001444 <main+0x348>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d009      	beq.n	80013ae <main+0x2b2>
				  status_adc = 1;
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <main+0x32c>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
				  flag_mitadADC1 = 0;
 80013a0:	4b25      	ldr	r3, [pc, #148]	; (8001438 <main+0x33c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
				  flag_mitadADC2 = 0;
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <main+0x348>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
				  break;
 80013ac:	e21b      	b.n	80017e6 <main+0x6ea>
			  if (flag_completoADC1 != 0 && flag_completoADC2 != 0){
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <main+0x34c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d04c      	beq.n	8001450 <main+0x354>
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <main+0x350>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d048      	beq.n	8001450 <main+0x354>
				  status_adc = 2;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <main+0x32c>)
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
				  flag_completoADC1 = 0;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <main+0x34c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
				  flag_completoADC2 = 0;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <main+0x350>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
				  break;
 80013d0:	e209      	b.n	80017e6 <main+0x6ea>
 80013d2:	bf00      	nop
 80013d4:	20000944 	.word	0x20000944
 80013d8:	200002d0 	.word	0x200002d0
 80013dc:	08007758 	.word	0x08007758
 80013e0:	08007760 	.word	0x08007760
 80013e4:	40011000 	.word	0x40011000
 80013e8:	40010c00 	.word	0x40010c00
 80013ec:	2000025a 	.word	0x2000025a
 80013f0:	08007768 	.word	0x08007768
 80013f4:	08007774 	.word	0x08007774
 80013f8:	0800777c 	.word	0x0800777c
 80013fc:	08007784 	.word	0x08007784
 8001400:	2000098c 	.word	0x2000098c
 8001404:	200002a0 	.word	0x200002a0
 8001408:	20000270 	.word	0x20000270
 800140c:	20000934 	.word	0x20000934
 8001410:	20000258 	.word	0x20000258
 8001414:	2000000e 	.word	0x2000000e
 8001418:	20000010 	.word	0x20000010
 800141c:	20000000 	.word	0x20000000
 8001420:	20000001 	.word	0x20000001
 8001424:	2000000c 	.word	0x2000000c
 8001428:	20000248 	.word	0x20000248
 800142c:	2000021d 	.word	0x2000021d
 8001430:	20000002 	.word	0x20000002
 8001434:	200002f0 	.word	0x200002f0
 8001438:	20000220 	.word	0x20000220
 800143c:	2000021e 	.word	0x2000021e
 8001440:	2000021f 	.word	0x2000021f
 8001444:	20000221 	.word	0x20000221
 8001448:	20000222 	.word	0x20000222
 800144c:	20000223 	.word	0x20000223
			  if ( (!flag_adc1) && (!flag_adc2)) status_adc = 0;
 8001450:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <main+0x504>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f040 81c1 	bne.w	80017dc <main+0x6e0>
 800145a:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <main+0x508>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 81bc 	bne.w	80017dc <main+0x6e0>
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <main+0x50c>)
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]
		  break;
 800146a:	e1b7      	b.n	80017dc <main+0x6e0>
			  for (uint16_t i = 0; i < 200; i+=2){
 800146c:	2300      	movs	r3, #0
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	e02b      	b.n	80014ca <main+0x3ce>
				  aux_muestra_v =muestras[i] - offset_adc;
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	4a65      	ldr	r2, [pc, #404]	; (800160c <main+0x510>)
 8001476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <main+0x514>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	4a64      	ldr	r2, [pc, #400]	; (8001614 <main+0x518>)
 8001482:	6013      	str	r3, [r2, #0]
				  aux_muestra_i =muestras[i+1] - offset_adc;
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	3301      	adds	r3, #1
 8001488:	4a60      	ldr	r2, [pc, #384]	; (800160c <main+0x510>)
 800148a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800148e:	4b60      	ldr	r3, [pc, #384]	; (8001610 <main+0x514>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a60      	ldr	r2, [pc, #384]	; (8001618 <main+0x51c>)
 8001496:	6013      	str	r3, [r2, #0]
				  acumulaV += aux_muestra_v*aux_muestra_v;
 8001498:	4b5e      	ldr	r3, [pc, #376]	; (8001614 <main+0x518>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a5d      	ldr	r2, [pc, #372]	; (8001614 <main+0x518>)
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	fb02 f203 	mul.w	r2, r2, r3
 80014a4:	4b5d      	ldr	r3, [pc, #372]	; (800161c <main+0x520>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a5c      	ldr	r2, [pc, #368]	; (800161c <main+0x520>)
 80014ac:	6013      	str	r3, [r2, #0]
				  acumulaI += aux_muestra_i*aux_muestra_i;
 80014ae:	4b5a      	ldr	r3, [pc, #360]	; (8001618 <main+0x51c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a59      	ldr	r2, [pc, #356]	; (8001618 <main+0x51c>)
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	fb02 f203 	mul.w	r2, r2, r3
 80014ba:	4b59      	ldr	r3, [pc, #356]	; (8001620 <main+0x524>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a57      	ldr	r2, [pc, #348]	; (8001620 <main+0x524>)
 80014c2:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 0; i < 200; i+=2){
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	3302      	adds	r3, #2
 80014c8:	80fb      	strh	r3, [r7, #6]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	2bc7      	cmp	r3, #199	; 0xc7
 80014ce:	d9d0      	bls.n	8001472 <main+0x376>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 80014d0:	4b52      	ldr	r3, [pc, #328]	; (800161c <main+0x520>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff95 	bl	8000404 <__aeabi_i2d>
 80014da:	4603      	mov	r3, r0
 80014dc:	460c      	mov	r4, r1
 80014de:	4618      	mov	r0, r3
 80014e0:	4621      	mov	r1, r4
 80014e2:	f006 f82b 	bl	800753c <sqrt>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <main+0x528>)
 80014ec:	f7ff f91e 	bl	800072c <__aeabi_ddiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fac6 	bl	8000a88 <__aeabi_d2uiz>
 80014fc:	4602      	mov	r2, r0
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <main+0x52c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	461a      	mov	r2, r3
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <main+0x52c>)
 8001508:	601a      	str	r2, [r3, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 800150a:	4b45      	ldr	r3, [pc, #276]	; (8001620 <main+0x524>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ff78 	bl	8000404 <__aeabi_i2d>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4618      	mov	r0, r3
 800151a:	4621      	mov	r1, r4
 800151c:	f006 f80e 	bl	800753c <sqrt>
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	4b3f      	ldr	r3, [pc, #252]	; (8001624 <main+0x528>)
 8001526:	f7ff f901 	bl	800072c <__aeabi_ddiv>
 800152a:	4603      	mov	r3, r0
 800152c:	460c      	mov	r4, r1
 800152e:	4618      	mov	r0, r3
 8001530:	4621      	mov	r1, r4
 8001532:	f7ff faa9 	bl	8000a88 <__aeabi_d2uiz>
 8001536:	4602      	mov	r2, r0
 8001538:	4b3c      	ldr	r3, [pc, #240]	; (800162c <main+0x530>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4413      	add	r3, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4b3a      	ldr	r3, [pc, #232]	; (800162c <main+0x530>)
 8001542:	601a      	str	r2, [r3, #0]
			  cuenta_RMS_samplesV++;
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <main+0x534>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	b2da      	uxtb	r2, r3
 800154c:	4b38      	ldr	r3, [pc, #224]	; (8001630 <main+0x534>)
 800154e:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 8001550:	4b38      	ldr	r3, [pc, #224]	; (8001634 <main+0x538>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3301      	adds	r3, #1
 8001556:	b2da      	uxtb	r2, r3
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <main+0x538>)
 800155a:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <main+0x534>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d13b      	bne.n	80015dc <main+0x4e0>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 8001564:	4b30      	ldr	r3, [pc, #192]	; (8001628 <main+0x52c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a33      	ldr	r2, [pc, #204]	; (8001638 <main+0x53c>)
 800156a:	fb82 1203 	smull	r1, r2, r2, r3
 800156e:	1092      	asrs	r2, r2, #2
 8001570:	17db      	asrs	r3, r3, #31
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a31      	ldr	r2, [pc, #196]	; (800163c <main+0x540>)
 8001576:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <main+0x530>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a2e      	ldr	r2, [pc, #184]	; (8001638 <main+0x53c>)
 800157e:	fb82 1203 	smull	r1, r2, r2, r3
 8001582:	1092      	asrs	r2, r2, #2
 8001584:	17db      	asrs	r3, r3, #31
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	4a2d      	ldr	r2, [pc, #180]	; (8001640 <main+0x544>)
 800158a:	6013      	str	r3, [r2, #0]
				  cuenta_RMS_samplesV = 0;
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <main+0x534>)
 800158e:	2200      	movs	r2, #0
 8001590:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <main+0x52c>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <main+0x538>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <main+0x530>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
				  if (RMS_samplesV > 1432){
 80015a4:	4b25      	ldr	r3, [pc, #148]	; (800163c <main+0x540>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 80015ac:	dd08      	ble.n	80015c0 <main+0x4c4>
					  status_proteccionVo = P_MAXIMO;
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <main+0x548>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 80015b4:	2200      	movs	r2, #0
 80015b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ba:	4823      	ldr	r0, [pc, #140]	; (8001648 <main+0x54c>)
 80015bc:	f002 fa89 	bl	8003ad2 <HAL_GPIO_WritePin>
				  if (RMS_samplesI > 1392){
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <main+0x544>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 80015c8:	dd08      	ble.n	80015dc <main+0x4e0>
					  status_proteccionIo = P_MAXIMO;
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <main+0x550>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 80015d0:	2200      	movs	r2, #0
 80015d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d6:	481c      	ldr	r0, [pc, #112]	; (8001648 <main+0x54c>)
 80015d8:	f002 fa7b 	bl	8003ad2 <HAL_GPIO_WritePin>
			  acumulaV = 0;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <main+0x520>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <main+0x524>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
			  if (status_adc != 3) status_adc = 0;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <main+0x50c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	f000 80f7 	beq.w	80017e0 <main+0x6e4>
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <main+0x50c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
		  break;
 80015f8:	e0f2      	b.n	80017e0 <main+0x6e4>
			  for (uint16_t i = 200; i < 400; i+=2){
 80015fa:	23c8      	movs	r3, #200	; 0xc8
 80015fc:	80bb      	strh	r3, [r7, #4]
 80015fe:	e053      	b.n	80016a8 <main+0x5ac>
 8001600:	2000021d 	.word	0x2000021d
 8001604:	2000021e 	.word	0x2000021e
 8001608:	20000248 	.word	0x20000248
 800160c:	200002f0 	.word	0x200002f0
 8001610:	20000004 	.word	0x20000004
 8001614:	20000224 	.word	0x20000224
 8001618:	20000228 	.word	0x20000228
 800161c:	2000022c 	.word	0x2000022c
 8001620:	20000230 	.word	0x20000230
 8001624:	40240000 	.word	0x40240000
 8001628:	20000234 	.word	0x20000234
 800162c:	20000238 	.word	0x20000238
 8001630:	2000023c 	.word	0x2000023c
 8001634:	2000023d 	.word	0x2000023d
 8001638:	66666667 	.word	0x66666667
 800163c:	20000240 	.word	0x20000240
 8001640:	20000244 	.word	0x20000244
 8001644:	2000025b 	.word	0x2000025b
 8001648:	40010c00 	.word	0x40010c00
 800164c:	2000025c 	.word	0x2000025c
				  aux_muestra_v =muestras[i] - offset_adc;
 8001650:	88bb      	ldrh	r3, [r7, #4]
 8001652:	4a92      	ldr	r2, [pc, #584]	; (800189c <main+0x7a0>)
 8001654:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001658:	4b91      	ldr	r3, [pc, #580]	; (80018a0 <main+0x7a4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	4a91      	ldr	r2, [pc, #580]	; (80018a4 <main+0x7a8>)
 8001660:	6013      	str	r3, [r2, #0]
				  aux_muestra_i =muestras[i+1] - offset_adc;
 8001662:	88bb      	ldrh	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	4a8d      	ldr	r2, [pc, #564]	; (800189c <main+0x7a0>)
 8001668:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800166c:	4b8c      	ldr	r3, [pc, #560]	; (80018a0 <main+0x7a4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	4a8d      	ldr	r2, [pc, #564]	; (80018a8 <main+0x7ac>)
 8001674:	6013      	str	r3, [r2, #0]
				  acumulaV += aux_muestra_v*aux_muestra_v;
 8001676:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <main+0x7a8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a8a      	ldr	r2, [pc, #552]	; (80018a4 <main+0x7a8>)
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	fb02 f203 	mul.w	r2, r2, r3
 8001682:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <main+0x7b0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a88      	ldr	r2, [pc, #544]	; (80018ac <main+0x7b0>)
 800168a:	6013      	str	r3, [r2, #0]
				  acumulaI += aux_muestra_i*aux_muestra_i;
 800168c:	4b86      	ldr	r3, [pc, #536]	; (80018a8 <main+0x7ac>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a85      	ldr	r2, [pc, #532]	; (80018a8 <main+0x7ac>)
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	fb02 f203 	mul.w	r2, r2, r3
 8001698:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <main+0x7b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4413      	add	r3, r2
 800169e:	4a84      	ldr	r2, [pc, #528]	; (80018b0 <main+0x7b4>)
 80016a0:	6013      	str	r3, [r2, #0]
			  for (uint16_t i = 200; i < 400; i+=2){
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	3302      	adds	r3, #2
 80016a6:	80bb      	strh	r3, [r7, #4]
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80016ae:	d3cf      	bcc.n	8001650 <main+0x554>
			  acum_RMS_samplesV += (uint32_t) (sqrt( (double) acumulaV) / 10);
 80016b0:	4b7e      	ldr	r3, [pc, #504]	; (80018ac <main+0x7b0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fea5 	bl	8000404 <__aeabi_i2d>
 80016ba:	4603      	mov	r3, r0
 80016bc:	460c      	mov	r4, r1
 80016be:	4618      	mov	r0, r3
 80016c0:	4621      	mov	r1, r4
 80016c2:	f005 ff3b 	bl	800753c <sqrt>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b7a      	ldr	r3, [pc, #488]	; (80018b4 <main+0x7b8>)
 80016cc:	f7ff f82e 	bl	800072c <__aeabi_ddiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4618      	mov	r0, r3
 80016d6:	4621      	mov	r1, r4
 80016d8:	f7ff f9d6 	bl	8000a88 <__aeabi_d2uiz>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <main+0x7bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b74      	ldr	r3, [pc, #464]	; (80018b8 <main+0x7bc>)
 80016e8:	601a      	str	r2, [r3, #0]
			  acum_RMS_samplesI += (uint32_t) (sqrt( (double) acumulaI) / 10);
 80016ea:	4b71      	ldr	r3, [pc, #452]	; (80018b0 <main+0x7b4>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe88 	bl	8000404 <__aeabi_i2d>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	4618      	mov	r0, r3
 80016fa:	4621      	mov	r1, r4
 80016fc:	f005 ff1e 	bl	800753c <sqrt>
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <main+0x7b8>)
 8001706:	f7ff f811 	bl	800072c <__aeabi_ddiv>
 800170a:	4603      	mov	r3, r0
 800170c:	460c      	mov	r4, r1
 800170e:	4618      	mov	r0, r3
 8001710:	4621      	mov	r1, r4
 8001712:	f7ff f9b9 	bl	8000a88 <__aeabi_d2uiz>
 8001716:	4602      	mov	r2, r0
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <main+0x7c0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4413      	add	r3, r2
 800171e:	461a      	mov	r2, r3
 8001720:	4b66      	ldr	r3, [pc, #408]	; (80018bc <main+0x7c0>)
 8001722:	601a      	str	r2, [r3, #0]
			  cuenta_RMS_samplesV++;
 8001724:	4b66      	ldr	r3, [pc, #408]	; (80018c0 <main+0x7c4>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	3301      	adds	r3, #1
 800172a:	b2da      	uxtb	r2, r3
 800172c:	4b64      	ldr	r3, [pc, #400]	; (80018c0 <main+0x7c4>)
 800172e:	701a      	strb	r2, [r3, #0]
			  cuenta_RMS_samplesI++;
 8001730:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <main+0x7c8>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	b2da      	uxtb	r2, r3
 8001738:	4b62      	ldr	r3, [pc, #392]	; (80018c4 <main+0x7c8>)
 800173a:	701a      	strb	r2, [r3, #0]
			  if (cuenta_RMS_samplesV == 10){
 800173c:	4b60      	ldr	r3, [pc, #384]	; (80018c0 <main+0x7c4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b0a      	cmp	r3, #10
 8001742:	d13d      	bne.n	80017c0 <main+0x6c4>
				  RMS_samplesV = acum_RMS_samplesV / 10;
 8001744:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <main+0x7bc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a5f      	ldr	r2, [pc, #380]	; (80018c8 <main+0x7cc>)
 800174a:	fb82 1203 	smull	r1, r2, r2, r3
 800174e:	1092      	asrs	r2, r2, #2
 8001750:	17db      	asrs	r3, r3, #31
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <main+0x7d0>)
 8001756:	6013      	str	r3, [r2, #0]
				  RMS_samplesI = acum_RMS_samplesI / 10;
 8001758:	4b58      	ldr	r3, [pc, #352]	; (80018bc <main+0x7c0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a5a      	ldr	r2, [pc, #360]	; (80018c8 <main+0x7cc>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	1092      	asrs	r2, r2, #2
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	4a59      	ldr	r2, [pc, #356]	; (80018d0 <main+0x7d4>)
 800176a:	6013      	str	r3, [r2, #0]
				  valor_mediciones ();
 800176c:	f000 f922 	bl	80019b4 <valor_mediciones>
				  cuenta_RMS_samplesV = 0;
 8001770:	4b53      	ldr	r3, [pc, #332]	; (80018c0 <main+0x7c4>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesV = 0;
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <main+0x7bc>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
				  cuenta_RMS_samplesI = 0;
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <main+0x7c8>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
				  acum_RMS_samplesI = 0;
 8001782:	4b4e      	ldr	r3, [pc, #312]	; (80018bc <main+0x7c0>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
				  if (RMS_samplesV > 1432){
 8001788:	4b50      	ldr	r3, [pc, #320]	; (80018cc <main+0x7d0>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 8001790:	dd08      	ble.n	80017a4 <main+0x6a8>
					  status_proteccionVo = P_MAXIMO;
 8001792:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <main+0x7d8>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 8001798:	2200      	movs	r2, #0
 800179a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179e:	484e      	ldr	r0, [pc, #312]	; (80018d8 <main+0x7dc>)
 80017a0:	f002 f997 	bl	8003ad2 <HAL_GPIO_WritePin>
				  if (RMS_samplesI > 1432){
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <main+0x7d4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f5b3 6fb3 	cmp.w	r3, #1432	; 0x598
 80017ac:	dd08      	ble.n	80017c0 <main+0x6c4>
					  status_proteccionIo = P_MAXIMO;
 80017ae:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <main+0x7e0>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	701a      	strb	r2, [r3, #0]
					  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ba:	4847      	ldr	r0, [pc, #284]	; (80018d8 <main+0x7dc>)
 80017bc:	f002 f989 	bl	8003ad2 <HAL_GPIO_WritePin>
			  acumulaV = 0;
 80017c0:	4b3a      	ldr	r3, [pc, #232]	; (80018ac <main+0x7b0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
			  acumulaI = 0;
 80017c6:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <main+0x7b4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
			  if (status_adc != 3) status_adc = 0;
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <main+0x7e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d007      	beq.n	80017e4 <main+0x6e8>
 80017d4:	4b42      	ldr	r3, [pc, #264]	; (80018e0 <main+0x7e4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
		  break;
 80017da:	e003      	b.n	80017e4 <main+0x6e8>
		  break;
 80017dc:	bf00      	nop
 80017de:	e002      	b.n	80017e6 <main+0x6ea>
		  break;
 80017e0:	bf00      	nop
 80017e2:	e000      	b.n	80017e6 <main+0x6ea>
		  break;
 80017e4:	bf00      	nop
	  } //fin switch(status_adc)


	  if (cuenta_fase == 5){
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <main+0x7e8>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	d120      	bne.n	8001830 <main+0x734>

		  if (acum_fase > 4500){ //mayor que 180 grados.
 80017ee:	4b3e      	ldr	r3, [pc, #248]	; (80018e8 <main+0x7ec>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f241 1294 	movw	r2, #4500	; 0x1194
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d90b      	bls.n	8001812 <main+0x716>
			  valor_fase = acum_fase * 4 / 10 - 3600; //acum_fase * 0.04 - 360.0
 80017fa:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <main+0x7ec>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4a3a      	ldr	r2, [pc, #232]	; (80018ec <main+0x7f0>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	08db      	lsrs	r3, r3, #3
 8001808:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800180c:	4a38      	ldr	r2, [pc, #224]	; (80018f0 <main+0x7f4>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e008      	b.n	8001824 <main+0x728>
		  }else{
			  valor_fase = acum_fase * 4 / 10; //acum_fase * 0.04
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <main+0x7ec>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4a34      	ldr	r2, [pc, #208]	; (80018ec <main+0x7f0>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	4a33      	ldr	r2, [pc, #204]	; (80018f0 <main+0x7f4>)
 8001822:	6013      	str	r3, [r2, #0]
		  }

		  acum_fase = 0;
 8001824:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <main+0x7ec>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
		  cuenta_fase = 0;
 800182a:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <main+0x7e8>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
	  } //fin if cuenta_fase

	  protecciones ();
 8001830:	f000 fbd0 	bl	8001fd4 <protecciones>

	  if (last_rango_Io != RANGO_I) {
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <main+0x7f8>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <main+0x7dc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	08db      	lsrs	r3, r3, #3
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	429a      	cmp	r2, r3
 8001846:	d01f      	beq.n	8001888 <main+0x78c>

		  if (status_proteccionIo != P_APAGADO
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <main+0x7e0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d103      	bne.n	8001858 <main+0x75c>
				  || status_proteccionIo != P_DESHAB) {
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <main+0x7e0>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b06      	cmp	r3, #6
 8001856:	d014      	beq.n	8001882 <main+0x786>

			  if (!(status_proteccionIo == P_TEMP
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <main+0x7e0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d010      	beq.n	8001882 <main+0x786>
					  || status_proteccionIo == P_OL
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <main+0x7e0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b04      	cmp	r3, #4
 8001866:	d00c      	beq.n	8001882 <main+0x786>
					  || status_proteccionIo == P_MAXIMO)) {
 8001868:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <main+0x7e0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
			  if (!(status_proteccionIo == P_TEMP
 800186c:	2b01      	cmp	r3, #1
 800186e:	d008      	beq.n	8001882 <main+0x786>

				  flag_relay = 1;
 8001870:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <main+0x7fc>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800187c:	4816      	ldr	r0, [pc, #88]	; (80018d8 <main+0x7dc>)
 800187e:	f002 f928 	bl	8003ad2 <HAL_GPIO_WritePin>
			  }
		  }
		  status_proteccionIo = P_OL;
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <main+0x7e0>)
 8001884:	2204      	movs	r2, #4
 8001886:	701a      	strb	r2, [r3, #0]
	  }

	  last_rango_Io = RANGO_I;
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <main+0x7dc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	08db      	lsrs	r3, r3, #3
 800188e:	b2db      	uxtb	r3, r3
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <main+0x7f8>)
 8001898:	701a      	strb	r2, [r3, #0]
	  if (count_tick != 0){ //acciones del systickHandler
 800189a:	e4e5      	b.n	8001268 <main+0x16c>
 800189c:	200002f0 	.word	0x200002f0
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000224 	.word	0x20000224
 80018a8:	20000228 	.word	0x20000228
 80018ac:	2000022c 	.word	0x2000022c
 80018b0:	20000230 	.word	0x20000230
 80018b4:	40240000 	.word	0x40240000
 80018b8:	20000234 	.word	0x20000234
 80018bc:	20000238 	.word	0x20000238
 80018c0:	2000023c 	.word	0x2000023c
 80018c4:	2000023d 	.word	0x2000023d
 80018c8:	66666667 	.word	0x66666667
 80018cc:	20000240 	.word	0x20000240
 80018d0:	20000244 	.word	0x20000244
 80018d4:	2000025b 	.word	0x2000025b
 80018d8:	40010c00 	.word	0x40010c00
 80018dc:	2000025c 	.word	0x2000025c
 80018e0:	20000248 	.word	0x20000248
 80018e4:	20000250 	.word	0x20000250
 80018e8:	2000024c 	.word	0x2000024c
 80018ec:	cccccccd 	.word	0xcccccccd
 80018f0:	20000254 	.word	0x20000254
 80018f4:	20000934 	.word	0x20000934
 80018f8:	2000025a 	.word	0x2000025a

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2228      	movs	r2, #40	; 0x28
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f003 fdd2 	bl	80054b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
 800192a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800193a:	2301      	movs	r3, #1
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800193e:	2302      	movs	r3, #2
 8001940:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001942:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001948:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800194c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800194e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001952:	4618      	mov	r0, r3
 8001954:	f002 f8d6 	bl	8003b04 <HAL_RCC_OscConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800195e:	f000 ff2b 	bl	80027b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001962:	230f      	movs	r3, #15
 8001964:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001966:	2302      	movs	r3, #2
 8001968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001972:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2102      	movs	r1, #2
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fb40 	bl	8004004 <HAL_RCC_ClockConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800198a:	f000 ff15 	bl	80027b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800198e:	2302      	movs	r3, #2
 8001990:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001996:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f002 fcce 	bl	800433c <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019a6:	f000 ff07 	bl	80027b8 <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <valor_mediciones>:

/* USER CODE BEGIN 4 */
void valor_mediciones (void){
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

	switch (RANGO_I){
 80019b8:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <valor_mediciones+0x164>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	08db      	lsrs	r3, r3, #3
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	3b02      	subs	r3, #2
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	d80f      	bhi.n	80019e8 <valor_mediciones+0x34>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <valor_mediciones+0x1c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	08001a0f 	.word	0x08001a0f
 80019d4:	08001a35 	.word	0x08001a35
 80019d8:	08001a5b 	.word	0x08001a5b
 80019dc:	08001a81 	.word	0x08001a81
 80019e0:	08001aa7 	.word	0x08001aa7
 80019e4:	08001acd 	.word	0x08001acd

		default:
		case 1:
			//convierte a float 500mA
			coefRango_Io = 4847;
 80019e8:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <valor_mediciones+0x168>)
 80019ea:	f241 22ef 	movw	r2, #4847	; 0x12ef
 80019ee:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 100);
 80019f0:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <valor_mediciones+0x16c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <valor_mediciones+0x168>)
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	4a49      	ldr	r2, [pc, #292]	; (8001b24 <valor_mediciones+0x170>)
 80019fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001a02:	1152      	asrs	r2, r2, #5
 8001a04:	17db      	asrs	r3, r3, #31
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a47      	ldr	r2, [pc, #284]	; (8001b28 <valor_mediciones+0x174>)
 8001a0a:	6013      	str	r3, [r2, #0]
		break;
 8001a0c:	e071      	b.n	8001af2 <valor_mediciones+0x13e>
		case 2:
			//convierte a float 1A
			coefRango_Io = 960;
 8001a0e:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <valor_mediciones+0x168>)
 8001a10:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001a14:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 1000);
 8001a16:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <valor_mediciones+0x16c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a40      	ldr	r2, [pc, #256]	; (8001b1c <valor_mediciones+0x168>)
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a42      	ldr	r2, [pc, #264]	; (8001b2c <valor_mediciones+0x178>)
 8001a24:	fb82 1203 	smull	r1, r2, r2, r3
 8001a28:	1192      	asrs	r2, r2, #6
 8001a2a:	17db      	asrs	r3, r3, #31
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	4a3e      	ldr	r2, [pc, #248]	; (8001b28 <valor_mediciones+0x174>)
 8001a30:	6013      	str	r3, [r2, #0]
		break;
 8001a32:	e05e      	b.n	8001af2 <valor_mediciones+0x13e>
		case 3:
			//convierte a float 2A
			coefRango_Io = 1902;
 8001a34:	4b39      	ldr	r3, [pc, #228]	; (8001b1c <valor_mediciones+0x168>)
 8001a36:	f240 726e 	movw	r2, #1902	; 0x76e
 8001a3a:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000);
 8001a3c:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <valor_mediciones+0x16c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <valor_mediciones+0x168>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	4a39      	ldr	r2, [pc, #228]	; (8001b30 <valor_mediciones+0x17c>)
 8001a4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4e:	1312      	asrs	r2, r2, #12
 8001a50:	17db      	asrs	r3, r3, #31
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a34      	ldr	r2, [pc, #208]	; (8001b28 <valor_mediciones+0x174>)
 8001a56:	6013      	str	r3, [r2, #0]
		break;
 8001a58:	e04b      	b.n	8001af2 <valor_mediciones+0x13e>
		case 4:
			//convierte a float 5A
			coefRango_Io = 4488;
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <valor_mediciones+0x168>)
 8001a5c:	f241 1288 	movw	r2, #4488	; 0x1188
 8001a60:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 10000);
 8001a62:	4b2f      	ldr	r3, [pc, #188]	; (8001b20 <valor_mediciones+0x16c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <valor_mediciones+0x168>)
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a30      	ldr	r2, [pc, #192]	; (8001b30 <valor_mediciones+0x17c>)
 8001a70:	fb82 1203 	smull	r1, r2, r2, r3
 8001a74:	1312      	asrs	r2, r2, #12
 8001a76:	17db      	asrs	r3, r3, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <valor_mediciones+0x174>)
 8001a7c:	6013      	str	r3, [r2, #0]
		break;
 8001a7e:	e038      	b.n	8001af2 <valor_mediciones+0x13e>
		case 5:
			//convierte a float 10A
			coefRango_Io = 897;
 8001a80:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <valor_mediciones+0x168>)
 8001a82:	f240 3281 	movw	r2, #897	; 0x381
 8001a86:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 1000);
 8001a88:	4b25      	ldr	r3, [pc, #148]	; (8001b20 <valor_mediciones+0x16c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <valor_mediciones+0x168>)
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	fb02 f303 	mul.w	r3, r2, r3
 8001a94:	4a25      	ldr	r2, [pc, #148]	; (8001b2c <valor_mediciones+0x178>)
 8001a96:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9a:	1192      	asrs	r2, r2, #6
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <valor_mediciones+0x174>)
 8001aa2:	6013      	str	r3, [r2, #0]
		break;
 8001aa4:	e025      	b.n	8001af2 <valor_mediciones+0x13e>
		case 6:
			//convierte a float 20A
			coefRango_Io = 1795;
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <valor_mediciones+0x168>)
 8001aa8:	f240 7203 	movw	r2, #1795	; 0x703
 8001aac:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 1000);
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <valor_mediciones+0x16c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <valor_mediciones+0x168>)
 8001ab4:	6812      	ldr	r2, [r2, #0]
 8001ab6:	fb02 f303 	mul.w	r3, r2, r3
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <valor_mediciones+0x178>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	1192      	asrs	r2, r2, #6
 8001ac2:	17db      	asrs	r3, r3, #31
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <valor_mediciones+0x174>)
 8001ac8:	6013      	str	r3, [r2, #0]
		break;
 8001aca:	e012      	b.n	8001af2 <valor_mediciones+0x13e>
		case 7:
			//convierte a float 50A
			coefRango_Io = 4488;
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <valor_mediciones+0x168>)
 8001ace:	f241 1288 	movw	r2, #4488	; 0x1188
 8001ad2:	601a      	str	r2, [r3, #0]
			valor_Io = (RMS_samplesI * coefRango_Io / 1000);
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <valor_mediciones+0x16c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <valor_mediciones+0x168>)
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	fb02 f303 	mul.w	r3, r2, r3
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <valor_mediciones+0x178>)
 8001ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae6:	1192      	asrs	r2, r2, #6
 8001ae8:	17db      	asrs	r3, r3, #31
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a0e      	ldr	r2, [pc, #56]	; (8001b28 <valor_mediciones+0x174>)
 8001aee:	6013      	str	r3, [r2, #0]
		break;
 8001af0:	bf00      	nop

	} //fin switch RANG_I

	valor_Vo = (RMS_samplesV * coefRango_Vo / 100);
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <valor_mediciones+0x180>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a10      	ldr	r2, [pc, #64]	; (8001b38 <valor_mediciones+0x184>)
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <valor_mediciones+0x170>)
 8001b00:	fb82 1203 	smull	r1, r2, r2, r3
 8001b04:	1152      	asrs	r2, r2, #5
 8001b06:	17db      	asrs	r3, r3, #31
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <valor_mediciones+0x188>)
 8001b0c:	6013      	str	r3, [r2, #0]

} //fin valor_mediciones()
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40010c00 	.word	0x40010c00
 8001b1c:	20000930 	.word	0x20000930
 8001b20:	20000244 	.word	0x20000244
 8001b24:	51eb851f 	.word	0x51eb851f
 8001b28:	2000093c 	.word	0x2000093c
 8001b2c:	10624dd3 	.word	0x10624dd3
 8001b30:	68db8bad 	.word	0x68db8bad
 8001b34:	20000240 	.word	0x20000240
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	20000940 	.word	0x20000940

08001b40 <imprimePantalla>:

void imprimePantalla(void) {
 8001b40:	b598      	push	{r3, r4, r7, lr}
 8001b42:	af00      	add	r7, sp, #0

	valor_mediciones();
 8001b44:	f7ff ff36 	bl	80019b4 <valor_mediciones>

//	LCD_GoToxy(5, 0);
//	sprintf(texto, "MEDICIONES");
	//LCD_Print("Titulo");
//	LCD_Print(texto);
	LCD_GoToxy(5, 1);
 8001b48:	2101      	movs	r1, #1
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f7ff fa8d 	bl	800106a <LCD_GoToxy>

	LCD_Print("               ");
 8001b50:	48b2      	ldr	r0, [pc, #712]	; (8001e1c <imprimePantalla+0x2dc>)
 8001b52:	f7ff fabd 	bl	80010d0 <LCD_Print>
	LCD_GoToxy(5, 1);
 8001b56:	2101      	movs	r1, #1
 8001b58:	2005      	movs	r0, #5
 8001b5a:	f7ff fa86 	bl	800106a <LCD_GoToxy>
	switch (status_proteccionVo) {
 8001b5e:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <imprimePantalla+0x2e0>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d872      	bhi.n	8001c4c <imprimePantalla+0x10c>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <imprimePantalla+0x2c>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001c29 	.word	0x08001c29
 8001b70:	08001c39 	.word	0x08001c39
 8001b74:	08001b81 	.word	0x08001b81
 8001b78:	08001c09 	.word	0x08001c09
 8001b7c:	08001c19 	.word	0x08001c19
		default:
		break;
		case P_OK:
//				sprintf(texto, "Tension: %3.2f [V]", valor_Vo);
			if (valor_Vo % 100 < 10){
 8001b80:	4ba8      	ldr	r3, [pc, #672]	; (8001e24 <imprimePantalla+0x2e4>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <imprimePantalla+0x2e8>)
 8001b86:	fb83 1302 	smull	r1, r3, r3, r2
 8001b8a:	1159      	asrs	r1, r3, #5
 8001b8c:	17d3      	asrs	r3, r2, #31
 8001b8e:	1acb      	subs	r3, r1, r3
 8001b90:	2164      	movs	r1, #100	; 0x64
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	dc1a      	bgt.n	8001bd2 <imprimePantalla+0x92>
				sprintf(texto, " %d.0%d [V]", valor_Vo / 100, valor_Vo % 100);
 8001b9c:	4ba1      	ldr	r3, [pc, #644]	; (8001e24 <imprimePantalla+0x2e4>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4aa1      	ldr	r2, [pc, #644]	; (8001e28 <imprimePantalla+0x2e8>)
 8001ba2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ba6:	1152      	asrs	r2, r2, #5
 8001ba8:	17db      	asrs	r3, r3, #31
 8001baa:	1ad0      	subs	r0, r2, r3
 8001bac:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <imprimePantalla+0x2e4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9d      	ldr	r2, [pc, #628]	; (8001e28 <imprimePantalla+0x2e8>)
 8001bb2:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb6:	1151      	asrs	r1, r2, #5
 8001bb8:	17da      	asrs	r2, r3, #31
 8001bba:	1a8a      	subs	r2, r1, r2
 8001bbc:	2164      	movs	r1, #100	; 0x64
 8001bbe:	fb01 f202 	mul.w	r2, r1, r2
 8001bc2:	1a9a      	subs	r2, r3, r2
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4998      	ldr	r1, [pc, #608]	; (8001e2c <imprimePantalla+0x2ec>)
 8001bca:	4899      	ldr	r0, [pc, #612]	; (8001e30 <imprimePantalla+0x2f0>)
 8001bcc:	f004 f8ca 	bl	8005d64 <siprintf>
			}else{
				sprintf(texto, " %d.%d [V]", valor_Vo / 100, valor_Vo % 100);
			}

		break;
 8001bd0:	e03d      	b.n	8001c4e <imprimePantalla+0x10e>
				sprintf(texto, " %d.%d [V]", valor_Vo / 100, valor_Vo % 100);
 8001bd2:	4b94      	ldr	r3, [pc, #592]	; (8001e24 <imprimePantalla+0x2e4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a94      	ldr	r2, [pc, #592]	; (8001e28 <imprimePantalla+0x2e8>)
 8001bd8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bdc:	1152      	asrs	r2, r2, #5
 8001bde:	17db      	asrs	r3, r3, #31
 8001be0:	1ad0      	subs	r0, r2, r3
 8001be2:	4b90      	ldr	r3, [pc, #576]	; (8001e24 <imprimePantalla+0x2e4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a90      	ldr	r2, [pc, #576]	; (8001e28 <imprimePantalla+0x2e8>)
 8001be8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bec:	1151      	asrs	r1, r2, #5
 8001bee:	17da      	asrs	r2, r3, #31
 8001bf0:	1a8a      	subs	r2, r1, r2
 8001bf2:	2164      	movs	r1, #100	; 0x64
 8001bf4:	fb01 f202 	mul.w	r2, r1, r2
 8001bf8:	1a9a      	subs	r2, r3, r2
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	498d      	ldr	r1, [pc, #564]	; (8001e34 <imprimePantalla+0x2f4>)
 8001c00:	488b      	ldr	r0, [pc, #556]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c02:	f004 f8af 	bl	8005d64 <siprintf>
		break;
 8001c06:	e022      	b.n	8001c4e <imprimePantalla+0x10e>
		case P_TEMP:
			sprintf(texto, " Sobretemp.");
 8001c08:	4a89      	ldr	r2, [pc, #548]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c0a:	4b8b      	ldr	r3, [pc, #556]	; (8001e38 <imprimePantalla+0x2f8>)
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c10:	6020      	str	r0, [r4, #0]
 8001c12:	6061      	str	r1, [r4, #4]
 8001c14:	60a2      	str	r2, [r4, #8]
		break;
 8001c16:	e01a      	b.n	8001c4e <imprimePantalla+0x10e>
		case P_OL:
			sprintf(texto, " Sobrecarga");
 8001c18:	4a85      	ldr	r2, [pc, #532]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <imprimePantalla+0x2fc>)
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c20:	6020      	str	r0, [r4, #0]
 8001c22:	6061      	str	r1, [r4, #4]
 8001c24:	60a2      	str	r2, [r4, #8]
		break;
 8001c26:	e012      	b.n	8001c4e <imprimePantalla+0x10e>
		case P_APAGADO:
			sprintf(texto, " ---    ");
 8001c28:	4a81      	ldr	r2, [pc, #516]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c2a:	4b85      	ldr	r3, [pc, #532]	; (8001e40 <imprimePantalla+0x300>)
 8001c2c:	cb03      	ldmia	r3!, {r0, r1}
 8001c2e:	6010      	str	r0, [r2, #0]
 8001c30:	6051      	str	r1, [r2, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	7213      	strb	r3, [r2, #8]
		break;
 8001c36:	e00a      	b.n	8001c4e <imprimePantalla+0x10e>
		case P_MAXIMO:
			sprintf(texto, " valor maximo");
 8001c38:	4a7d      	ldr	r2, [pc, #500]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c3a:	4b82      	ldr	r3, [pc, #520]	; (8001e44 <imprimePantalla+0x304>)
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c40:	6020      	str	r0, [r4, #0]
 8001c42:	6061      	str	r1, [r4, #4]
 8001c44:	60a2      	str	r2, [r4, #8]
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	81a3      	strh	r3, [r4, #12]
		break;
 8001c4a:	e000      	b.n	8001c4e <imprimePantalla+0x10e>
		break;
 8001c4c:	bf00      	nop
	} //fin switch flag_protecV
	LCD_Print(texto);
 8001c4e:	4878      	ldr	r0, [pc, #480]	; (8001e30 <imprimePantalla+0x2f0>)
 8001c50:	f7ff fa3e 	bl	80010d0 <LCD_Print>
	LCD_GoToxy(5, 2);
 8001c54:	2102      	movs	r1, #2
 8001c56:	2005      	movs	r0, #5
 8001c58:	f7ff fa07 	bl	800106a <LCD_GoToxy>
	LCD_Print("               ");
 8001c5c:	486f      	ldr	r0, [pc, #444]	; (8001e1c <imprimePantalla+0x2dc>)
 8001c5e:	f7ff fa37 	bl	80010d0 <LCD_Print>
	LCD_GoToxy(5, 2);
 8001c62:	2102      	movs	r1, #2
 8001c64:	2005      	movs	r0, #5
 8001c66:	f7ff fa00 	bl	800106a <LCD_GoToxy>
	switch (status_proteccionIo) {
 8001c6a:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <imprimePantalla+0x308>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	f200 8164 	bhi.w	8001f3c <imprimePantalla+0x3fc>
 8001c74:	a201      	add	r2, pc, #4	; (adr r2, 8001c7c <imprimePantalla+0x13c>)
 8001c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7a:	bf00      	nop
 8001c7c:	08001f19 	.word	0x08001f19
 8001c80:	08001f29 	.word	0x08001f29
 8001c84:	08001c91 	.word	0x08001c91
 8001c88:	08001ef9 	.word	0x08001ef9
 8001c8c:	08001f09 	.word	0x08001f09
		default:
		break;
		case P_OK:
			if (RANGO_I == 1){
 8001c90:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <imprimePantalla+0x30c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d143      	bne.n	8001d26 <imprimePantalla+0x1e6>
//					sprintf(texto, "Corriente: %5.2f[mA]", valor_Io);
				if (valor_Io % 100 < 10){
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	; (8001e50 <imprimePantalla+0x310>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b61      	ldr	r3, [pc, #388]	; (8001e28 <imprimePantalla+0x2e8>)
 8001ca4:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca8:	1159      	asrs	r1, r3, #5
 8001caa:	17d3      	asrs	r3, r2, #31
 8001cac:	1acb      	subs	r3, r1, r3
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	fb01 f303 	mul.w	r3, r1, r3
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	dc1a      	bgt.n	8001cf0 <imprimePantalla+0x1b0>
					sprintf(texto, " %d.0%d[mA]", valor_Io / 100, valor_Io % 100);
 8001cba:	4b65      	ldr	r3, [pc, #404]	; (8001e50 <imprimePantalla+0x310>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <imprimePantalla+0x2e8>)
 8001cc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc4:	1152      	asrs	r2, r2, #5
 8001cc6:	17db      	asrs	r3, r3, #31
 8001cc8:	1ad0      	subs	r0, r2, r3
 8001cca:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <imprimePantalla+0x310>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a56      	ldr	r2, [pc, #344]	; (8001e28 <imprimePantalla+0x2e8>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1151      	asrs	r1, r2, #5
 8001cd6:	17da      	asrs	r2, r3, #31
 8001cd8:	1a8a      	subs	r2, r1, r2
 8001cda:	2164      	movs	r1, #100	; 0x64
 8001cdc:	fb01 f202 	mul.w	r2, r1, r2
 8001ce0:	1a9a      	subs	r2, r3, r2
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	495b      	ldr	r1, [pc, #364]	; (8001e54 <imprimePantalla+0x314>)
 8001ce8:	4851      	ldr	r0, [pc, #324]	; (8001e30 <imprimePantalla+0x2f0>)
 8001cea:	f004 f83b 	bl	8005d64 <siprintf>
					sprintf(texto, " %d.0%d [A]", valor_Io / 100, valor_Io % 100);
				}else{
					sprintf(texto, " %d.%d [A]", valor_Io / 100, valor_Io % 100);
				}
			}
		break;
 8001cee:	e126      	b.n	8001f3e <imprimePantalla+0x3fe>
					sprintf(texto, " %d.%d[mA]", valor_Io / 100, valor_Io % 100);
 8001cf0:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <imprimePantalla+0x310>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <imprimePantalla+0x2e8>)
 8001cf6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cfa:	1152      	asrs	r2, r2, #5
 8001cfc:	17db      	asrs	r3, r3, #31
 8001cfe:	1ad0      	subs	r0, r2, r3
 8001d00:	4b53      	ldr	r3, [pc, #332]	; (8001e50 <imprimePantalla+0x310>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a48      	ldr	r2, [pc, #288]	; (8001e28 <imprimePantalla+0x2e8>)
 8001d06:	fb82 1203 	smull	r1, r2, r2, r3
 8001d0a:	1151      	asrs	r1, r2, #5
 8001d0c:	17da      	asrs	r2, r3, #31
 8001d0e:	1a8a      	subs	r2, r1, r2
 8001d10:	2164      	movs	r1, #100	; 0x64
 8001d12:	fb01 f202 	mul.w	r2, r1, r2
 8001d16:	1a9a      	subs	r2, r3, r2
 8001d18:	4613      	mov	r3, r2
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	494e      	ldr	r1, [pc, #312]	; (8001e58 <imprimePantalla+0x318>)
 8001d1e:	4844      	ldr	r0, [pc, #272]	; (8001e30 <imprimePantalla+0x2f0>)
 8001d20:	f004 f820 	bl	8005d64 <siprintf>
		break;
 8001d24:	e10b      	b.n	8001f3e <imprimePantalla+0x3fe>
			}else if (RANGO_I == 2){
 8001d26:	4b49      	ldr	r3, [pc, #292]	; (8001e4c <imprimePantalla+0x30c>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	f040 809d 	bne.w	8001e70 <imprimePantalla+0x330>
				if (valor_Io % 1000 < 100){
 8001d36:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <imprimePantalla+0x310>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <imprimePantalla+0x31c>)
 8001d3c:	fb83 1302 	smull	r1, r3, r3, r2
 8001d40:	1199      	asrs	r1, r3, #6
 8001d42:	17d3      	asrs	r3, r2, #31
 8001d44:	1acb      	subs	r3, r1, r3
 8001d46:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b63      	cmp	r3, #99	; 0x63
 8001d52:	dc46      	bgt.n	8001de2 <imprimePantalla+0x2a2>
					if (valor_Io % 1000 < 10){
 8001d54:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <imprimePantalla+0x310>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <imprimePantalla+0x31c>)
 8001d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d5e:	1199      	asrs	r1, r3, #6
 8001d60:	17d3      	asrs	r3, r2, #31
 8001d62:	1acb      	subs	r3, r1, r3
 8001d64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d68:	fb01 f303 	mul.w	r3, r1, r3
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b09      	cmp	r3, #9
 8001d70:	dc1b      	bgt.n	8001daa <imprimePantalla+0x26a>
						sprintf(texto, " %d.00%d [A]", valor_Io / 10, valor_Io % 1000);
 8001d72:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <imprimePantalla+0x310>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a3a      	ldr	r2, [pc, #232]	; (8001e60 <imprimePantalla+0x320>)
 8001d78:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7c:	1092      	asrs	r2, r2, #2
 8001d7e:	17db      	asrs	r3, r3, #31
 8001d80:	1ad0      	subs	r0, r2, r3
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <imprimePantalla+0x310>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <imprimePantalla+0x31c>)
 8001d88:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8c:	1191      	asrs	r1, r2, #6
 8001d8e:	17da      	asrs	r2, r3, #31
 8001d90:	1a8a      	subs	r2, r1, r2
 8001d92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d96:	fb01 f202 	mul.w	r2, r1, r2
 8001d9a:	1a9a      	subs	r2, r3, r2
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	4602      	mov	r2, r0
 8001da0:	4930      	ldr	r1, [pc, #192]	; (8001e64 <imprimePantalla+0x324>)
 8001da2:	4823      	ldr	r0, [pc, #140]	; (8001e30 <imprimePantalla+0x2f0>)
 8001da4:	f003 ffde 	bl	8005d64 <siprintf>
		break;
 8001da8:	e0c9      	b.n	8001f3e <imprimePantalla+0x3fe>
						sprintf(texto, " %d.0%d [A]", valor_Io / 10, valor_Io % 1000);
 8001daa:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <imprimePantalla+0x310>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a2c      	ldr	r2, [pc, #176]	; (8001e60 <imprimePantalla+0x320>)
 8001db0:	fb82 1203 	smull	r1, r2, r2, r3
 8001db4:	1092      	asrs	r2, r2, #2
 8001db6:	17db      	asrs	r3, r3, #31
 8001db8:	1ad0      	subs	r0, r2, r3
 8001dba:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <imprimePantalla+0x310>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a27      	ldr	r2, [pc, #156]	; (8001e5c <imprimePantalla+0x31c>)
 8001dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc4:	1191      	asrs	r1, r2, #6
 8001dc6:	17da      	asrs	r2, r3, #31
 8001dc8:	1a8a      	subs	r2, r1, r2
 8001dca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dce:	fb01 f202 	mul.w	r2, r1, r2
 8001dd2:	1a9a      	subs	r2, r3, r2
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	4923      	ldr	r1, [pc, #140]	; (8001e68 <imprimePantalla+0x328>)
 8001dda:	4815      	ldr	r0, [pc, #84]	; (8001e30 <imprimePantalla+0x2f0>)
 8001ddc:	f003 ffc2 	bl	8005d64 <siprintf>
		break;
 8001de0:	e0ad      	b.n	8001f3e <imprimePantalla+0x3fe>
					sprintf(texto, " %d.%d [A]", valor_Io / 10, valor_Io % 1000);
 8001de2:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <imprimePantalla+0x310>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <imprimePantalla+0x320>)
 8001de8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dec:	1092      	asrs	r2, r2, #2
 8001dee:	17db      	asrs	r3, r3, #31
 8001df0:	1ad0      	subs	r0, r2, r3
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <imprimePantalla+0x310>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a19      	ldr	r2, [pc, #100]	; (8001e5c <imprimePantalla+0x31c>)
 8001df8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dfc:	1191      	asrs	r1, r2, #6
 8001dfe:	17da      	asrs	r2, r3, #31
 8001e00:	1a8a      	subs	r2, r1, r2
 8001e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e06:	fb01 f202 	mul.w	r2, r1, r2
 8001e0a:	1a9a      	subs	r2, r3, r2
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	4602      	mov	r2, r0
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <imprimePantalla+0x32c>)
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <imprimePantalla+0x2f0>)
 8001e14:	f003 ffa6 	bl	8005d64 <siprintf>
		break;
 8001e18:	e091      	b.n	8001f3e <imprimePantalla+0x3fe>
 8001e1a:	bf00      	nop
 8001e1c:	0800778c 	.word	0x0800778c
 8001e20:	2000025b 	.word	0x2000025b
 8001e24:	20000940 	.word	0x20000940
 8001e28:	51eb851f 	.word	0x51eb851f
 8001e2c:	0800779c 	.word	0x0800779c
 8001e30:	200002d0 	.word	0x200002d0
 8001e34:	080077a8 	.word	0x080077a8
 8001e38:	080077b4 	.word	0x080077b4
 8001e3c:	080077c0 	.word	0x080077c0
 8001e40:	080077cc 	.word	0x080077cc
 8001e44:	080077d8 	.word	0x080077d8
 8001e48:	2000025c 	.word	0x2000025c
 8001e4c:	40010c00 	.word	0x40010c00
 8001e50:	2000093c 	.word	0x2000093c
 8001e54:	080077e8 	.word	0x080077e8
 8001e58:	080077f4 	.word	0x080077f4
 8001e5c:	10624dd3 	.word	0x10624dd3
 8001e60:	66666667 	.word	0x66666667
 8001e64:	08007800 	.word	0x08007800
 8001e68:	08007810 	.word	0x08007810
 8001e6c:	0800781c 	.word	0x0800781c
				if (valor_Io % 100 < 10){
 8001e70:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <imprimePantalla+0x45c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <imprimePantalla+0x460>)
 8001e76:	fb83 1302 	smull	r1, r3, r3, r2
 8001e7a:	1159      	asrs	r1, r3, #5
 8001e7c:	17d3      	asrs	r3, r2, #31
 8001e7e:	1acb      	subs	r3, r1, r3
 8001e80:	2164      	movs	r1, #100	; 0x64
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b09      	cmp	r3, #9
 8001e8a:	dc1a      	bgt.n	8001ec2 <imprimePantalla+0x382>
					sprintf(texto, " %d.0%d [A]", valor_Io / 100, valor_Io % 100);
 8001e8c:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <imprimePantalla+0x45c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a43      	ldr	r2, [pc, #268]	; (8001fa0 <imprimePantalla+0x460>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	1152      	asrs	r2, r2, #5
 8001e98:	17db      	asrs	r3, r3, #31
 8001e9a:	1ad0      	subs	r0, r2, r3
 8001e9c:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <imprimePantalla+0x45c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a3f      	ldr	r2, [pc, #252]	; (8001fa0 <imprimePantalla+0x460>)
 8001ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea6:	1151      	asrs	r1, r2, #5
 8001ea8:	17da      	asrs	r2, r3, #31
 8001eaa:	1a8a      	subs	r2, r1, r2
 8001eac:	2164      	movs	r1, #100	; 0x64
 8001eae:	fb01 f202 	mul.w	r2, r1, r2
 8001eb2:	1a9a      	subs	r2, r3, r2
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	493a      	ldr	r1, [pc, #232]	; (8001fa4 <imprimePantalla+0x464>)
 8001eba:	483b      	ldr	r0, [pc, #236]	; (8001fa8 <imprimePantalla+0x468>)
 8001ebc:	f003 ff52 	bl	8005d64 <siprintf>
		break;
 8001ec0:	e03d      	b.n	8001f3e <imprimePantalla+0x3fe>
					sprintf(texto, " %d.%d [A]", valor_Io / 100, valor_Io % 100);
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <imprimePantalla+0x45c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a36      	ldr	r2, [pc, #216]	; (8001fa0 <imprimePantalla+0x460>)
 8001ec8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ecc:	1152      	asrs	r2, r2, #5
 8001ece:	17db      	asrs	r3, r3, #31
 8001ed0:	1ad0      	subs	r0, r2, r3
 8001ed2:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <imprimePantalla+0x45c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <imprimePantalla+0x460>)
 8001ed8:	fb82 1203 	smull	r1, r2, r2, r3
 8001edc:	1151      	asrs	r1, r2, #5
 8001ede:	17da      	asrs	r2, r3, #31
 8001ee0:	1a8a      	subs	r2, r1, r2
 8001ee2:	2164      	movs	r1, #100	; 0x64
 8001ee4:	fb01 f202 	mul.w	r2, r1, r2
 8001ee8:	1a9a      	subs	r2, r3, r2
 8001eea:	4613      	mov	r3, r2
 8001eec:	4602      	mov	r2, r0
 8001eee:	492f      	ldr	r1, [pc, #188]	; (8001fac <imprimePantalla+0x46c>)
 8001ef0:	482d      	ldr	r0, [pc, #180]	; (8001fa8 <imprimePantalla+0x468>)
 8001ef2:	f003 ff37 	bl	8005d64 <siprintf>
		break;
 8001ef6:	e022      	b.n	8001f3e <imprimePantalla+0x3fe>
		case P_TEMP:
			sprintf(texto, " Sobretemp.");
 8001ef8:	4a2b      	ldr	r2, [pc, #172]	; (8001fa8 <imprimePantalla+0x468>)
 8001efa:	4b2d      	ldr	r3, [pc, #180]	; (8001fb0 <imprimePantalla+0x470>)
 8001efc:	4614      	mov	r4, r2
 8001efe:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f00:	6020      	str	r0, [r4, #0]
 8001f02:	6061      	str	r1, [r4, #4]
 8001f04:	60a2      	str	r2, [r4, #8]
		break;
 8001f06:	e01a      	b.n	8001f3e <imprimePantalla+0x3fe>
		case P_OL:
			sprintf(texto, " Sobrecarga");
 8001f08:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <imprimePantalla+0x468>)
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <imprimePantalla+0x474>)
 8001f0c:	4614      	mov	r4, r2
 8001f0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f10:	6020      	str	r0, [r4, #0]
 8001f12:	6061      	str	r1, [r4, #4]
 8001f14:	60a2      	str	r2, [r4, #8]
		break;
 8001f16:	e012      	b.n	8001f3e <imprimePantalla+0x3fe>
		case P_APAGADO:
			sprintf(texto, " ---    ");
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <imprimePantalla+0x468>)
 8001f1a:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <imprimePantalla+0x478>)
 8001f1c:	cb03      	ldmia	r3!, {r0, r1}
 8001f1e:	6010      	str	r0, [r2, #0]
 8001f20:	6051      	str	r1, [r2, #4]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	7213      	strb	r3, [r2, #8]
		break;
 8001f26:	e00a      	b.n	8001f3e <imprimePantalla+0x3fe>
		case P_MAXIMO:
			sprintf(texto, " valor maximo");
 8001f28:	4a1f      	ldr	r2, [pc, #124]	; (8001fa8 <imprimePantalla+0x468>)
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <imprimePantalla+0x47c>)
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001f30:	6020      	str	r0, [r4, #0]
 8001f32:	6061      	str	r1, [r4, #4]
 8001f34:	60a2      	str	r2, [r4, #8]
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	81a3      	strh	r3, [r4, #12]
		break;
 8001f3a:	e000      	b.n	8001f3e <imprimePantalla+0x3fe>
		break;
 8001f3c:	bf00      	nop

	} //fin switch flag_protecI
	LCD_Print(texto);
 8001f3e:	481a      	ldr	r0, [pc, #104]	; (8001fa8 <imprimePantalla+0x468>)
 8001f40:	f7ff f8c6 	bl	80010d0 <LCD_Print>
	LCD_GoToxy(5, 3);
 8001f44:	2103      	movs	r1, #3
 8001f46:	2005      	movs	r0, #5
 8001f48:	f7ff f88f 	bl	800106a <LCD_GoToxy>
	LCD_Print("               ");
 8001f4c:	481c      	ldr	r0, [pc, #112]	; (8001fc0 <imprimePantalla+0x480>)
 8001f4e:	f7ff f8bf 	bl	80010d0 <LCD_Print>
	LCD_GoToxy(5, 3);
 8001f52:	2103      	movs	r1, #3
 8001f54:	2005      	movs	r0, #5
 8001f56:	f7ff f888 	bl	800106a <LCD_GoToxy>
	sprintf(texto, " %d.%d [deg]", valor_fase / 10, valor_fase % 10);
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <imprimePantalla+0x484>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <imprimePantalla+0x488>)
 8001f60:	fba2 2303 	umull	r2, r3, r2, r3
 8001f64:	08d8      	lsrs	r0, r3, #3
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <imprimePantalla+0x484>)
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <imprimePantalla+0x488>)
 8001f6c:	fba3 2301 	umull	r2, r3, r3, r1
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	4613      	mov	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	1aca      	subs	r2, r1, r3
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <imprimePantalla+0x48c>)
 8001f82:	4809      	ldr	r0, [pc, #36]	; (8001fa8 <imprimePantalla+0x468>)
 8001f84:	f003 feee 	bl	8005d64 <siprintf>
	LCD_Print(texto);
 8001f88:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <imprimePantalla+0x468>)
 8001f8a:	f7ff f8a1 	bl	80010d0 <LCD_Print>

	refrescaPantalla = 500;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <imprimePantalla+0x490>)
 8001f90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f94:	801a      	strh	r2, [r3, #0]

} //fin imprimePantalla ()
 8001f96:	bf00      	nop
 8001f98:	bd98      	pop	{r3, r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000093c 	.word	0x2000093c
 8001fa0:	51eb851f 	.word	0x51eb851f
 8001fa4:	08007810 	.word	0x08007810
 8001fa8:	200002d0 	.word	0x200002d0
 8001fac:	0800781c 	.word	0x0800781c
 8001fb0:	080077b4 	.word	0x080077b4
 8001fb4:	080077c0 	.word	0x080077c0
 8001fb8:	080077cc 	.word	0x080077cc
 8001fbc:	080077d8 	.word	0x080077d8
 8001fc0:	0800778c 	.word	0x0800778c
 8001fc4:	20000254 	.word	0x20000254
 8001fc8:	cccccccd 	.word	0xcccccccd
 8001fcc:	08007828 	.word	0x08007828
 8001fd0:	2000000e 	.word	0x2000000e

08001fd4 <protecciones>:


void protecciones (void){
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0

	//HAL_Delay(100);
//	HAL_GPIO_TogglePin(LED_Board_GPIO_Port, LED_Board_Pin);
	p_tempVo = HAL_GPIO_ReadPin(P_Temp_Vo_GPIO_Port, P_Temp_Vo_Pin);
 8001fd8:	2110      	movs	r1, #16
 8001fda:	48ad      	ldr	r0, [pc, #692]	; (8002290 <protecciones+0x2bc>)
 8001fdc:	f001 fd62 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4bab      	ldr	r3, [pc, #684]	; (8002294 <protecciones+0x2c0>)
 8001fe6:	701a      	strb	r2, [r3, #0]
	p_tempIo = HAL_GPIO_ReadPin(P_Temp_Io_GPIO_Port, P_Temp_Io_Pin);
 8001fe8:	2180      	movs	r1, #128	; 0x80
 8001fea:	48a9      	ldr	r0, [pc, #676]	; (8002290 <protecciones+0x2bc>)
 8001fec:	f001 fd5a 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4ba8      	ldr	r3, [pc, #672]	; (8002298 <protecciones+0x2c4>)
 8001ff6:	701a      	strb	r2, [r3, #0]
	poteVo = HAL_GPIO_ReadPin(Rep_Pote_Vo_GPIO_Port, Rep_Pote_Vo_Pin);
 8001ff8:	2140      	movs	r1, #64	; 0x40
 8001ffa:	48a5      	ldr	r0, [pc, #660]	; (8002290 <protecciones+0x2bc>)
 8001ffc:	f001 fd52 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002000:	4603      	mov	r3, r0
 8002002:	461a      	mov	r2, r3
 8002004:	4ba5      	ldr	r3, [pc, #660]	; (800229c <protecciones+0x2c8>)
 8002006:	701a      	strb	r2, [r3, #0]
	poteIo = HAL_GPIO_ReadPin(Rep_Pote_Io_GPIO_Port, Rep_Pote_Io_Pin);
 8002008:	2102      	movs	r1, #2
 800200a:	48a5      	ldr	r0, [pc, #660]	; (80022a0 <protecciones+0x2cc>)
 800200c:	f001 fd4a 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	4ba3      	ldr	r3, [pc, #652]	; (80022a4 <protecciones+0x2d0>)
 8002016:	701a      	strb	r2, [r3, #0]

	switch (status_proteccionVo) {
 8002018:	4ba3      	ldr	r3, [pc, #652]	; (80022a8 <protecciones+0x2d4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b07      	cmp	r3, #7
 800201e:	f200 8108 	bhi.w	8002232 <protecciones+0x25e>
 8002022:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <protecciones+0x54>)
 8002024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002028:	08002049 	.word	0x08002049
 800202c:	0800217b 	.word	0x0800217b
 8002030:	080020a7 	.word	0x080020a7
 8002034:	0800217b 	.word	0x0800217b
 8002038:	0800217b 	.word	0x0800217b
 800203c:	08002233 	.word	0x08002233
 8002040:	08002049 	.word	0x08002049
 8002044:	080021ef 	.word	0x080021ef
		case P_APAGADO:
		case P_DESHAB:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //fuente prendida
 8002048:	2201      	movs	r2, #1
 800204a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800204e:	4894      	ldr	r0, [pc, #592]	; (80022a0 <protecciones+0x2cc>)
 8002050:	f001 fd3f 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 1); //apaga HAB
 8002054:	2201      	movs	r2, #1
 8002056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205a:	4891      	ldr	r0, [pc, #580]	; (80022a0 <protecciones+0x2cc>)
 800205c:	f001 fd39 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 0); //y apaga el led
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002066:	488e      	ldr	r0, [pc, #568]	; (80022a0 <protecciones+0x2cc>)
 8002068:	f001 fd33 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (poteVo != 0)
 800206c:	4b8b      	ldr	r3, [pc, #556]	; (800229c <protecciones+0x2c8>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 80e0 	bne.w	8002236 <protecciones+0x262>
				break; //pote distinto de 0
			if (p_tempVo != 0)
 8002076:	4b87      	ldr	r3, [pc, #540]	; (8002294 <protecciones+0x2c0>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 80dd 	bne.w	800223a <protecciones+0x266>
				break; //hay alerta de temperatura
			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L)
 8002080:	4b8a      	ldr	r3, [pc, #552]	; (80022ac <protecciones+0x2d8>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b03      	cmp	r3, #3
 8002086:	f000 80eb 	beq.w	8002260 <protecciones+0x28c>
 800208a:	4b88      	ldr	r3, [pc, #544]	; (80022ac <protecciones+0x2d8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	f000 80e6 	beq.w	8002260 <protecciones+0x28c>
				break; //hay alerta de sobre carga

			if (pulsadorVo == FALL)
 8002094:	4b86      	ldr	r3, [pc, #536]	; (80022b0 <protecciones+0x2dc>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b02      	cmp	r3, #2
 800209a:	f040 80d0 	bne.w	800223e <protecciones+0x26a>
				status_proteccionVo = P_OK;
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <protecciones+0x2d4>)
 80020a0:	2202      	movs	r2, #2
 80020a2:	701a      	strb	r2, [r3, #0]
		break;
 80020a4:	e0cb      	b.n	800223e <protecciones+0x26a>
		case P_OK:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //fuente prendida
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ac:	487c      	ldr	r0, [pc, #496]	; (80022a0 <protecciones+0x2cc>)
 80020ae:	f001 fd10 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 0); //prende HAB
 80020b2:	2200      	movs	r2, #0
 80020b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b8:	4879      	ldr	r0, [pc, #484]	; (80022a0 <protecciones+0x2cc>)
 80020ba:	f001 fd0a 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 1); //y prende el led
 80020be:	2201      	movs	r2, #1
 80020c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c4:	4876      	ldr	r0, [pc, #472]	; (80022a0 <protecciones+0x2cc>)
 80020c6:	f001 fd04 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (pulsadorVo == FALL) {
 80020ca:	4b79      	ldr	r3, [pc, #484]	; (80022b0 <protecciones+0x2dc>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d13c      	bne.n	800214c <protecciones+0x178>
				LCD_Init();
 80020d2:	f7fe feb7 	bl	8000e44 <LCD_Init>
				LCD_GoToxy(5, 0);
 80020d6:	2100      	movs	r1, #0
 80020d8:	2005      	movs	r0, #5
 80020da:	f7fe ffc6 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "MEDICIONES");
 80020de:	4a75      	ldr	r2, [pc, #468]	; (80022b4 <protecciones+0x2e0>)
 80020e0:	4b75      	ldr	r3, [pc, #468]	; (80022b8 <protecciones+0x2e4>)
 80020e2:	cb03      	ldmia	r3!, {r0, r1}
 80020e4:	6010      	str	r0, [r2, #0]
 80020e6:	6051      	str	r1, [r2, #4]
 80020e8:	8819      	ldrh	r1, [r3, #0]
 80020ea:	789b      	ldrb	r3, [r3, #2]
 80020ec:	8111      	strh	r1, [r2, #8]
 80020ee:	7293      	strb	r3, [r2, #10]
				LCD_Print(texto);
 80020f0:	4870      	ldr	r0, [pc, #448]	; (80022b4 <protecciones+0x2e0>)
 80020f2:	f7fe ffed 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 1);
 80020f6:	2101      	movs	r1, #1
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7fe ffb6 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "  Vo:");
 80020fe:	4b6d      	ldr	r3, [pc, #436]	; (80022b4 <protecciones+0x2e0>)
 8002100:	4a6e      	ldr	r2, [pc, #440]	; (80022bc <protecciones+0x2e8>)
 8002102:	6810      	ldr	r0, [r2, #0]
 8002104:	6018      	str	r0, [r3, #0]
 8002106:	8892      	ldrh	r2, [r2, #4]
 8002108:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 800210a:	486a      	ldr	r0, [pc, #424]	; (80022b4 <protecciones+0x2e0>)
 800210c:	f7fe ffe0 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 2);
 8002110:	2102      	movs	r1, #2
 8002112:	2000      	movs	r0, #0
 8002114:	f7fe ffa9 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "  Io:");
 8002118:	4b66      	ldr	r3, [pc, #408]	; (80022b4 <protecciones+0x2e0>)
 800211a:	4a69      	ldr	r2, [pc, #420]	; (80022c0 <protecciones+0x2ec>)
 800211c:	6810      	ldr	r0, [r2, #0]
 800211e:	6018      	str	r0, [r3, #0]
 8002120:	8892      	ldrh	r2, [r2, #4]
 8002122:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 8002124:	4863      	ldr	r0, [pc, #396]	; (80022b4 <protecciones+0x2e0>)
 8002126:	f7fe ffd3 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 3);
 800212a:	2103      	movs	r1, #3
 800212c:	2000      	movs	r0, #0
 800212e:	f7fe ff9c 	bl	800106a <LCD_GoToxy>
				sprintf(texto, " Phi:");
 8002132:	4b60      	ldr	r3, [pc, #384]	; (80022b4 <protecciones+0x2e0>)
 8002134:	4a63      	ldr	r2, [pc, #396]	; (80022c4 <protecciones+0x2f0>)
 8002136:	6810      	ldr	r0, [r2, #0]
 8002138:	6018      	str	r0, [r3, #0]
 800213a:	8892      	ldrh	r2, [r2, #4]
 800213c:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 800213e:	485d      	ldr	r0, [pc, #372]	; (80022b4 <protecciones+0x2e0>)
 8002140:	f7fe ffc6 	bl	80010d0 <LCD_Print>

				status_proteccionVo = P_APAGADO;
 8002144:	4b58      	ldr	r3, [pc, #352]	; (80022a8 <protecciones+0x2d4>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
				//avisa por pantalla
				break;
 800214a:	e089      	b.n	8002260 <protecciones+0x28c>
			}

			if (p_tempVo != 0) {
 800214c:	4b51      	ldr	r3, [pc, #324]	; (8002294 <protecciones+0x2c0>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <protecciones+0x188>
				status_proteccionVo = P_TEMP;
 8002154:	4b54      	ldr	r3, [pc, #336]	; (80022a8 <protecciones+0x2d4>)
 8002156:	2203      	movs	r2, #3
 8002158:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 800215a:	e081      	b.n	8002260 <protecciones+0x28c>
			}

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <protecciones+0x2d8>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d003      	beq.n	800216c <protecciones+0x198>
 8002164:	4b51      	ldr	r3, [pc, #324]	; (80022ac <protecciones+0x2d8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d16a      	bne.n	8002242 <protecciones+0x26e>
				status_proteccionVo = P_OL;
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <protecciones+0x2d4>)
 800216e:	2204      	movs	r2, #4
 8002170:	701a      	strb	r2, [r3, #0]
				flag_relay = 1;
 8002172:	4b55      	ldr	r3, [pc, #340]	; (80022c8 <protecciones+0x2f4>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 8002178:	e072      	b.n	8002260 <protecciones+0x28c>
		break;
		case P_TEMP:
		case P_OL:
		case P_MAXIMO:

			HAL_GPIO_WritePin(HAB_Vo_GPIO_Port, HAB_Vo_Pin, 1); //apaga HAB
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002180:	4847      	ldr	r0, [pc, #284]	; (80022a0 <protecciones+0x2cc>)
 8002182:	f001 fca6 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Vo_GPIO_Port, LED_Vo_Pin, 0); //y apaga el led
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218c:	4844      	ldr	r0, [pc, #272]	; (80022a0 <protecciones+0x2cc>)
 800218e:	f001 fca0 	bl	8003ad2 <HAL_GPIO_WritePin>
			if (flag_relay != 0)
 8002192:	4b4d      	ldr	r3, [pc, #308]	; (80022c8 <protecciones+0x2f4>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <protecciones+0x1d2>
				HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a0:	483f      	ldr	r0, [pc, #252]	; (80022a0 <protecciones+0x2cc>)
 80021a2:	f001 fc96 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (p_tempVo != 0)
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <protecciones+0x2c0>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d14b      	bne.n	8002246 <protecciones+0x272>
				break; //hay alerta de temperatura

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 80021ae:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <protecciones+0x2d8>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d054      	beq.n	8002260 <protecciones+0x28c>
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <protecciones+0x2d8>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d050      	beq.n	8002260 <protecciones+0x28c>
				break; //hay alerta de sobre tensión
			}

			if (poteVo != 0)
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <protecciones+0x2c8>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d141      	bne.n	800224a <protecciones+0x276>
				break; // pote distinto de 0

			if (pulsadorVo == FALL) {
 80021c6:	4b3a      	ldr	r3, [pc, #232]	; (80022b0 <protecciones+0x2dc>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d13f      	bne.n	800224e <protecciones+0x27a>

				if (flag_relay != 0) {
 80021ce:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <protecciones+0x2f4>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <protecciones+0x212>
					status_proteccionVo = P_FUENTE;
 80021d6:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <protecciones+0x2d4>)
 80021d8:	2207      	movs	r2, #7
 80021da:	701a      	strb	r2, [r3, #0]
					transitorioFunete = 1000; //en ms.
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <protecciones+0x2f8>)
 80021de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021e2:	801a      	strh	r2, [r3, #0]
				} else {
					status_proteccionVo = P_OK;
				}
			}

		break;
 80021e4:	e033      	b.n	800224e <protecciones+0x27a>
					status_proteccionVo = P_OK;
 80021e6:	4b30      	ldr	r3, [pc, #192]	; (80022a8 <protecciones+0x2d4>)
 80021e8:	2202      	movs	r2, #2
 80021ea:	701a      	strb	r2, [r3, #0]
		break;
 80021ec:	e02f      	b.n	800224e <protecciones+0x27a>
		case P_FUENTE:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //prende fuente
 80021ee:	2201      	movs	r2, #1
 80021f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f4:	482a      	ldr	r0, [pc, #168]	; (80022a0 <protecciones+0x2cc>)
 80021f6:	f001 fc6c 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (transitorioFunete != 0) {
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <protecciones+0x2f8>)
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d127      	bne.n	8002252 <protecciones+0x27e>
				break; //fatal para el descuento de 1s.
			}

			if (p_tempVo != 0) {
 8002202:	4b24      	ldr	r3, [pc, #144]	; (8002294 <protecciones+0x2c0>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d125      	bne.n	8002256 <protecciones+0x282>
				break; //hay alerta de temperatura
			}

			if (P_OL_Vo == RISE || P_OL_Vo == HIGH_L) {
 800220a:	4b28      	ldr	r3, [pc, #160]	; (80022ac <protecciones+0x2d8>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d026      	beq.n	8002260 <protecciones+0x28c>
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <protecciones+0x2d8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d022      	beq.n	8002260 <protecciones+0x28c>
				break; //hay alerta de sobre carga
			}

			if (poteVo != 0) {
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <protecciones+0x2c8>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d11b      	bne.n	800225a <protecciones+0x286>
				break; //pote distinto de 0.
			}

			if (pulsadorVo == FALL) {
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <protecciones+0x2dc>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d119      	bne.n	800225e <protecciones+0x28a>
				status_proteccionVo = P_OK;
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <protecciones+0x2d4>)
 800222c:	2202      	movs	r2, #2
 800222e:	701a      	strb	r2, [r3, #0]
			}

		break;
 8002230:	e015      	b.n	800225e <protecciones+0x28a>
		default:
		break;
 8002232:	bf00      	nop
 8002234:	e014      	b.n	8002260 <protecciones+0x28c>
				break; //pote distinto de 0
 8002236:	bf00      	nop
 8002238:	e012      	b.n	8002260 <protecciones+0x28c>
				break; //hay alerta de temperatura
 800223a:	bf00      	nop
 800223c:	e010      	b.n	8002260 <protecciones+0x28c>
		break;
 800223e:	bf00      	nop
 8002240:	e00e      	b.n	8002260 <protecciones+0x28c>
		break;
 8002242:	bf00      	nop
 8002244:	e00c      	b.n	8002260 <protecciones+0x28c>
				break; //hay alerta de temperatura
 8002246:	bf00      	nop
 8002248:	e00a      	b.n	8002260 <protecciones+0x28c>
				break; // pote distinto de 0
 800224a:	bf00      	nop
 800224c:	e008      	b.n	8002260 <protecciones+0x28c>
		break;
 800224e:	bf00      	nop
 8002250:	e006      	b.n	8002260 <protecciones+0x28c>
				break; //fatal para el descuento de 1s.
 8002252:	bf00      	nop
 8002254:	e004      	b.n	8002260 <protecciones+0x28c>
				break; //hay alerta de temperatura
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <protecciones+0x28c>
				break; //pote distinto de 0.
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <protecciones+0x28c>
		break;
 800225e:	bf00      	nop

	} //end switch status_proteccionVo

	switch (status_proteccionIo) {
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <protecciones+0x2fc>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b07      	cmp	r3, #7
 8002266:	f200 8124 	bhi.w	80024b2 <protecciones+0x4de>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <protecciones+0x29c>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022d5 	.word	0x080022d5
 8002274:	080023fb 	.word	0x080023fb
 8002278:	08002333 	.word	0x08002333
 800227c:	080023fb 	.word	0x080023fb
 8002280:	080023fb 	.word	0x080023fb
 8002284:	080024b3 	.word	0x080024b3
 8002288:	080022d5 	.word	0x080022d5
 800228c:	0800246f 	.word	0x0800246f
 8002290:	40010800 	.word	0x40010800
 8002294:	2000025d 	.word	0x2000025d
 8002298:	2000025e 	.word	0x2000025e
 800229c:	2000025f 	.word	0x2000025f
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	20000260 	.word	0x20000260
 80022a8:	2000025b 	.word	0x2000025b
 80022ac:	20000212 	.word	0x20000212
 80022b0:	20000210 	.word	0x20000210
 80022b4:	200002d0 	.word	0x200002d0
 80022b8:	08007768 	.word	0x08007768
 80022bc:	08007774 	.word	0x08007774
 80022c0:	0800777c 	.word	0x0800777c
 80022c4:	08007784 	.word	0x08007784
 80022c8:	2000025a 	.word	0x2000025a
 80022cc:	2000000c 	.word	0x2000000c
 80022d0:	2000025c 	.word	0x2000025c
		case P_APAGADO:
		case P_DESHAB:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //fuente prendida
 80022d4:	2201      	movs	r2, #1
 80022d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022da:	4882      	ldr	r0, [pc, #520]	; (80024e4 <protecciones+0x510>)
 80022dc:	f001 fbf9 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 1); //apaga HAB
 80022e0:	2201      	movs	r2, #1
 80022e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e6:	487f      	ldr	r0, [pc, #508]	; (80024e4 <protecciones+0x510>)
 80022e8:	f001 fbf3 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 0); //y apaga el led
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022f2:	487c      	ldr	r0, [pc, #496]	; (80024e4 <protecciones+0x510>)
 80022f4:	f001 fbed 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (poteIo != 0)
 80022f8:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <protecciones+0x514>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f040 80da 	bne.w	80024b6 <protecciones+0x4e2>
				break; //pote distinto de 0
			if (p_tempIo != 0)
 8002302:	4b7a      	ldr	r3, [pc, #488]	; (80024ec <protecciones+0x518>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f040 80d7 	bne.w	80024ba <protecciones+0x4e6>
				break; //hay alerta de temperatura
			if (P_OL_Io == RISE || P_OL_Io == HIGH_L)
 800230c:	4b78      	ldr	r3, [pc, #480]	; (80024f0 <protecciones+0x51c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b03      	cmp	r3, #3
 8002312:	f000 80e5 	beq.w	80024e0 <protecciones+0x50c>
 8002316:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <protecciones+0x51c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	f000 80e0 	beq.w	80024e0 <protecciones+0x50c>
				break; //hay alerta de sobre carga

			if (pulsadorIo == FALL)
 8002320:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <protecciones+0x520>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f040 80ca 	bne.w	80024be <protecciones+0x4ea>
				status_proteccionIo = P_OK;
 800232a:	4b73      	ldr	r3, [pc, #460]	; (80024f8 <protecciones+0x524>)
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
		break;
 8002330:	e0c5      	b.n	80024be <protecciones+0x4ea>
		case P_OK:

			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 0); //prende HAB
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002338:	486a      	ldr	r0, [pc, #424]	; (80024e4 <protecciones+0x510>)
 800233a:	f001 fbca 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 1); //y prende el led
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002344:	4867      	ldr	r0, [pc, #412]	; (80024e4 <protecciones+0x510>)
 8002346:	f001 fbc4 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (pulsadorIo == FALL) {
 800234a:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <protecciones+0x520>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d13c      	bne.n	80023cc <protecciones+0x3f8>
				LCD_Init();
 8002352:	f7fe fd77 	bl	8000e44 <LCD_Init>
				LCD_GoToxy(5, 0);
 8002356:	2100      	movs	r1, #0
 8002358:	2005      	movs	r0, #5
 800235a:	f7fe fe86 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "MEDICIONES");
 800235e:	4a67      	ldr	r2, [pc, #412]	; (80024fc <protecciones+0x528>)
 8002360:	4b67      	ldr	r3, [pc, #412]	; (8002500 <protecciones+0x52c>)
 8002362:	cb03      	ldmia	r3!, {r0, r1}
 8002364:	6010      	str	r0, [r2, #0]
 8002366:	6051      	str	r1, [r2, #4]
 8002368:	8819      	ldrh	r1, [r3, #0]
 800236a:	789b      	ldrb	r3, [r3, #2]
 800236c:	8111      	strh	r1, [r2, #8]
 800236e:	7293      	strb	r3, [r2, #10]
				LCD_Print(texto);
 8002370:	4862      	ldr	r0, [pc, #392]	; (80024fc <protecciones+0x528>)
 8002372:	f7fe fead 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 1);
 8002376:	2101      	movs	r1, #1
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fe76 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "  Vo:");
 800237e:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <protecciones+0x528>)
 8002380:	4a60      	ldr	r2, [pc, #384]	; (8002504 <protecciones+0x530>)
 8002382:	6810      	ldr	r0, [r2, #0]
 8002384:	6018      	str	r0, [r3, #0]
 8002386:	8892      	ldrh	r2, [r2, #4]
 8002388:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 800238a:	485c      	ldr	r0, [pc, #368]	; (80024fc <protecciones+0x528>)
 800238c:	f7fe fea0 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 2);
 8002390:	2102      	movs	r1, #2
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fe69 	bl	800106a <LCD_GoToxy>
				sprintf(texto, "  Io:");
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <protecciones+0x528>)
 800239a:	4a5b      	ldr	r2, [pc, #364]	; (8002508 <protecciones+0x534>)
 800239c:	6810      	ldr	r0, [r2, #0]
 800239e:	6018      	str	r0, [r3, #0]
 80023a0:	8892      	ldrh	r2, [r2, #4]
 80023a2:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 80023a4:	4855      	ldr	r0, [pc, #340]	; (80024fc <protecciones+0x528>)
 80023a6:	f7fe fe93 	bl	80010d0 <LCD_Print>
				LCD_GoToxy(0, 3);
 80023aa:	2103      	movs	r1, #3
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7fe fe5c 	bl	800106a <LCD_GoToxy>
				sprintf(texto, " Phi:");
 80023b2:	4b52      	ldr	r3, [pc, #328]	; (80024fc <protecciones+0x528>)
 80023b4:	4a55      	ldr	r2, [pc, #340]	; (800250c <protecciones+0x538>)
 80023b6:	6810      	ldr	r0, [r2, #0]
 80023b8:	6018      	str	r0, [r3, #0]
 80023ba:	8892      	ldrh	r2, [r2, #4]
 80023bc:	809a      	strh	r2, [r3, #4]
				LCD_Print(texto);
 80023be:	484f      	ldr	r0, [pc, #316]	; (80024fc <protecciones+0x528>)
 80023c0:	f7fe fe86 	bl	80010d0 <LCD_Print>

				status_proteccionIo = P_APAGADO;
 80023c4:	4b4c      	ldr	r3, [pc, #304]	; (80024f8 <protecciones+0x524>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
				//avisa por pantalla
				break;
 80023ca:	e089      	b.n	80024e0 <protecciones+0x50c>
			}

			if (p_tempIo != 0) {
 80023cc:	4b47      	ldr	r3, [pc, #284]	; (80024ec <protecciones+0x518>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <protecciones+0x408>
				status_proteccionIo = P_TEMP;
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <protecciones+0x524>)
 80023d6:	2203      	movs	r2, #3
 80023d8:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 80023da:	e081      	b.n	80024e0 <protecciones+0x50c>
			}

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 80023dc:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <protecciones+0x51c>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d003      	beq.n	80023ec <protecciones+0x418>
 80023e4:	4b42      	ldr	r3, [pc, #264]	; (80024f0 <protecciones+0x51c>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d16a      	bne.n	80024c2 <protecciones+0x4ee>
				status_proteccionIo = P_OL;
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <protecciones+0x524>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
				flag_relay = 1;
 80023f2:	4b47      	ldr	r3, [pc, #284]	; (8002510 <protecciones+0x53c>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
				//aviso por pantalla
				break;
 80023f8:	e072      	b.n	80024e0 <protecciones+0x50c>
		break;
		case P_TEMP:
		case P_OL:
		case P_MAXIMO:

			HAL_GPIO_WritePin(HAB_Io_GPIO_Port, HAB_Io_Pin, 1); //apaga HAB
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002400:	4838      	ldr	r0, [pc, #224]	; (80024e4 <protecciones+0x510>)
 8002402:	f001 fb66 	bl	8003ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_Io_GPIO_Port, LED_Io_Pin, 0); //y apaga el led
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800240c:	4835      	ldr	r0, [pc, #212]	; (80024e4 <protecciones+0x510>)
 800240e:	f001 fb60 	bl	8003ad2 <HAL_GPIO_WritePin>
			if (flag_relay != 0)
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <protecciones+0x53c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <protecciones+0x452>
				HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 0); //apaga fuente
 800241a:	2200      	movs	r2, #0
 800241c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002420:	4830      	ldr	r0, [pc, #192]	; (80024e4 <protecciones+0x510>)
 8002422:	f001 fb56 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (p_tempIo != 0)
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <protecciones+0x518>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d14b      	bne.n	80024c6 <protecciones+0x4f2>
				break; //hay alerta de temperatura

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <protecciones+0x51c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b03      	cmp	r3, #3
 8002434:	d054      	beq.n	80024e0 <protecciones+0x50c>
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <protecciones+0x51c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d050      	beq.n	80024e0 <protecciones+0x50c>
				break; //hay alerta de sobre tensión
			}

			if (poteIo != 0)
 800243e:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <protecciones+0x514>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d141      	bne.n	80024ca <protecciones+0x4f6>
				break; // pote distinto de 0

			if (pulsadorIo == FALL) {
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <protecciones+0x520>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d13f      	bne.n	80024ce <protecciones+0x4fa>

				if (flag_relay != 0) {
 800244e:	4b30      	ldr	r3, [pc, #192]	; (8002510 <protecciones+0x53c>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <protecciones+0x492>
					status_proteccionIo = P_FUENTE;
 8002456:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <protecciones+0x524>)
 8002458:	2207      	movs	r2, #7
 800245a:	701a      	strb	r2, [r3, #0]
					transitorioFunete = 1000; //en ms.
 800245c:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <protecciones+0x540>)
 800245e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002462:	801a      	strh	r2, [r3, #0]
				} else {
					status_proteccionIo = P_OK;
				}
			}

		break;
 8002464:	e033      	b.n	80024ce <protecciones+0x4fa>
					status_proteccionIo = P_OK;
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <protecciones+0x524>)
 8002468:	2202      	movs	r2, #2
 800246a:	701a      	strb	r2, [r3, #0]
		break;
 800246c:	e02f      	b.n	80024ce <protecciones+0x4fa>
		case P_FUENTE:

			HAL_GPIO_WritePin(Relay_Fte_GPIO_Port, Relay_Fte_Pin, 1); //prende fuente
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002474:	481b      	ldr	r0, [pc, #108]	; (80024e4 <protecciones+0x510>)
 8002476:	f001 fb2c 	bl	8003ad2 <HAL_GPIO_WritePin>

			if (transitorioFunete != 0) {
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <protecciones+0x540>)
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d127      	bne.n	80024d2 <protecciones+0x4fe>
				break; //fatal para el descuento de 1s.
			}

			if (p_tempIo != 0) {
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <protecciones+0x518>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d125      	bne.n	80024d6 <protecciones+0x502>
				break; //hay alerta de temperatura
			}

			if (P_OL_Io == RISE || P_OL_Io == HIGH_L) {
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <protecciones+0x51c>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b03      	cmp	r3, #3
 8002490:	d026      	beq.n	80024e0 <protecciones+0x50c>
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <protecciones+0x51c>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d022      	beq.n	80024e0 <protecciones+0x50c>
				break; //hay alerta de sobre carga
			}

			if (poteIo != 0) {
 800249a:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <protecciones+0x514>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d11b      	bne.n	80024da <protecciones+0x506>
				break; //pote distinto de 0.
			}

			if (pulsadorIo == FALL) {
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <protecciones+0x520>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d119      	bne.n	80024de <protecciones+0x50a>
				status_proteccionIo = P_OK;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <protecciones+0x524>)
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
			}

		break;
 80024b0:	e015      	b.n	80024de <protecciones+0x50a>
		default:
		break;
 80024b2:	bf00      	nop
 80024b4:	e014      	b.n	80024e0 <protecciones+0x50c>
				break; //pote distinto de 0
 80024b6:	bf00      	nop
 80024b8:	e012      	b.n	80024e0 <protecciones+0x50c>
				break; //hay alerta de temperatura
 80024ba:	bf00      	nop
 80024bc:	e010      	b.n	80024e0 <protecciones+0x50c>
		break;
 80024be:	bf00      	nop
 80024c0:	e00e      	b.n	80024e0 <protecciones+0x50c>
		break;
 80024c2:	bf00      	nop
 80024c4:	e00c      	b.n	80024e0 <protecciones+0x50c>
				break; //hay alerta de temperatura
 80024c6:	bf00      	nop
 80024c8:	e00a      	b.n	80024e0 <protecciones+0x50c>
				break; // pote distinto de 0
 80024ca:	bf00      	nop
 80024cc:	e008      	b.n	80024e0 <protecciones+0x50c>
		break;
 80024ce:	bf00      	nop
 80024d0:	e006      	b.n	80024e0 <protecciones+0x50c>
				break; //fatal para el descuento de 1s.
 80024d2:	bf00      	nop
 80024d4:	e004      	b.n	80024e0 <protecciones+0x50c>
				break; //hay alerta de temperatura
 80024d6:	bf00      	nop
 80024d8:	e002      	b.n	80024e0 <protecciones+0x50c>
				break; //pote distinto de 0.
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <protecciones+0x50c>
		break;
 80024de:	bf00      	nop

	} //end switch status_proteccionIo


} //fin protecciones ()
 80024e0:	bf00      	nop
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40010c00 	.word	0x40010c00
 80024e8:	20000260 	.word	0x20000260
 80024ec:	2000025e 	.word	0x2000025e
 80024f0:	20000213 	.word	0x20000213
 80024f4:	20000211 	.word	0x20000211
 80024f8:	2000025c 	.word	0x2000025c
 80024fc:	200002d0 	.word	0x200002d0
 8002500:	08007768 	.word	0x08007768
 8002504:	08007774 	.word	0x08007774
 8002508:	0800777c 	.word	0x0800777c
 800250c:	08007784 	.word	0x08007784
 8002510:	2000025a 	.word	0x2000025a
 8002514:	2000000c 	.word	0x2000000c

08002518 <update_entradas>:

void  update_entradas(void){
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0

	read_pulsadorVo = HAL_GPIO_ReadPin(Pul_hab_Vo_GPIO_Port, Pul_hab_Vo_Pin);
 800251c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002520:	480a      	ldr	r0, [pc, #40]	; (800254c <update_entradas+0x34>)
 8002522:	f001 fabf 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002526:	4603      	mov	r3, r0
 8002528:	461a      	mov	r2, r3
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <update_entradas+0x38>)
 800252c:	701a      	strb	r2, [r3, #0]
	read_pulsadorIo = HAL_GPIO_ReadPin(Pul_hab_Io_GPIO_Port, Pul_hab_Io_Pin);
 800252e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <update_entradas+0x34>)
 8002534:	f001 fab6 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <update_entradas+0x3c>)
 800253e:	701a      	strb	r2, [r3, #0]

	lectura_entradas = 100;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <update_entradas+0x40>)
 8002542:	2264      	movs	r2, #100	; 0x64
 8002544:	701a      	strb	r2, [r3, #0]

} //fin update_entradas()
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40011000 	.word	0x40011000
 8002550:	20000214 	.word	0x20000214
 8002554:	20000215 	.word	0x20000215
 8002558:	20000000 	.word	0x20000000

0800255c <check_entradas>:

void check_entradas (void){
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

	if (read_pulsadorVo) {
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <check_entradas+0x88>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <check_entradas+0x24>
		if (last_pulsadorVo) {
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <check_entradas+0x8c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <check_entradas+0x1c>
			pulsadorVo = HIGH_L;
 8002570:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <check_entradas+0x90>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e00e      	b.n	8002596 <check_entradas+0x3a>
		} else {
			pulsadorVo = RISE;
 8002578:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <check_entradas+0x90>)
 800257a:	2203      	movs	r2, #3
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e00a      	b.n	8002596 <check_entradas+0x3a>
		}
	} else {
		if (last_pulsadorVo) {
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <check_entradas+0x8c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <check_entradas+0x34>
			pulsadorVo = FALL;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <check_entradas+0x90>)
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e002      	b.n	8002596 <check_entradas+0x3a>
		} else {
			pulsadorVo = LOW_L;
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <check_entradas+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
		}
	} //end if pulsadorVo

	if (read_pulsadorIo) {
 8002596:	4b16      	ldr	r3, [pc, #88]	; (80025f0 <check_entradas+0x94>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <check_entradas+0x5a>
		if (last_pulsadorIo) {
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <check_entradas+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <check_entradas+0x52>
			pulsadorIo = HIGH_L;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <check_entradas+0x9c>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e00e      	b.n	80025cc <check_entradas+0x70>
		} else {
			pulsadorIo = RISE;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <check_entradas+0x9c>)
 80025b0:	2203      	movs	r2, #3
 80025b2:	701a      	strb	r2, [r3, #0]
 80025b4:	e00a      	b.n	80025cc <check_entradas+0x70>
		}
	} else {
		if (last_pulsadorIo) {
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <check_entradas+0x98>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <check_entradas+0x6a>
			pulsadorIo = FALL;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <check_entradas+0x9c>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	701a      	strb	r2, [r3, #0]
 80025c4:	e002      	b.n	80025cc <check_entradas+0x70>
		} else {
			pulsadorIo = LOW_L;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <check_entradas+0x9c>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
		}
	} //end if pulsadorIo

	last_pulsadorIo = read_pulsadorIo;
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <check_entradas+0x94>)
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <check_entradas+0x98>)
 80025d2:	701a      	strb	r2, [r3, #0]
	last_pulsadorVo = read_pulsadorVo;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <check_entradas+0x88>)
 80025d6:	781a      	ldrb	r2, [r3, #0]
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <check_entradas+0x8c>)
 80025da:	701a      	strb	r2, [r3, #0]

} //fin check_entradas()
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr
 80025e4:	20000214 	.word	0x20000214
 80025e8:	20000218 	.word	0x20000218
 80025ec:	20000210 	.word	0x20000210
 80025f0:	20000215 	.word	0x20000215
 80025f4:	20000219 	.word	0x20000219
 80025f8:	20000211 	.word	0x20000211

080025fc <update_proteccion>:
 * Detalle: lee el las entradas de las protecciones de sobre carga, tras cumplirse
 * 			el tiempo de lectura (condicion externa a la funcion)
 *
 *
 */
void  update_proteccion(void){
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0

	read_OL_Vo = HAL_GPIO_ReadPin(P_OL_Vo_GPIO_Port, P_OL_Vo_Pin);
 8002600:	2120      	movs	r1, #32
 8002602:	480a      	ldr	r0, [pc, #40]	; (800262c <update_proteccion+0x30>)
 8002604:	f001 fa4e 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <update_proteccion+0x34>)
 800260e:	701a      	strb	r2, [r3, #0]
	read_OL_Io = HAL_GPIO_ReadPin(P_OL_Io_GPIO_Port, P_OL_Io_Pin);
 8002610:	2101      	movs	r1, #1
 8002612:	4808      	ldr	r0, [pc, #32]	; (8002634 <update_proteccion+0x38>)
 8002614:	f001 fa46 	bl	8003aa4 <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <update_proteccion+0x3c>)
 800261e:	701a      	strb	r2, [r3, #0]

	lectura_proteccion = 10;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <update_proteccion+0x40>)
 8002622:	220a      	movs	r2, #10
 8002624:	701a      	strb	r2, [r3, #0]

} //fin update_entradas()
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010800 	.word	0x40010800
 8002630:	20000216 	.word	0x20000216
 8002634:	40010c00 	.word	0x40010c00
 8002638:	20000217 	.word	0x20000217
 800263c:	20000001 	.word	0x20000001

08002640 <check_proteccion>:

void check_proteccion (void){
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0

	if (read_OL_Vo) {
 8002644:	4b20      	ldr	r3, [pc, #128]	; (80026c8 <check_proteccion+0x88>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <check_proteccion+0x24>
			if (last_OL_Vo) {
 800264c:	4b1f      	ldr	r3, [pc, #124]	; (80026cc <check_proteccion+0x8c>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <check_proteccion+0x1c>
				P_OL_Vo = HIGH_L;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <check_proteccion+0x90>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
 800265a:	e00e      	b.n	800267a <check_proteccion+0x3a>
			} else {
				P_OL_Vo = RISE;
 800265c:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <check_proteccion+0x90>)
 800265e:	2203      	movs	r2, #3
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e00a      	b.n	800267a <check_proteccion+0x3a>
			}
		} else {
			if (last_OL_Vo) {
 8002664:	4b19      	ldr	r3, [pc, #100]	; (80026cc <check_proteccion+0x8c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <check_proteccion+0x34>
				P_OL_Vo = FALL;
 800266c:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <check_proteccion+0x90>)
 800266e:	2202      	movs	r2, #2
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e002      	b.n	800267a <check_proteccion+0x3a>
			} else {
				P_OL_Vo = LOW_L;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <check_proteccion+0x90>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
			}
		} //end if P_OL_Vo

		if (read_OL_Io) {
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <check_proteccion+0x94>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00b      	beq.n	800269a <check_proteccion+0x5a>
			if (last_OL_Io) {
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <check_proteccion+0x98>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <check_proteccion+0x52>
				P_OL_Io = HIGH_L;
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <check_proteccion+0x9c>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e00e      	b.n	80026b0 <check_proteccion+0x70>
			} else {
				P_OL_Io = RISE;
 8002692:	4b12      	ldr	r3, [pc, #72]	; (80026dc <check_proteccion+0x9c>)
 8002694:	2203      	movs	r2, #3
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e00a      	b.n	80026b0 <check_proteccion+0x70>
			}
		} else {
			if (last_OL_Io) {
 800269a:	4b0f      	ldr	r3, [pc, #60]	; (80026d8 <check_proteccion+0x98>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <check_proteccion+0x6a>
				P_OL_Io = FALL;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <check_proteccion+0x9c>)
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e002      	b.n	80026b0 <check_proteccion+0x70>
			} else {
				P_OL_Io = LOW_L;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <check_proteccion+0x9c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
			}
		} //end if P_OL_Io

		last_OL_Io = read_OL_Io;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <check_proteccion+0x94>)
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <check_proteccion+0x98>)
 80026b6:	701a      	strb	r2, [r3, #0]
		last_OL_Vo = read_OL_Vo;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <check_proteccion+0x88>)
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	4b03      	ldr	r3, [pc, #12]	; (80026cc <check_proteccion+0x8c>)
 80026be:	701a      	strb	r2, [r3, #0]
} //fin check_proteccion ()
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000216 	.word	0x20000216
 80026cc:	2000021a 	.word	0x2000021a
 80026d0:	20000212 	.word	0x20000212
 80026d4:	20000217 	.word	0x20000217
 80026d8:	2000021b 	.word	0x2000021b
 80026dc:	20000213 	.word	0x20000213

080026e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f0:	d108      	bne.n	8002704 <HAL_TIM_PeriodElapsedCallback+0x24>
		flagTIM2 = 1;
 80026f2:	4b07      	ldr	r3, [pc, #28]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
		count_tick ++;
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002702:	801a      	strh	r2, [r3, #0]
	}
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	2000021c 	.word	0x2000021c
 8002714:	20000258 	.word	0x20000258

08002718 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
	status_adc = 1;
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
	//HAL_TIM_Base_Stop(&htim3); //sincro ADC
//	status_adc = 2;
	status_adc = 3;
 8002720:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_ADC_ConvCpltCallback+0x38>)
 8002722:	2203      	movs	r2, #3
 8002724:	701a      	strb	r2, [r3, #0]

	if (hadc->Instance == ADC1){
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_ADC_ConvCpltCallback+0x3c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d102      	bne.n	8002736 <HAL_ADC_ConvCpltCallback+0x1e>
		flag_adc1 = 1;
 8002730:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_ADC_ConvCpltCallback+0x40>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
	}
	if (hadc->Instance == ADC2){
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_ADC_ConvCpltCallback+0x44>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d102      	bne.n	8002746 <HAL_ADC_ConvCpltCallback+0x2e>
			flag_adc2 = 1;
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <HAL_ADC_ConvCpltCallback+0x48>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
		}

}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000248 	.word	0x20000248
 8002754:	40012400 	.word	0x40012400
 8002758:	2000021d 	.word	0x2000021d
 800275c:	40012800 	.word	0x40012800
 8002760:	2000021e 	.word	0x2000021e

08002764 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ // i.e.: PB6 ascendente
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	7f1b      	ldrb	r3, [r3, #28]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d103      	bne.n	800277c <HAL_TIM_IC_CaptureCallback+0x18>

		__HAL_TIM_SET_COUNTER (&htim4, 0);
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x48>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24

	} //fin if HAL_TIM_ACTIVE_CHANNEL_1

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3){ // i.e.: PB8 descendente
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7f1b      	ldrb	r3, [r3, #28]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d10d      	bne.n	80027a0 <HAL_TIM_IC_CaptureCallback+0x3c>

		acum_fase += __HAL_TIM_GET_COUNTER (&htim4);
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <HAL_TIM_IC_CaptureCallback+0x48>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8002792:	6013      	str	r3, [r2, #0]
		cuenta_fase++;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_TIM_IC_CaptureCallback+0x50>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_TIM_IC_CaptureCallback+0x50>)
 800279e:	701a      	strb	r2, [r3, #0]

	} //fin HAL_TIM_ACTIVE_CHANNEL_3

} //fin HAL_TIM_IC_CaptureCallback()
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	20000944 	.word	0x20000944
 80027b0:	2000024c 	.word	0x2000024c
 80027b4:	20000250 	.word	0x20000250

080027b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027ca:	4b15      	ldr	r3, [pc, #84]	; (8002820 <HAL_MspInit+0x5c>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4a14      	ldr	r2, [pc, #80]	; (8002820 <HAL_MspInit+0x5c>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6193      	str	r3, [r2, #24]
 80027d6:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_MspInit+0x5c>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_MspInit+0x5c>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <HAL_MspInit+0x5c>)
 80027e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]
 80027ee:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_MspInit+0x5c>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_MspInit+0x60>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	4a04      	ldr	r2, [pc, #16]	; (8002824 <HAL_MspInit+0x60>)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002816:	bf00      	nop
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bc80      	pop	{r7}
 800281e:	4770      	bx	lr
 8002820:	40021000 	.word	0x40021000
 8002824:	40010000 	.word	0x40010000

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	bc80      	pop	{r7}
 8002832:	4770      	bx	lr

08002834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800283e:	4802      	ldr	r0, [pc, #8]	; (8002848 <HardFault_Handler+0x14>)
 8002840:	f001 f947 	bl	8003ad2 <HAL_GPIO_WritePin>
 8002844:	e7f8      	b.n	8002838 <HardFault_Handler+0x4>
 8002846:	bf00      	nop
 8002848:	40011000 	.word	0x40011000

0800284c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <MemManage_Handler+0x4>

08002852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002856:	e7fe      	b.n	8002856 <BusFault_Handler+0x4>

08002858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800285c:	e7fe      	b.n	800285c <UsageFault_Handler+0x4>

0800285e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800285e:	b480      	push	{r7}
 8002860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr
	...

08002884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern uint16_t count_tick;
	count_tick ++;
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <SysTick_Handler+0x18>)
 800288a:	881b      	ldrh	r3, [r3, #0]
 800288c:	3301      	adds	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <SysTick_Handler+0x18>)
 8002892:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002894:	f000 fa5e 	bl	8002d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000258 	.word	0x20000258

080028a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028a4:	4803      	ldr	r0, [pc, #12]	; (80028b4 <ADC1_2_IRQHandler+0x14>)
 80028a6:	f000 fc2d 	bl	8003104 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028aa:	4803      	ldr	r0, [pc, #12]	; (80028b8 <ADC1_2_IRQHandler+0x18>)
 80028ac:	f000 fc2a 	bl	8003104 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	200002a0 	.word	0x200002a0
 80028b8:	20000270 	.word	0x20000270

080028bc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80028c0:	4802      	ldr	r0, [pc, #8]	; (80028cc <TIM4_IRQHandler+0x10>)
 80028c2:	f001 ffe9 	bl	8004898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000944 	.word	0x20000944

080028d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <_sbrk+0x5c>)
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <_sbrk+0x60>)
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028e4:	4b13      	ldr	r3, [pc, #76]	; (8002934 <_sbrk+0x64>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d102      	bne.n	80028f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <_sbrk+0x64>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <_sbrk+0x68>)
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <_sbrk+0x64>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d207      	bcs.n	8002910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002900:	f002 fdae 	bl	8005460 <__errno>
 8002904:	4602      	mov	r2, r0
 8002906:	230c      	movs	r3, #12
 8002908:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800290a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800290e:	e009      	b.n	8002924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <_sbrk+0x64>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	4a05      	ldr	r2, [pc, #20]	; (8002934 <_sbrk+0x64>)
 8002920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20005000 	.word	0x20005000
 8002930:	00000400 	.word	0x00000400
 8002934:	20000264 	.word	0x20000264
 8002938:	20000a20 	.word	0x20000a20

0800293c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800295c:	463b      	mov	r3, r7
 800295e:	2200      	movs	r2, #0
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <MX_TIM3_Init+0x90>)
 8002966:	4a1d      	ldr	r2, [pc, #116]	; (80029dc <MX_TIM3_Init+0x94>)
 8002968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <MX_TIM3_Init+0x90>)
 800296c:	2247      	movs	r2, #71	; 0x47
 800296e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b19      	ldr	r3, [pc, #100]	; (80029d8 <MX_TIM3_Init+0x90>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <MX_TIM3_Init+0x90>)
 8002978:	2263      	movs	r2, #99	; 0x63
 800297a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297c:	4b16      	ldr	r3, [pc, #88]	; (80029d8 <MX_TIM3_Init+0x90>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <MX_TIM3_Init+0x90>)
 8002984:	2200      	movs	r2, #0
 8002986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002988:	4813      	ldr	r0, [pc, #76]	; (80029d8 <MX_TIM3_Init+0x90>)
 800298a:	f001 fd8d 	bl	80044a8 <HAL_TIM_Base_Init>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002994:	f7ff ff10 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	4619      	mov	r1, r3
 80029a4:	480c      	ldr	r0, [pc, #48]	; (80029d8 <MX_TIM3_Init+0x90>)
 80029a6:	f002 f913 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80029b0:	f7ff ff02 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029b4:	2320      	movs	r3, #32
 80029b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029bc:	463b      	mov	r3, r7
 80029be:	4619      	mov	r1, r3
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_TIM3_Init+0x90>)
 80029c2:	f002 fc01 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80029cc:	f7ff fef4 	bl	80027b8 <Error_Handler>
  }

}
 80029d0:	bf00      	nop
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	2000098c 	.word	0x2000098c
 80029dc:	40000400 	.word	0x40000400

080029e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e6:	f107 0318 	add.w	r3, r7, #24
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029fe:	463b      	mov	r3, r7
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	609a      	str	r2, [r3, #8]
 8002a08:	60da      	str	r2, [r3, #12]

  htim4.Instance = TIM4;
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a0c:	4a32      	ldr	r2, [pc, #200]	; (8002ad8 <MX_TIM4_Init+0xf8>)
 8002a0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 800-1;
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a12:	f240 321f 	movw	r2, #799	; 0x31f
 8002a16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a18:	4b2e      	ldr	r3, [pc, #184]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a20:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a2c:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002a32:	4828      	ldr	r0, [pc, #160]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a34:	f001 fd38 	bl	80044a8 <HAL_TIM_Base_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8002a3e:	f7ff febb 	bl	80027b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002a48:	f107 0318 	add.w	r3, r7, #24
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4821      	ldr	r0, [pc, #132]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a50:	f002 f8be 	bl	8004bd0 <HAL_TIM_ConfigClockSource>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002a5a:	f7ff fead 	bl	80027b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002a5e:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a60:	f001 fdbc 	bl	80045dc <HAL_TIM_IC_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002a6a:	f7ff fea5 	bl	80027b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a76:	f107 0310 	add.w	r3, r7, #16
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4815      	ldr	r0, [pc, #84]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002a7e:	f002 fba3 	bl	80051c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8002a88:	f7ff fe96 	bl	80027b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a90:	2301      	movs	r3, #1
 8002a92:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002aa4:	f002 f800 	bl	8004aa8 <HAL_TIM_IC_ConfigChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8002aae:	f7ff fe83 	bl	80027b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	2208      	movs	r2, #8
 8002aba:	4619      	mov	r1, r3
 8002abc:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <MX_TIM4_Init+0xf4>)
 8002abe:	f001 fff3 	bl	8004aa8 <HAL_TIM_IC_ConfigChannel>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8002ac8:	f7ff fe76 	bl	80027b8 <Error_Handler>
  }

}
 8002acc:	bf00      	nop
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000944 	.word	0x20000944
 8002ad8:	40000800 	.word	0x40000800

08002adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM3)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a23      	ldr	r2, [pc, #140]	; (8002b84 <HAL_TIM_Base_MspInit+0xa8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d10c      	bne.n	8002b16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002afc:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	4a21      	ldr	r2, [pc, #132]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	61d3      	str	r3, [r2, #28]
 8002b08:	4b1f      	ldr	r3, [pc, #124]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002b14:	e031      	b.n	8002b7a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM4)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <HAL_TIM_Base_MspInit+0xb0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d12c      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b16      	ldr	r3, [pc, #88]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b3e:	f043 0308 	orr.w	r3, r3, #8
 8002b42:	6193      	str	r3, [r2, #24]
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <HAL_TIM_Base_MspInit+0xac>)
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8002b50:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	f107 0318 	add.w	r3, r7, #24
 8002b62:	4619      	mov	r1, r3
 8002b64:	480a      	ldr	r0, [pc, #40]	; (8002b90 <HAL_TIM_Base_MspInit+0xb4>)
 8002b66:	f000 fe43 	bl	80037f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201e      	movs	r0, #30
 8002b70:	f000 fe07 	bl	8003782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b74:	201e      	movs	r0, #30
 8002b76:	f000 fe20 	bl	80037ba <HAL_NVIC_EnableIRQ>
}
 8002b7a:	bf00      	nop
 8002b7c:	3728      	adds	r7, #40	; 0x28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40010c00 	.word	0x40010c00

08002b94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002b9a:	4a12      	ldr	r2, [pc, #72]	; (8002be4 <MX_USART2_UART_Init+0x50>)
 8002b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002ba0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bba:	220c      	movs	r2, #12
 8002bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bca:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	f002 fb6c 	bl	80052a8 <HAL_UART_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bd6:	f7ff fdef 	bl	80027b8 <Error_Handler>
  }

}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200009d4 	.word	0x200009d4
 8002be4:	40004400 	.word	0x40004400

08002be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_UART_MspInit+0x88>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d12f      	bne.n	8002c68 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	4a19      	ldr	r2, [pc, #100]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c12:	61d3      	str	r3, [r2, #28]
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c16:	69db      	ldr	r3, [r3, #28]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b14      	ldr	r3, [pc, #80]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a13      	ldr	r2, [pc, #76]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_UART_MspInit+0x8c>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c38:	2304      	movs	r3, #4
 8002c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c40:	2303      	movs	r3, #3
 8002c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480b      	ldr	r0, [pc, #44]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c4c:	f000 fdd0 	bl	80037f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c50:	2308      	movs	r3, #8
 8002c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 0310 	add.w	r3, r7, #16
 8002c60:	4619      	mov	r1, r3
 8002c62:	4805      	ldr	r0, [pc, #20]	; (8002c78 <HAL_UART_MspInit+0x90>)
 8002c64:	f000 fdc4 	bl	80037f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c68:	bf00      	nop
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40004400 	.word	0x40004400
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40010800 	.word	0x40010800

08002c7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c7c:	480c      	ldr	r0, [pc, #48]	; (8002cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c7e:	490d      	ldr	r1, [pc, #52]	; (8002cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c84:	e002      	b.n	8002c8c <LoopCopyDataInit>

08002c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8a:	3304      	adds	r3, #4

08002c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c90:	d3f9      	bcc.n	8002c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c94:	4c0a      	ldr	r4, [pc, #40]	; (8002cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c98:	e001      	b.n	8002c9e <LoopFillZerobss>

08002c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c9c:	3204      	adds	r2, #4

08002c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca0:	d3fb      	bcc.n	8002c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ca2:	f7ff fe4b 	bl	800293c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ca6:	f002 fbe1 	bl	800546c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002caa:	f7fe fa27 	bl	80010fc <main>
  bx lr
 8002cae:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002cb8:	08007ad0 	.word	0x08007ad0
  ldr r2, =_sbss
 8002cbc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002cc0:	20000a20 	.word	0x20000a20

08002cc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cc4:	e7fe      	b.n	8002cc4 <CAN1_RX1_IRQHandler>
	...

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_Init+0x28>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_Init+0x28>)
 8002cd2:	f043 0310 	orr.w	r3, r3, #16
 8002cd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cd8:	2003      	movs	r0, #3
 8002cda:	f000 fd47 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f000 f808 	bl	8002cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ce4:	f7ff fd6e 	bl	80027c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40022000 	.word	0x40022000

08002cf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cfc:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_InitTick+0x54>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <HAL_InitTick+0x58>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd5f 	bl	80037d6 <HAL_SYSTICK_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e00e      	b.n	8002d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b0f      	cmp	r3, #15
 8002d26:	d80a      	bhi.n	8002d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d30:	f000 fd27 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d34:	4a06      	ldr	r2, [pc, #24]	; (8002d50 <HAL_InitTick+0x5c>)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	2000001c 	.word	0x2000001c
 8002d50:	20000018 	.word	0x20000018

08002d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_IncTick+0x1c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_IncTick+0x20>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4413      	add	r3, r2
 8002d64:	4a03      	ldr	r2, [pc, #12]	; (8002d74 <HAL_IncTick+0x20>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr
 8002d70:	2000001c 	.word	0x2000001c
 8002d74:	20000a18 	.word	0x20000a18

08002d78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d7c:	4b02      	ldr	r3, [pc, #8]	; (8002d88 <HAL_GetTick+0x10>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	20000a18 	.word	0x20000a18

08002d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002da4:	d005      	beq.n	8002db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_Delay+0x40>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002db2:	bf00      	nop
 8002db4:	f7ff ffe0 	bl	8002d78 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d8f7      	bhi.n	8002db4 <HAL_Delay+0x28>
  {
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	2000001c 	.word	0x2000001c

08002dd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e0be      	b.n	8002f70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fed6 	bl	8000bc0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fb93 	bl	8003540 <ADC_ConversionStop_Disable>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 8099 	bne.w	8002f5e <HAL_ADC_Init+0x18e>
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8095 	bne.w	8002f5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e3c:	f023 0302 	bic.w	r3, r3, #2
 8002e40:	f043 0202 	orr.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7b1b      	ldrb	r3, [r3, #12]
 8002e56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002e58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_Init+0xa2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d102      	bne.n	8002e78 <HAL_ADC_Init+0xa8>
 8002e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e76:	e000      	b.n	8002e7a <HAL_ADC_Init+0xaa>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	7d1b      	ldrb	r3, [r3, #20]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d119      	bne.n	8002ebc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	7b1b      	ldrb	r3, [r3, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	035a      	lsls	r2, r3, #13
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	e00b      	b.n	8002ebc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_ADC_Init+0x1a8>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eec:	d003      	beq.n	8002ef6 <HAL_ADC_Init+0x126>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d104      	bne.n	8002f00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	051b      	lsls	r3, r3, #20
 8002efe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_ADC_Init+0x1ac>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10b      	bne.n	8002f3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f3a:	e018      	b.n	8002f6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f40:	f023 0312 	bic.w	r3, r3, #18
 8002f44:	f043 0210 	orr.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	f043 0201 	orr.w	r2, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002f5c:	e007      	b.n	8002f6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	f043 0210 	orr.w	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	ffe1f7fd 	.word	0xffe1f7fd
 8002f7c:	ff1f0efe 	.word	0xff1f0efe

08002f80 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Start_IT+0x1a>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e0a0      	b.n	80030dc <HAL_ADC_Start_IT+0x15c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fa72 	bl	800348c <ADC_Enable>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 808f 	bne.w	80030d2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fbc:	f023 0301 	bic.w	r3, r3, #1
 8002fc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a45      	ldr	r2, [pc, #276]	; (80030e4 <HAL_ADC_Start_IT+0x164>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d105      	bne.n	8002fde <HAL_ADC_Start_IT+0x5e>
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <HAL_ADC_Start_IT+0x168>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d026      	beq.n	8003046 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003000:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003008:	e01d      	b.n	8003046 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <HAL_ADC_Start_IT+0x168>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_ADC_Start_IT+0xaa>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a2f      	ldr	r2, [pc, #188]	; (80030e4 <HAL_ADC_Start_IT+0x164>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10d      	bne.n	8003046 <HAL_ADC_Start_IT+0xc6>
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_ADC_Start_IT+0x168>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800303e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f023 0206 	bic.w	r2, r3, #6
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
 800305e:	e002      	b.n	8003066 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f06f 0202 	mvn.w	r2, #2
 8003076:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0220 	orr.w	r2, r2, #32
 8003086:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003092:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003096:	d113      	bne.n	80030c0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800309c:	4a11      	ldr	r2, [pc, #68]	; (80030e4 <HAL_ADC_Start_IT+0x164>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <HAL_ADC_Start_IT+0x168>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d108      	bne.n	80030c0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	e00c      	b.n	80030da <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	e003      	b.n	80030da <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40012800 	.word	0x40012800
 80030e8:	40012400 	.word	0x40012400

080030ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b20      	cmp	r3, #32
 8003118:	d140      	bne.n	800319c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b02      	cmp	r3, #2
 8003126:	d139      	bne.n	800319c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800314a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800314e:	d11d      	bne.n	800318c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003154:	2b00      	cmp	r3, #0
 8003156:	d119      	bne.n	800318c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0220 	bic.w	r2, r2, #32
 8003166:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d105      	bne.n	800318c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f043 0201 	orr.w	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff fac3 	bl	8002718 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f06f 0212 	mvn.w	r2, #18
 800319a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d14f      	bne.n	800324a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d148      	bne.n	800324a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d105      	bne.n	80031d0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80031da:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80031de:	d012      	beq.n	8003206 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d125      	bne.n	800323a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80031f8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80031fc:	d11d      	bne.n	800323a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003202:	2b00      	cmp	r3, #0
 8003204:	d119      	bne.n	800323a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003214:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f9c1 	bl	80035c2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 020c 	mvn.w	r2, #12
 8003248:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b40      	cmp	r3, #64	; 0x40
 8003256:	d114      	bne.n	8003282 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d10d      	bne.n	8003282 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f809 	bl	800328a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x20>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0dc      	b.n	8003476 <HAL_ADC_ConfigChannel+0x1da>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d81c      	bhi.n	8003306 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	3b05      	subs	r3, #5
 80032de:	221f      	movs	r2, #31
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4019      	ands	r1, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	3b05      	subs	r3, #5
 80032f8:	fa00 f203 	lsl.w	r2, r0, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	635a      	str	r2, [r3, #52]	; 0x34
 8003304:	e03c      	b.n	8003380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d81c      	bhi.n	8003348 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b23      	subs	r3, #35	; 0x23
 8003320:	221f      	movs	r2, #31
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	4019      	ands	r1, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	3b23      	subs	r3, #35	; 0x23
 800333a:	fa00 f203 	lsl.w	r2, r0, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
 8003346:	e01b      	b.n	8003380 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b41      	subs	r3, #65	; 0x41
 800335a:	221f      	movs	r2, #31
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	4019      	ands	r1, r3
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b41      	subs	r3, #65	; 0x41
 8003374:	fa00 f203 	lsl.w	r2, r0, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b09      	cmp	r3, #9
 8003386:	d91c      	bls.n	80033c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68d9      	ldr	r1, [r3, #12]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	3b1e      	subs	r3, #30
 800339a:	2207      	movs	r2, #7
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4019      	ands	r1, r3
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	6898      	ldr	r0, [r3, #8]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	3b1e      	subs	r3, #30
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	e019      	b.n	80033f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6919      	ldr	r1, [r3, #16]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	2207      	movs	r2, #7
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	4019      	ands	r1, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6898      	ldr	r0, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	fa00 f203 	lsl.w	r2, r0, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b10      	cmp	r3, #16
 80033fc:	d003      	beq.n	8003406 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003402:	2b11      	cmp	r3, #17
 8003404:	d132      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <HAL_ADC_ConfigChannel+0x1e4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d125      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d126      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800342c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b10      	cmp	r3, #16
 8003434:	d11a      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003436:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_ADC_ConfigChannel+0x1e8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_ADC_ConfigChannel+0x1ec>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	0c9a      	lsrs	r2, r3, #18
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800344c:	e002      	b.n	8003454 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3b01      	subs	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f9      	bne.n	800344e <HAL_ADC_ConfigChannel+0x1b2>
 800345a:	e007      	b.n	800346c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	f043 0220 	orr.w	r2, r3, #32
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003474:	7bfb      	ldrb	r3, [r7, #15]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40012400 	.word	0x40012400
 8003484:	20000014 	.word	0x20000014
 8003488:	431bde83 	.word	0x431bde83

0800348c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d040      	beq.n	800352c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034ba:	4b1f      	ldr	r3, [pc, #124]	; (8003538 <ADC_Enable+0xac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a1f      	ldr	r2, [pc, #124]	; (800353c <ADC_Enable+0xb0>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	0c9b      	lsrs	r3, r3, #18
 80034c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034c8:	e002      	b.n	80034d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f9      	bne.n	80034ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034d6:	f7ff fc4f 	bl	8002d78 <HAL_GetTick>
 80034da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80034dc:	e01f      	b.n	800351e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034de:	f7ff fc4b 	bl	8002d78 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d918      	bls.n	800351e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d011      	beq.n	800351e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fe:	f043 0210 	orr.w	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e007      	b.n	800352e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d1d8      	bne.n	80034de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20000014 	.word	0x20000014
 800353c:	431bde83 	.word	0x431bde83

08003540 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b01      	cmp	r3, #1
 8003558:	d12e      	bne.n	80035b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 0201 	bic.w	r2, r2, #1
 8003568:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800356a:	f7ff fc05 	bl	8002d78 <HAL_GetTick>
 800356e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003570:	e01b      	b.n	80035aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003572:	f7ff fc01 	bl	8002d78 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d914      	bls.n	80035aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d10d      	bne.n	80035aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003592:	f043 0210 	orr.w	r2, r3, #16
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e007      	b.n	80035ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d0dc      	beq.n	8003572 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b085      	sub	sp, #20
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e4:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f0:	4013      	ands	r3, r2
 80035f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003606:	4a04      	ldr	r2, [pc, #16]	; (8003618 <__NVIC_SetPriorityGrouping+0x44>)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	60d3      	str	r3, [r2, #12]
}
 800360c:	bf00      	nop
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	bc80      	pop	{r7}
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003620:	4b04      	ldr	r3, [pc, #16]	; (8003634 <__NVIC_GetPriorityGrouping+0x18>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	0a1b      	lsrs	r3, r3, #8
 8003626:	f003 0307 	and.w	r3, r3, #7
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	2b00      	cmp	r3, #0
 8003648:	db0b      	blt.n	8003662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	f003 021f 	and.w	r2, r3, #31
 8003650:	4906      	ldr	r1, [pc, #24]	; (800366c <__NVIC_EnableIRQ+0x34>)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2001      	movs	r0, #1
 800365a:	fa00 f202 	lsl.w	r2, r0, r2
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100

08003670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	6039      	str	r1, [r7, #0]
 800367a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	2b00      	cmp	r3, #0
 8003682:	db0a      	blt.n	800369a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	490c      	ldr	r1, [pc, #48]	; (80036bc <__NVIC_SetPriority+0x4c>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	0112      	lsls	r2, r2, #4
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	440b      	add	r3, r1
 8003694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003698:	e00a      	b.n	80036b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4908      	ldr	r1, [pc, #32]	; (80036c0 <__NVIC_SetPriority+0x50>)
 80036a0:	79fb      	ldrb	r3, [r7, #7]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	3b04      	subs	r3, #4
 80036a8:	0112      	lsls	r2, r2, #4
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	440b      	add	r3, r1
 80036ae:	761a      	strb	r2, [r3, #24]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	e000e100 	.word	0xe000e100
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b089      	sub	sp, #36	; 0x24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1c3 0307 	rsb	r3, r3, #7
 80036de:	2b04      	cmp	r3, #4
 80036e0:	bf28      	it	cs
 80036e2:	2304      	movcs	r3, #4
 80036e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3304      	adds	r3, #4
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d902      	bls.n	80036f4 <NVIC_EncodePriority+0x30>
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3b03      	subs	r3, #3
 80036f2:	e000      	b.n	80036f6 <NVIC_EncodePriority+0x32>
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	401a      	ands	r2, r3
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800370c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa01 f303 	lsl.w	r3, r1, r3
 8003716:	43d9      	mvns	r1, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	4313      	orrs	r3, r2
         );
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	; 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800374c:	f7ff ff90 	bl	8003670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff2d 	bl	80035d4 <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff42 	bl	800361c <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff90 	bl	80036c4 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5f 	bl	8003670 <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff35 	bl	8003638 <__NVIC_EnableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ffa2 	bl	8003728 <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b08b      	sub	sp, #44	; 0x2c
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fa:	2300      	movs	r3, #0
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003802:	e127      	b.n	8003a54 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003804:	2201      	movs	r2, #1
 8003806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	429a      	cmp	r2, r3
 800381e:	f040 8116 	bne.w	8003a4e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b12      	cmp	r3, #18
 8003828:	d034      	beq.n	8003894 <HAL_GPIO_Init+0xa4>
 800382a:	2b12      	cmp	r3, #18
 800382c:	d80d      	bhi.n	800384a <HAL_GPIO_Init+0x5a>
 800382e:	2b02      	cmp	r3, #2
 8003830:	d02b      	beq.n	800388a <HAL_GPIO_Init+0x9a>
 8003832:	2b02      	cmp	r3, #2
 8003834:	d804      	bhi.n	8003840 <HAL_GPIO_Init+0x50>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d031      	beq.n	800389e <HAL_GPIO_Init+0xae>
 800383a:	2b01      	cmp	r3, #1
 800383c:	d01c      	beq.n	8003878 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800383e:	e048      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003840:	2b03      	cmp	r3, #3
 8003842:	d043      	beq.n	80038cc <HAL_GPIO_Init+0xdc>
 8003844:	2b11      	cmp	r3, #17
 8003846:	d01b      	beq.n	8003880 <HAL_GPIO_Init+0x90>
          break;
 8003848:	e043      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800384a:	4a89      	ldr	r2, [pc, #548]	; (8003a70 <HAL_GPIO_Init+0x280>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d026      	beq.n	800389e <HAL_GPIO_Init+0xae>
 8003850:	4a87      	ldr	r2, [pc, #540]	; (8003a70 <HAL_GPIO_Init+0x280>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d806      	bhi.n	8003864 <HAL_GPIO_Init+0x74>
 8003856:	4a87      	ldr	r2, [pc, #540]	; (8003a74 <HAL_GPIO_Init+0x284>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d020      	beq.n	800389e <HAL_GPIO_Init+0xae>
 800385c:	4a86      	ldr	r2, [pc, #536]	; (8003a78 <HAL_GPIO_Init+0x288>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d01d      	beq.n	800389e <HAL_GPIO_Init+0xae>
          break;
 8003862:	e036      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003864:	4a85      	ldr	r2, [pc, #532]	; (8003a7c <HAL_GPIO_Init+0x28c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d019      	beq.n	800389e <HAL_GPIO_Init+0xae>
 800386a:	4a85      	ldr	r2, [pc, #532]	; (8003a80 <HAL_GPIO_Init+0x290>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d016      	beq.n	800389e <HAL_GPIO_Init+0xae>
 8003870:	4a84      	ldr	r2, [pc, #528]	; (8003a84 <HAL_GPIO_Init+0x294>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d013      	beq.n	800389e <HAL_GPIO_Init+0xae>
          break;
 8003876:	e02c      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	623b      	str	r3, [r7, #32]
          break;
 800387e:	e028      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	3304      	adds	r3, #4
 8003886:	623b      	str	r3, [r7, #32]
          break;
 8003888:	e023      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	3308      	adds	r3, #8
 8003890:	623b      	str	r3, [r7, #32]
          break;
 8003892:	e01e      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	330c      	adds	r3, #12
 800389a:	623b      	str	r3, [r7, #32]
          break;
 800389c:	e019      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80038a6:	2304      	movs	r3, #4
 80038a8:	623b      	str	r3, [r7, #32]
          break;
 80038aa:	e012      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038b4:	2308      	movs	r3, #8
 80038b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	611a      	str	r2, [r3, #16]
          break;
 80038be:	e008      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038c0:	2308      	movs	r3, #8
 80038c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	615a      	str	r2, [r3, #20]
          break;
 80038ca:	e002      	b.n	80038d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038cc:	2300      	movs	r3, #0
 80038ce:	623b      	str	r3, [r7, #32]
          break;
 80038d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2bff      	cmp	r3, #255	; 0xff
 80038d6:	d801      	bhi.n	80038dc <HAL_GPIO_Init+0xec>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	e001      	b.n	80038e0 <HAL_GPIO_Init+0xf0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3304      	adds	r3, #4
 80038e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2bff      	cmp	r3, #255	; 0xff
 80038e6:	d802      	bhi.n	80038ee <HAL_GPIO_Init+0xfe>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x104>
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	3b08      	subs	r3, #8
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	210f      	movs	r1, #15
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	401a      	ands	r2, r3
 8003906:	6a39      	ldr	r1, [r7, #32]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	fa01 f303 	lsl.w	r3, r1, r3
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8096 	beq.w	8003a4e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003922:	4b59      	ldr	r3, [pc, #356]	; (8003a88 <HAL_GPIO_Init+0x298>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4a58      	ldr	r2, [pc, #352]	; (8003a88 <HAL_GPIO_Init+0x298>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6193      	str	r3, [r2, #24]
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <HAL_GPIO_Init+0x298>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	60bb      	str	r3, [r7, #8]
 8003938:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800393a:	4a54      	ldr	r2, [pc, #336]	; (8003a8c <HAL_GPIO_Init+0x29c>)
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	089b      	lsrs	r3, r3, #2
 8003940:	3302      	adds	r3, #2
 8003942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003946:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	220f      	movs	r2, #15
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43db      	mvns	r3, r3
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4013      	ands	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a4b      	ldr	r2, [pc, #300]	; (8003a90 <HAL_GPIO_Init+0x2a0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d013      	beq.n	800398e <HAL_GPIO_Init+0x19e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a4a      	ldr	r2, [pc, #296]	; (8003a94 <HAL_GPIO_Init+0x2a4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_GPIO_Init+0x19a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a49      	ldr	r2, [pc, #292]	; (8003a98 <HAL_GPIO_Init+0x2a8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x196>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a48      	ldr	r2, [pc, #288]	; (8003a9c <HAL_GPIO_Init+0x2ac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_GPIO_Init+0x192>
 800397e:	2303      	movs	r3, #3
 8003980:	e006      	b.n	8003990 <HAL_GPIO_Init+0x1a0>
 8003982:	2304      	movs	r3, #4
 8003984:	e004      	b.n	8003990 <HAL_GPIO_Init+0x1a0>
 8003986:	2302      	movs	r3, #2
 8003988:	e002      	b.n	8003990 <HAL_GPIO_Init+0x1a0>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_GPIO_Init+0x1a0>
 800398e:	2300      	movs	r3, #0
 8003990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003992:	f002 0203 	and.w	r2, r2, #3
 8003996:	0092      	lsls	r2, r2, #2
 8003998:	4093      	lsls	r3, r2
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80039a0:	493a      	ldr	r1, [pc, #232]	; (8003a8c <HAL_GPIO_Init+0x29c>)
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	3302      	adds	r3, #2
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d006      	beq.n	80039c8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039ba:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	4938      	ldr	r1, [pc, #224]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]
 80039c6:	e006      	b.n	80039d6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039c8:	4b35      	ldr	r3, [pc, #212]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	4933      	ldr	r1, [pc, #204]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039e2:	4b2f      	ldr	r3, [pc, #188]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	492e      	ldr	r1, [pc, #184]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	604b      	str	r3, [r1, #4]
 80039ee:	e006      	b.n	80039fe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	4929      	ldr	r1, [pc, #164]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a0a:	4b25      	ldr	r3, [pc, #148]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	4924      	ldr	r1, [pc, #144]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
 8003a16:	e006      	b.n	8003a26 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a18:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	491f      	ldr	r1, [pc, #124]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a32:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	491a      	ldr	r1, [pc, #104]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60cb      	str	r3, [r1, #12]
 8003a3e:	e006      	b.n	8003a4e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	43db      	mvns	r3, r3
 8003a48:	4915      	ldr	r1, [pc, #84]	; (8003aa0 <HAL_GPIO_Init+0x2b0>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3301      	adds	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f47f aed0 	bne.w	8003804 <HAL_GPIO_Init+0x14>
  }
}
 8003a64:	bf00      	nop
 8003a66:	372c      	adds	r7, #44	; 0x2c
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	10210000 	.word	0x10210000
 8003a74:	10110000 	.word	0x10110000
 8003a78:	10120000 	.word	0x10120000
 8003a7c:	10310000 	.word	0x10310000
 8003a80:	10320000 	.word	0x10320000
 8003a84:	10220000 	.word	0x10220000
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40010800 	.word	0x40010800
 8003a94:	40010c00 	.word	0x40010c00
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	40011400 	.word	0x40011400
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	887b      	ldrh	r3, [r7, #2]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003abc:	2301      	movs	r3, #1
 8003abe:	73fb      	strb	r3, [r7, #15]
 8003ac0:	e001      	b.n	8003ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr

08003ad2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	460b      	mov	r3, r1
 8003adc:	807b      	strh	r3, [r7, #2]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ae2:	787b      	ldrb	r3, [r7, #1]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ae8:	887a      	ldrh	r2, [r7, #2]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aee:	e003      	b.n	8003af8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	041a      	lsls	r2, r3, #16
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	611a      	str	r2, [r3, #16]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e26c      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8087 	beq.w	8003c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b24:	4b92      	ldr	r3, [pc, #584]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f003 030c 	and.w	r3, r3, #12
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d00c      	beq.n	8003b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b30:	4b8f      	ldr	r3, [pc, #572]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d112      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5e>
 8003b3c:	4b8c      	ldr	r3, [pc, #560]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b48:	d10b      	bne.n	8003b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b4a:	4b89      	ldr	r3, [pc, #548]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d06c      	beq.n	8003c30 <HAL_RCC_OscConfig+0x12c>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d168      	bne.n	8003c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e246      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x76>
 8003b6c:	4b80      	ldr	r3, [pc, #512]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a7f      	ldr	r2, [pc, #508]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e02e      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x98>
 8003b82:	4b7b      	ldr	r3, [pc, #492]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a7a      	ldr	r2, [pc, #488]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	4b78      	ldr	r3, [pc, #480]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a77      	ldr	r2, [pc, #476]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e01d      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ba4:	d10c      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xbc>
 8003ba6:	4b72      	ldr	r3, [pc, #456]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a71      	ldr	r2, [pc, #452]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4b6f      	ldr	r3, [pc, #444]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a6e      	ldr	r2, [pc, #440]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCC_OscConfig+0xd4>
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a6a      	ldr	r2, [pc, #424]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bca:	6013      	str	r3, [r2, #0]
 8003bcc:	4b68      	ldr	r3, [pc, #416]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a67      	ldr	r2, [pc, #412]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d013      	beq.n	8003c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be0:	f7ff f8ca 	bl	8002d78 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be8:	f7ff f8c6 	bl	8002d78 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b64      	cmp	r3, #100	; 0x64
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e1fa      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	4b5d      	ldr	r3, [pc, #372]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0xe4>
 8003c06:	e014      	b.n	8003c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c08:	f7ff f8b6 	bl	8002d78 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7ff f8b2 	bl	8002d78 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e1e6      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	4b53      	ldr	r3, [pc, #332]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x10c>
 8003c2e:	e000      	b.n	8003c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c3e:	4b4c      	ldr	r3, [pc, #304]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 030c 	and.w	r3, r3, #12
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c4a:	4b49      	ldr	r3, [pc, #292]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d11c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x18c>
 8003c56:	4b46      	ldr	r3, [pc, #280]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d116      	bne.n	8003c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	4b43      	ldr	r3, [pc, #268]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_RCC_OscConfig+0x176>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e1ba      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c7a:	4b3d      	ldr	r3, [pc, #244]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4939      	ldr	r1, [pc, #228]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c8e:	e03a      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d020      	beq.n	8003cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c98:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c9e:	f7ff f86b 	bl	8002d78 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca6:	f7ff f867 	bl	8002d78 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e19b      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	4b2d      	ldr	r3, [pc, #180]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc4:	4b2a      	ldr	r3, [pc, #168]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4927      	ldr	r1, [pc, #156]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_RCC_OscConfig+0x270>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7ff f84a 	bl	8002d78 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce8:	f7ff f846 	bl	8002d78 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e17a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d03a      	beq.n	8003d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d019      	beq.n	8003d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1a:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7ff f82a 	bl	8002d78 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7ff f826 	bl	8002d78 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e15a      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	; (8003d70 <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d46:	2001      	movs	r0, #1
 8003d48:	f000 fada 	bl	8004300 <RCC_Delay>
 8003d4c:	e01c      	b.n	8003d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_OscConfig+0x274>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7ff f810 	bl	8002d78 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5a:	e00f      	b.n	8003d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7ff f80c 	bl	8002d78 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d908      	bls.n	8003d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e140      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	42420000 	.word	0x42420000
 8003d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1e9      	bne.n	8003d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a6 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b97      	ldr	r3, [pc, #604]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b94      	ldr	r3, [pc, #592]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a93      	ldr	r2, [pc, #588]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b8e      	ldr	r3, [pc, #568]	; (8003ffc <HAL_RCC_OscConfig+0x4f8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d118      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dce:	4b8b      	ldr	r3, [pc, #556]	; (8003ffc <HAL_RCC_OscConfig+0x4f8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a8a      	ldr	r2, [pc, #552]	; (8003ffc <HAL_RCC_OscConfig+0x4f8>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dda:	f7fe ffcd 	bl	8002d78 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de2:	f7fe ffc9 	bl	8002d78 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b64      	cmp	r3, #100	; 0x64
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e0fd      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df4:	4b81      	ldr	r3, [pc, #516]	; (8003ffc <HAL_RCC_OscConfig+0x4f8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d106      	bne.n	8003e16 <HAL_RCC_OscConfig+0x312>
 8003e08:	4b7b      	ldr	r3, [pc, #492]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	6213      	str	r3, [r2, #32]
 8003e14:	e02d      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x334>
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6213      	str	r3, [r2, #32]
 8003e2a:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	4a72      	ldr	r2, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6213      	str	r3, [r2, #32]
 8003e36:	e01c      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10c      	bne.n	8003e5a <HAL_RCC_OscConfig+0x356>
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4a6c      	ldr	r2, [pc, #432]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e46:	f043 0304 	orr.w	r3, r3, #4
 8003e4a:	6213      	str	r3, [r2, #32]
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4a69      	ldr	r2, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	6213      	str	r3, [r2, #32]
 8003e58:	e00b      	b.n	8003e72 <HAL_RCC_OscConfig+0x36e>
 8003e5a:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	4a66      	ldr	r2, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6213      	str	r3, [r2, #32]
 8003e66:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a63      	ldr	r2, [pc, #396]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d015      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fe ff7d 	bl	8002d78 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fe ff79 	bl	8002d78 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0ab      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	4b57      	ldr	r3, [pc, #348]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ee      	beq.n	8003e82 <HAL_RCC_OscConfig+0x37e>
 8003ea4:	e014      	b.n	8003ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea6:	f7fe ff67 	bl	8002d78 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe ff63 	bl	8002d78 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e095      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f003 0302 	and.w	r3, r3, #2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1ee      	bne.n	8003eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed0:	7dfb      	ldrb	r3, [r7, #23]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d105      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed6:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	4a47      	ldr	r2, [pc, #284]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 8081 	beq.w	8003fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 030c 	and.w	r3, r3, #12
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d061      	beq.n	8003fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d146      	bne.n	8003f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_OscConfig+0x4fc>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fe ff37 	bl	8002d78 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fe ff33 	bl	8002d78 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e067      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f20:	4b35      	ldr	r3, [pc, #212]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f34:	d108      	bne.n	8003f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	492d      	ldr	r1, [pc, #180]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f48:	4b2b      	ldr	r3, [pc, #172]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a19      	ldr	r1, [r3, #32]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	4927      	ldr	r1, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x4fc>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fe ff07 	bl	8002d78 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fe ff03 	bl	8002d78 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e037      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f80:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f0      	beq.n	8003f6e <HAL_RCC_OscConfig+0x46a>
 8003f8c:	e02f      	b.n	8003fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <HAL_RCC_OscConfig+0x4fc>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe fef0 	bl	8002d78 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fe feec 	bl	8002d78 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e020      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fae:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x498>
 8003fba:	e018      	b.n	8003fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e013      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d001      	beq.n	8003fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40007000 	.word	0x40007000
 8004000:	42420060 	.word	0x42420060

08004004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d101      	bne.n	8004018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e0d0      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004018:	4b6a      	ldr	r3, [pc, #424]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d910      	bls.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004026:	4b67      	ldr	r3, [pc, #412]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f023 0207 	bic.w	r2, r3, #7
 800402e:	4965      	ldr	r1, [pc, #404]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4313      	orrs	r3, r2
 8004034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	4a58      	ldr	r2, [pc, #352]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800406a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a52      	ldr	r2, [pc, #328]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004092:	4313      	orrs	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d040      	beq.n	8004124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d115      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d107      	bne.n	80040d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c2:	4b41      	ldr	r3, [pc, #260]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e073      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e06b      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040e2:	4b39      	ldr	r3, [pc, #228]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f023 0203 	bic.w	r2, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	4936      	ldr	r1, [pc, #216]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040f4:	f7fe fe40 	bl	8002d78 <HAL_GetTick>
 80040f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	e00a      	b.n	8004112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040fc:	f7fe fe3c 	bl	8002d78 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	f241 3288 	movw	r2, #5000	; 0x1388
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e053      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004112:	4b2d      	ldr	r3, [pc, #180]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 020c 	and.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	429a      	cmp	r2, r3
 8004122:	d1eb      	bne.n	80040fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d210      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 0207 	bic.w	r2, r3, #7
 800413a:	4922      	ldr	r1, [pc, #136]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	4313      	orrs	r3, r2
 8004140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	; (80041c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800416e:	4313      	orrs	r3, r2
 8004170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800417e:	4b12      	ldr	r3, [pc, #72]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4601      	mov	r1, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <HAL_RCC_ClockConfig+0x1c8>)
 80041a4:	5cd3      	ldrb	r3, [r2, r3]
 80041a6:	fa21 f303 	lsr.w	r3, r1, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	; (80041d0 <HAL_RCC_ClockConfig+0x1cc>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1d0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fd9e 	bl	8002cf4 <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40022000 	.word	0x40022000
 80041c8:	40021000 	.word	0x40021000
 80041cc:	0800784c 	.word	0x0800784c
 80041d0:	20000014 	.word	0x20000014
 80041d4:	20000018 	.word	0x20000018

080041d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	b490      	push	{r4, r7}
 80041da:	b08a      	sub	sp, #40	; 0x28
 80041dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041e0:	1d3c      	adds	r4, r7, #4
 80041e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041e8:	4b28      	ldr	r3, [pc, #160]	; (800428c <HAL_RCC_GetSysClockFreq+0xb4>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	2300      	movs	r3, #0
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	2300      	movs	r3, #0
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004202:	4b23      	ldr	r3, [pc, #140]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b04      	cmp	r3, #4
 8004210:	d002      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x40>
 8004212:	2b08      	cmp	r3, #8
 8004214:	d003      	beq.n	800421e <HAL_RCC_GetSysClockFreq+0x46>
 8004216:	e02d      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 800421a:	623b      	str	r3, [r7, #32]
      break;
 800421c:	e02d      	b.n	800427a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	0c9b      	lsrs	r3, r3, #18
 8004222:	f003 030f 	and.w	r3, r3, #15
 8004226:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800422a:	4413      	add	r3, r2
 800422c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004230:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d013      	beq.n	8004264 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800423c:	4b14      	ldr	r3, [pc, #80]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	0c5b      	lsrs	r3, r3, #17
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800424a:	4413      	add	r3, r2
 800424c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004250:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	4a0f      	ldr	r2, [pc, #60]	; (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004256:	fb02 f203 	mul.w	r2, r2, r3
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
 8004262:	e004      	b.n	800426e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4a0c      	ldr	r2, [pc, #48]	; (8004298 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800426e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004270:	623b      	str	r3, [r7, #32]
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004276:	623b      	str	r3, [r7, #32]
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	6a3b      	ldr	r3, [r7, #32]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3728      	adds	r7, #40	; 0x28
 8004280:	46bd      	mov	sp, r7
 8004282:	bc90      	pop	{r4, r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	08007838 	.word	0x08007838
 800428c:	08007848 	.word	0x08007848
 8004290:	40021000 	.word	0x40021000
 8004294:	007a1200 	.word	0x007a1200
 8004298:	003d0900 	.word	0x003d0900

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b02      	ldr	r3, [pc, #8]	; (80042ac <HAL_RCC_GetHCLKFreq+0x10>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bc80      	pop	{r7}
 80042aa:	4770      	bx	lr
 80042ac:	20000014 	.word	0x20000014

080042b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b4:	f7ff fff2 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042b8:	4601      	mov	r1, r0
 80042ba:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	0a1b      	lsrs	r3, r3, #8
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4a03      	ldr	r2, [pc, #12]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c6:	5cd3      	ldrb	r3, [r2, r3]
 80042c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800785c 	.word	0x0800785c

080042d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042dc:	f7ff ffde 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	0adb      	lsrs	r3, r3, #11
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40021000 	.word	0x40021000
 80042fc:	0800785c 	.word	0x0800785c

08004300 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <RCC_Delay+0x34>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a0a      	ldr	r2, [pc, #40]	; (8004338 <RCC_Delay+0x38>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a5b      	lsrs	r3, r3, #9
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	fb02 f303 	mul.w	r3, r2, r3
 800431a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800431c:	bf00      	nop
  }
  while (Delay --);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	60fa      	str	r2, [r7, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f9      	bne.n	800431c <RCC_Delay+0x1c>
}
 8004328:	bf00      	nop
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	20000014 	.word	0x20000014
 8004338:	10624dd3 	.word	0x10624dd3

0800433c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	2300      	movs	r3, #0
 800434a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d07d      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435c:	4b4f      	ldr	r3, [pc, #316]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004368:	4b4c      	ldr	r3, [pc, #304]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	4a4b      	ldr	r2, [pc, #300]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004372:	61d3      	str	r3, [r2, #28]
 8004374:	4b49      	ldr	r3, [pc, #292]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	60bb      	str	r3, [r7, #8]
 800437e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004380:	2301      	movs	r3, #1
 8004382:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438c:	2b00      	cmp	r3, #0
 800438e:	d118      	bne.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439c:	f7fe fcec 	bl	8002d78 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a2:	e008      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a4:	f7fe fce8 	bl	8002d78 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b64      	cmp	r3, #100	; 0x64
 80043b0:	d901      	bls.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e06d      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b6:	4b3a      	ldr	r3, [pc, #232]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02e      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d027      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e0:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043ea:	4b2e      	ldr	r3, [pc, #184]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043f0:	4b2c      	ldr	r3, [pc, #176]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043f6:	4a29      	ldr	r2, [pc, #164]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d014      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004406:	f7fe fcb7 	bl	8002d78 <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800440e:	f7fe fcb3 	bl	8002d78 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	f241 3288 	movw	r2, #5000	; 0x1388
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e036      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0ee      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004430:	4b1a      	ldr	r3, [pc, #104]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4917      	ldr	r1, [pc, #92]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800443e:	4313      	orrs	r3, r2
 8004440:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004442:	7dfb      	ldrb	r3, [r7, #23]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d105      	bne.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800444e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004452:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d008      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	490b      	ldr	r1, [pc, #44]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800446e:	4313      	orrs	r3, r2
 8004470:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0310 	and.w	r3, r3, #16
 800447a:	2b00      	cmp	r3, #0
 800447c:	d008      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	4904      	ldr	r1, [pc, #16]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	40007000 	.word	0x40007000
 80044a4:	42420440 	.word	0x42420440

080044a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e041      	b.n	800453e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fb04 	bl	8002adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f000 fc44 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e032      	b.n	80045c6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <HAL_TIM_Base_Start+0x88>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start+0x48>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start+0x48>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a14      	ldr	r2, [pc, #80]	; (80045d4 <HAL_TIM_Base_Start+0x8c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start+0x48>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <HAL_TIM_Base_Start+0x90>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d010      	beq.n	80045c4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e007      	b.n	80045c4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800

080045dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e041      	b.n	8004672 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d106      	bne.n	8004608 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f839 	bl	800467a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f000 fbaa 	bl	8004d74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	bc80      	pop	{r7}
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_IC_Start_IT+0x1a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	e013      	b.n	80046ce <HAL_TIM_IC_Start_IT+0x42>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_IC_Start_IT+0x2a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	e00b      	b.n	80046ce <HAL_TIM_IC_Start_IT+0x42>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_IC_Start_IT+0x3a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	e003      	b.n	80046ce <HAL_TIM_IC_Start_IT+0x42>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d104      	bne.n	80046e0 <HAL_TIM_IC_Start_IT+0x54>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	e013      	b.n	8004708 <HAL_TIM_IC_Start_IT+0x7c>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d104      	bne.n	80046f0 <HAL_TIM_IC_Start_IT+0x64>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e00b      	b.n	8004708 <HAL_TIM_IC_Start_IT+0x7c>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d104      	bne.n	8004700 <HAL_TIM_IC_Start_IT+0x74>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	e003      	b.n	8004708 <HAL_TIM_IC_Start_IT+0x7c>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004706:	b2db      	uxtb	r3, r3
 8004708:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d102      	bne.n	8004716 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004710:	7bbb      	ldrb	r3, [r7, #14]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d001      	beq.n	800471a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0b3      	b.n	8004882 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_TIM_IC_Start_IT+0x9e>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004728:	e013      	b.n	8004752 <HAL_TIM_IC_Start_IT+0xc6>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d104      	bne.n	800473a <HAL_TIM_IC_Start_IT+0xae>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004738:	e00b      	b.n	8004752 <HAL_TIM_IC_Start_IT+0xc6>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d104      	bne.n	800474a <HAL_TIM_IC_Start_IT+0xbe>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	e003      	b.n	8004752 <HAL_TIM_IC_Start_IT+0xc6>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_TIM_IC_Start_IT+0xd6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004760:	e013      	b.n	800478a <HAL_TIM_IC_Start_IT+0xfe>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d104      	bne.n	8004772 <HAL_TIM_IC_Start_IT+0xe6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004770:	e00b      	b.n	800478a <HAL_TIM_IC_Start_IT+0xfe>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d104      	bne.n	8004782 <HAL_TIM_IC_Start_IT+0xf6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	e003      	b.n	800478a <HAL_TIM_IC_Start_IT+0xfe>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2202      	movs	r2, #2
 8004786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d841      	bhi.n	8004814 <HAL_TIM_IC_Start_IT+0x188>
 8004790:	a201      	add	r2, pc, #4	; (adr r2, 8004798 <HAL_TIM_IC_Start_IT+0x10c>)
 8004792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004796:	bf00      	nop
 8004798:	080047cd 	.word	0x080047cd
 800479c:	08004815 	.word	0x08004815
 80047a0:	08004815 	.word	0x08004815
 80047a4:	08004815 	.word	0x08004815
 80047a8:	080047df 	.word	0x080047df
 80047ac:	08004815 	.word	0x08004815
 80047b0:	08004815 	.word	0x08004815
 80047b4:	08004815 	.word	0x08004815
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	08004815 	.word	0x08004815
 80047c0:	08004815 	.word	0x08004815
 80047c4:	08004815 	.word	0x08004815
 80047c8:	08004803 	.word	0x08004803
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0202 	orr.w	r2, r2, #2
 80047da:	60da      	str	r2, [r3, #12]
      break;
 80047dc:	e01b      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0204 	orr.w	r2, r2, #4
 80047ec:	60da      	str	r2, [r3, #12]
      break;
 80047ee:	e012      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	60da      	str	r2, [r3, #12]
      break;
 8004800:	e009      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f042 0210 	orr.w	r2, r2, #16
 8004810:	60da      	str	r2, [r3, #12]
      break;
 8004812:	e000      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004814:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	6839      	ldr	r1, [r7, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fcad 	bl	800517e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <HAL_TIM_IC_Start_IT+0x200>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00e      	beq.n	800484c <HAL_TIM_IC_Start_IT+0x1c0>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004836:	d009      	beq.n	800484c <HAL_TIM_IC_Start_IT+0x1c0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <HAL_TIM_IC_Start_IT+0x204>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d004      	beq.n	800484c <HAL_TIM_IC_Start_IT+0x1c0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a13      	ldr	r2, [pc, #76]	; (8004894 <HAL_TIM_IC_Start_IT+0x208>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b06      	cmp	r3, #6
 800485c:	d010      	beq.n	8004880 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0201 	orr.w	r2, r2, #1
 800486c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486e:	e007      	b.n	8004880 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800

08004898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d122      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d11b      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fd ff42 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa2b 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa31 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d122      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b04      	cmp	r3, #4
 800490e:	d11b      	bne.n	8004948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0204 	mvn.w	r2, #4
 8004918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fd ff18 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8004934:	e005      	b.n	8004942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fa01 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 fa07 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b08      	cmp	r3, #8
 8004954:	d122      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d11b      	bne.n	800499c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd feee 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f9d7 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f9dd 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d122      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	d11b      	bne.n	80049f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2208      	movs	r2, #8
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd fec4 	bl	8002764 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f9ad 	bl	8004d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f9b3 	bl	8004d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10e      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d107      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f06f 0201 	mvn.w	r2, #1
 8004a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fe62 	bl	80026e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d10e      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d107      	bne.n	8004a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fc27 	bl	8005296 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d10e      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d107      	bne.n	8004a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f977 	bl	8004d62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d10e      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	f003 0320 	and.w	r3, r3, #32
 8004a8c:	2b20      	cmp	r3, #32
 8004a8e:	d107      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f06f 0220 	mvn.w	r2, #32
 8004a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fbf2 	bl	8005284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e082      	b.n	8004bc8 <HAL_TIM_IC_ConfigChannel+0x120>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d11b      	bne.n	8004b08 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f000 f9aa 	bl	8004e38 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 020c 	bic.w	r2, r2, #12
 8004af2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6999      	ldr	r1, [r3, #24]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	689a      	ldr	r2, [r3, #8]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	619a      	str	r2, [r3, #24]
 8004b06:	e05a      	b.n	8004bbe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d11c      	bne.n	8004b48 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	6819      	ldr	r1, [r3, #0]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f000 fa13 	bl	8004f48 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004b30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6999      	ldr	r1, [r3, #24]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	021a      	lsls	r2, r3, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	619a      	str	r2, [r3, #24]
 8004b46:	e03a      	b.n	8004bbe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d11b      	bne.n	8004b86 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f000 fa5e 	bl	800501e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	69da      	ldr	r2, [r3, #28]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 020c 	bic.w	r2, r2, #12
 8004b70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69d9      	ldr	r1, [r3, #28]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	61da      	str	r2, [r3, #28]
 8004b84:	e01b      	b.n	8004bbe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f000 fa7d 	bl	8005094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69da      	ldr	r2, [r3, #28]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ba8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69d9      	ldr	r1, [r3, #28]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	021a      	lsls	r2, r3, #8
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_ConfigClockSource+0x18>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0a6      	b.n	8004d36 <HAL_TIM_ConfigClockSource+0x166>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b40      	cmp	r3, #64	; 0x40
 8004c1e:	d067      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0x120>
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d80b      	bhi.n	8004c3c <HAL_TIM_ConfigClockSource+0x6c>
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d073      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
 8004c28:	2b10      	cmp	r3, #16
 8004c2a:	d802      	bhi.n	8004c32 <HAL_TIM_ConfigClockSource+0x62>
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d06f      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c30:	e078      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d06c      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
 8004c36:	2b30      	cmp	r3, #48	; 0x30
 8004c38:	d06a      	beq.n	8004d10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c3a:	e073      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c3c:	2b70      	cmp	r3, #112	; 0x70
 8004c3e:	d00d      	beq.n	8004c5c <HAL_TIM_ConfigClockSource+0x8c>
 8004c40:	2b70      	cmp	r3, #112	; 0x70
 8004c42:	d804      	bhi.n	8004c4e <HAL_TIM_ConfigClockSource+0x7e>
 8004c44:	2b50      	cmp	r3, #80	; 0x50
 8004c46:	d033      	beq.n	8004cb0 <HAL_TIM_ConfigClockSource+0xe0>
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d041      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c4c:	e06a      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d066      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x152>
 8004c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c58:	d017      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c5a:	e063      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6899      	ldr	r1, [r3, #8]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f000 fa68 	bl	8005140 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
      break;
 8004c88:	e04c      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f000 fa51 	bl	8005140 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689a      	ldr	r2, [r3, #8]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cac:	609a      	str	r2, [r3, #8]
      break;
 8004cae:	e039      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6818      	ldr	r0, [r3, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f000 f915 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2150      	movs	r1, #80	; 0x50
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f000 fa1f 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004cce:	e029      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	6859      	ldr	r1, [r3, #4]
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f000 f96f 	bl	8004fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2160      	movs	r1, #96	; 0x60
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fa0f 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004cee:	e019      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f000 f8f5 	bl	8004eec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2140      	movs	r1, #64	; 0x40
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f9ff 	bl	800510c <TIM_ITRx_SetConfig>
      break;
 8004d0e:	e009      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f000 f9f6 	bl	800510c <TIM_ITRx_SetConfig>
        break;
 8004d20:	e000      	b.n	8004d24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bc80      	pop	{r7}
 8004d4e:	4770      	bx	lr

08004d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr

08004d62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d6a:	bf00      	nop
 8004d6c:	370c      	adds	r7, #12
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a29      	ldr	r2, [pc, #164]	; (8004e2c <TIM_Base_SetConfig+0xb8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0x30>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0x30>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a26      	ldr	r2, [pc, #152]	; (8004e30 <TIM_Base_SetConfig+0xbc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0x30>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a25      	ldr	r2, [pc, #148]	; (8004e34 <TIM_Base_SetConfig+0xc0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <TIM_Base_SetConfig+0xb8>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_Base_SetConfig+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d007      	beq.n	8004dd6 <TIM_Base_SetConfig+0x62>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <TIM_Base_SetConfig+0xbc>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_Base_SetConfig+0x62>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <TIM_Base_SetConfig+0xc0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d108      	bne.n	8004de8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <TIM_Base_SetConfig+0xb8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d103      	bne.n	8004e1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	615a      	str	r2, [r3, #20]
}
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr
 8004e2c:	40012c00 	.word	0x40012c00
 8004e30:	40000400 	.word	0x40000400
 8004e34:	40000800 	.word	0x40000800

08004e38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	f023 0201 	bic.w	r2, r3, #1
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a1f      	ldr	r2, [pc, #124]	; (8004ee0 <TIM_TI1_SetConfig+0xa8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00b      	beq.n	8004e7e <TIM_TI1_SetConfig+0x46>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6c:	d007      	beq.n	8004e7e <TIM_TI1_SetConfig+0x46>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	; (8004ee4 <TIM_TI1_SetConfig+0xac>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d003      	beq.n	8004e7e <TIM_TI1_SetConfig+0x46>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a1b      	ldr	r2, [pc, #108]	; (8004ee8 <TIM_TI1_SetConfig+0xb0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d101      	bne.n	8004e82 <TIM_TI1_SetConfig+0x4a>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <TIM_TI1_SetConfig+0x4c>
 8004e82:	2300      	movs	r3, #0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f023 0303 	bic.w	r3, r3, #3
 8004e8e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	e003      	b.n	8004ea2 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	f023 030a 	bic.w	r3, r3, #10
 8004ebc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f003 030a 	and.w	r3, r3, #10
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	bf00      	nop
 8004ed8:	371c      	adds	r7, #28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	40012c00 	.word	0x40012c00
 8004ee4:	40000400 	.word	0x40000400
 8004ee8:	40000800 	.word	0x40000800

08004eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	031b      	lsls	r3, r3, #12
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	621a      	str	r2, [r3, #32]
}
 8004fb6:	bf00      	nop
 8004fb8:	371c      	adds	r7, #28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bc80      	pop	{r7}
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f023 0210 	bic.w	r2, r3, #16
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	031b      	lsls	r3, r3, #12
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	621a      	str	r2, [r3, #32]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800501e:	b480      	push	{r7}
 8005020:	b087      	sub	sp, #28
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	69db      	ldr	r3, [r3, #28]
 800503c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	b2db      	uxtb	r3, r3
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800506e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	621a      	str	r2, [r3, #32]
}
 800508a:	bf00      	nop
 800508c:	371c      	adds	r7, #28
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr

08005094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	69db      	ldr	r3, [r3, #28]
 80050b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	021b      	lsls	r3, r3, #8
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	031b      	lsls	r3, r3, #12
 80050d8:	b29b      	uxth	r3, r3
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	031b      	lsls	r3, r3, #12
 80050ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005122:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	f043 0307 	orr.w	r3, r3, #7
 800512e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]
}
 8005136:	bf00      	nop
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800515a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	021a      	lsls	r2, r3, #8
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	431a      	orrs	r2, r3
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4313      	orrs	r3, r2
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	609a      	str	r2, [r3, #8]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800517e:	b480      	push	{r7}
 8005180:	b087      	sub	sp, #28
 8005182:	af00      	add	r7, sp, #0
 8005184:	60f8      	str	r0, [r7, #12]
 8005186:	60b9      	str	r1, [r7, #8]
 8005188:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	2201      	movs	r2, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	43db      	mvns	r3, r3
 80051a0:	401a      	ands	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a1a      	ldr	r2, [r3, #32]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 031f 	and.w	r3, r3, #31
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	431a      	orrs	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bc80      	pop	{r7}
 80051c4:	4770      	bx	lr
	...

080051c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051dc:	2302      	movs	r3, #2
 80051de:	e046      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a10      	ldr	r2, [pc, #64]	; (8005280 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40000400 	.word	0x40000400
 8005280:	40000800 	.word	0x40000800

08005284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr

08005296 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005296:	b480      	push	{r7}
 8005298:	b083      	sub	sp, #12
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr

080052a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e03f      	b.n	800533a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fd fc8a 	bl	8002be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	; 0x24
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 f829 	bl	8005344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	695b      	ldr	r3, [r3, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800537e:	f023 030c 	bic.w	r3, r3, #12
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6812      	ldr	r2, [r2, #0]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	430b      	orrs	r3, r1
 800538a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	695b      	ldr	r3, [r3, #20]
 8005392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2c      	ldr	r2, [pc, #176]	; (8005458 <UART_SetConfig+0x114>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80053ac:	f7fe ff94 	bl	80042d8 <HAL_RCC_GetPCLK2Freq>
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	e002      	b.n	80053ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe ff7c 	bl	80042b0 <HAL_RCC_GetPCLK1Freq>
 80053b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	009a      	lsls	r2, r3, #2
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d0:	4a22      	ldr	r2, [pc, #136]	; (800545c <UART_SetConfig+0x118>)
 80053d2:	fba2 2303 	umull	r2, r3, r2, r3
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	0119      	lsls	r1, r3, #4
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009a      	lsls	r2, r3, #2
 80053e4:	441a      	add	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <UART_SetConfig+0x118>)
 80053f2:	fba3 0302 	umull	r0, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2064      	movs	r0, #100	; 0x64
 80053fa:	fb00 f303 	mul.w	r3, r0, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	; 0x32
 8005404:	4a15      	ldr	r2, [pc, #84]	; (800545c <UART_SetConfig+0x118>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005410:	4419      	add	r1, r3
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009a      	lsls	r2, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	fbb2 f2f3 	udiv	r2, r2, r3
 8005428:	4b0c      	ldr	r3, [pc, #48]	; (800545c <UART_SetConfig+0x118>)
 800542a:	fba3 0302 	umull	r0, r3, r3, r2
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2064      	movs	r0, #100	; 0x64
 8005432:	fb00 f303 	mul.w	r3, r0, r3
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	3332      	adds	r3, #50	; 0x32
 800543c:	4a07      	ldr	r2, [pc, #28]	; (800545c <UART_SetConfig+0x118>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	f003 020f 	and.w	r2, r3, #15
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	440a      	add	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005450:	bf00      	nop
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40013800 	.word	0x40013800
 800545c:	51eb851f 	.word	0x51eb851f

08005460 <__errno>:
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <__errno+0x8>)
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20000020 	.word	0x20000020

0800546c <__libc_init_array>:
 800546c:	b570      	push	{r4, r5, r6, lr}
 800546e:	2500      	movs	r5, #0
 8005470:	4e0c      	ldr	r6, [pc, #48]	; (80054a4 <__libc_init_array+0x38>)
 8005472:	4c0d      	ldr	r4, [pc, #52]	; (80054a8 <__libc_init_array+0x3c>)
 8005474:	1ba4      	subs	r4, r4, r6
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	42a5      	cmp	r5, r4
 800547a:	d109      	bne.n	8005490 <__libc_init_array+0x24>
 800547c:	f002 f960 	bl	8007740 <_init>
 8005480:	2500      	movs	r5, #0
 8005482:	4e0a      	ldr	r6, [pc, #40]	; (80054ac <__libc_init_array+0x40>)
 8005484:	4c0a      	ldr	r4, [pc, #40]	; (80054b0 <__libc_init_array+0x44>)
 8005486:	1ba4      	subs	r4, r4, r6
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	42a5      	cmp	r5, r4
 800548c:	d105      	bne.n	800549a <__libc_init_array+0x2e>
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005494:	4798      	blx	r3
 8005496:	3501      	adds	r5, #1
 8005498:	e7ee      	b.n	8005478 <__libc_init_array+0xc>
 800549a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800549e:	4798      	blx	r3
 80054a0:	3501      	adds	r5, #1
 80054a2:	e7f2      	b.n	800548a <__libc_init_array+0x1e>
 80054a4:	08007ac8 	.word	0x08007ac8
 80054a8:	08007ac8 	.word	0x08007ac8
 80054ac:	08007ac8 	.word	0x08007ac8
 80054b0:	08007acc 	.word	0x08007acc

080054b4 <memset>:
 80054b4:	4603      	mov	r3, r0
 80054b6:	4402      	add	r2, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <__cvt>:
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054ca:	461e      	mov	r6, r3
 80054cc:	bfbb      	ittet	lt
 80054ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80054d2:	461e      	movlt	r6, r3
 80054d4:	2300      	movge	r3, #0
 80054d6:	232d      	movlt	r3, #45	; 0x2d
 80054d8:	b088      	sub	sp, #32
 80054da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80054dc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80054e0:	f027 0720 	bic.w	r7, r7, #32
 80054e4:	2f46      	cmp	r7, #70	; 0x46
 80054e6:	4614      	mov	r4, r2
 80054e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054ea:	700b      	strb	r3, [r1, #0]
 80054ec:	d004      	beq.n	80054f8 <__cvt+0x34>
 80054ee:	2f45      	cmp	r7, #69	; 0x45
 80054f0:	d100      	bne.n	80054f4 <__cvt+0x30>
 80054f2:	3501      	adds	r5, #1
 80054f4:	2302      	movs	r3, #2
 80054f6:	e000      	b.n	80054fa <__cvt+0x36>
 80054f8:	2303      	movs	r3, #3
 80054fa:	aa07      	add	r2, sp, #28
 80054fc:	9204      	str	r2, [sp, #16]
 80054fe:	aa06      	add	r2, sp, #24
 8005500:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005504:	e9cd 3500 	strd	r3, r5, [sp]
 8005508:	4622      	mov	r2, r4
 800550a:	4633      	mov	r3, r6
 800550c:	f000 fcd8 	bl	8005ec0 <_dtoa_r>
 8005510:	2f47      	cmp	r7, #71	; 0x47
 8005512:	4680      	mov	r8, r0
 8005514:	d102      	bne.n	800551c <__cvt+0x58>
 8005516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005518:	07db      	lsls	r3, r3, #31
 800551a:	d526      	bpl.n	800556a <__cvt+0xa6>
 800551c:	2f46      	cmp	r7, #70	; 0x46
 800551e:	eb08 0905 	add.w	r9, r8, r5
 8005522:	d111      	bne.n	8005548 <__cvt+0x84>
 8005524:	f898 3000 	ldrb.w	r3, [r8]
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d10a      	bne.n	8005542 <__cvt+0x7e>
 800552c:	2200      	movs	r2, #0
 800552e:	2300      	movs	r3, #0
 8005530:	4620      	mov	r0, r4
 8005532:	4631      	mov	r1, r6
 8005534:	f7fb fa38 	bl	80009a8 <__aeabi_dcmpeq>
 8005538:	b918      	cbnz	r0, 8005542 <__cvt+0x7e>
 800553a:	f1c5 0501 	rsb	r5, r5, #1
 800553e:	f8ca 5000 	str.w	r5, [sl]
 8005542:	f8da 3000 	ldr.w	r3, [sl]
 8005546:	4499      	add	r9, r3
 8005548:	2200      	movs	r2, #0
 800554a:	2300      	movs	r3, #0
 800554c:	4620      	mov	r0, r4
 800554e:	4631      	mov	r1, r6
 8005550:	f7fb fa2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005554:	b938      	cbnz	r0, 8005566 <__cvt+0xa2>
 8005556:	2230      	movs	r2, #48	; 0x30
 8005558:	9b07      	ldr	r3, [sp, #28]
 800555a:	454b      	cmp	r3, r9
 800555c:	d205      	bcs.n	800556a <__cvt+0xa6>
 800555e:	1c59      	adds	r1, r3, #1
 8005560:	9107      	str	r1, [sp, #28]
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e7f8      	b.n	8005558 <__cvt+0x94>
 8005566:	f8cd 901c 	str.w	r9, [sp, #28]
 800556a:	4640      	mov	r0, r8
 800556c:	9b07      	ldr	r3, [sp, #28]
 800556e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005570:	eba3 0308 	sub.w	r3, r3, r8
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	b008      	add	sp, #32
 8005578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800557c <__exponent>:
 800557c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557e:	2900      	cmp	r1, #0
 8005580:	bfb4      	ite	lt
 8005582:	232d      	movlt	r3, #45	; 0x2d
 8005584:	232b      	movge	r3, #43	; 0x2b
 8005586:	4604      	mov	r4, r0
 8005588:	bfb8      	it	lt
 800558a:	4249      	neglt	r1, r1
 800558c:	2909      	cmp	r1, #9
 800558e:	f804 2b02 	strb.w	r2, [r4], #2
 8005592:	7043      	strb	r3, [r0, #1]
 8005594:	dd21      	ble.n	80055da <__exponent+0x5e>
 8005596:	f10d 0307 	add.w	r3, sp, #7
 800559a:	461f      	mov	r7, r3
 800559c:	260a      	movs	r6, #10
 800559e:	fb91 f5f6 	sdiv	r5, r1, r6
 80055a2:	fb06 1115 	mls	r1, r6, r5, r1
 80055a6:	2d09      	cmp	r5, #9
 80055a8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80055ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055b0:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80055b4:	4629      	mov	r1, r5
 80055b6:	dc09      	bgt.n	80055cc <__exponent+0x50>
 80055b8:	3130      	adds	r1, #48	; 0x30
 80055ba:	3b02      	subs	r3, #2
 80055bc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80055c0:	42bb      	cmp	r3, r7
 80055c2:	4622      	mov	r2, r4
 80055c4:	d304      	bcc.n	80055d0 <__exponent+0x54>
 80055c6:	1a10      	subs	r0, r2, r0
 80055c8:	b003      	add	sp, #12
 80055ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055cc:	4613      	mov	r3, r2
 80055ce:	e7e6      	b.n	800559e <__exponent+0x22>
 80055d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055d4:	f804 2b01 	strb.w	r2, [r4], #1
 80055d8:	e7f2      	b.n	80055c0 <__exponent+0x44>
 80055da:	2330      	movs	r3, #48	; 0x30
 80055dc:	4419      	add	r1, r3
 80055de:	7083      	strb	r3, [r0, #2]
 80055e0:	1d02      	adds	r2, r0, #4
 80055e2:	70c1      	strb	r1, [r0, #3]
 80055e4:	e7ef      	b.n	80055c6 <__exponent+0x4a>
	...

080055e8 <_printf_float>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	b091      	sub	sp, #68	; 0x44
 80055ee:	460c      	mov	r4, r1
 80055f0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80055f2:	4693      	mov	fp, r2
 80055f4:	461e      	mov	r6, r3
 80055f6:	4605      	mov	r5, r0
 80055f8:	f001 fa16 	bl	8006a28 <_localeconv_r>
 80055fc:	6803      	ldr	r3, [r0, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	9309      	str	r3, [sp, #36]	; 0x24
 8005602:	f7fa fda5 	bl	8000150 <strlen>
 8005606:	2300      	movs	r3, #0
 8005608:	930e      	str	r3, [sp, #56]	; 0x38
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	900a      	str	r0, [sp, #40]	; 0x28
 800560e:	3307      	adds	r3, #7
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	f894 8018 	ldrb.w	r8, [r4, #24]
 800561c:	f8d4 a000 	ldr.w	sl, [r4]
 8005620:	603a      	str	r2, [r7, #0]
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800562a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800562e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005632:	930b      	str	r3, [sp, #44]	; 0x2c
 8005634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005638:	4ba6      	ldr	r3, [pc, #664]	; (80058d4 <_printf_float+0x2ec>)
 800563a:	4638      	mov	r0, r7
 800563c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800563e:	f7fb f9e5 	bl	8000a0c <__aeabi_dcmpun>
 8005642:	bb68      	cbnz	r0, 80056a0 <_printf_float+0xb8>
 8005644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005648:	4ba2      	ldr	r3, [pc, #648]	; (80058d4 <_printf_float+0x2ec>)
 800564a:	4638      	mov	r0, r7
 800564c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800564e:	f7fb f9bf 	bl	80009d0 <__aeabi_dcmple>
 8005652:	bb28      	cbnz	r0, 80056a0 <_printf_float+0xb8>
 8005654:	2200      	movs	r2, #0
 8005656:	2300      	movs	r3, #0
 8005658:	4638      	mov	r0, r7
 800565a:	4649      	mov	r1, r9
 800565c:	f7fb f9ae 	bl	80009bc <__aeabi_dcmplt>
 8005660:	b110      	cbz	r0, 8005668 <_printf_float+0x80>
 8005662:	232d      	movs	r3, #45	; 0x2d
 8005664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005668:	4f9b      	ldr	r7, [pc, #620]	; (80058d8 <_printf_float+0x2f0>)
 800566a:	4b9c      	ldr	r3, [pc, #624]	; (80058dc <_printf_float+0x2f4>)
 800566c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005670:	bf98      	it	ls
 8005672:	461f      	movls	r7, r3
 8005674:	2303      	movs	r3, #3
 8005676:	f04f 0900 	mov.w	r9, #0
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	f02a 0304 	bic.w	r3, sl, #4
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	9600      	str	r6, [sp, #0]
 8005684:	465b      	mov	r3, fp
 8005686:	aa0f      	add	r2, sp, #60	; 0x3c
 8005688:	4621      	mov	r1, r4
 800568a:	4628      	mov	r0, r5
 800568c:	f000 f9e2 	bl	8005a54 <_printf_common>
 8005690:	3001      	adds	r0, #1
 8005692:	f040 8090 	bne.w	80057b6 <_printf_float+0x1ce>
 8005696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800569a:	b011      	add	sp, #68	; 0x44
 800569c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a0:	463a      	mov	r2, r7
 80056a2:	464b      	mov	r3, r9
 80056a4:	4638      	mov	r0, r7
 80056a6:	4649      	mov	r1, r9
 80056a8:	f7fb f9b0 	bl	8000a0c <__aeabi_dcmpun>
 80056ac:	b110      	cbz	r0, 80056b4 <_printf_float+0xcc>
 80056ae:	4f8c      	ldr	r7, [pc, #560]	; (80058e0 <_printf_float+0x2f8>)
 80056b0:	4b8c      	ldr	r3, [pc, #560]	; (80058e4 <_printf_float+0x2fc>)
 80056b2:	e7db      	b.n	800566c <_printf_float+0x84>
 80056b4:	6863      	ldr	r3, [r4, #4]
 80056b6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80056ba:	1c59      	adds	r1, r3, #1
 80056bc:	a80d      	add	r0, sp, #52	; 0x34
 80056be:	a90e      	add	r1, sp, #56	; 0x38
 80056c0:	d140      	bne.n	8005744 <_printf_float+0x15c>
 80056c2:	2306      	movs	r3, #6
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	f04f 0c00 	mov.w	ip, #0
 80056ca:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80056ce:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	463a      	mov	r2, r7
 80056de:	464b      	mov	r3, r9
 80056e0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80056e4:	4628      	mov	r0, r5
 80056e6:	f7ff feed 	bl	80054c4 <__cvt>
 80056ea:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80056ee:	2b47      	cmp	r3, #71	; 0x47
 80056f0:	4607      	mov	r7, r0
 80056f2:	d109      	bne.n	8005708 <_printf_float+0x120>
 80056f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056f6:	1cd8      	adds	r0, r3, #3
 80056f8:	db02      	blt.n	8005700 <_printf_float+0x118>
 80056fa:	6862      	ldr	r2, [r4, #4]
 80056fc:	4293      	cmp	r3, r2
 80056fe:	dd47      	ble.n	8005790 <_printf_float+0x1a8>
 8005700:	f1a8 0802 	sub.w	r8, r8, #2
 8005704:	fa5f f888 	uxtb.w	r8, r8
 8005708:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800570c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800570e:	d824      	bhi.n	800575a <_printf_float+0x172>
 8005710:	3901      	subs	r1, #1
 8005712:	4642      	mov	r2, r8
 8005714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005718:	910d      	str	r1, [sp, #52]	; 0x34
 800571a:	f7ff ff2f 	bl	800557c <__exponent>
 800571e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005720:	4681      	mov	r9, r0
 8005722:	1813      	adds	r3, r2, r0
 8005724:	2a01      	cmp	r2, #1
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	dc02      	bgt.n	8005730 <_printf_float+0x148>
 800572a:	6822      	ldr	r2, [r4, #0]
 800572c:	07d1      	lsls	r1, r2, #31
 800572e:	d501      	bpl.n	8005734 <_printf_float+0x14c>
 8005730:	3301      	adds	r3, #1
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0a2      	beq.n	8005682 <_printf_float+0x9a>
 800573c:	232d      	movs	r3, #45	; 0x2d
 800573e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005742:	e79e      	b.n	8005682 <_printf_float+0x9a>
 8005744:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005748:	f000 816e 	beq.w	8005a28 <_printf_float+0x440>
 800574c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005750:	d1b9      	bne.n	80056c6 <_printf_float+0xde>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1b7      	bne.n	80056c6 <_printf_float+0xde>
 8005756:	2301      	movs	r3, #1
 8005758:	e7b4      	b.n	80056c4 <_printf_float+0xdc>
 800575a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800575e:	d119      	bne.n	8005794 <_printf_float+0x1ac>
 8005760:	2900      	cmp	r1, #0
 8005762:	6863      	ldr	r3, [r4, #4]
 8005764:	dd0c      	ble.n	8005780 <_printf_float+0x198>
 8005766:	6121      	str	r1, [r4, #16]
 8005768:	b913      	cbnz	r3, 8005770 <_printf_float+0x188>
 800576a:	6822      	ldr	r2, [r4, #0]
 800576c:	07d2      	lsls	r2, r2, #31
 800576e:	d502      	bpl.n	8005776 <_printf_float+0x18e>
 8005770:	3301      	adds	r3, #1
 8005772:	440b      	add	r3, r1
 8005774:	6123      	str	r3, [r4, #16]
 8005776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005778:	f04f 0900 	mov.w	r9, #0
 800577c:	65a3      	str	r3, [r4, #88]	; 0x58
 800577e:	e7d9      	b.n	8005734 <_printf_float+0x14c>
 8005780:	b913      	cbnz	r3, 8005788 <_printf_float+0x1a0>
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	07d0      	lsls	r0, r2, #31
 8005786:	d501      	bpl.n	800578c <_printf_float+0x1a4>
 8005788:	3302      	adds	r3, #2
 800578a:	e7f3      	b.n	8005774 <_printf_float+0x18c>
 800578c:	2301      	movs	r3, #1
 800578e:	e7f1      	b.n	8005774 <_printf_float+0x18c>
 8005790:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005794:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005798:	4293      	cmp	r3, r2
 800579a:	db05      	blt.n	80057a8 <_printf_float+0x1c0>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	6123      	str	r3, [r4, #16]
 80057a0:	07d1      	lsls	r1, r2, #31
 80057a2:	d5e8      	bpl.n	8005776 <_printf_float+0x18e>
 80057a4:	3301      	adds	r3, #1
 80057a6:	e7e5      	b.n	8005774 <_printf_float+0x18c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bfcc      	ite	gt
 80057ac:	2301      	movgt	r3, #1
 80057ae:	f1c3 0302 	rsble	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	e7de      	b.n	8005774 <_printf_float+0x18c>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	055a      	lsls	r2, r3, #21
 80057ba:	d407      	bmi.n	80057cc <_printf_float+0x1e4>
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	463a      	mov	r2, r7
 80057c0:	4659      	mov	r1, fp
 80057c2:	4628      	mov	r0, r5
 80057c4:	47b0      	blx	r6
 80057c6:	3001      	adds	r0, #1
 80057c8:	d129      	bne.n	800581e <_printf_float+0x236>
 80057ca:	e764      	b.n	8005696 <_printf_float+0xae>
 80057cc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80057d0:	f240 80d7 	bls.w	8005982 <_printf_float+0x39a>
 80057d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057d8:	2200      	movs	r2, #0
 80057da:	2300      	movs	r3, #0
 80057dc:	f7fb f8e4 	bl	80009a8 <__aeabi_dcmpeq>
 80057e0:	b388      	cbz	r0, 8005846 <_printf_float+0x25e>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4a40      	ldr	r2, [pc, #256]	; (80058e8 <_printf_float+0x300>)
 80057e6:	4659      	mov	r1, fp
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b0      	blx	r6
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f af52 	beq.w	8005696 <_printf_float+0xae>
 80057f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80057f6:	429a      	cmp	r2, r3
 80057f8:	db02      	blt.n	8005800 <_printf_float+0x218>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07d8      	lsls	r0, r3, #31
 80057fe:	d50e      	bpl.n	800581e <_printf_float+0x236>
 8005800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005804:	4659      	mov	r1, fp
 8005806:	4628      	mov	r0, r5
 8005808:	47b0      	blx	r6
 800580a:	3001      	adds	r0, #1
 800580c:	f43f af43 	beq.w	8005696 <_printf_float+0xae>
 8005810:	2700      	movs	r7, #0
 8005812:	f104 081a 	add.w	r8, r4, #26
 8005816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005818:	3b01      	subs	r3, #1
 800581a:	42bb      	cmp	r3, r7
 800581c:	dc09      	bgt.n	8005832 <_printf_float+0x24a>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	079f      	lsls	r7, r3, #30
 8005822:	f100 80fd 	bmi.w	8005a20 <_printf_float+0x438>
 8005826:	68e0      	ldr	r0, [r4, #12]
 8005828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800582a:	4298      	cmp	r0, r3
 800582c:	bfb8      	it	lt
 800582e:	4618      	movlt	r0, r3
 8005830:	e733      	b.n	800569a <_printf_float+0xb2>
 8005832:	2301      	movs	r3, #1
 8005834:	4642      	mov	r2, r8
 8005836:	4659      	mov	r1, fp
 8005838:	4628      	mov	r0, r5
 800583a:	47b0      	blx	r6
 800583c:	3001      	adds	r0, #1
 800583e:	f43f af2a 	beq.w	8005696 <_printf_float+0xae>
 8005842:	3701      	adds	r7, #1
 8005844:	e7e7      	b.n	8005816 <_printf_float+0x22e>
 8005846:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc2b      	bgt.n	80058a4 <_printf_float+0x2bc>
 800584c:	2301      	movs	r3, #1
 800584e:	4a26      	ldr	r2, [pc, #152]	; (80058e8 <_printf_float+0x300>)
 8005850:	4659      	mov	r1, fp
 8005852:	4628      	mov	r0, r5
 8005854:	47b0      	blx	r6
 8005856:	3001      	adds	r0, #1
 8005858:	f43f af1d 	beq.w	8005696 <_printf_float+0xae>
 800585c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800585e:	b923      	cbnz	r3, 800586a <_printf_float+0x282>
 8005860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005862:	b913      	cbnz	r3, 800586a <_printf_float+0x282>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d5d9      	bpl.n	800581e <_printf_float+0x236>
 800586a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800586e:	4659      	mov	r1, fp
 8005870:	4628      	mov	r0, r5
 8005872:	47b0      	blx	r6
 8005874:	3001      	adds	r0, #1
 8005876:	f43f af0e 	beq.w	8005696 <_printf_float+0xae>
 800587a:	f04f 0800 	mov.w	r8, #0
 800587e:	f104 091a 	add.w	r9, r4, #26
 8005882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005884:	425b      	negs	r3, r3
 8005886:	4543      	cmp	r3, r8
 8005888:	dc01      	bgt.n	800588e <_printf_float+0x2a6>
 800588a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800588c:	e797      	b.n	80057be <_printf_float+0x1d6>
 800588e:	2301      	movs	r3, #1
 8005890:	464a      	mov	r2, r9
 8005892:	4659      	mov	r1, fp
 8005894:	4628      	mov	r0, r5
 8005896:	47b0      	blx	r6
 8005898:	3001      	adds	r0, #1
 800589a:	f43f aefc 	beq.w	8005696 <_printf_float+0xae>
 800589e:	f108 0801 	add.w	r8, r8, #1
 80058a2:	e7ee      	b.n	8005882 <_printf_float+0x29a>
 80058a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80058a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a8:	429a      	cmp	r2, r3
 80058aa:	bfa8      	it	ge
 80058ac:	461a      	movge	r2, r3
 80058ae:	2a00      	cmp	r2, #0
 80058b0:	4690      	mov	r8, r2
 80058b2:	dd07      	ble.n	80058c4 <_printf_float+0x2dc>
 80058b4:	4613      	mov	r3, r2
 80058b6:	4659      	mov	r1, fp
 80058b8:	463a      	mov	r2, r7
 80058ba:	4628      	mov	r0, r5
 80058bc:	47b0      	blx	r6
 80058be:	3001      	adds	r0, #1
 80058c0:	f43f aee9 	beq.w	8005696 <_printf_float+0xae>
 80058c4:	f104 031a 	add.w	r3, r4, #26
 80058c8:	f04f 0a00 	mov.w	sl, #0
 80058cc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80058d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80058d2:	e015      	b.n	8005900 <_printf_float+0x318>
 80058d4:	7fefffff 	.word	0x7fefffff
 80058d8:	08007868 	.word	0x08007868
 80058dc:	08007864 	.word	0x08007864
 80058e0:	08007870 	.word	0x08007870
 80058e4:	0800786c 	.word	0x0800786c
 80058e8:	08007874 	.word	0x08007874
 80058ec:	2301      	movs	r3, #1
 80058ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058f0:	4659      	mov	r1, fp
 80058f2:	4628      	mov	r0, r5
 80058f4:	47b0      	blx	r6
 80058f6:	3001      	adds	r0, #1
 80058f8:	f43f aecd 	beq.w	8005696 <_printf_float+0xae>
 80058fc:	f10a 0a01 	add.w	sl, sl, #1
 8005900:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005904:	eba9 0308 	sub.w	r3, r9, r8
 8005908:	4553      	cmp	r3, sl
 800590a:	dcef      	bgt.n	80058ec <_printf_float+0x304>
 800590c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005910:	429a      	cmp	r2, r3
 8005912:	444f      	add	r7, r9
 8005914:	db14      	blt.n	8005940 <_printf_float+0x358>
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	07da      	lsls	r2, r3, #31
 800591a:	d411      	bmi.n	8005940 <_printf_float+0x358>
 800591c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800591e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005920:	eba3 0209 	sub.w	r2, r3, r9
 8005924:	eba3 0901 	sub.w	r9, r3, r1
 8005928:	4591      	cmp	r9, r2
 800592a:	bfa8      	it	ge
 800592c:	4691      	movge	r9, r2
 800592e:	f1b9 0f00 	cmp.w	r9, #0
 8005932:	dc0d      	bgt.n	8005950 <_printf_float+0x368>
 8005934:	2700      	movs	r7, #0
 8005936:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800593a:	f104 081a 	add.w	r8, r4, #26
 800593e:	e018      	b.n	8005972 <_printf_float+0x38a>
 8005940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005944:	4659      	mov	r1, fp
 8005946:	4628      	mov	r0, r5
 8005948:	47b0      	blx	r6
 800594a:	3001      	adds	r0, #1
 800594c:	d1e6      	bne.n	800591c <_printf_float+0x334>
 800594e:	e6a2      	b.n	8005696 <_printf_float+0xae>
 8005950:	464b      	mov	r3, r9
 8005952:	463a      	mov	r2, r7
 8005954:	4659      	mov	r1, fp
 8005956:	4628      	mov	r0, r5
 8005958:	47b0      	blx	r6
 800595a:	3001      	adds	r0, #1
 800595c:	d1ea      	bne.n	8005934 <_printf_float+0x34c>
 800595e:	e69a      	b.n	8005696 <_printf_float+0xae>
 8005960:	2301      	movs	r3, #1
 8005962:	4642      	mov	r2, r8
 8005964:	4659      	mov	r1, fp
 8005966:	4628      	mov	r0, r5
 8005968:	47b0      	blx	r6
 800596a:	3001      	adds	r0, #1
 800596c:	f43f ae93 	beq.w	8005696 <_printf_float+0xae>
 8005970:	3701      	adds	r7, #1
 8005972:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	eba3 0309 	sub.w	r3, r3, r9
 800597c:	42bb      	cmp	r3, r7
 800597e:	dcef      	bgt.n	8005960 <_printf_float+0x378>
 8005980:	e74d      	b.n	800581e <_printf_float+0x236>
 8005982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005984:	2a01      	cmp	r2, #1
 8005986:	dc01      	bgt.n	800598c <_printf_float+0x3a4>
 8005988:	07db      	lsls	r3, r3, #31
 800598a:	d538      	bpl.n	80059fe <_printf_float+0x416>
 800598c:	2301      	movs	r3, #1
 800598e:	463a      	mov	r2, r7
 8005990:	4659      	mov	r1, fp
 8005992:	4628      	mov	r0, r5
 8005994:	47b0      	blx	r6
 8005996:	3001      	adds	r0, #1
 8005998:	f43f ae7d 	beq.w	8005696 <_printf_float+0xae>
 800599c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059a0:	4659      	mov	r1, fp
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b0      	blx	r6
 80059a6:	3001      	adds	r0, #1
 80059a8:	f107 0701 	add.w	r7, r7, #1
 80059ac:	f43f ae73 	beq.w	8005696 <_printf_float+0xae>
 80059b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b6:	2200      	movs	r2, #0
 80059b8:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80059bc:	2300      	movs	r3, #0
 80059be:	f7fa fff3 	bl	80009a8 <__aeabi_dcmpeq>
 80059c2:	b9c0      	cbnz	r0, 80059f6 <_printf_float+0x40e>
 80059c4:	4643      	mov	r3, r8
 80059c6:	463a      	mov	r2, r7
 80059c8:	4659      	mov	r1, fp
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b0      	blx	r6
 80059ce:	3001      	adds	r0, #1
 80059d0:	d10d      	bne.n	80059ee <_printf_float+0x406>
 80059d2:	e660      	b.n	8005696 <_printf_float+0xae>
 80059d4:	2301      	movs	r3, #1
 80059d6:	4642      	mov	r2, r8
 80059d8:	4659      	mov	r1, fp
 80059da:	4628      	mov	r0, r5
 80059dc:	47b0      	blx	r6
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f ae59 	beq.w	8005696 <_printf_float+0xae>
 80059e4:	3701      	adds	r7, #1
 80059e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059e8:	3b01      	subs	r3, #1
 80059ea:	42bb      	cmp	r3, r7
 80059ec:	dcf2      	bgt.n	80059d4 <_printf_float+0x3ec>
 80059ee:	464b      	mov	r3, r9
 80059f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059f4:	e6e4      	b.n	80057c0 <_printf_float+0x1d8>
 80059f6:	2700      	movs	r7, #0
 80059f8:	f104 081a 	add.w	r8, r4, #26
 80059fc:	e7f3      	b.n	80059e6 <_printf_float+0x3fe>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e7e1      	b.n	80059c6 <_printf_float+0x3de>
 8005a02:	2301      	movs	r3, #1
 8005a04:	4642      	mov	r2, r8
 8005a06:	4659      	mov	r1, fp
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b0      	blx	r6
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f43f ae42 	beq.w	8005696 <_printf_float+0xae>
 8005a12:	3701      	adds	r7, #1
 8005a14:	68e3      	ldr	r3, [r4, #12]
 8005a16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005a18:	1a9b      	subs	r3, r3, r2
 8005a1a:	42bb      	cmp	r3, r7
 8005a1c:	dcf1      	bgt.n	8005a02 <_printf_float+0x41a>
 8005a1e:	e702      	b.n	8005826 <_printf_float+0x23e>
 8005a20:	2700      	movs	r7, #0
 8005a22:	f104 0819 	add.w	r8, r4, #25
 8005a26:	e7f5      	b.n	8005a14 <_printf_float+0x42c>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f43f ae94 	beq.w	8005756 <_printf_float+0x16e>
 8005a2e:	f04f 0c00 	mov.w	ip, #0
 8005a32:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005a36:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005a3a:	6022      	str	r2, [r4, #0]
 8005a3c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005a40:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	463a      	mov	r2, r7
 8005a48:	464b      	mov	r3, r9
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f7ff fd3a 	bl	80054c4 <__cvt>
 8005a50:	4607      	mov	r7, r0
 8005a52:	e64f      	b.n	80056f4 <_printf_float+0x10c>

08005a54 <_printf_common>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	4691      	mov	r9, r2
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	688a      	ldr	r2, [r1, #8]
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	4606      	mov	r6, r0
 8005a62:	4293      	cmp	r3, r2
 8005a64:	bfb8      	it	lt
 8005a66:	4613      	movlt	r3, r2
 8005a68:	f8c9 3000 	str.w	r3, [r9]
 8005a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a70:	460c      	mov	r4, r1
 8005a72:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a76:	b112      	cbz	r2, 8005a7e <_printf_common+0x2a>
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f8c9 3000 	str.w	r3, [r9]
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	0699      	lsls	r1, r3, #26
 8005a82:	bf42      	ittt	mi
 8005a84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a88:	3302      	addmi	r3, #2
 8005a8a:	f8c9 3000 	strmi.w	r3, [r9]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d107      	bne.n	8005aa6 <_printf_common+0x52>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	dc29      	bgt.n	8005afa <_printf_common+0xa6>
 8005aa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	3300      	adds	r3, #0
 8005aae:	bf18      	it	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	0692      	lsls	r2, r2, #26
 8005ab4:	d42e      	bmi.n	8005b14 <_printf_common+0xc0>
 8005ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aba:	4639      	mov	r1, r7
 8005abc:	4630      	mov	r0, r6
 8005abe:	47c0      	blx	r8
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d021      	beq.n	8005b08 <_printf_common+0xb4>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	68e5      	ldr	r5, [r4, #12]
 8005ac8:	f003 0306 	and.w	r3, r3, #6
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	bf18      	it	ne
 8005ad0:	2500      	movne	r5, #0
 8005ad2:	f8d9 2000 	ldr.w	r2, [r9]
 8005ad6:	f04f 0900 	mov.w	r9, #0
 8005ada:	bf08      	it	eq
 8005adc:	1aad      	subeq	r5, r5, r2
 8005ade:	68a3      	ldr	r3, [r4, #8]
 8005ae0:	6922      	ldr	r2, [r4, #16]
 8005ae2:	bf08      	it	eq
 8005ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bfc4      	itt	gt
 8005aec:	1a9b      	subgt	r3, r3, r2
 8005aee:	18ed      	addgt	r5, r5, r3
 8005af0:	341a      	adds	r4, #26
 8005af2:	454d      	cmp	r5, r9
 8005af4:	d11a      	bne.n	8005b2c <_printf_common+0xd8>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e008      	b.n	8005b0c <_printf_common+0xb8>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4639      	mov	r1, r7
 8005b00:	4630      	mov	r0, r6
 8005b02:	47c0      	blx	r8
 8005b04:	3001      	adds	r0, #1
 8005b06:	d103      	bne.n	8005b10 <_printf_common+0xbc>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b10:	3501      	adds	r5, #1
 8005b12:	e7c2      	b.n	8005a9a <_printf_common+0x46>
 8005b14:	2030      	movs	r0, #48	; 0x30
 8005b16:	18e1      	adds	r1, r4, r3
 8005b18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b22:	4422      	add	r2, r4
 8005b24:	3302      	adds	r3, #2
 8005b26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b2a:	e7c4      	b.n	8005ab6 <_printf_common+0x62>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4639      	mov	r1, r7
 8005b32:	4630      	mov	r0, r6
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d0e6      	beq.n	8005b08 <_printf_common+0xb4>
 8005b3a:	f109 0901 	add.w	r9, r9, #1
 8005b3e:	e7d8      	b.n	8005af2 <_printf_common+0x9e>

08005b40 <_printf_i>:
 8005b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b48:	460c      	mov	r4, r1
 8005b4a:	7e09      	ldrb	r1, [r1, #24]
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	296e      	cmp	r1, #110	; 0x6e
 8005b50:	4617      	mov	r7, r2
 8005b52:	4606      	mov	r6, r0
 8005b54:	4698      	mov	r8, r3
 8005b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b58:	f000 80b3 	beq.w	8005cc2 <_printf_i+0x182>
 8005b5c:	d822      	bhi.n	8005ba4 <_printf_i+0x64>
 8005b5e:	2963      	cmp	r1, #99	; 0x63
 8005b60:	d036      	beq.n	8005bd0 <_printf_i+0x90>
 8005b62:	d80a      	bhi.n	8005b7a <_printf_i+0x3a>
 8005b64:	2900      	cmp	r1, #0
 8005b66:	f000 80b9 	beq.w	8005cdc <_printf_i+0x19c>
 8005b6a:	2958      	cmp	r1, #88	; 0x58
 8005b6c:	f000 8083 	beq.w	8005c76 <_printf_i+0x136>
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b78:	e032      	b.n	8005be0 <_printf_i+0xa0>
 8005b7a:	2964      	cmp	r1, #100	; 0x64
 8005b7c:	d001      	beq.n	8005b82 <_printf_i+0x42>
 8005b7e:	2969      	cmp	r1, #105	; 0x69
 8005b80:	d1f6      	bne.n	8005b70 <_printf_i+0x30>
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	0605      	lsls	r5, r0, #24
 8005b88:	f103 0104 	add.w	r1, r3, #4
 8005b8c:	d52a      	bpl.n	8005be4 <_printf_i+0xa4>
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da03      	bge.n	8005b9e <_printf_i+0x5e>
 8005b96:	222d      	movs	r2, #45	; 0x2d
 8005b98:	425b      	negs	r3, r3
 8005b9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b9e:	486f      	ldr	r0, [pc, #444]	; (8005d5c <_printf_i+0x21c>)
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	e039      	b.n	8005c18 <_printf_i+0xd8>
 8005ba4:	2973      	cmp	r1, #115	; 0x73
 8005ba6:	f000 809d 	beq.w	8005ce4 <_printf_i+0x1a4>
 8005baa:	d808      	bhi.n	8005bbe <_printf_i+0x7e>
 8005bac:	296f      	cmp	r1, #111	; 0x6f
 8005bae:	d020      	beq.n	8005bf2 <_printf_i+0xb2>
 8005bb0:	2970      	cmp	r1, #112	; 0x70
 8005bb2:	d1dd      	bne.n	8005b70 <_printf_i+0x30>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	f043 0320 	orr.w	r3, r3, #32
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	e003      	b.n	8005bc6 <_printf_i+0x86>
 8005bbe:	2975      	cmp	r1, #117	; 0x75
 8005bc0:	d017      	beq.n	8005bf2 <_printf_i+0xb2>
 8005bc2:	2978      	cmp	r1, #120	; 0x78
 8005bc4:	d1d4      	bne.n	8005b70 <_printf_i+0x30>
 8005bc6:	2378      	movs	r3, #120	; 0x78
 8005bc8:	4865      	ldr	r0, [pc, #404]	; (8005d60 <_printf_i+0x220>)
 8005bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bce:	e055      	b.n	8005c7c <_printf_i+0x13c>
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bd6:	1d19      	adds	r1, r3, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6011      	str	r1, [r2, #0]
 8005bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be0:	2301      	movs	r3, #1
 8005be2:	e08c      	b.n	8005cfe <_printf_i+0x1be>
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bea:	6011      	str	r1, [r2, #0]
 8005bec:	bf18      	it	ne
 8005bee:	b21b      	sxthne	r3, r3
 8005bf0:	e7cf      	b.n	8005b92 <_printf_i+0x52>
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6010      	str	r0, [r2, #0]
 8005bfa:	0628      	lsls	r0, r5, #24
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0xc2>
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <_printf_i+0xc8>
 8005c02:	0668      	lsls	r0, r5, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0xbe>
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	296f      	cmp	r1, #111	; 0x6f
 8005c0a:	bf14      	ite	ne
 8005c0c:	220a      	movne	r2, #10
 8005c0e:	2208      	moveq	r2, #8
 8005c10:	4852      	ldr	r0, [pc, #328]	; (8005d5c <_printf_i+0x21c>)
 8005c12:	2100      	movs	r1, #0
 8005c14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c18:	6865      	ldr	r5, [r4, #4]
 8005c1a:	2d00      	cmp	r5, #0
 8005c1c:	60a5      	str	r5, [r4, #8]
 8005c1e:	f2c0 8095 	blt.w	8005d4c <_printf_i+0x20c>
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	f021 0104 	bic.w	r1, r1, #4
 8005c28:	6021      	str	r1, [r4, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d13d      	bne.n	8005caa <_printf_i+0x16a>
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	f040 808e 	bne.w	8005d50 <_printf_i+0x210>
 8005c34:	4665      	mov	r5, ip
 8005c36:	2a08      	cmp	r2, #8
 8005c38:	d10b      	bne.n	8005c52 <_printf_i+0x112>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	07db      	lsls	r3, r3, #31
 8005c3e:	d508      	bpl.n	8005c52 <_printf_i+0x112>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bfde      	ittt	le
 8005c48:	2330      	movle	r3, #48	; 0x30
 8005c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005c52:	ebac 0305 	sub.w	r3, ip, r5
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	f8cd 8000 	str.w	r8, [sp]
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	aa03      	add	r2, sp, #12
 8005c60:	4621      	mov	r1, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff fef6 	bl	8005a54 <_printf_common>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d14d      	bne.n	8005d08 <_printf_i+0x1c8>
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c70:	b005      	add	sp, #20
 8005c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c76:	4839      	ldr	r0, [pc, #228]	; (8005d5c <_printf_i+0x21c>)
 8005c78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	6821      	ldr	r1, [r4, #0]
 8005c80:	1d1d      	adds	r5, r3, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6015      	str	r5, [r2, #0]
 8005c86:	060a      	lsls	r2, r1, #24
 8005c88:	d50b      	bpl.n	8005ca2 <_printf_i+0x162>
 8005c8a:	07ca      	lsls	r2, r1, #31
 8005c8c:	bf44      	itt	mi
 8005c8e:	f041 0120 	orrmi.w	r1, r1, #32
 8005c92:	6021      	strmi	r1, [r4, #0]
 8005c94:	b91b      	cbnz	r3, 8005c9e <_printf_i+0x15e>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	f022 0220 	bic.w	r2, r2, #32
 8005c9c:	6022      	str	r2, [r4, #0]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	e7b7      	b.n	8005c12 <_printf_i+0xd2>
 8005ca2:	064d      	lsls	r5, r1, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b29b      	uxthmi	r3, r3
 8005ca8:	e7ef      	b.n	8005c8a <_printf_i+0x14a>
 8005caa:	4665      	mov	r5, ip
 8005cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cb0:	fb02 3311 	mls	r3, r2, r1, r3
 8005cb4:	5cc3      	ldrb	r3, [r0, r3]
 8005cb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cba:	460b      	mov	r3, r1
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d1f5      	bne.n	8005cac <_printf_i+0x16c>
 8005cc0:	e7b9      	b.n	8005c36 <_printf_i+0xf6>
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	1d18      	adds	r0, r3, #4
 8005cc8:	6961      	ldr	r1, [r4, #20]
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	0628      	lsls	r0, r5, #24
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_i+0x196>
 8005cd2:	6019      	str	r1, [r3, #0]
 8005cd4:	e002      	b.n	8005cdc <_printf_i+0x19c>
 8005cd6:	066a      	lsls	r2, r5, #25
 8005cd8:	d5fb      	bpl.n	8005cd2 <_printf_i+0x192>
 8005cda:	8019      	strh	r1, [r3, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4665      	mov	r5, ip
 8005ce0:	6123      	str	r3, [r4, #16]
 8005ce2:	e7b9      	b.n	8005c58 <_printf_i+0x118>
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	1d19      	adds	r1, r3, #4
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	681d      	ldr	r5, [r3, #0]
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 feaf 	bl	8006a54 <memchr>
 8005cf6:	b108      	cbz	r0, 8005cfc <_printf_i+0x1bc>
 8005cf8:	1b40      	subs	r0, r0, r5
 8005cfa:	6060      	str	r0, [r4, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2300      	movs	r3, #0
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d06:	e7a7      	b.n	8005c58 <_printf_i+0x118>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	4630      	mov	r0, r6
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0aa      	beq.n	8005c6c <_printf_i+0x12c>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	079b      	lsls	r3, r3, #30
 8005d1a:	d413      	bmi.n	8005d44 <_printf_i+0x204>
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	4298      	cmp	r0, r3
 8005d22:	bfb8      	it	lt
 8005d24:	4618      	movlt	r0, r3
 8005d26:	e7a3      	b.n	8005c70 <_printf_i+0x130>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	4630      	mov	r0, r6
 8005d30:	47c0      	blx	r8
 8005d32:	3001      	adds	r0, #1
 8005d34:	d09a      	beq.n	8005c6c <_printf_i+0x12c>
 8005d36:	3501      	adds	r5, #1
 8005d38:	68e3      	ldr	r3, [r4, #12]
 8005d3a:	9a03      	ldr	r2, [sp, #12]
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	42ab      	cmp	r3, r5
 8005d40:	dcf2      	bgt.n	8005d28 <_printf_i+0x1e8>
 8005d42:	e7eb      	b.n	8005d1c <_printf_i+0x1dc>
 8005d44:	2500      	movs	r5, #0
 8005d46:	f104 0919 	add.w	r9, r4, #25
 8005d4a:	e7f5      	b.n	8005d38 <_printf_i+0x1f8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ac      	bne.n	8005caa <_printf_i+0x16a>
 8005d50:	7803      	ldrb	r3, [r0, #0]
 8005d52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d5a:	e76c      	b.n	8005c36 <_printf_i+0xf6>
 8005d5c:	08007876 	.word	0x08007876
 8005d60:	08007887 	.word	0x08007887

08005d64 <siprintf>:
 8005d64:	b40e      	push	{r1, r2, r3}
 8005d66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d6a:	b500      	push	{lr}
 8005d6c:	b09c      	sub	sp, #112	; 0x70
 8005d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005d70:	9002      	str	r0, [sp, #8]
 8005d72:	9006      	str	r0, [sp, #24]
 8005d74:	9107      	str	r1, [sp, #28]
 8005d76:	9104      	str	r1, [sp, #16]
 8005d78:	4808      	ldr	r0, [pc, #32]	; (8005d9c <siprintf+0x38>)
 8005d7a:	4909      	ldr	r1, [pc, #36]	; (8005da0 <siprintf+0x3c>)
 8005d7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d80:	9105      	str	r1, [sp, #20]
 8005d82:	6800      	ldr	r0, [r0, #0]
 8005d84:	a902      	add	r1, sp, #8
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f001 fa68 	bl	800725c <_svfiprintf_r>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	9b02      	ldr	r3, [sp, #8]
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	b01c      	add	sp, #112	; 0x70
 8005d94:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d98:	b003      	add	sp, #12
 8005d9a:	4770      	bx	lr
 8005d9c:	20000020 	.word	0x20000020
 8005da0:	ffff0208 	.word	0xffff0208

08005da4 <quorem>:
 8005da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	6903      	ldr	r3, [r0, #16]
 8005daa:	690c      	ldr	r4, [r1, #16]
 8005dac:	4680      	mov	r8, r0
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	f2c0 8084 	blt.w	8005ebc <quorem+0x118>
 8005db4:	3c01      	subs	r4, #1
 8005db6:	f101 0714 	add.w	r7, r1, #20
 8005dba:	f100 0614 	add.w	r6, r0, #20
 8005dbe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005dc2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005dc6:	3501      	adds	r5, #1
 8005dc8:	fbb0 f5f5 	udiv	r5, r0, r5
 8005dcc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005dd0:	eb06 030c 	add.w	r3, r6, ip
 8005dd4:	eb07 090c 	add.w	r9, r7, ip
 8005dd8:	9301      	str	r3, [sp, #4]
 8005dda:	b39d      	cbz	r5, 8005e44 <quorem+0xa0>
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	4638      	mov	r0, r7
 8005de2:	46b6      	mov	lr, r6
 8005de4:	46d3      	mov	fp, sl
 8005de6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dea:	b293      	uxth	r3, r2
 8005dec:	fb05 a303 	mla	r3, r5, r3, sl
 8005df0:	0c12      	lsrs	r2, r2, #16
 8005df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005df6:	fb05 a202 	mla	r2, r5, r2, sl
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	ebab 0303 	sub.w	r3, fp, r3
 8005e00:	f8de b000 	ldr.w	fp, [lr]
 8005e04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005e08:	fa1f fb8b 	uxth.w	fp, fp
 8005e0c:	445b      	add	r3, fp
 8005e0e:	fa1f fb82 	uxth.w	fp, r2
 8005e12:	f8de 2000 	ldr.w	r2, [lr]
 8005e16:	4581      	cmp	r9, r0
 8005e18:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e26:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005e2a:	f84e 3b04 	str.w	r3, [lr], #4
 8005e2e:	d2da      	bcs.n	8005de6 <quorem+0x42>
 8005e30:	f856 300c 	ldr.w	r3, [r6, ip]
 8005e34:	b933      	cbnz	r3, 8005e44 <quorem+0xa0>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	3b04      	subs	r3, #4
 8005e3a:	429e      	cmp	r6, r3
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	d331      	bcc.n	8005ea4 <quorem+0x100>
 8005e40:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e44:	4640      	mov	r0, r8
 8005e46:	f001 f833 	bl	8006eb0 <__mcmp>
 8005e4a:	2800      	cmp	r0, #0
 8005e4c:	db26      	blt.n	8005e9c <quorem+0xf8>
 8005e4e:	4630      	mov	r0, r6
 8005e50:	f04f 0c00 	mov.w	ip, #0
 8005e54:	3501      	adds	r5, #1
 8005e56:	f857 1b04 	ldr.w	r1, [r7], #4
 8005e5a:	f8d0 e000 	ldr.w	lr, [r0]
 8005e5e:	b28b      	uxth	r3, r1
 8005e60:	ebac 0303 	sub.w	r3, ip, r3
 8005e64:	fa1f f28e 	uxth.w	r2, lr
 8005e68:	4413      	add	r3, r2
 8005e6a:	0c0a      	lsrs	r2, r1, #16
 8005e6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e7a:	45b9      	cmp	r9, r7
 8005e7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e80:	f840 3b04 	str.w	r3, [r0], #4
 8005e84:	d2e7      	bcs.n	8005e56 <quorem+0xb2>
 8005e86:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e8a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005e8e:	b92a      	cbnz	r2, 8005e9c <quorem+0xf8>
 8005e90:	3b04      	subs	r3, #4
 8005e92:	429e      	cmp	r6, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	d30b      	bcc.n	8005eb0 <quorem+0x10c>
 8005e98:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	b003      	add	sp, #12
 8005ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	3b04      	subs	r3, #4
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d1c9      	bne.n	8005e40 <quorem+0x9c>
 8005eac:	3c01      	subs	r4, #1
 8005eae:	e7c4      	b.n	8005e3a <quorem+0x96>
 8005eb0:	6812      	ldr	r2, [r2, #0]
 8005eb2:	3b04      	subs	r3, #4
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	d1ef      	bne.n	8005e98 <quorem+0xf4>
 8005eb8:	3c01      	subs	r4, #1
 8005eba:	e7ea      	b.n	8005e92 <quorem+0xee>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	e7ee      	b.n	8005e9e <quorem+0xfa>

08005ec0 <_dtoa_r>:
 8005ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	461f      	mov	r7, r3
 8005ec8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005eca:	b095      	sub	sp, #84	; 0x54
 8005ecc:	4604      	mov	r4, r0
 8005ece:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005ed2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005ed6:	b93d      	cbnz	r5, 8005ee8 <_dtoa_r+0x28>
 8005ed8:	2010      	movs	r0, #16
 8005eda:	f000 fdb3 	bl	8006a44 <malloc>
 8005ede:	6260      	str	r0, [r4, #36]	; 0x24
 8005ee0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ee4:	6005      	str	r5, [r0, #0]
 8005ee6:	60c5      	str	r5, [r0, #12]
 8005ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eea:	6819      	ldr	r1, [r3, #0]
 8005eec:	b151      	cbz	r1, 8005f04 <_dtoa_r+0x44>
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	4093      	lsls	r3, r2
 8005ef4:	604a      	str	r2, [r1, #4]
 8005ef6:	608b      	str	r3, [r1, #8]
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f000 fdf8 	bl	8006aee <_Bfree>
 8005efe:	2200      	movs	r2, #0
 8005f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f02:	601a      	str	r2, [r3, #0]
 8005f04:	1e3b      	subs	r3, r7, #0
 8005f06:	bfaf      	iteee	ge
 8005f08:	2300      	movge	r3, #0
 8005f0a:	2201      	movlt	r2, #1
 8005f0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	9303      	strlt	r3, [sp, #12]
 8005f12:	bfac      	ite	ge
 8005f14:	f8c8 3000 	strge.w	r3, [r8]
 8005f18:	f8c8 2000 	strlt.w	r2, [r8]
 8005f1c:	4bae      	ldr	r3, [pc, #696]	; (80061d8 <_dtoa_r+0x318>)
 8005f1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005f22:	ea33 0308 	bics.w	r3, r3, r8
 8005f26:	d11b      	bne.n	8005f60 <_dtoa_r+0xa0>
 8005f28:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	9b02      	ldr	r3, [sp, #8]
 8005f32:	b923      	cbnz	r3, 8005f3e <_dtoa_r+0x7e>
 8005f34:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	f000 8545 	beq.w	80069c8 <_dtoa_r+0xb08>
 8005f3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f40:	b953      	cbnz	r3, 8005f58 <_dtoa_r+0x98>
 8005f42:	4ba6      	ldr	r3, [pc, #664]	; (80061dc <_dtoa_r+0x31c>)
 8005f44:	e021      	b.n	8005f8a <_dtoa_r+0xca>
 8005f46:	4ba6      	ldr	r3, [pc, #664]	; (80061e0 <_dtoa_r+0x320>)
 8005f48:	9306      	str	r3, [sp, #24]
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	9806      	ldr	r0, [sp, #24]
 8005f52:	b015      	add	sp, #84	; 0x54
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	4ba0      	ldr	r3, [pc, #640]	; (80061dc <_dtoa_r+0x31c>)
 8005f5a:	9306      	str	r3, [sp, #24]
 8005f5c:	3303      	adds	r3, #3
 8005f5e:	e7f5      	b.n	8005f4c <_dtoa_r+0x8c>
 8005f60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa fd1c 	bl	80009a8 <__aeabi_dcmpeq>
 8005f70:	4682      	mov	sl, r0
 8005f72:	b160      	cbz	r0, 8005f8e <_dtoa_r+0xce>
 8005f74:	2301      	movs	r3, #1
 8005f76:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f78:	6013      	str	r3, [r2, #0]
 8005f7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 8520 	beq.w	80069c2 <_dtoa_r+0xb02>
 8005f82:	4b98      	ldr	r3, [pc, #608]	; (80061e4 <_dtoa_r+0x324>)
 8005f84:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	9306      	str	r3, [sp, #24]
 8005f8c:	e7e0      	b.n	8005f50 <_dtoa_r+0x90>
 8005f8e:	ab12      	add	r3, sp, #72	; 0x48
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	ab13      	add	r3, sp, #76	; 0x4c
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	4632      	mov	r2, r6
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	f001 f800 	bl	8006fa0 <__d2b>
 8005fa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005fa4:	4683      	mov	fp, r0
 8005fa6:	2d00      	cmp	r5, #0
 8005fa8:	d07d      	beq.n	80060a6 <_dtoa_r+0x1e6>
 8005faa:	46b0      	mov	r8, r6
 8005fac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fb0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005fb4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005fb8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005fbc:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	4b89      	ldr	r3, [pc, #548]	; (80061e8 <_dtoa_r+0x328>)
 8005fc4:	4640      	mov	r0, r8
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	f7fa f8ce 	bl	8000168 <__aeabi_dsub>
 8005fcc:	a37c      	add	r3, pc, #496	; (adr r3, 80061c0 <_dtoa_r+0x300>)
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f7fa fa81 	bl	80004d8 <__aeabi_dmul>
 8005fd6:	a37c      	add	r3, pc, #496	; (adr r3, 80061c8 <_dtoa_r+0x308>)
 8005fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fdc:	f7fa f8c6 	bl	800016c <__adddf3>
 8005fe0:	4606      	mov	r6, r0
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	f7fa fa0d 	bl	8000404 <__aeabi_i2d>
 8005fea:	a379      	add	r3, pc, #484	; (adr r3, 80061d0 <_dtoa_r+0x310>)
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f7fa fa72 	bl	80004d8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	f7fa f8b6 	bl	800016c <__adddf3>
 8006000:	4606      	mov	r6, r0
 8006002:	460f      	mov	r7, r1
 8006004:	f7fa fd18 	bl	8000a38 <__aeabi_d2iz>
 8006008:	2200      	movs	r2, #0
 800600a:	4682      	mov	sl, r0
 800600c:	2300      	movs	r3, #0
 800600e:	4630      	mov	r0, r6
 8006010:	4639      	mov	r1, r7
 8006012:	f7fa fcd3 	bl	80009bc <__aeabi_dcmplt>
 8006016:	b148      	cbz	r0, 800602c <_dtoa_r+0x16c>
 8006018:	4650      	mov	r0, sl
 800601a:	f7fa f9f3 	bl	8000404 <__aeabi_i2d>
 800601e:	4632      	mov	r2, r6
 8006020:	463b      	mov	r3, r7
 8006022:	f7fa fcc1 	bl	80009a8 <__aeabi_dcmpeq>
 8006026:	b908      	cbnz	r0, 800602c <_dtoa_r+0x16c>
 8006028:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800602c:	f1ba 0f16 	cmp.w	sl, #22
 8006030:	d85a      	bhi.n	80060e8 <_dtoa_r+0x228>
 8006032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006036:	496d      	ldr	r1, [pc, #436]	; (80061ec <_dtoa_r+0x32c>)
 8006038:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800603c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006040:	f7fa fcda 	bl	80009f8 <__aeabi_dcmpgt>
 8006044:	2800      	cmp	r0, #0
 8006046:	d051      	beq.n	80060ec <_dtoa_r+0x22c>
 8006048:	2300      	movs	r3, #0
 800604a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800604e:	930d      	str	r3, [sp, #52]	; 0x34
 8006050:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006052:	1b5d      	subs	r5, r3, r5
 8006054:	1e6b      	subs	r3, r5, #1
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	bf43      	ittte	mi
 800605a:	2300      	movmi	r3, #0
 800605c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006060:	9307      	strmi	r3, [sp, #28]
 8006062:	f04f 0900 	movpl.w	r9, #0
 8006066:	f1ba 0f00 	cmp.w	sl, #0
 800606a:	db41      	blt.n	80060f0 <_dtoa_r+0x230>
 800606c:	9b07      	ldr	r3, [sp, #28]
 800606e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006072:	4453      	add	r3, sl
 8006074:	9307      	str	r3, [sp, #28]
 8006076:	2300      	movs	r3, #0
 8006078:	9308      	str	r3, [sp, #32]
 800607a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800607c:	2b09      	cmp	r3, #9
 800607e:	f200 808f 	bhi.w	80061a0 <_dtoa_r+0x2e0>
 8006082:	2b05      	cmp	r3, #5
 8006084:	bfc4      	itt	gt
 8006086:	3b04      	subgt	r3, #4
 8006088:	931e      	strgt	r3, [sp, #120]	; 0x78
 800608a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800608c:	bfc8      	it	gt
 800608e:	2500      	movgt	r5, #0
 8006090:	f1a3 0302 	sub.w	r3, r3, #2
 8006094:	bfd8      	it	le
 8006096:	2501      	movle	r5, #1
 8006098:	2b03      	cmp	r3, #3
 800609a:	f200 808d 	bhi.w	80061b8 <_dtoa_r+0x2f8>
 800609e:	e8df f003 	tbb	[pc, r3]
 80060a2:	7d7b      	.short	0x7d7b
 80060a4:	6f2f      	.short	0x6f2f
 80060a6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80060aa:	441d      	add	r5, r3
 80060ac:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80060b0:	2820      	cmp	r0, #32
 80060b2:	dd13      	ble.n	80060dc <_dtoa_r+0x21c>
 80060b4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80060b8:	9b02      	ldr	r3, [sp, #8]
 80060ba:	fa08 f800 	lsl.w	r8, r8, r0
 80060be:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80060c2:	fa23 f000 	lsr.w	r0, r3, r0
 80060c6:	ea48 0000 	orr.w	r0, r8, r0
 80060ca:	f7fa f98b 	bl	80003e4 <__aeabi_ui2d>
 80060ce:	2301      	movs	r3, #1
 80060d0:	4680      	mov	r8, r0
 80060d2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80060d6:	3d01      	subs	r5, #1
 80060d8:	9310      	str	r3, [sp, #64]	; 0x40
 80060da:	e771      	b.n	8005fc0 <_dtoa_r+0x100>
 80060dc:	9b02      	ldr	r3, [sp, #8]
 80060de:	f1c0 0020 	rsb	r0, r0, #32
 80060e2:	fa03 f000 	lsl.w	r0, r3, r0
 80060e6:	e7f0      	b.n	80060ca <_dtoa_r+0x20a>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e7b0      	b.n	800604e <_dtoa_r+0x18e>
 80060ec:	900d      	str	r0, [sp, #52]	; 0x34
 80060ee:	e7af      	b.n	8006050 <_dtoa_r+0x190>
 80060f0:	f1ca 0300 	rsb	r3, sl, #0
 80060f4:	9308      	str	r3, [sp, #32]
 80060f6:	2300      	movs	r3, #0
 80060f8:	eba9 090a 	sub.w	r9, r9, sl
 80060fc:	930c      	str	r3, [sp, #48]	; 0x30
 80060fe:	e7bc      	b.n	800607a <_dtoa_r+0x1ba>
 8006100:	2301      	movs	r3, #1
 8006102:	9309      	str	r3, [sp, #36]	; 0x24
 8006104:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006106:	2b00      	cmp	r3, #0
 8006108:	dd74      	ble.n	80061f4 <_dtoa_r+0x334>
 800610a:	4698      	mov	r8, r3
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	2200      	movs	r2, #0
 8006110:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006112:	6072      	str	r2, [r6, #4]
 8006114:	2204      	movs	r2, #4
 8006116:	f102 0014 	add.w	r0, r2, #20
 800611a:	4298      	cmp	r0, r3
 800611c:	6871      	ldr	r1, [r6, #4]
 800611e:	d96e      	bls.n	80061fe <_dtoa_r+0x33e>
 8006120:	4620      	mov	r0, r4
 8006122:	f000 fcb0 	bl	8006a86 <_Balloc>
 8006126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f1b8 0f0e 	cmp.w	r8, #14
 8006130:	9306      	str	r3, [sp, #24]
 8006132:	f200 80ed 	bhi.w	8006310 <_dtoa_r+0x450>
 8006136:	2d00      	cmp	r5, #0
 8006138:	f000 80ea 	beq.w	8006310 <_dtoa_r+0x450>
 800613c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006140:	f1ba 0f00 	cmp.w	sl, #0
 8006144:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006148:	dd77      	ble.n	800623a <_dtoa_r+0x37a>
 800614a:	4a28      	ldr	r2, [pc, #160]	; (80061ec <_dtoa_r+0x32c>)
 800614c:	f00a 030f 	and.w	r3, sl, #15
 8006150:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006154:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006158:	06f0      	lsls	r0, r6, #27
 800615a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006162:	d568      	bpl.n	8006236 <_dtoa_r+0x376>
 8006164:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006168:	4b21      	ldr	r3, [pc, #132]	; (80061f0 <_dtoa_r+0x330>)
 800616a:	2503      	movs	r5, #3
 800616c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006170:	f7fa fadc 	bl	800072c <__aeabi_ddiv>
 8006174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006178:	f006 060f 	and.w	r6, r6, #15
 800617c:	4f1c      	ldr	r7, [pc, #112]	; (80061f0 <_dtoa_r+0x330>)
 800617e:	e04f      	b.n	8006220 <_dtoa_r+0x360>
 8006180:	2301      	movs	r3, #1
 8006182:	9309      	str	r3, [sp, #36]	; 0x24
 8006184:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006186:	4453      	add	r3, sl
 8006188:	f103 0801 	add.w	r8, r3, #1
 800618c:	9304      	str	r3, [sp, #16]
 800618e:	4643      	mov	r3, r8
 8006190:	2b01      	cmp	r3, #1
 8006192:	bfb8      	it	lt
 8006194:	2301      	movlt	r3, #1
 8006196:	e7ba      	b.n	800610e <_dtoa_r+0x24e>
 8006198:	2300      	movs	r3, #0
 800619a:	e7b2      	b.n	8006102 <_dtoa_r+0x242>
 800619c:	2300      	movs	r3, #0
 800619e:	e7f0      	b.n	8006182 <_dtoa_r+0x2c2>
 80061a0:	2501      	movs	r5, #1
 80061a2:	2300      	movs	r3, #0
 80061a4:	9509      	str	r5, [sp, #36]	; 0x24
 80061a6:	931e      	str	r3, [sp, #120]	; 0x78
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061ac:	2200      	movs	r2, #0
 80061ae:	9304      	str	r3, [sp, #16]
 80061b0:	4698      	mov	r8, r3
 80061b2:	2312      	movs	r3, #18
 80061b4:	921f      	str	r2, [sp, #124]	; 0x7c
 80061b6:	e7aa      	b.n	800610e <_dtoa_r+0x24e>
 80061b8:	2301      	movs	r3, #1
 80061ba:	9309      	str	r3, [sp, #36]	; 0x24
 80061bc:	e7f4      	b.n	80061a8 <_dtoa_r+0x2e8>
 80061be:	bf00      	nop
 80061c0:	636f4361 	.word	0x636f4361
 80061c4:	3fd287a7 	.word	0x3fd287a7
 80061c8:	8b60c8b3 	.word	0x8b60c8b3
 80061cc:	3fc68a28 	.word	0x3fc68a28
 80061d0:	509f79fb 	.word	0x509f79fb
 80061d4:	3fd34413 	.word	0x3fd34413
 80061d8:	7ff00000 	.word	0x7ff00000
 80061dc:	080078a1 	.word	0x080078a1
 80061e0:	08007898 	.word	0x08007898
 80061e4:	08007875 	.word	0x08007875
 80061e8:	3ff80000 	.word	0x3ff80000
 80061ec:	080078d0 	.word	0x080078d0
 80061f0:	080078a8 	.word	0x080078a8
 80061f4:	2301      	movs	r3, #1
 80061f6:	9304      	str	r3, [sp, #16]
 80061f8:	4698      	mov	r8, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	e7da      	b.n	80061b4 <_dtoa_r+0x2f4>
 80061fe:	3101      	adds	r1, #1
 8006200:	6071      	str	r1, [r6, #4]
 8006202:	0052      	lsls	r2, r2, #1
 8006204:	e787      	b.n	8006116 <_dtoa_r+0x256>
 8006206:	07f1      	lsls	r1, r6, #31
 8006208:	d508      	bpl.n	800621c <_dtoa_r+0x35c>
 800620a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800620e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006212:	f7fa f961 	bl	80004d8 <__aeabi_dmul>
 8006216:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800621a:	3501      	adds	r5, #1
 800621c:	1076      	asrs	r6, r6, #1
 800621e:	3708      	adds	r7, #8
 8006220:	2e00      	cmp	r6, #0
 8006222:	d1f0      	bne.n	8006206 <_dtoa_r+0x346>
 8006224:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622c:	f7fa fa7e 	bl	800072c <__aeabi_ddiv>
 8006230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006234:	e01b      	b.n	800626e <_dtoa_r+0x3ae>
 8006236:	2502      	movs	r5, #2
 8006238:	e7a0      	b.n	800617c <_dtoa_r+0x2bc>
 800623a:	f000 80a4 	beq.w	8006386 <_dtoa_r+0x4c6>
 800623e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006242:	f1ca 0600 	rsb	r6, sl, #0
 8006246:	4ba0      	ldr	r3, [pc, #640]	; (80064c8 <_dtoa_r+0x608>)
 8006248:	f006 020f 	and.w	r2, r6, #15
 800624c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f7fa f940 	bl	80004d8 <__aeabi_dmul>
 8006258:	2502      	movs	r5, #2
 800625a:	2300      	movs	r3, #0
 800625c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006260:	4f9a      	ldr	r7, [pc, #616]	; (80064cc <_dtoa_r+0x60c>)
 8006262:	1136      	asrs	r6, r6, #4
 8006264:	2e00      	cmp	r6, #0
 8006266:	f040 8083 	bne.w	8006370 <_dtoa_r+0x4b0>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e0      	bne.n	8006230 <_dtoa_r+0x370>
 800626e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 808a 	beq.w	800638a <_dtoa_r+0x4ca>
 8006276:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800627a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800627e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006282:	2200      	movs	r2, #0
 8006284:	4b92      	ldr	r3, [pc, #584]	; (80064d0 <_dtoa_r+0x610>)
 8006286:	f7fa fb99 	bl	80009bc <__aeabi_dcmplt>
 800628a:	2800      	cmp	r0, #0
 800628c:	d07d      	beq.n	800638a <_dtoa_r+0x4ca>
 800628e:	f1b8 0f00 	cmp.w	r8, #0
 8006292:	d07a      	beq.n	800638a <_dtoa_r+0x4ca>
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	dd36      	ble.n	8006308 <_dtoa_r+0x448>
 800629a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800629e:	2200      	movs	r2, #0
 80062a0:	4b8c      	ldr	r3, [pc, #560]	; (80064d4 <_dtoa_r+0x614>)
 80062a2:	f7fa f919 	bl	80004d8 <__aeabi_dmul>
 80062a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062aa:	9e04      	ldr	r6, [sp, #16]
 80062ac:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80062b0:	3501      	adds	r5, #1
 80062b2:	4628      	mov	r0, r5
 80062b4:	f7fa f8a6 	bl	8000404 <__aeabi_i2d>
 80062b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062bc:	f7fa f90c 	bl	80004d8 <__aeabi_dmul>
 80062c0:	2200      	movs	r2, #0
 80062c2:	4b85      	ldr	r3, [pc, #532]	; (80064d8 <_dtoa_r+0x618>)
 80062c4:	f7f9 ff52 	bl	800016c <__adddf3>
 80062c8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80062cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062d0:	950b      	str	r5, [sp, #44]	; 0x2c
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d15c      	bne.n	8006390 <_dtoa_r+0x4d0>
 80062d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	4b7f      	ldr	r3, [pc, #508]	; (80064dc <_dtoa_r+0x61c>)
 80062de:	f7f9 ff43 	bl	8000168 <__aeabi_dsub>
 80062e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062e4:	462b      	mov	r3, r5
 80062e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062ea:	f7fa fb85 	bl	80009f8 <__aeabi_dcmpgt>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f040 8281 	bne.w	80067f6 <_dtoa_r+0x936>
 80062f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062fa:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80062fe:	f7fa fb5d 	bl	80009bc <__aeabi_dcmplt>
 8006302:	2800      	cmp	r0, #0
 8006304:	f040 8275 	bne.w	80067f2 <_dtoa_r+0x932>
 8006308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800630c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006312:	2b00      	cmp	r3, #0
 8006314:	f2c0 814b 	blt.w	80065ae <_dtoa_r+0x6ee>
 8006318:	f1ba 0f0e 	cmp.w	sl, #14
 800631c:	f300 8147 	bgt.w	80065ae <_dtoa_r+0x6ee>
 8006320:	4b69      	ldr	r3, [pc, #420]	; (80064c8 <_dtoa_r+0x608>)
 8006322:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800632e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006330:	2b00      	cmp	r3, #0
 8006332:	f280 80d7 	bge.w	80064e4 <_dtoa_r+0x624>
 8006336:	f1b8 0f00 	cmp.w	r8, #0
 800633a:	f300 80d3 	bgt.w	80064e4 <_dtoa_r+0x624>
 800633e:	f040 8257 	bne.w	80067f0 <_dtoa_r+0x930>
 8006342:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006346:	2200      	movs	r2, #0
 8006348:	4b64      	ldr	r3, [pc, #400]	; (80064dc <_dtoa_r+0x61c>)
 800634a:	f7fa f8c5 	bl	80004d8 <__aeabi_dmul>
 800634e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006352:	f7fa fb47 	bl	80009e4 <__aeabi_dcmpge>
 8006356:	4646      	mov	r6, r8
 8006358:	4647      	mov	r7, r8
 800635a:	2800      	cmp	r0, #0
 800635c:	f040 822d 	bne.w	80067ba <_dtoa_r+0x8fa>
 8006360:	9b06      	ldr	r3, [sp, #24]
 8006362:	9a06      	ldr	r2, [sp, #24]
 8006364:	1c5d      	adds	r5, r3, #1
 8006366:	2331      	movs	r3, #49	; 0x31
 8006368:	f10a 0a01 	add.w	sl, sl, #1
 800636c:	7013      	strb	r3, [r2, #0]
 800636e:	e228      	b.n	80067c2 <_dtoa_r+0x902>
 8006370:	07f2      	lsls	r2, r6, #31
 8006372:	d505      	bpl.n	8006380 <_dtoa_r+0x4c0>
 8006374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006378:	f7fa f8ae 	bl	80004d8 <__aeabi_dmul>
 800637c:	2301      	movs	r3, #1
 800637e:	3501      	adds	r5, #1
 8006380:	1076      	asrs	r6, r6, #1
 8006382:	3708      	adds	r7, #8
 8006384:	e76e      	b.n	8006264 <_dtoa_r+0x3a4>
 8006386:	2502      	movs	r5, #2
 8006388:	e771      	b.n	800626e <_dtoa_r+0x3ae>
 800638a:	4657      	mov	r7, sl
 800638c:	4646      	mov	r6, r8
 800638e:	e790      	b.n	80062b2 <_dtoa_r+0x3f2>
 8006390:	4b4d      	ldr	r3, [pc, #308]	; (80064c8 <_dtoa_r+0x608>)
 8006392:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006396:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800639a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639c:	2b00      	cmp	r3, #0
 800639e:	d048      	beq.n	8006432 <_dtoa_r+0x572>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	2000      	movs	r0, #0
 80063a6:	494e      	ldr	r1, [pc, #312]	; (80064e0 <_dtoa_r+0x620>)
 80063a8:	f7fa f9c0 	bl	800072c <__aeabi_ddiv>
 80063ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063b0:	f7f9 feda 	bl	8000168 <__aeabi_dsub>
 80063b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063b8:	9d06      	ldr	r5, [sp, #24]
 80063ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063be:	f7fa fb3b 	bl	8000a38 <__aeabi_d2iz>
 80063c2:	9011      	str	r0, [sp, #68]	; 0x44
 80063c4:	f7fa f81e 	bl	8000404 <__aeabi_i2d>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d0:	f7f9 feca 	bl	8000168 <__aeabi_dsub>
 80063d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063da:	3330      	adds	r3, #48	; 0x30
 80063dc:	f805 3b01 	strb.w	r3, [r5], #1
 80063e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063e4:	f7fa faea 	bl	80009bc <__aeabi_dcmplt>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	d163      	bne.n	80064b4 <_dtoa_r+0x5f4>
 80063ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063f0:	2000      	movs	r0, #0
 80063f2:	4937      	ldr	r1, [pc, #220]	; (80064d0 <_dtoa_r+0x610>)
 80063f4:	f7f9 feb8 	bl	8000168 <__aeabi_dsub>
 80063f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063fc:	f7fa fade 	bl	80009bc <__aeabi_dcmplt>
 8006400:	2800      	cmp	r0, #0
 8006402:	f040 80b5 	bne.w	8006570 <_dtoa_r+0x6b0>
 8006406:	9b06      	ldr	r3, [sp, #24]
 8006408:	1aeb      	subs	r3, r5, r3
 800640a:	429e      	cmp	r6, r3
 800640c:	f77f af7c 	ble.w	8006308 <_dtoa_r+0x448>
 8006410:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006414:	2200      	movs	r2, #0
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <_dtoa_r+0x614>)
 8006418:	f7fa f85e 	bl	80004d8 <__aeabi_dmul>
 800641c:	2200      	movs	r2, #0
 800641e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006426:	4b2b      	ldr	r3, [pc, #172]	; (80064d4 <_dtoa_r+0x614>)
 8006428:	f7fa f856 	bl	80004d8 <__aeabi_dmul>
 800642c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006430:	e7c3      	b.n	80063ba <_dtoa_r+0x4fa>
 8006432:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006436:	f7fa f84f 	bl	80004d8 <__aeabi_dmul>
 800643a:	9b06      	ldr	r3, [sp, #24]
 800643c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006440:	199d      	adds	r5, r3, r6
 8006442:	461e      	mov	r6, r3
 8006444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006448:	f7fa faf6 	bl	8000a38 <__aeabi_d2iz>
 800644c:	9011      	str	r0, [sp, #68]	; 0x44
 800644e:	f7f9 ffd9 	bl	8000404 <__aeabi_i2d>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7f9 fe85 	bl	8000168 <__aeabi_dsub>
 800645e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006464:	3330      	adds	r3, #48	; 0x30
 8006466:	f806 3b01 	strb.w	r3, [r6], #1
 800646a:	42ae      	cmp	r6, r5
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	d124      	bne.n	80064bc <_dtoa_r+0x5fc>
 8006472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <_dtoa_r+0x620>)
 8006478:	f7f9 fe78 	bl	800016c <__adddf3>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006484:	f7fa fab8 	bl	80009f8 <__aeabi_dcmpgt>
 8006488:	2800      	cmp	r0, #0
 800648a:	d171      	bne.n	8006570 <_dtoa_r+0x6b0>
 800648c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006490:	2000      	movs	r0, #0
 8006492:	4913      	ldr	r1, [pc, #76]	; (80064e0 <_dtoa_r+0x620>)
 8006494:	f7f9 fe68 	bl	8000168 <__aeabi_dsub>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064a0:	f7fa fa8c 	bl	80009bc <__aeabi_dcmplt>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f43f af2f 	beq.w	8006308 <_dtoa_r+0x448>
 80064aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80064ae:	1e6a      	subs	r2, r5, #1
 80064b0:	2b30      	cmp	r3, #48	; 0x30
 80064b2:	d001      	beq.n	80064b8 <_dtoa_r+0x5f8>
 80064b4:	46ba      	mov	sl, r7
 80064b6:	e04a      	b.n	800654e <_dtoa_r+0x68e>
 80064b8:	4615      	mov	r5, r2
 80064ba:	e7f6      	b.n	80064aa <_dtoa_r+0x5ea>
 80064bc:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <_dtoa_r+0x614>)
 80064be:	f7fa f80b 	bl	80004d8 <__aeabi_dmul>
 80064c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064c6:	e7bd      	b.n	8006444 <_dtoa_r+0x584>
 80064c8:	080078d0 	.word	0x080078d0
 80064cc:	080078a8 	.word	0x080078a8
 80064d0:	3ff00000 	.word	0x3ff00000
 80064d4:	40240000 	.word	0x40240000
 80064d8:	401c0000 	.word	0x401c0000
 80064dc:	40140000 	.word	0x40140000
 80064e0:	3fe00000 	.word	0x3fe00000
 80064e4:	9d06      	ldr	r5, [sp, #24]
 80064e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80064ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ee:	4630      	mov	r0, r6
 80064f0:	4639      	mov	r1, r7
 80064f2:	f7fa f91b 	bl	800072c <__aeabi_ddiv>
 80064f6:	f7fa fa9f 	bl	8000a38 <__aeabi_d2iz>
 80064fa:	4681      	mov	r9, r0
 80064fc:	f7f9 ff82 	bl	8000404 <__aeabi_i2d>
 8006500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006504:	f7f9 ffe8 	bl	80004d8 <__aeabi_dmul>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4630      	mov	r0, r6
 800650e:	4639      	mov	r1, r7
 8006510:	f7f9 fe2a 	bl	8000168 <__aeabi_dsub>
 8006514:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006518:	f805 6b01 	strb.w	r6, [r5], #1
 800651c:	9e06      	ldr	r6, [sp, #24]
 800651e:	4602      	mov	r2, r0
 8006520:	1bae      	subs	r6, r5, r6
 8006522:	45b0      	cmp	r8, r6
 8006524:	460b      	mov	r3, r1
 8006526:	d135      	bne.n	8006594 <_dtoa_r+0x6d4>
 8006528:	f7f9 fe20 	bl	800016c <__adddf3>
 800652c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	f7fa fa60 	bl	80009f8 <__aeabi_dcmpgt>
 8006538:	b9c8      	cbnz	r0, 800656e <_dtoa_r+0x6ae>
 800653a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa fa31 	bl	80009a8 <__aeabi_dcmpeq>
 8006546:	b110      	cbz	r0, 800654e <_dtoa_r+0x68e>
 8006548:	f019 0f01 	tst.w	r9, #1
 800654c:	d10f      	bne.n	800656e <_dtoa_r+0x6ae>
 800654e:	4659      	mov	r1, fp
 8006550:	4620      	mov	r0, r4
 8006552:	f000 facc 	bl	8006aee <_Bfree>
 8006556:	2300      	movs	r3, #0
 8006558:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800655a:	702b      	strb	r3, [r5, #0]
 800655c:	f10a 0301 	add.w	r3, sl, #1
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006564:	2b00      	cmp	r3, #0
 8006566:	f43f acf3 	beq.w	8005f50 <_dtoa_r+0x90>
 800656a:	601d      	str	r5, [r3, #0]
 800656c:	e4f0      	b.n	8005f50 <_dtoa_r+0x90>
 800656e:	4657      	mov	r7, sl
 8006570:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006574:	1e6b      	subs	r3, r5, #1
 8006576:	2a39      	cmp	r2, #57	; 0x39
 8006578:	d106      	bne.n	8006588 <_dtoa_r+0x6c8>
 800657a:	9a06      	ldr	r2, [sp, #24]
 800657c:	429a      	cmp	r2, r3
 800657e:	d107      	bne.n	8006590 <_dtoa_r+0x6d0>
 8006580:	2330      	movs	r3, #48	; 0x30
 8006582:	7013      	strb	r3, [r2, #0]
 8006584:	4613      	mov	r3, r2
 8006586:	3701      	adds	r7, #1
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	3201      	adds	r2, #1
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e791      	b.n	80064b4 <_dtoa_r+0x5f4>
 8006590:	461d      	mov	r5, r3
 8006592:	e7ed      	b.n	8006570 <_dtoa_r+0x6b0>
 8006594:	2200      	movs	r2, #0
 8006596:	4b99      	ldr	r3, [pc, #612]	; (80067fc <_dtoa_r+0x93c>)
 8006598:	f7f9 ff9e 	bl	80004d8 <__aeabi_dmul>
 800659c:	2200      	movs	r2, #0
 800659e:	2300      	movs	r3, #0
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	f7fa fa00 	bl	80009a8 <__aeabi_dcmpeq>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d09e      	beq.n	80064ea <_dtoa_r+0x62a>
 80065ac:	e7cf      	b.n	800654e <_dtoa_r+0x68e>
 80065ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	f000 8088 	beq.w	80066c6 <_dtoa_r+0x806>
 80065b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80065b8:	2a01      	cmp	r2, #1
 80065ba:	dc6d      	bgt.n	8006698 <_dtoa_r+0x7d8>
 80065bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d066      	beq.n	8006690 <_dtoa_r+0x7d0>
 80065c2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065c6:	464d      	mov	r5, r9
 80065c8:	9e08      	ldr	r6, [sp, #32]
 80065ca:	9a07      	ldr	r2, [sp, #28]
 80065cc:	2101      	movs	r1, #1
 80065ce:	441a      	add	r2, r3
 80065d0:	4620      	mov	r0, r4
 80065d2:	4499      	add	r9, r3
 80065d4:	9207      	str	r2, [sp, #28]
 80065d6:	f000 fb2a 	bl	8006c2e <__i2b>
 80065da:	4607      	mov	r7, r0
 80065dc:	2d00      	cmp	r5, #0
 80065de:	dd0b      	ble.n	80065f8 <_dtoa_r+0x738>
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd08      	ble.n	80065f8 <_dtoa_r+0x738>
 80065e6:	42ab      	cmp	r3, r5
 80065e8:	bfa8      	it	ge
 80065ea:	462b      	movge	r3, r5
 80065ec:	9a07      	ldr	r2, [sp, #28]
 80065ee:	eba9 0903 	sub.w	r9, r9, r3
 80065f2:	1aed      	subs	r5, r5, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	9b08      	ldr	r3, [sp, #32]
 80065fa:	b1eb      	cbz	r3, 8006638 <_dtoa_r+0x778>
 80065fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d065      	beq.n	80066ce <_dtoa_r+0x80e>
 8006602:	b18e      	cbz	r6, 8006628 <_dtoa_r+0x768>
 8006604:	4639      	mov	r1, r7
 8006606:	4632      	mov	r2, r6
 8006608:	4620      	mov	r0, r4
 800660a:	f000 fbaf 	bl	8006d6c <__pow5mult>
 800660e:	465a      	mov	r2, fp
 8006610:	4601      	mov	r1, r0
 8006612:	4607      	mov	r7, r0
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fb13 	bl	8006c40 <__multiply>
 800661a:	4659      	mov	r1, fp
 800661c:	900a      	str	r0, [sp, #40]	; 0x28
 800661e:	4620      	mov	r0, r4
 8006620:	f000 fa65 	bl	8006aee <_Bfree>
 8006624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006626:	469b      	mov	fp, r3
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	1b9a      	subs	r2, r3, r6
 800662c:	d004      	beq.n	8006638 <_dtoa_r+0x778>
 800662e:	4659      	mov	r1, fp
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fb9b 	bl	8006d6c <__pow5mult>
 8006636:	4683      	mov	fp, r0
 8006638:	2101      	movs	r1, #1
 800663a:	4620      	mov	r0, r4
 800663c:	f000 faf7 	bl	8006c2e <__i2b>
 8006640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006642:	4606      	mov	r6, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 81c6 	beq.w	80069d6 <_dtoa_r+0xb16>
 800664a:	461a      	mov	r2, r3
 800664c:	4601      	mov	r1, r0
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fb8c 	bl	8006d6c <__pow5mult>
 8006654:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006656:	4606      	mov	r6, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	dc3e      	bgt.n	80066da <_dtoa_r+0x81a>
 800665c:	9b02      	ldr	r3, [sp, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d137      	bne.n	80066d2 <_dtoa_r+0x812>
 8006662:	9b03      	ldr	r3, [sp, #12]
 8006664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006668:	2b00      	cmp	r3, #0
 800666a:	d134      	bne.n	80066d6 <_dtoa_r+0x816>
 800666c:	9b03      	ldr	r3, [sp, #12]
 800666e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006672:	0d1b      	lsrs	r3, r3, #20
 8006674:	051b      	lsls	r3, r3, #20
 8006676:	b12b      	cbz	r3, 8006684 <_dtoa_r+0x7c4>
 8006678:	9b07      	ldr	r3, [sp, #28]
 800667a:	f109 0901 	add.w	r9, r9, #1
 800667e:	3301      	adds	r3, #1
 8006680:	9307      	str	r3, [sp, #28]
 8006682:	2301      	movs	r3, #1
 8006684:	9308      	str	r3, [sp, #32]
 8006686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006688:	2b00      	cmp	r3, #0
 800668a:	d128      	bne.n	80066de <_dtoa_r+0x81e>
 800668c:	2001      	movs	r0, #1
 800668e:	e02e      	b.n	80066ee <_dtoa_r+0x82e>
 8006690:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006692:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006696:	e796      	b.n	80065c6 <_dtoa_r+0x706>
 8006698:	9b08      	ldr	r3, [sp, #32]
 800669a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800669e:	42b3      	cmp	r3, r6
 80066a0:	bfb7      	itett	lt
 80066a2:	9b08      	ldrlt	r3, [sp, #32]
 80066a4:	1b9e      	subge	r6, r3, r6
 80066a6:	1af2      	sublt	r2, r6, r3
 80066a8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80066aa:	bfbf      	itttt	lt
 80066ac:	9608      	strlt	r6, [sp, #32]
 80066ae:	189b      	addlt	r3, r3, r2
 80066b0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80066b2:	2600      	movlt	r6, #0
 80066b4:	f1b8 0f00 	cmp.w	r8, #0
 80066b8:	bfb9      	ittee	lt
 80066ba:	eba9 0508 	sublt.w	r5, r9, r8
 80066be:	2300      	movlt	r3, #0
 80066c0:	464d      	movge	r5, r9
 80066c2:	4643      	movge	r3, r8
 80066c4:	e781      	b.n	80065ca <_dtoa_r+0x70a>
 80066c6:	9e08      	ldr	r6, [sp, #32]
 80066c8:	464d      	mov	r5, r9
 80066ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80066cc:	e786      	b.n	80065dc <_dtoa_r+0x71c>
 80066ce:	9a08      	ldr	r2, [sp, #32]
 80066d0:	e7ad      	b.n	800662e <_dtoa_r+0x76e>
 80066d2:	2300      	movs	r3, #0
 80066d4:	e7d6      	b.n	8006684 <_dtoa_r+0x7c4>
 80066d6:	9b02      	ldr	r3, [sp, #8]
 80066d8:	e7d4      	b.n	8006684 <_dtoa_r+0x7c4>
 80066da:	2300      	movs	r3, #0
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	6933      	ldr	r3, [r6, #16]
 80066e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80066e4:	6918      	ldr	r0, [r3, #16]
 80066e6:	f000 fa54 	bl	8006b92 <__hi0bits>
 80066ea:	f1c0 0020 	rsb	r0, r0, #32
 80066ee:	9b07      	ldr	r3, [sp, #28]
 80066f0:	4418      	add	r0, r3
 80066f2:	f010 001f 	ands.w	r0, r0, #31
 80066f6:	d047      	beq.n	8006788 <_dtoa_r+0x8c8>
 80066f8:	f1c0 0320 	rsb	r3, r0, #32
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	dd3b      	ble.n	8006778 <_dtoa_r+0x8b8>
 8006700:	9b07      	ldr	r3, [sp, #28]
 8006702:	f1c0 001c 	rsb	r0, r0, #28
 8006706:	4481      	add	r9, r0
 8006708:	4405      	add	r5, r0
 800670a:	4403      	add	r3, r0
 800670c:	9307      	str	r3, [sp, #28]
 800670e:	f1b9 0f00 	cmp.w	r9, #0
 8006712:	dd05      	ble.n	8006720 <_dtoa_r+0x860>
 8006714:	4659      	mov	r1, fp
 8006716:	464a      	mov	r2, r9
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fb75 	bl	8006e08 <__lshift>
 800671e:	4683      	mov	fp, r0
 8006720:	9b07      	ldr	r3, [sp, #28]
 8006722:	2b00      	cmp	r3, #0
 8006724:	dd05      	ble.n	8006732 <_dtoa_r+0x872>
 8006726:	4631      	mov	r1, r6
 8006728:	461a      	mov	r2, r3
 800672a:	4620      	mov	r0, r4
 800672c:	f000 fb6c 	bl	8006e08 <__lshift>
 8006730:	4606      	mov	r6, r0
 8006732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006734:	b353      	cbz	r3, 800678c <_dtoa_r+0x8cc>
 8006736:	4631      	mov	r1, r6
 8006738:	4658      	mov	r0, fp
 800673a:	f000 fbb9 	bl	8006eb0 <__mcmp>
 800673e:	2800      	cmp	r0, #0
 8006740:	da24      	bge.n	800678c <_dtoa_r+0x8cc>
 8006742:	2300      	movs	r3, #0
 8006744:	4659      	mov	r1, fp
 8006746:	220a      	movs	r2, #10
 8006748:	4620      	mov	r0, r4
 800674a:	f000 f9e7 	bl	8006b1c <__multadd>
 800674e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006750:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006754:	4683      	mov	fp, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8144 	beq.w	80069e4 <_dtoa_r+0xb24>
 800675c:	2300      	movs	r3, #0
 800675e:	4639      	mov	r1, r7
 8006760:	220a      	movs	r2, #10
 8006762:	4620      	mov	r0, r4
 8006764:	f000 f9da 	bl	8006b1c <__multadd>
 8006768:	9b04      	ldr	r3, [sp, #16]
 800676a:	4607      	mov	r7, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	dc4d      	bgt.n	800680c <_dtoa_r+0x94c>
 8006770:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006772:	2b02      	cmp	r3, #2
 8006774:	dd4a      	ble.n	800680c <_dtoa_r+0x94c>
 8006776:	e011      	b.n	800679c <_dtoa_r+0x8dc>
 8006778:	d0c9      	beq.n	800670e <_dtoa_r+0x84e>
 800677a:	9a07      	ldr	r2, [sp, #28]
 800677c:	331c      	adds	r3, #28
 800677e:	441a      	add	r2, r3
 8006780:	4499      	add	r9, r3
 8006782:	441d      	add	r5, r3
 8006784:	4613      	mov	r3, r2
 8006786:	e7c1      	b.n	800670c <_dtoa_r+0x84c>
 8006788:	4603      	mov	r3, r0
 800678a:	e7f6      	b.n	800677a <_dtoa_r+0x8ba>
 800678c:	f1b8 0f00 	cmp.w	r8, #0
 8006790:	dc36      	bgt.n	8006800 <_dtoa_r+0x940>
 8006792:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006794:	2b02      	cmp	r3, #2
 8006796:	dd33      	ble.n	8006800 <_dtoa_r+0x940>
 8006798:	f8cd 8010 	str.w	r8, [sp, #16]
 800679c:	9b04      	ldr	r3, [sp, #16]
 800679e:	b963      	cbnz	r3, 80067ba <_dtoa_r+0x8fa>
 80067a0:	4631      	mov	r1, r6
 80067a2:	2205      	movs	r2, #5
 80067a4:	4620      	mov	r0, r4
 80067a6:	f000 f9b9 	bl	8006b1c <__multadd>
 80067aa:	4601      	mov	r1, r0
 80067ac:	4606      	mov	r6, r0
 80067ae:	4658      	mov	r0, fp
 80067b0:	f000 fb7e 	bl	8006eb0 <__mcmp>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f73f add3 	bgt.w	8006360 <_dtoa_r+0x4a0>
 80067ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067bc:	9d06      	ldr	r5, [sp, #24]
 80067be:	ea6f 0a03 	mvn.w	sl, r3
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	4631      	mov	r1, r6
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 f990 	bl	8006aee <_Bfree>
 80067ce:	2f00      	cmp	r7, #0
 80067d0:	f43f aebd 	beq.w	800654e <_dtoa_r+0x68e>
 80067d4:	f1b9 0f00 	cmp.w	r9, #0
 80067d8:	d005      	beq.n	80067e6 <_dtoa_r+0x926>
 80067da:	45b9      	cmp	r9, r7
 80067dc:	d003      	beq.n	80067e6 <_dtoa_r+0x926>
 80067de:	4649      	mov	r1, r9
 80067e0:	4620      	mov	r0, r4
 80067e2:	f000 f984 	bl	8006aee <_Bfree>
 80067e6:	4639      	mov	r1, r7
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 f980 	bl	8006aee <_Bfree>
 80067ee:	e6ae      	b.n	800654e <_dtoa_r+0x68e>
 80067f0:	2600      	movs	r6, #0
 80067f2:	4637      	mov	r7, r6
 80067f4:	e7e1      	b.n	80067ba <_dtoa_r+0x8fa>
 80067f6:	46ba      	mov	sl, r7
 80067f8:	4637      	mov	r7, r6
 80067fa:	e5b1      	b.n	8006360 <_dtoa_r+0x4a0>
 80067fc:	40240000 	.word	0x40240000
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	f8cd 8010 	str.w	r8, [sp, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 80f3 	beq.w	80069f2 <_dtoa_r+0xb32>
 800680c:	2d00      	cmp	r5, #0
 800680e:	dd05      	ble.n	800681c <_dtoa_r+0x95c>
 8006810:	4639      	mov	r1, r7
 8006812:	462a      	mov	r2, r5
 8006814:	4620      	mov	r0, r4
 8006816:	f000 faf7 	bl	8006e08 <__lshift>
 800681a:	4607      	mov	r7, r0
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04c      	beq.n	80068bc <_dtoa_r+0x9fc>
 8006822:	6879      	ldr	r1, [r7, #4]
 8006824:	4620      	mov	r0, r4
 8006826:	f000 f92e 	bl	8006a86 <_Balloc>
 800682a:	4605      	mov	r5, r0
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	f107 010c 	add.w	r1, r7, #12
 8006832:	3202      	adds	r2, #2
 8006834:	0092      	lsls	r2, r2, #2
 8006836:	300c      	adds	r0, #12
 8006838:	f000 f91a 	bl	8006a70 <memcpy>
 800683c:	2201      	movs	r2, #1
 800683e:	4629      	mov	r1, r5
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fae1 	bl	8006e08 <__lshift>
 8006846:	46b9      	mov	r9, r7
 8006848:	4607      	mov	r7, r0
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	9308      	str	r3, [sp, #32]
 8006856:	4631      	mov	r1, r6
 8006858:	4658      	mov	r0, fp
 800685a:	f7ff faa3 	bl	8005da4 <quorem>
 800685e:	4649      	mov	r1, r9
 8006860:	4605      	mov	r5, r0
 8006862:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006866:	4658      	mov	r0, fp
 8006868:	f000 fb22 	bl	8006eb0 <__mcmp>
 800686c:	463a      	mov	r2, r7
 800686e:	9002      	str	r0, [sp, #8]
 8006870:	4631      	mov	r1, r6
 8006872:	4620      	mov	r0, r4
 8006874:	f000 fb36 	bl	8006ee4 <__mdiff>
 8006878:	68c3      	ldr	r3, [r0, #12]
 800687a:	4602      	mov	r2, r0
 800687c:	bb03      	cbnz	r3, 80068c0 <_dtoa_r+0xa00>
 800687e:	4601      	mov	r1, r0
 8006880:	9009      	str	r0, [sp, #36]	; 0x24
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fb14 	bl	8006eb0 <__mcmp>
 8006888:	4603      	mov	r3, r0
 800688a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800688c:	4611      	mov	r1, r2
 800688e:	4620      	mov	r0, r4
 8006890:	9309      	str	r3, [sp, #36]	; 0x24
 8006892:	f000 f92c 	bl	8006aee <_Bfree>
 8006896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006898:	b9a3      	cbnz	r3, 80068c4 <_dtoa_r+0xa04>
 800689a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800689c:	b992      	cbnz	r2, 80068c4 <_dtoa_r+0xa04>
 800689e:	9a08      	ldr	r2, [sp, #32]
 80068a0:	b982      	cbnz	r2, 80068c4 <_dtoa_r+0xa04>
 80068a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068a6:	d029      	beq.n	80068fc <_dtoa_r+0xa3c>
 80068a8:	9b02      	ldr	r3, [sp, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dd01      	ble.n	80068b2 <_dtoa_r+0x9f2>
 80068ae:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80068b2:	9b07      	ldr	r3, [sp, #28]
 80068b4:	1c5d      	adds	r5, r3, #1
 80068b6:	f883 8000 	strb.w	r8, [r3]
 80068ba:	e784      	b.n	80067c6 <_dtoa_r+0x906>
 80068bc:	4638      	mov	r0, r7
 80068be:	e7c2      	b.n	8006846 <_dtoa_r+0x986>
 80068c0:	2301      	movs	r3, #1
 80068c2:	e7e3      	b.n	800688c <_dtoa_r+0x9cc>
 80068c4:	9a02      	ldr	r2, [sp, #8]
 80068c6:	2a00      	cmp	r2, #0
 80068c8:	db04      	blt.n	80068d4 <_dtoa_r+0xa14>
 80068ca:	d123      	bne.n	8006914 <_dtoa_r+0xa54>
 80068cc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068ce:	bb0a      	cbnz	r2, 8006914 <_dtoa_r+0xa54>
 80068d0:	9a08      	ldr	r2, [sp, #32]
 80068d2:	b9fa      	cbnz	r2, 8006914 <_dtoa_r+0xa54>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	ddec      	ble.n	80068b2 <_dtoa_r+0x9f2>
 80068d8:	4659      	mov	r1, fp
 80068da:	2201      	movs	r2, #1
 80068dc:	4620      	mov	r0, r4
 80068de:	f000 fa93 	bl	8006e08 <__lshift>
 80068e2:	4631      	mov	r1, r6
 80068e4:	4683      	mov	fp, r0
 80068e6:	f000 fae3 	bl	8006eb0 <__mcmp>
 80068ea:	2800      	cmp	r0, #0
 80068ec:	dc03      	bgt.n	80068f6 <_dtoa_r+0xa36>
 80068ee:	d1e0      	bne.n	80068b2 <_dtoa_r+0x9f2>
 80068f0:	f018 0f01 	tst.w	r8, #1
 80068f4:	d0dd      	beq.n	80068b2 <_dtoa_r+0x9f2>
 80068f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068fa:	d1d8      	bne.n	80068ae <_dtoa_r+0x9ee>
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	9a07      	ldr	r2, [sp, #28]
 8006900:	1c5d      	adds	r5, r3, #1
 8006902:	2339      	movs	r3, #57	; 0x39
 8006904:	7013      	strb	r3, [r2, #0]
 8006906:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800690a:	1e6a      	subs	r2, r5, #1
 800690c:	2b39      	cmp	r3, #57	; 0x39
 800690e:	d04d      	beq.n	80069ac <_dtoa_r+0xaec>
 8006910:	3301      	adds	r3, #1
 8006912:	e052      	b.n	80069ba <_dtoa_r+0xafa>
 8006914:	9a07      	ldr	r2, [sp, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f102 0501 	add.w	r5, r2, #1
 800691c:	dd06      	ble.n	800692c <_dtoa_r+0xa6c>
 800691e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006922:	d0eb      	beq.n	80068fc <_dtoa_r+0xa3c>
 8006924:	f108 0801 	add.w	r8, r8, #1
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	e7c4      	b.n	80068b6 <_dtoa_r+0x9f6>
 800692c:	9b06      	ldr	r3, [sp, #24]
 800692e:	9a04      	ldr	r2, [sp, #16]
 8006930:	1aeb      	subs	r3, r5, r3
 8006932:	4293      	cmp	r3, r2
 8006934:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006938:	d021      	beq.n	800697e <_dtoa_r+0xabe>
 800693a:	4659      	mov	r1, fp
 800693c:	2300      	movs	r3, #0
 800693e:	220a      	movs	r2, #10
 8006940:	4620      	mov	r0, r4
 8006942:	f000 f8eb 	bl	8006b1c <__multadd>
 8006946:	45b9      	cmp	r9, r7
 8006948:	4683      	mov	fp, r0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	f04f 020a 	mov.w	r2, #10
 8006952:	4649      	mov	r1, r9
 8006954:	4620      	mov	r0, r4
 8006956:	d105      	bne.n	8006964 <_dtoa_r+0xaa4>
 8006958:	f000 f8e0 	bl	8006b1c <__multadd>
 800695c:	4681      	mov	r9, r0
 800695e:	4607      	mov	r7, r0
 8006960:	9507      	str	r5, [sp, #28]
 8006962:	e778      	b.n	8006856 <_dtoa_r+0x996>
 8006964:	f000 f8da 	bl	8006b1c <__multadd>
 8006968:	4639      	mov	r1, r7
 800696a:	4681      	mov	r9, r0
 800696c:	2300      	movs	r3, #0
 800696e:	220a      	movs	r2, #10
 8006970:	4620      	mov	r0, r4
 8006972:	f000 f8d3 	bl	8006b1c <__multadd>
 8006976:	4607      	mov	r7, r0
 8006978:	e7f2      	b.n	8006960 <_dtoa_r+0xaa0>
 800697a:	f04f 0900 	mov.w	r9, #0
 800697e:	4659      	mov	r1, fp
 8006980:	2201      	movs	r2, #1
 8006982:	4620      	mov	r0, r4
 8006984:	f000 fa40 	bl	8006e08 <__lshift>
 8006988:	4631      	mov	r1, r6
 800698a:	4683      	mov	fp, r0
 800698c:	f000 fa90 	bl	8006eb0 <__mcmp>
 8006990:	2800      	cmp	r0, #0
 8006992:	dcb8      	bgt.n	8006906 <_dtoa_r+0xa46>
 8006994:	d102      	bne.n	800699c <_dtoa_r+0xadc>
 8006996:	f018 0f01 	tst.w	r8, #1
 800699a:	d1b4      	bne.n	8006906 <_dtoa_r+0xa46>
 800699c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069a0:	1e6a      	subs	r2, r5, #1
 80069a2:	2b30      	cmp	r3, #48	; 0x30
 80069a4:	f47f af0f 	bne.w	80067c6 <_dtoa_r+0x906>
 80069a8:	4615      	mov	r5, r2
 80069aa:	e7f7      	b.n	800699c <_dtoa_r+0xadc>
 80069ac:	9b06      	ldr	r3, [sp, #24]
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d105      	bne.n	80069be <_dtoa_r+0xafe>
 80069b2:	2331      	movs	r3, #49	; 0x31
 80069b4:	9a06      	ldr	r2, [sp, #24]
 80069b6:	f10a 0a01 	add.w	sl, sl, #1
 80069ba:	7013      	strb	r3, [r2, #0]
 80069bc:	e703      	b.n	80067c6 <_dtoa_r+0x906>
 80069be:	4615      	mov	r5, r2
 80069c0:	e7a1      	b.n	8006906 <_dtoa_r+0xa46>
 80069c2:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <_dtoa_r+0xb60>)
 80069c4:	f7ff bae1 	b.w	8005f8a <_dtoa_r+0xca>
 80069c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f47f aabb 	bne.w	8005f46 <_dtoa_r+0x86>
 80069d0:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <_dtoa_r+0xb64>)
 80069d2:	f7ff bada 	b.w	8005f8a <_dtoa_r+0xca>
 80069d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069d8:	2b01      	cmp	r3, #1
 80069da:	f77f ae3f 	ble.w	800665c <_dtoa_r+0x79c>
 80069de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069e0:	9308      	str	r3, [sp, #32]
 80069e2:	e653      	b.n	800668c <_dtoa_r+0x7cc>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	dc03      	bgt.n	80069f2 <_dtoa_r+0xb32>
 80069ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	f73f aed5 	bgt.w	800679c <_dtoa_r+0x8dc>
 80069f2:	9d06      	ldr	r5, [sp, #24]
 80069f4:	4631      	mov	r1, r6
 80069f6:	4658      	mov	r0, fp
 80069f8:	f7ff f9d4 	bl	8005da4 <quorem>
 80069fc:	9b06      	ldr	r3, [sp, #24]
 80069fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a02:	f805 8b01 	strb.w	r8, [r5], #1
 8006a06:	9a04      	ldr	r2, [sp, #16]
 8006a08:	1aeb      	subs	r3, r5, r3
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	ddb5      	ble.n	800697a <_dtoa_r+0xaba>
 8006a0e:	4659      	mov	r1, fp
 8006a10:	2300      	movs	r3, #0
 8006a12:	220a      	movs	r2, #10
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f881 	bl	8006b1c <__multadd>
 8006a1a:	4683      	mov	fp, r0
 8006a1c:	e7ea      	b.n	80069f4 <_dtoa_r+0xb34>
 8006a1e:	bf00      	nop
 8006a20:	08007874 	.word	0x08007874
 8006a24:	08007898 	.word	0x08007898

08006a28 <_localeconv_r>:
 8006a28:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <_localeconv_r+0x14>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6a18      	ldr	r0, [r3, #32]
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <_localeconv_r+0x18>)
 8006a30:	2800      	cmp	r0, #0
 8006a32:	bf08      	it	eq
 8006a34:	4618      	moveq	r0, r3
 8006a36:	30f0      	adds	r0, #240	; 0xf0
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	20000020 	.word	0x20000020
 8006a40:	20000084 	.word	0x20000084

08006a44 <malloc>:
 8006a44:	4b02      	ldr	r3, [pc, #8]	; (8006a50 <malloc+0xc>)
 8006a46:	4601      	mov	r1, r0
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	f000 bb53 	b.w	80070f4 <_malloc_r>
 8006a4e:	bf00      	nop
 8006a50:	20000020 	.word	0x20000020

08006a54 <memchr>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	b2c9      	uxtb	r1, r1
 8006a58:	4402      	add	r2, r0
 8006a5a:	4290      	cmp	r0, r2
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	d101      	bne.n	8006a64 <memchr+0x10>
 8006a60:	2300      	movs	r3, #0
 8006a62:	e003      	b.n	8006a6c <memchr+0x18>
 8006a64:	781c      	ldrb	r4, [r3, #0]
 8006a66:	3001      	adds	r0, #1
 8006a68:	428c      	cmp	r4, r1
 8006a6a:	d1f6      	bne.n	8006a5a <memchr+0x6>
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	bd10      	pop	{r4, pc}

08006a70 <memcpy>:
 8006a70:	b510      	push	{r4, lr}
 8006a72:	1e43      	subs	r3, r0, #1
 8006a74:	440a      	add	r2, r1
 8006a76:	4291      	cmp	r1, r2
 8006a78:	d100      	bne.n	8006a7c <memcpy+0xc>
 8006a7a:	bd10      	pop	{r4, pc}
 8006a7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a84:	e7f7      	b.n	8006a76 <memcpy+0x6>

08006a86 <_Balloc>:
 8006a86:	b570      	push	{r4, r5, r6, lr}
 8006a88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	460e      	mov	r6, r1
 8006a8e:	b93d      	cbnz	r5, 8006aa0 <_Balloc+0x1a>
 8006a90:	2010      	movs	r0, #16
 8006a92:	f7ff ffd7 	bl	8006a44 <malloc>
 8006a96:	6260      	str	r0, [r4, #36]	; 0x24
 8006a98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a9c:	6005      	str	r5, [r0, #0]
 8006a9e:	60c5      	str	r5, [r0, #12]
 8006aa0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006aa2:	68eb      	ldr	r3, [r5, #12]
 8006aa4:	b183      	cbz	r3, 8006ac8 <_Balloc+0x42>
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006aae:	b9b8      	cbnz	r0, 8006ae0 <_Balloc+0x5a>
 8006ab0:	2101      	movs	r1, #1
 8006ab2:	fa01 f506 	lsl.w	r5, r1, r6
 8006ab6:	1d6a      	adds	r2, r5, #5
 8006ab8:	0092      	lsls	r2, r2, #2
 8006aba:	4620      	mov	r0, r4
 8006abc:	f000 fabf 	bl	800703e <_calloc_r>
 8006ac0:	b160      	cbz	r0, 8006adc <_Balloc+0x56>
 8006ac2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006ac6:	e00e      	b.n	8006ae6 <_Balloc+0x60>
 8006ac8:	2221      	movs	r2, #33	; 0x21
 8006aca:	2104      	movs	r1, #4
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fab6 	bl	800703e <_calloc_r>
 8006ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ad4:	60e8      	str	r0, [r5, #12]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e4      	bne.n	8006aa6 <_Balloc+0x20>
 8006adc:	2000      	movs	r0, #0
 8006ade:	bd70      	pop	{r4, r5, r6, pc}
 8006ae0:	6802      	ldr	r2, [r0, #0]
 8006ae2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006aec:	e7f7      	b.n	8006ade <_Balloc+0x58>

08006aee <_Bfree>:
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006af2:	4606      	mov	r6, r0
 8006af4:	460d      	mov	r5, r1
 8006af6:	b93c      	cbnz	r4, 8006b08 <_Bfree+0x1a>
 8006af8:	2010      	movs	r0, #16
 8006afa:	f7ff ffa3 	bl	8006a44 <malloc>
 8006afe:	6270      	str	r0, [r6, #36]	; 0x24
 8006b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b04:	6004      	str	r4, [r0, #0]
 8006b06:	60c4      	str	r4, [r0, #12]
 8006b08:	b13d      	cbz	r5, 8006b1a <_Bfree+0x2c>
 8006b0a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b0c:	686a      	ldr	r2, [r5, #4]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b14:	6029      	str	r1, [r5, #0]
 8006b16:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}

08006b1c <__multadd>:
 8006b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b20:	461f      	mov	r7, r3
 8006b22:	4606      	mov	r6, r0
 8006b24:	460c      	mov	r4, r1
 8006b26:	2300      	movs	r3, #0
 8006b28:	690d      	ldr	r5, [r1, #16]
 8006b2a:	f101 0c14 	add.w	ip, r1, #20
 8006b2e:	f8dc 0000 	ldr.w	r0, [ip]
 8006b32:	3301      	adds	r3, #1
 8006b34:	b281      	uxth	r1, r0
 8006b36:	fb02 7101 	mla	r1, r2, r1, r7
 8006b3a:	0c00      	lsrs	r0, r0, #16
 8006b3c:	0c0f      	lsrs	r7, r1, #16
 8006b3e:	fb02 7000 	mla	r0, r2, r0, r7
 8006b42:	b289      	uxth	r1, r1
 8006b44:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b52:	dcec      	bgt.n	8006b2e <__multadd+0x12>
 8006b54:	b1d7      	cbz	r7, 8006b8c <__multadd+0x70>
 8006b56:	68a3      	ldr	r3, [r4, #8]
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc12      	bgt.n	8006b82 <__multadd+0x66>
 8006b5c:	6861      	ldr	r1, [r4, #4]
 8006b5e:	4630      	mov	r0, r6
 8006b60:	3101      	adds	r1, #1
 8006b62:	f7ff ff90 	bl	8006a86 <_Balloc>
 8006b66:	4680      	mov	r8, r0
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	f104 010c 	add.w	r1, r4, #12
 8006b6e:	3202      	adds	r2, #2
 8006b70:	0092      	lsls	r2, r2, #2
 8006b72:	300c      	adds	r0, #12
 8006b74:	f7ff ff7c 	bl	8006a70 <memcpy>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f7ff ffb7 	bl	8006aee <_Bfree>
 8006b80:	4644      	mov	r4, r8
 8006b82:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b86:	3501      	adds	r5, #1
 8006b88:	615f      	str	r7, [r3, #20]
 8006b8a:	6125      	str	r5, [r4, #16]
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b92 <__hi0bits>:
 8006b92:	0c02      	lsrs	r2, r0, #16
 8006b94:	0412      	lsls	r2, r2, #16
 8006b96:	4603      	mov	r3, r0
 8006b98:	b9b2      	cbnz	r2, 8006bc8 <__hi0bits+0x36>
 8006b9a:	0403      	lsls	r3, r0, #16
 8006b9c:	2010      	movs	r0, #16
 8006b9e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006ba2:	bf04      	itt	eq
 8006ba4:	021b      	lsleq	r3, r3, #8
 8006ba6:	3008      	addeq	r0, #8
 8006ba8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006bac:	bf04      	itt	eq
 8006bae:	011b      	lsleq	r3, r3, #4
 8006bb0:	3004      	addeq	r0, #4
 8006bb2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006bb6:	bf04      	itt	eq
 8006bb8:	009b      	lsleq	r3, r3, #2
 8006bba:	3002      	addeq	r0, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	db06      	blt.n	8006bce <__hi0bits+0x3c>
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	d503      	bpl.n	8006bcc <__hi0bits+0x3a>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	4770      	bx	lr
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7e8      	b.n	8006b9e <__hi0bits+0xc>
 8006bcc:	2020      	movs	r0, #32
 8006bce:	4770      	bx	lr

08006bd0 <__lo0bits>:
 8006bd0:	6803      	ldr	r3, [r0, #0]
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	f013 0207 	ands.w	r2, r3, #7
 8006bd8:	d00b      	beq.n	8006bf2 <__lo0bits+0x22>
 8006bda:	07da      	lsls	r2, r3, #31
 8006bdc:	d423      	bmi.n	8006c26 <__lo0bits+0x56>
 8006bde:	0798      	lsls	r0, r3, #30
 8006be0:	bf49      	itett	mi
 8006be2:	085b      	lsrmi	r3, r3, #1
 8006be4:	089b      	lsrpl	r3, r3, #2
 8006be6:	2001      	movmi	r0, #1
 8006be8:	600b      	strmi	r3, [r1, #0]
 8006bea:	bf5c      	itt	pl
 8006bec:	600b      	strpl	r3, [r1, #0]
 8006bee:	2002      	movpl	r0, #2
 8006bf0:	4770      	bx	lr
 8006bf2:	b298      	uxth	r0, r3
 8006bf4:	b9a8      	cbnz	r0, 8006c22 <__lo0bits+0x52>
 8006bf6:	2010      	movs	r0, #16
 8006bf8:	0c1b      	lsrs	r3, r3, #16
 8006bfa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006bfe:	bf04      	itt	eq
 8006c00:	0a1b      	lsreq	r3, r3, #8
 8006c02:	3008      	addeq	r0, #8
 8006c04:	071a      	lsls	r2, r3, #28
 8006c06:	bf04      	itt	eq
 8006c08:	091b      	lsreq	r3, r3, #4
 8006c0a:	3004      	addeq	r0, #4
 8006c0c:	079a      	lsls	r2, r3, #30
 8006c0e:	bf04      	itt	eq
 8006c10:	089b      	lsreq	r3, r3, #2
 8006c12:	3002      	addeq	r0, #2
 8006c14:	07da      	lsls	r2, r3, #31
 8006c16:	d402      	bmi.n	8006c1e <__lo0bits+0x4e>
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	d006      	beq.n	8006c2a <__lo0bits+0x5a>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	600b      	str	r3, [r1, #0]
 8006c20:	4770      	bx	lr
 8006c22:	4610      	mov	r0, r2
 8006c24:	e7e9      	b.n	8006bfa <__lo0bits+0x2a>
 8006c26:	2000      	movs	r0, #0
 8006c28:	4770      	bx	lr
 8006c2a:	2020      	movs	r0, #32
 8006c2c:	4770      	bx	lr

08006c2e <__i2b>:
 8006c2e:	b510      	push	{r4, lr}
 8006c30:	460c      	mov	r4, r1
 8006c32:	2101      	movs	r1, #1
 8006c34:	f7ff ff27 	bl	8006a86 <_Balloc>
 8006c38:	2201      	movs	r2, #1
 8006c3a:	6144      	str	r4, [r0, #20]
 8006c3c:	6102      	str	r2, [r0, #16]
 8006c3e:	bd10      	pop	{r4, pc}

08006c40 <__multiply>:
 8006c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	4614      	mov	r4, r2
 8006c46:	690a      	ldr	r2, [r1, #16]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	4688      	mov	r8, r1
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	bfbe      	ittt	lt
 8006c50:	460b      	movlt	r3, r1
 8006c52:	46a0      	movlt	r8, r4
 8006c54:	461c      	movlt	r4, r3
 8006c56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c66:	eb07 0609 	add.w	r6, r7, r9
 8006c6a:	42b3      	cmp	r3, r6
 8006c6c:	bfb8      	it	lt
 8006c6e:	3101      	addlt	r1, #1
 8006c70:	f7ff ff09 	bl	8006a86 <_Balloc>
 8006c74:	f100 0514 	add.w	r5, r0, #20
 8006c78:	462b      	mov	r3, r5
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006c80:	4573      	cmp	r3, lr
 8006c82:	d316      	bcc.n	8006cb2 <__multiply+0x72>
 8006c84:	f104 0214 	add.w	r2, r4, #20
 8006c88:	f108 0114 	add.w	r1, r8, #20
 8006c8c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006c90:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	9b00      	ldr	r3, [sp, #0]
 8006c98:	9201      	str	r2, [sp, #4]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d80c      	bhi.n	8006cb8 <__multiply+0x78>
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	dd03      	ble.n	8006caa <__multiply+0x6a>
 8006ca2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d05d      	beq.n	8006d66 <__multiply+0x126>
 8006caa:	6106      	str	r6, [r0, #16]
 8006cac:	b003      	add	sp, #12
 8006cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb2:	f843 2b04 	str.w	r2, [r3], #4
 8006cb6:	e7e3      	b.n	8006c80 <__multiply+0x40>
 8006cb8:	f8b2 b000 	ldrh.w	fp, [r2]
 8006cbc:	f1bb 0f00 	cmp.w	fp, #0
 8006cc0:	d023      	beq.n	8006d0a <__multiply+0xca>
 8006cc2:	4689      	mov	r9, r1
 8006cc4:	46ac      	mov	ip, r5
 8006cc6:	f04f 0800 	mov.w	r8, #0
 8006cca:	f859 4b04 	ldr.w	r4, [r9], #4
 8006cce:	f8dc a000 	ldr.w	sl, [ip]
 8006cd2:	b2a3      	uxth	r3, r4
 8006cd4:	fa1f fa8a 	uxth.w	sl, sl
 8006cd8:	fb0b a303 	mla	r3, fp, r3, sl
 8006cdc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ce0:	f8dc 4000 	ldr.w	r4, [ip]
 8006ce4:	4443      	add	r3, r8
 8006ce6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006cea:	fb0b 840a 	mla	r4, fp, sl, r8
 8006cee:	46e2      	mov	sl, ip
 8006cf0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cfa:	454f      	cmp	r7, r9
 8006cfc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006d00:	f84a 3b04 	str.w	r3, [sl], #4
 8006d04:	d82b      	bhi.n	8006d5e <__multiply+0x11e>
 8006d06:	f8cc 8004 	str.w	r8, [ip, #4]
 8006d0a:	9b01      	ldr	r3, [sp, #4]
 8006d0c:	3204      	adds	r2, #4
 8006d0e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006d12:	f1ba 0f00 	cmp.w	sl, #0
 8006d16:	d020      	beq.n	8006d5a <__multiply+0x11a>
 8006d18:	4689      	mov	r9, r1
 8006d1a:	46a8      	mov	r8, r5
 8006d1c:	f04f 0b00 	mov.w	fp, #0
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	f8b9 c000 	ldrh.w	ip, [r9]
 8006d26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006d30:	46c4      	mov	ip, r8
 8006d32:	445c      	add	r4, fp
 8006d34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006d38:	f84c 3b04 	str.w	r3, [ip], #4
 8006d3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	fb0a b303 	mla	r3, sl, r3, fp
 8006d4a:	454f      	cmp	r7, r9
 8006d4c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006d50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006d54:	d805      	bhi.n	8006d62 <__multiply+0x122>
 8006d56:	f8c8 3004 	str.w	r3, [r8, #4]
 8006d5a:	3504      	adds	r5, #4
 8006d5c:	e79b      	b.n	8006c96 <__multiply+0x56>
 8006d5e:	46d4      	mov	ip, sl
 8006d60:	e7b3      	b.n	8006cca <__multiply+0x8a>
 8006d62:	46e0      	mov	r8, ip
 8006d64:	e7dd      	b.n	8006d22 <__multiply+0xe2>
 8006d66:	3e01      	subs	r6, #1
 8006d68:	e799      	b.n	8006c9e <__multiply+0x5e>
	...

08006d6c <__pow5mult>:
 8006d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4615      	mov	r5, r2
 8006d72:	f012 0203 	ands.w	r2, r2, #3
 8006d76:	4606      	mov	r6, r0
 8006d78:	460f      	mov	r7, r1
 8006d7a:	d007      	beq.n	8006d8c <__pow5mult+0x20>
 8006d7c:	4c21      	ldr	r4, [pc, #132]	; (8006e04 <__pow5mult+0x98>)
 8006d7e:	3a01      	subs	r2, #1
 8006d80:	2300      	movs	r3, #0
 8006d82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d86:	f7ff fec9 	bl	8006b1c <__multadd>
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	10ad      	asrs	r5, r5, #2
 8006d8e:	d035      	beq.n	8006dfc <__pow5mult+0x90>
 8006d90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d92:	b93c      	cbnz	r4, 8006da4 <__pow5mult+0x38>
 8006d94:	2010      	movs	r0, #16
 8006d96:	f7ff fe55 	bl	8006a44 <malloc>
 8006d9a:	6270      	str	r0, [r6, #36]	; 0x24
 8006d9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006da0:	6004      	str	r4, [r0, #0]
 8006da2:	60c4      	str	r4, [r0, #12]
 8006da4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006da8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dac:	b94c      	cbnz	r4, 8006dc2 <__pow5mult+0x56>
 8006dae:	f240 2171 	movw	r1, #625	; 0x271
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ff3b 	bl	8006c2e <__i2b>
 8006db8:	2300      	movs	r3, #0
 8006dba:	4604      	mov	r4, r0
 8006dbc:	f8c8 0008 	str.w	r0, [r8, #8]
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	f04f 0800 	mov.w	r8, #0
 8006dc6:	07eb      	lsls	r3, r5, #31
 8006dc8:	d50a      	bpl.n	8006de0 <__pow5mult+0x74>
 8006dca:	4639      	mov	r1, r7
 8006dcc:	4622      	mov	r2, r4
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff ff36 	bl	8006c40 <__multiply>
 8006dd4:	4681      	mov	r9, r0
 8006dd6:	4639      	mov	r1, r7
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fe88 	bl	8006aee <_Bfree>
 8006dde:	464f      	mov	r7, r9
 8006de0:	106d      	asrs	r5, r5, #1
 8006de2:	d00b      	beq.n	8006dfc <__pow5mult+0x90>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	b938      	cbnz	r0, 8006df8 <__pow5mult+0x8c>
 8006de8:	4622      	mov	r2, r4
 8006dea:	4621      	mov	r1, r4
 8006dec:	4630      	mov	r0, r6
 8006dee:	f7ff ff27 	bl	8006c40 <__multiply>
 8006df2:	6020      	str	r0, [r4, #0]
 8006df4:	f8c0 8000 	str.w	r8, [r0]
 8006df8:	4604      	mov	r4, r0
 8006dfa:	e7e4      	b.n	8006dc6 <__pow5mult+0x5a>
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e02:	bf00      	nop
 8006e04:	08007998 	.word	0x08007998

08006e08 <__lshift>:
 8006e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	4607      	mov	r7, r0
 8006e10:	4616      	mov	r6, r2
 8006e12:	6923      	ldr	r3, [r4, #16]
 8006e14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e18:	eb0a 0903 	add.w	r9, sl, r3
 8006e1c:	6849      	ldr	r1, [r1, #4]
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	f109 0501 	add.w	r5, r9, #1
 8006e24:	42ab      	cmp	r3, r5
 8006e26:	db32      	blt.n	8006e8e <__lshift+0x86>
 8006e28:	4638      	mov	r0, r7
 8006e2a:	f7ff fe2c 	bl	8006a86 <_Balloc>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4680      	mov	r8, r0
 8006e32:	461a      	mov	r2, r3
 8006e34:	f100 0114 	add.w	r1, r0, #20
 8006e38:	4553      	cmp	r3, sl
 8006e3a:	db2b      	blt.n	8006e94 <__lshift+0x8c>
 8006e3c:	6920      	ldr	r0, [r4, #16]
 8006e3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e42:	f104 0314 	add.w	r3, r4, #20
 8006e46:	f016 021f 	ands.w	r2, r6, #31
 8006e4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e52:	d025      	beq.n	8006ea0 <__lshift+0x98>
 8006e54:	2000      	movs	r0, #0
 8006e56:	f1c2 0e20 	rsb	lr, r2, #32
 8006e5a:	468a      	mov	sl, r1
 8006e5c:	681e      	ldr	r6, [r3, #0]
 8006e5e:	4096      	lsls	r6, r2
 8006e60:	4330      	orrs	r0, r6
 8006e62:	f84a 0b04 	str.w	r0, [sl], #4
 8006e66:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e6a:	459c      	cmp	ip, r3
 8006e6c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006e70:	d814      	bhi.n	8006e9c <__lshift+0x94>
 8006e72:	6048      	str	r0, [r1, #4]
 8006e74:	b108      	cbz	r0, 8006e7a <__lshift+0x72>
 8006e76:	f109 0502 	add.w	r5, r9, #2
 8006e7a:	3d01      	subs	r5, #1
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e82:	4621      	mov	r1, r4
 8006e84:	f7ff fe33 	bl	8006aee <_Bfree>
 8006e88:	4640      	mov	r0, r8
 8006e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8e:	3101      	adds	r1, #1
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	e7c7      	b.n	8006e24 <__lshift+0x1c>
 8006e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	e7cd      	b.n	8006e38 <__lshift+0x30>
 8006e9c:	4651      	mov	r1, sl
 8006e9e:	e7dc      	b.n	8006e5a <__lshift+0x52>
 8006ea0:	3904      	subs	r1, #4
 8006ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea6:	459c      	cmp	ip, r3
 8006ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eac:	d8f9      	bhi.n	8006ea2 <__lshift+0x9a>
 8006eae:	e7e4      	b.n	8006e7a <__lshift+0x72>

08006eb0 <__mcmp>:
 8006eb0:	6903      	ldr	r3, [r0, #16]
 8006eb2:	690a      	ldr	r2, [r1, #16]
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	1a9b      	subs	r3, r3, r2
 8006eb8:	d10c      	bne.n	8006ed4 <__mcmp+0x24>
 8006eba:	0092      	lsls	r2, r2, #2
 8006ebc:	3014      	adds	r0, #20
 8006ebe:	3114      	adds	r1, #20
 8006ec0:	1884      	adds	r4, r0, r2
 8006ec2:	4411      	add	r1, r2
 8006ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ecc:	4295      	cmp	r5, r2
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x28>
 8006ed0:	d305      	bcc.n	8006ede <__mcmp+0x2e>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	42a0      	cmp	r0, r4
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x14>
 8006edc:	e7fa      	b.n	8006ed4 <__mcmp+0x24>
 8006ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ee2:	e7f7      	b.n	8006ed4 <__mcmp+0x24>

08006ee4 <__mdiff>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	460d      	mov	r5, r1
 8006eea:	4607      	mov	r7, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4628      	mov	r0, r5
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	f7ff ffdd 	bl	8006eb0 <__mcmp>
 8006ef6:	1e06      	subs	r6, r0, #0
 8006ef8:	d108      	bne.n	8006f0c <__mdiff+0x28>
 8006efa:	4631      	mov	r1, r6
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff fdc2 	bl	8006a86 <_Balloc>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0c:	bfa4      	itt	ge
 8006f0e:	4623      	movge	r3, r4
 8006f10:	462c      	movge	r4, r5
 8006f12:	4638      	mov	r0, r7
 8006f14:	6861      	ldr	r1, [r4, #4]
 8006f16:	bfa6      	itte	ge
 8006f18:	461d      	movge	r5, r3
 8006f1a:	2600      	movge	r6, #0
 8006f1c:	2601      	movlt	r6, #1
 8006f1e:	f7ff fdb2 	bl	8006a86 <_Balloc>
 8006f22:	f04f 0e00 	mov.w	lr, #0
 8006f26:	60c6      	str	r6, [r0, #12]
 8006f28:	692b      	ldr	r3, [r5, #16]
 8006f2a:	6926      	ldr	r6, [r4, #16]
 8006f2c:	f104 0214 	add.w	r2, r4, #20
 8006f30:	f105 0914 	add.w	r9, r5, #20
 8006f34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006f38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006f3c:	f100 0114 	add.w	r1, r0, #20
 8006f40:	f852 ab04 	ldr.w	sl, [r2], #4
 8006f44:	f859 5b04 	ldr.w	r5, [r9], #4
 8006f48:	fa1f f38a 	uxth.w	r3, sl
 8006f4c:	4473      	add	r3, lr
 8006f4e:	b2ac      	uxth	r4, r5
 8006f50:	1b1b      	subs	r3, r3, r4
 8006f52:	0c2c      	lsrs	r4, r5, #16
 8006f54:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006f58:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006f62:	45c8      	cmp	r8, r9
 8006f64:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006f68:	4694      	mov	ip, r2
 8006f6a:	f841 4b04 	str.w	r4, [r1], #4
 8006f6e:	d8e7      	bhi.n	8006f40 <__mdiff+0x5c>
 8006f70:	45bc      	cmp	ip, r7
 8006f72:	d304      	bcc.n	8006f7e <__mdiff+0x9a>
 8006f74:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006f78:	b183      	cbz	r3, 8006f9c <__mdiff+0xb8>
 8006f7a:	6106      	str	r6, [r0, #16]
 8006f7c:	e7c4      	b.n	8006f08 <__mdiff+0x24>
 8006f7e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006f82:	b2a2      	uxth	r2, r4
 8006f84:	4472      	add	r2, lr
 8006f86:	1413      	asrs	r3, r2, #16
 8006f88:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f8c:	b292      	uxth	r2, r2
 8006f8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f92:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006f96:	f841 2b04 	str.w	r2, [r1], #4
 8006f9a:	e7e9      	b.n	8006f70 <__mdiff+0x8c>
 8006f9c:	3e01      	subs	r6, #1
 8006f9e:	e7e9      	b.n	8006f74 <__mdiff+0x90>

08006fa0 <__d2b>:
 8006fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006fa4:	461c      	mov	r4, r3
 8006fa6:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006faa:	2101      	movs	r1, #1
 8006fac:	4690      	mov	r8, r2
 8006fae:	f7ff fd6a 	bl	8006a86 <_Balloc>
 8006fb2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006fb6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006fba:	4607      	mov	r7, r0
 8006fbc:	bb34      	cbnz	r4, 800700c <__d2b+0x6c>
 8006fbe:	9201      	str	r2, [sp, #4]
 8006fc0:	f1b8 0200 	subs.w	r2, r8, #0
 8006fc4:	d027      	beq.n	8007016 <__d2b+0x76>
 8006fc6:	a802      	add	r0, sp, #8
 8006fc8:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006fcc:	f7ff fe00 	bl	8006bd0 <__lo0bits>
 8006fd0:	9900      	ldr	r1, [sp, #0]
 8006fd2:	b1f0      	cbz	r0, 8007012 <__d2b+0x72>
 8006fd4:	9a01      	ldr	r2, [sp, #4]
 8006fd6:	f1c0 0320 	rsb	r3, r0, #32
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	40c2      	lsrs	r2, r0
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	9201      	str	r2, [sp, #4]
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bf14      	ite	ne
 8006fec:	2102      	movne	r1, #2
 8006fee:	2101      	moveq	r1, #1
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	6139      	str	r1, [r7, #16]
 8006ff4:	b1c4      	cbz	r4, 8007028 <__d2b+0x88>
 8006ff6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ffa:	4404      	add	r4, r0
 8006ffc:	6034      	str	r4, [r6, #0]
 8006ffe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007002:	6028      	str	r0, [r5, #0]
 8007004:	4638      	mov	r0, r7
 8007006:	b002      	add	sp, #8
 8007008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800700c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007010:	e7d5      	b.n	8006fbe <__d2b+0x1e>
 8007012:	6179      	str	r1, [r7, #20]
 8007014:	e7e7      	b.n	8006fe6 <__d2b+0x46>
 8007016:	a801      	add	r0, sp, #4
 8007018:	f7ff fdda 	bl	8006bd0 <__lo0bits>
 800701c:	2101      	movs	r1, #1
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	6139      	str	r1, [r7, #16]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	3020      	adds	r0, #32
 8007026:	e7e5      	b.n	8006ff4 <__d2b+0x54>
 8007028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800702c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007030:	6030      	str	r0, [r6, #0]
 8007032:	6918      	ldr	r0, [r3, #16]
 8007034:	f7ff fdad 	bl	8006b92 <__hi0bits>
 8007038:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800703c:	e7e1      	b.n	8007002 <__d2b+0x62>

0800703e <_calloc_r>:
 800703e:	b538      	push	{r3, r4, r5, lr}
 8007040:	fb02 f401 	mul.w	r4, r2, r1
 8007044:	4621      	mov	r1, r4
 8007046:	f000 f855 	bl	80070f4 <_malloc_r>
 800704a:	4605      	mov	r5, r0
 800704c:	b118      	cbz	r0, 8007056 <_calloc_r+0x18>
 800704e:	4622      	mov	r2, r4
 8007050:	2100      	movs	r1, #0
 8007052:	f7fe fa2f 	bl	80054b4 <memset>
 8007056:	4628      	mov	r0, r5
 8007058:	bd38      	pop	{r3, r4, r5, pc}
	...

0800705c <_free_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4605      	mov	r5, r0
 8007060:	2900      	cmp	r1, #0
 8007062:	d043      	beq.n	80070ec <_free_r+0x90>
 8007064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007068:	1f0c      	subs	r4, r1, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	bfb8      	it	lt
 800706e:	18e4      	addlt	r4, r4, r3
 8007070:	f000 fa27 	bl	80074c2 <__malloc_lock>
 8007074:	4a1e      	ldr	r2, [pc, #120]	; (80070f0 <_free_r+0x94>)
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	4610      	mov	r0, r2
 800707a:	b933      	cbnz	r3, 800708a <_free_r+0x2e>
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6014      	str	r4, [r2, #0]
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007086:	f000 ba1d 	b.w	80074c4 <__malloc_unlock>
 800708a:	42a3      	cmp	r3, r4
 800708c:	d90b      	bls.n	80070a6 <_free_r+0x4a>
 800708e:	6821      	ldr	r1, [r4, #0]
 8007090:	1862      	adds	r2, r4, r1
 8007092:	4293      	cmp	r3, r2
 8007094:	bf01      	itttt	eq
 8007096:	681a      	ldreq	r2, [r3, #0]
 8007098:	685b      	ldreq	r3, [r3, #4]
 800709a:	1852      	addeq	r2, r2, r1
 800709c:	6022      	streq	r2, [r4, #0]
 800709e:	6063      	str	r3, [r4, #4]
 80070a0:	6004      	str	r4, [r0, #0]
 80070a2:	e7ed      	b.n	8007080 <_free_r+0x24>
 80070a4:	4613      	mov	r3, r2
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	b10a      	cbz	r2, 80070ae <_free_r+0x52>
 80070aa:	42a2      	cmp	r2, r4
 80070ac:	d9fa      	bls.n	80070a4 <_free_r+0x48>
 80070ae:	6819      	ldr	r1, [r3, #0]
 80070b0:	1858      	adds	r0, r3, r1
 80070b2:	42a0      	cmp	r0, r4
 80070b4:	d10b      	bne.n	80070ce <_free_r+0x72>
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	4401      	add	r1, r0
 80070ba:	1858      	adds	r0, r3, r1
 80070bc:	4282      	cmp	r2, r0
 80070be:	6019      	str	r1, [r3, #0]
 80070c0:	d1de      	bne.n	8007080 <_free_r+0x24>
 80070c2:	6810      	ldr	r0, [r2, #0]
 80070c4:	6852      	ldr	r2, [r2, #4]
 80070c6:	4401      	add	r1, r0
 80070c8:	6019      	str	r1, [r3, #0]
 80070ca:	605a      	str	r2, [r3, #4]
 80070cc:	e7d8      	b.n	8007080 <_free_r+0x24>
 80070ce:	d902      	bls.n	80070d6 <_free_r+0x7a>
 80070d0:	230c      	movs	r3, #12
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	e7d4      	b.n	8007080 <_free_r+0x24>
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	1821      	adds	r1, r4, r0
 80070da:	428a      	cmp	r2, r1
 80070dc:	bf01      	itttt	eq
 80070de:	6811      	ldreq	r1, [r2, #0]
 80070e0:	6852      	ldreq	r2, [r2, #4]
 80070e2:	1809      	addeq	r1, r1, r0
 80070e4:	6021      	streq	r1, [r4, #0]
 80070e6:	6062      	str	r2, [r4, #4]
 80070e8:	605c      	str	r4, [r3, #4]
 80070ea:	e7c9      	b.n	8007080 <_free_r+0x24>
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	20000268 	.word	0x20000268

080070f4 <_malloc_r>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	1ccd      	adds	r5, r1, #3
 80070f8:	f025 0503 	bic.w	r5, r5, #3
 80070fc:	3508      	adds	r5, #8
 80070fe:	2d0c      	cmp	r5, #12
 8007100:	bf38      	it	cc
 8007102:	250c      	movcc	r5, #12
 8007104:	2d00      	cmp	r5, #0
 8007106:	4606      	mov	r6, r0
 8007108:	db01      	blt.n	800710e <_malloc_r+0x1a>
 800710a:	42a9      	cmp	r1, r5
 800710c:	d903      	bls.n	8007116 <_malloc_r+0x22>
 800710e:	230c      	movs	r3, #12
 8007110:	6033      	str	r3, [r6, #0]
 8007112:	2000      	movs	r0, #0
 8007114:	bd70      	pop	{r4, r5, r6, pc}
 8007116:	f000 f9d4 	bl	80074c2 <__malloc_lock>
 800711a:	4a21      	ldr	r2, [pc, #132]	; (80071a0 <_malloc_r+0xac>)
 800711c:	6814      	ldr	r4, [r2, #0]
 800711e:	4621      	mov	r1, r4
 8007120:	b991      	cbnz	r1, 8007148 <_malloc_r+0x54>
 8007122:	4c20      	ldr	r4, [pc, #128]	; (80071a4 <_malloc_r+0xb0>)
 8007124:	6823      	ldr	r3, [r4, #0]
 8007126:	b91b      	cbnz	r3, 8007130 <_malloc_r+0x3c>
 8007128:	4630      	mov	r0, r6
 800712a:	f000 f98f 	bl	800744c <_sbrk_r>
 800712e:	6020      	str	r0, [r4, #0]
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f000 f98a 	bl	800744c <_sbrk_r>
 8007138:	1c43      	adds	r3, r0, #1
 800713a:	d124      	bne.n	8007186 <_malloc_r+0x92>
 800713c:	230c      	movs	r3, #12
 800713e:	4630      	mov	r0, r6
 8007140:	6033      	str	r3, [r6, #0]
 8007142:	f000 f9bf 	bl	80074c4 <__malloc_unlock>
 8007146:	e7e4      	b.n	8007112 <_malloc_r+0x1e>
 8007148:	680b      	ldr	r3, [r1, #0]
 800714a:	1b5b      	subs	r3, r3, r5
 800714c:	d418      	bmi.n	8007180 <_malloc_r+0x8c>
 800714e:	2b0b      	cmp	r3, #11
 8007150:	d90f      	bls.n	8007172 <_malloc_r+0x7e>
 8007152:	600b      	str	r3, [r1, #0]
 8007154:	18cc      	adds	r4, r1, r3
 8007156:	50cd      	str	r5, [r1, r3]
 8007158:	4630      	mov	r0, r6
 800715a:	f000 f9b3 	bl	80074c4 <__malloc_unlock>
 800715e:	f104 000b 	add.w	r0, r4, #11
 8007162:	1d23      	adds	r3, r4, #4
 8007164:	f020 0007 	bic.w	r0, r0, #7
 8007168:	1ac3      	subs	r3, r0, r3
 800716a:	d0d3      	beq.n	8007114 <_malloc_r+0x20>
 800716c:	425a      	negs	r2, r3
 800716e:	50e2      	str	r2, [r4, r3]
 8007170:	e7d0      	b.n	8007114 <_malloc_r+0x20>
 8007172:	684b      	ldr	r3, [r1, #4]
 8007174:	428c      	cmp	r4, r1
 8007176:	bf16      	itet	ne
 8007178:	6063      	strne	r3, [r4, #4]
 800717a:	6013      	streq	r3, [r2, #0]
 800717c:	460c      	movne	r4, r1
 800717e:	e7eb      	b.n	8007158 <_malloc_r+0x64>
 8007180:	460c      	mov	r4, r1
 8007182:	6849      	ldr	r1, [r1, #4]
 8007184:	e7cc      	b.n	8007120 <_malloc_r+0x2c>
 8007186:	1cc4      	adds	r4, r0, #3
 8007188:	f024 0403 	bic.w	r4, r4, #3
 800718c:	42a0      	cmp	r0, r4
 800718e:	d005      	beq.n	800719c <_malloc_r+0xa8>
 8007190:	1a21      	subs	r1, r4, r0
 8007192:	4630      	mov	r0, r6
 8007194:	f000 f95a 	bl	800744c <_sbrk_r>
 8007198:	3001      	adds	r0, #1
 800719a:	d0cf      	beq.n	800713c <_malloc_r+0x48>
 800719c:	6025      	str	r5, [r4, #0]
 800719e:	e7db      	b.n	8007158 <_malloc_r+0x64>
 80071a0:	20000268 	.word	0x20000268
 80071a4:	2000026c 	.word	0x2000026c

080071a8 <__ssputs_r>:
 80071a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ac:	688e      	ldr	r6, [r1, #8]
 80071ae:	4682      	mov	sl, r0
 80071b0:	429e      	cmp	r6, r3
 80071b2:	460c      	mov	r4, r1
 80071b4:	4690      	mov	r8, r2
 80071b6:	4699      	mov	r9, r3
 80071b8:	d837      	bhi.n	800722a <__ssputs_r+0x82>
 80071ba:	898a      	ldrh	r2, [r1, #12]
 80071bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071c0:	d031      	beq.n	8007226 <__ssputs_r+0x7e>
 80071c2:	2302      	movs	r3, #2
 80071c4:	6825      	ldr	r5, [r4, #0]
 80071c6:	6909      	ldr	r1, [r1, #16]
 80071c8:	1a6f      	subs	r7, r5, r1
 80071ca:	6965      	ldr	r5, [r4, #20]
 80071cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80071d4:	f109 0301 	add.w	r3, r9, #1
 80071d8:	443b      	add	r3, r7
 80071da:	429d      	cmp	r5, r3
 80071dc:	bf38      	it	cc
 80071de:	461d      	movcc	r5, r3
 80071e0:	0553      	lsls	r3, r2, #21
 80071e2:	d530      	bpl.n	8007246 <__ssputs_r+0x9e>
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7ff ff85 	bl	80070f4 <_malloc_r>
 80071ea:	4606      	mov	r6, r0
 80071ec:	b950      	cbnz	r0, 8007204 <__ssputs_r+0x5c>
 80071ee:	230c      	movs	r3, #12
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80071f4:	f8ca 3000 	str.w	r3, [sl]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007204:	463a      	mov	r2, r7
 8007206:	6921      	ldr	r1, [r4, #16]
 8007208:	f7ff fc32 	bl	8006a70 <memcpy>
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	6126      	str	r6, [r4, #16]
 800721a:	443e      	add	r6, r7
 800721c:	6026      	str	r6, [r4, #0]
 800721e:	464e      	mov	r6, r9
 8007220:	6165      	str	r5, [r4, #20]
 8007222:	1bed      	subs	r5, r5, r7
 8007224:	60a5      	str	r5, [r4, #8]
 8007226:	454e      	cmp	r6, r9
 8007228:	d900      	bls.n	800722c <__ssputs_r+0x84>
 800722a:	464e      	mov	r6, r9
 800722c:	4632      	mov	r2, r6
 800722e:	4641      	mov	r1, r8
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	f000 f92d 	bl	8007490 <memmove>
 8007236:	68a3      	ldr	r3, [r4, #8]
 8007238:	2000      	movs	r0, #0
 800723a:	1b9b      	subs	r3, r3, r6
 800723c:	60a3      	str	r3, [r4, #8]
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	441e      	add	r6, r3
 8007242:	6026      	str	r6, [r4, #0]
 8007244:	e7dc      	b.n	8007200 <__ssputs_r+0x58>
 8007246:	462a      	mov	r2, r5
 8007248:	f000 f93d 	bl	80074c6 <_realloc_r>
 800724c:	4606      	mov	r6, r0
 800724e:	2800      	cmp	r0, #0
 8007250:	d1e2      	bne.n	8007218 <__ssputs_r+0x70>
 8007252:	6921      	ldr	r1, [r4, #16]
 8007254:	4650      	mov	r0, sl
 8007256:	f7ff ff01 	bl	800705c <_free_r>
 800725a:	e7c8      	b.n	80071ee <__ssputs_r+0x46>

0800725c <_svfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	461d      	mov	r5, r3
 8007262:	898b      	ldrh	r3, [r1, #12]
 8007264:	b09d      	sub	sp, #116	; 0x74
 8007266:	061f      	lsls	r7, r3, #24
 8007268:	4680      	mov	r8, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4616      	mov	r6, r2
 800726e:	d50f      	bpl.n	8007290 <_svfiprintf_r+0x34>
 8007270:	690b      	ldr	r3, [r1, #16]
 8007272:	b96b      	cbnz	r3, 8007290 <_svfiprintf_r+0x34>
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	f7ff ff3d 	bl	80070f4 <_malloc_r>
 800727a:	6020      	str	r0, [r4, #0]
 800727c:	6120      	str	r0, [r4, #16]
 800727e:	b928      	cbnz	r0, 800728c <_svfiprintf_r+0x30>
 8007280:	230c      	movs	r3, #12
 8007282:	f8c8 3000 	str.w	r3, [r8]
 8007286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800728a:	e0c8      	b.n	800741e <_svfiprintf_r+0x1c2>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	6163      	str	r3, [r4, #20]
 8007290:	2300      	movs	r3, #0
 8007292:	9309      	str	r3, [sp, #36]	; 0x24
 8007294:	2320      	movs	r3, #32
 8007296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800729a:	2330      	movs	r3, #48	; 0x30
 800729c:	f04f 0b01 	mov.w	fp, #1
 80072a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072a4:	9503      	str	r5, [sp, #12]
 80072a6:	4637      	mov	r7, r6
 80072a8:	463d      	mov	r5, r7
 80072aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80072ae:	b10b      	cbz	r3, 80072b4 <_svfiprintf_r+0x58>
 80072b0:	2b25      	cmp	r3, #37	; 0x25
 80072b2:	d13e      	bne.n	8007332 <_svfiprintf_r+0xd6>
 80072b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80072b8:	d00b      	beq.n	80072d2 <_svfiprintf_r+0x76>
 80072ba:	4653      	mov	r3, sl
 80072bc:	4632      	mov	r2, r6
 80072be:	4621      	mov	r1, r4
 80072c0:	4640      	mov	r0, r8
 80072c2:	f7ff ff71 	bl	80071a8 <__ssputs_r>
 80072c6:	3001      	adds	r0, #1
 80072c8:	f000 80a4 	beq.w	8007414 <_svfiprintf_r+0x1b8>
 80072cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ce:	4453      	add	r3, sl
 80072d0:	9309      	str	r3, [sp, #36]	; 0x24
 80072d2:	783b      	ldrb	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f000 809d 	beq.w	8007414 <_svfiprintf_r+0x1b8>
 80072da:	2300      	movs	r3, #0
 80072dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e4:	9304      	str	r3, [sp, #16]
 80072e6:	9307      	str	r3, [sp, #28]
 80072e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ec:	931a      	str	r3, [sp, #104]	; 0x68
 80072ee:	462f      	mov	r7, r5
 80072f0:	2205      	movs	r2, #5
 80072f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80072f6:	4850      	ldr	r0, [pc, #320]	; (8007438 <_svfiprintf_r+0x1dc>)
 80072f8:	f7ff fbac 	bl	8006a54 <memchr>
 80072fc:	9b04      	ldr	r3, [sp, #16]
 80072fe:	b9d0      	cbnz	r0, 8007336 <_svfiprintf_r+0xda>
 8007300:	06d9      	lsls	r1, r3, #27
 8007302:	bf44      	itt	mi
 8007304:	2220      	movmi	r2, #32
 8007306:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800730a:	071a      	lsls	r2, r3, #28
 800730c:	bf44      	itt	mi
 800730e:	222b      	movmi	r2, #43	; 0x2b
 8007310:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007314:	782a      	ldrb	r2, [r5, #0]
 8007316:	2a2a      	cmp	r2, #42	; 0x2a
 8007318:	d015      	beq.n	8007346 <_svfiprintf_r+0xea>
 800731a:	462f      	mov	r7, r5
 800731c:	2000      	movs	r0, #0
 800731e:	250a      	movs	r5, #10
 8007320:	9a07      	ldr	r2, [sp, #28]
 8007322:	4639      	mov	r1, r7
 8007324:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007328:	3b30      	subs	r3, #48	; 0x30
 800732a:	2b09      	cmp	r3, #9
 800732c:	d94d      	bls.n	80073ca <_svfiprintf_r+0x16e>
 800732e:	b1b8      	cbz	r0, 8007360 <_svfiprintf_r+0x104>
 8007330:	e00f      	b.n	8007352 <_svfiprintf_r+0xf6>
 8007332:	462f      	mov	r7, r5
 8007334:	e7b8      	b.n	80072a8 <_svfiprintf_r+0x4c>
 8007336:	4a40      	ldr	r2, [pc, #256]	; (8007438 <_svfiprintf_r+0x1dc>)
 8007338:	463d      	mov	r5, r7
 800733a:	1a80      	subs	r0, r0, r2
 800733c:	fa0b f000 	lsl.w	r0, fp, r0
 8007340:	4318      	orrs	r0, r3
 8007342:	9004      	str	r0, [sp, #16]
 8007344:	e7d3      	b.n	80072ee <_svfiprintf_r+0x92>
 8007346:	9a03      	ldr	r2, [sp, #12]
 8007348:	1d11      	adds	r1, r2, #4
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	9103      	str	r1, [sp, #12]
 800734e:	2a00      	cmp	r2, #0
 8007350:	db01      	blt.n	8007356 <_svfiprintf_r+0xfa>
 8007352:	9207      	str	r2, [sp, #28]
 8007354:	e004      	b.n	8007360 <_svfiprintf_r+0x104>
 8007356:	4252      	negs	r2, r2
 8007358:	f043 0302 	orr.w	r3, r3, #2
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	9304      	str	r3, [sp, #16]
 8007360:	783b      	ldrb	r3, [r7, #0]
 8007362:	2b2e      	cmp	r3, #46	; 0x2e
 8007364:	d10c      	bne.n	8007380 <_svfiprintf_r+0x124>
 8007366:	787b      	ldrb	r3, [r7, #1]
 8007368:	2b2a      	cmp	r3, #42	; 0x2a
 800736a:	d133      	bne.n	80073d4 <_svfiprintf_r+0x178>
 800736c:	9b03      	ldr	r3, [sp, #12]
 800736e:	3702      	adds	r7, #2
 8007370:	1d1a      	adds	r2, r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	9203      	str	r2, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfb8      	it	lt
 800737a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800737e:	9305      	str	r3, [sp, #20]
 8007380:	4d2e      	ldr	r5, [pc, #184]	; (800743c <_svfiprintf_r+0x1e0>)
 8007382:	2203      	movs	r2, #3
 8007384:	7839      	ldrb	r1, [r7, #0]
 8007386:	4628      	mov	r0, r5
 8007388:	f7ff fb64 	bl	8006a54 <memchr>
 800738c:	b138      	cbz	r0, 800739e <_svfiprintf_r+0x142>
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	1b40      	subs	r0, r0, r5
 8007392:	fa03 f000 	lsl.w	r0, r3, r0
 8007396:	9b04      	ldr	r3, [sp, #16]
 8007398:	3701      	adds	r7, #1
 800739a:	4303      	orrs	r3, r0
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	7839      	ldrb	r1, [r7, #0]
 80073a0:	2206      	movs	r2, #6
 80073a2:	4827      	ldr	r0, [pc, #156]	; (8007440 <_svfiprintf_r+0x1e4>)
 80073a4:	1c7e      	adds	r6, r7, #1
 80073a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073aa:	f7ff fb53 	bl	8006a54 <memchr>
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d038      	beq.n	8007424 <_svfiprintf_r+0x1c8>
 80073b2:	4b24      	ldr	r3, [pc, #144]	; (8007444 <_svfiprintf_r+0x1e8>)
 80073b4:	bb13      	cbnz	r3, 80073fc <_svfiprintf_r+0x1a0>
 80073b6:	9b03      	ldr	r3, [sp, #12]
 80073b8:	3307      	adds	r3, #7
 80073ba:	f023 0307 	bic.w	r3, r3, #7
 80073be:	3308      	adds	r3, #8
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c4:	444b      	add	r3, r9
 80073c6:	9309      	str	r3, [sp, #36]	; 0x24
 80073c8:	e76d      	b.n	80072a6 <_svfiprintf_r+0x4a>
 80073ca:	fb05 3202 	mla	r2, r5, r2, r3
 80073ce:	2001      	movs	r0, #1
 80073d0:	460f      	mov	r7, r1
 80073d2:	e7a6      	b.n	8007322 <_svfiprintf_r+0xc6>
 80073d4:	2300      	movs	r3, #0
 80073d6:	250a      	movs	r5, #10
 80073d8:	4619      	mov	r1, r3
 80073da:	3701      	adds	r7, #1
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	4638      	mov	r0, r7
 80073e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e4:	3a30      	subs	r2, #48	; 0x30
 80073e6:	2a09      	cmp	r2, #9
 80073e8:	d903      	bls.n	80073f2 <_svfiprintf_r+0x196>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0c8      	beq.n	8007380 <_svfiprintf_r+0x124>
 80073ee:	9105      	str	r1, [sp, #20]
 80073f0:	e7c6      	b.n	8007380 <_svfiprintf_r+0x124>
 80073f2:	fb05 2101 	mla	r1, r5, r1, r2
 80073f6:	2301      	movs	r3, #1
 80073f8:	4607      	mov	r7, r0
 80073fa:	e7f0      	b.n	80073de <_svfiprintf_r+0x182>
 80073fc:	ab03      	add	r3, sp, #12
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	4622      	mov	r2, r4
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <_svfiprintf_r+0x1ec>)
 8007404:	a904      	add	r1, sp, #16
 8007406:	4640      	mov	r0, r8
 8007408:	f7fe f8ee 	bl	80055e8 <_printf_float>
 800740c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007410:	4681      	mov	r9, r0
 8007412:	d1d6      	bne.n	80073c2 <_svfiprintf_r+0x166>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	065b      	lsls	r3, r3, #25
 8007418:	f53f af35 	bmi.w	8007286 <_svfiprintf_r+0x2a>
 800741c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800741e:	b01d      	add	sp, #116	; 0x74
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	ab03      	add	r3, sp, #12
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4622      	mov	r2, r4
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <_svfiprintf_r+0x1ec>)
 800742c:	a904      	add	r1, sp, #16
 800742e:	4640      	mov	r0, r8
 8007430:	f7fe fb86 	bl	8005b40 <_printf_i>
 8007434:	e7ea      	b.n	800740c <_svfiprintf_r+0x1b0>
 8007436:	bf00      	nop
 8007438:	080079a4 	.word	0x080079a4
 800743c:	080079aa 	.word	0x080079aa
 8007440:	080079ae 	.word	0x080079ae
 8007444:	080055e9 	.word	0x080055e9
 8007448:	080071a9 	.word	0x080071a9

0800744c <_sbrk_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	2300      	movs	r3, #0
 8007450:	4c05      	ldr	r4, [pc, #20]	; (8007468 <_sbrk_r+0x1c>)
 8007452:	4605      	mov	r5, r0
 8007454:	4608      	mov	r0, r1
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	f7fb fa3a 	bl	80028d0 <_sbrk>
 800745c:	1c43      	adds	r3, r0, #1
 800745e:	d102      	bne.n	8007466 <_sbrk_r+0x1a>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	b103      	cbz	r3, 8007466 <_sbrk_r+0x1a>
 8007464:	602b      	str	r3, [r5, #0]
 8007466:	bd38      	pop	{r3, r4, r5, pc}
 8007468:	20000a1c 	.word	0x20000a1c

0800746c <__ascii_mbtowc>:
 800746c:	b082      	sub	sp, #8
 800746e:	b901      	cbnz	r1, 8007472 <__ascii_mbtowc+0x6>
 8007470:	a901      	add	r1, sp, #4
 8007472:	b142      	cbz	r2, 8007486 <__ascii_mbtowc+0x1a>
 8007474:	b14b      	cbz	r3, 800748a <__ascii_mbtowc+0x1e>
 8007476:	7813      	ldrb	r3, [r2, #0]
 8007478:	600b      	str	r3, [r1, #0]
 800747a:	7812      	ldrb	r2, [r2, #0]
 800747c:	1c10      	adds	r0, r2, #0
 800747e:	bf18      	it	ne
 8007480:	2001      	movne	r0, #1
 8007482:	b002      	add	sp, #8
 8007484:	4770      	bx	lr
 8007486:	4610      	mov	r0, r2
 8007488:	e7fb      	b.n	8007482 <__ascii_mbtowc+0x16>
 800748a:	f06f 0001 	mvn.w	r0, #1
 800748e:	e7f8      	b.n	8007482 <__ascii_mbtowc+0x16>

08007490 <memmove>:
 8007490:	4288      	cmp	r0, r1
 8007492:	b510      	push	{r4, lr}
 8007494:	eb01 0302 	add.w	r3, r1, r2
 8007498:	d807      	bhi.n	80074aa <memmove+0x1a>
 800749a:	1e42      	subs	r2, r0, #1
 800749c:	4299      	cmp	r1, r3
 800749e:	d00a      	beq.n	80074b6 <memmove+0x26>
 80074a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80074a8:	e7f8      	b.n	800749c <memmove+0xc>
 80074aa:	4283      	cmp	r3, r0
 80074ac:	d9f5      	bls.n	800749a <memmove+0xa>
 80074ae:	1881      	adds	r1, r0, r2
 80074b0:	1ad2      	subs	r2, r2, r3
 80074b2:	42d3      	cmn	r3, r2
 80074b4:	d100      	bne.n	80074b8 <memmove+0x28>
 80074b6:	bd10      	pop	{r4, pc}
 80074b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80074c0:	e7f7      	b.n	80074b2 <memmove+0x22>

080074c2 <__malloc_lock>:
 80074c2:	4770      	bx	lr

080074c4 <__malloc_unlock>:
 80074c4:	4770      	bx	lr

080074c6 <_realloc_r>:
 80074c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c8:	4607      	mov	r7, r0
 80074ca:	4614      	mov	r4, r2
 80074cc:	460e      	mov	r6, r1
 80074ce:	b921      	cbnz	r1, 80074da <_realloc_r+0x14>
 80074d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80074d4:	4611      	mov	r1, r2
 80074d6:	f7ff be0d 	b.w	80070f4 <_malloc_r>
 80074da:	b922      	cbnz	r2, 80074e6 <_realloc_r+0x20>
 80074dc:	f7ff fdbe 	bl	800705c <_free_r>
 80074e0:	4625      	mov	r5, r4
 80074e2:	4628      	mov	r0, r5
 80074e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e6:	f000 f821 	bl	800752c <_malloc_usable_size_r>
 80074ea:	42a0      	cmp	r0, r4
 80074ec:	d20f      	bcs.n	800750e <_realloc_r+0x48>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7ff fdff 	bl	80070f4 <_malloc_r>
 80074f6:	4605      	mov	r5, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d0f2      	beq.n	80074e2 <_realloc_r+0x1c>
 80074fc:	4631      	mov	r1, r6
 80074fe:	4622      	mov	r2, r4
 8007500:	f7ff fab6 	bl	8006a70 <memcpy>
 8007504:	4631      	mov	r1, r6
 8007506:	4638      	mov	r0, r7
 8007508:	f7ff fda8 	bl	800705c <_free_r>
 800750c:	e7e9      	b.n	80074e2 <_realloc_r+0x1c>
 800750e:	4635      	mov	r5, r6
 8007510:	e7e7      	b.n	80074e2 <_realloc_r+0x1c>

08007512 <__ascii_wctomb>:
 8007512:	b149      	cbz	r1, 8007528 <__ascii_wctomb+0x16>
 8007514:	2aff      	cmp	r2, #255	; 0xff
 8007516:	bf8b      	itete	hi
 8007518:	238a      	movhi	r3, #138	; 0x8a
 800751a:	700a      	strbls	r2, [r1, #0]
 800751c:	6003      	strhi	r3, [r0, #0]
 800751e:	2001      	movls	r0, #1
 8007520:	bf88      	it	hi
 8007522:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007526:	4770      	bx	lr
 8007528:	4608      	mov	r0, r1
 800752a:	4770      	bx	lr

0800752c <_malloc_usable_size_r>:
 800752c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007530:	1f18      	subs	r0, r3, #4
 8007532:	2b00      	cmp	r3, #0
 8007534:	bfbc      	itt	lt
 8007536:	580b      	ldrlt	r3, [r1, r0]
 8007538:	18c0      	addlt	r0, r0, r3
 800753a:	4770      	bx	lr

0800753c <sqrt>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	b08b      	sub	sp, #44	; 0x2c
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
 8007546:	f000 f84d 	bl	80075e4 <__ieee754_sqrt>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <sqrt+0xa0>)
 800754c:	4680      	mov	r8, r0
 800754e:	f993 a000 	ldrsb.w	sl, [r3]
 8007552:	4689      	mov	r9, r1
 8007554:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007558:	d02b      	beq.n	80075b2 <sqrt+0x76>
 800755a:	4622      	mov	r2, r4
 800755c:	462b      	mov	r3, r5
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	f7f9 fa53 	bl	8000a0c <__aeabi_dcmpun>
 8007566:	4683      	mov	fp, r0
 8007568:	bb18      	cbnz	r0, 80075b2 <sqrt+0x76>
 800756a:	2600      	movs	r6, #0
 800756c:	2700      	movs	r7, #0
 800756e:	4632      	mov	r2, r6
 8007570:	463b      	mov	r3, r7
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	f7f9 fa21 	bl	80009bc <__aeabi_dcmplt>
 800757a:	b1d0      	cbz	r0, 80075b2 <sqrt+0x76>
 800757c:	2301      	movs	r3, #1
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4b17      	ldr	r3, [pc, #92]	; (80075e0 <sqrt+0xa4>)
 8007582:	f8cd b020 	str.w	fp, [sp, #32]
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800758c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007590:	f1ba 0f00 	cmp.w	sl, #0
 8007594:	d112      	bne.n	80075bc <sqrt+0x80>
 8007596:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800759a:	4668      	mov	r0, sp
 800759c:	f000 f8ce 	bl	800773c <matherr>
 80075a0:	b1b8      	cbz	r0, 80075d2 <sqrt+0x96>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	b11b      	cbz	r3, 80075ae <sqrt+0x72>
 80075a6:	f7fd ff5b 	bl	8005460 <__errno>
 80075aa:	9b08      	ldr	r3, [sp, #32]
 80075ac:	6003      	str	r3, [r0, #0]
 80075ae:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80075b2:	4640      	mov	r0, r8
 80075b4:	4649      	mov	r1, r9
 80075b6:	b00b      	add	sp, #44	; 0x2c
 80075b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075bc:	4632      	mov	r2, r6
 80075be:	463b      	mov	r3, r7
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f7f9 f8b2 	bl	800072c <__aeabi_ddiv>
 80075c8:	f1ba 0f02 	cmp.w	sl, #2
 80075cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075d0:	d1e3      	bne.n	800759a <sqrt+0x5e>
 80075d2:	f7fd ff45 	bl	8005460 <__errno>
 80075d6:	2321      	movs	r3, #33	; 0x21
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	e7e2      	b.n	80075a2 <sqrt+0x66>
 80075dc:	200001f0 	.word	0x200001f0
 80075e0:	08007ac0 	.word	0x08007ac0

080075e4 <__ieee754_sqrt>:
 80075e4:	4b54      	ldr	r3, [pc, #336]	; (8007738 <__ieee754_sqrt+0x154>)
 80075e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ea:	438b      	bics	r3, r1
 80075ec:	4606      	mov	r6, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	460a      	mov	r2, r1
 80075f2:	460c      	mov	r4, r1
 80075f4:	d10f      	bne.n	8007616 <__ieee754_sqrt+0x32>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	f7f8 ff6d 	bl	80004d8 <__aeabi_dmul>
 80075fe:	4602      	mov	r2, r0
 8007600:	460b      	mov	r3, r1
 8007602:	4630      	mov	r0, r6
 8007604:	4629      	mov	r1, r5
 8007606:	f7f8 fdb1 	bl	800016c <__adddf3>
 800760a:	4606      	mov	r6, r0
 800760c:	460d      	mov	r5, r1
 800760e:	4630      	mov	r0, r6
 8007610:	4629      	mov	r1, r5
 8007612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007616:	2900      	cmp	r1, #0
 8007618:	4607      	mov	r7, r0
 800761a:	4603      	mov	r3, r0
 800761c:	dc0e      	bgt.n	800763c <__ieee754_sqrt+0x58>
 800761e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007622:	ea5c 0707 	orrs.w	r7, ip, r7
 8007626:	d0f2      	beq.n	800760e <__ieee754_sqrt+0x2a>
 8007628:	b141      	cbz	r1, 800763c <__ieee754_sqrt+0x58>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	f7f8 fd9b 	bl	8000168 <__aeabi_dsub>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	f7f9 f879 	bl	800072c <__aeabi_ddiv>
 800763a:	e7e6      	b.n	800760a <__ieee754_sqrt+0x26>
 800763c:	1512      	asrs	r2, r2, #20
 800763e:	d074      	beq.n	800772a <__ieee754_sqrt+0x146>
 8007640:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007644:	07d5      	lsls	r5, r2, #31
 8007646:	f04f 0500 	mov.w	r5, #0
 800764a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800764e:	bf48      	it	mi
 8007650:	0fd9      	lsrmi	r1, r3, #31
 8007652:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8007656:	bf44      	itt	mi
 8007658:	005b      	lslmi	r3, r3, #1
 800765a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800765e:	1051      	asrs	r1, r2, #1
 8007660:	0fda      	lsrs	r2, r3, #31
 8007662:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8007666:	4628      	mov	r0, r5
 8007668:	2216      	movs	r2, #22
 800766a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	1987      	adds	r7, r0, r6
 8007672:	42a7      	cmp	r7, r4
 8007674:	bfde      	ittt	le
 8007676:	19b8      	addle	r0, r7, r6
 8007678:	1be4      	suble	r4, r4, r7
 800767a:	19ad      	addle	r5, r5, r6
 800767c:	0fdf      	lsrs	r7, r3, #31
 800767e:	3a01      	subs	r2, #1
 8007680:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8007684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800768c:	d1f0      	bne.n	8007670 <__ieee754_sqrt+0x8c>
 800768e:	f04f 0c20 	mov.w	ip, #32
 8007692:	4696      	mov	lr, r2
 8007694:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007698:	4284      	cmp	r4, r0
 800769a:	eb06 070e 	add.w	r7, r6, lr
 800769e:	dc02      	bgt.n	80076a6 <__ieee754_sqrt+0xc2>
 80076a0:	d112      	bne.n	80076c8 <__ieee754_sqrt+0xe4>
 80076a2:	429f      	cmp	r7, r3
 80076a4:	d810      	bhi.n	80076c8 <__ieee754_sqrt+0xe4>
 80076a6:	2f00      	cmp	r7, #0
 80076a8:	eb07 0e06 	add.w	lr, r7, r6
 80076ac:	da42      	bge.n	8007734 <__ieee754_sqrt+0x150>
 80076ae:	f1be 0f00 	cmp.w	lr, #0
 80076b2:	db3f      	blt.n	8007734 <__ieee754_sqrt+0x150>
 80076b4:	f100 0801 	add.w	r8, r0, #1
 80076b8:	1a24      	subs	r4, r4, r0
 80076ba:	4640      	mov	r0, r8
 80076bc:	429f      	cmp	r7, r3
 80076be:	bf88      	it	hi
 80076c0:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 80076c4:	1bdb      	subs	r3, r3, r7
 80076c6:	4432      	add	r2, r6
 80076c8:	0064      	lsls	r4, r4, #1
 80076ca:	f1bc 0c01 	subs.w	ip, ip, #1
 80076ce:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 80076d2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80076d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80076da:	d1dd      	bne.n	8007698 <__ieee754_sqrt+0xb4>
 80076dc:	4323      	orrs	r3, r4
 80076de:	d006      	beq.n	80076ee <__ieee754_sqrt+0x10a>
 80076e0:	1c54      	adds	r4, r2, #1
 80076e2:	bf0b      	itete	eq
 80076e4:	4662      	moveq	r2, ip
 80076e6:	3201      	addne	r2, #1
 80076e8:	3501      	addeq	r5, #1
 80076ea:	f022 0201 	bicne.w	r2, r2, #1
 80076ee:	106b      	asrs	r3, r5, #1
 80076f0:	0852      	lsrs	r2, r2, #1
 80076f2:	07e8      	lsls	r0, r5, #31
 80076f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80076f8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80076fc:	bf48      	it	mi
 80076fe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8007702:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8007706:	4616      	mov	r6, r2
 8007708:	e781      	b.n	800760e <__ieee754_sqrt+0x2a>
 800770a:	0adc      	lsrs	r4, r3, #11
 800770c:	3915      	subs	r1, #21
 800770e:	055b      	lsls	r3, r3, #21
 8007710:	2c00      	cmp	r4, #0
 8007712:	d0fa      	beq.n	800770a <__ieee754_sqrt+0x126>
 8007714:	02e6      	lsls	r6, r4, #11
 8007716:	d50a      	bpl.n	800772e <__ieee754_sqrt+0x14a>
 8007718:	f1c2 0020 	rsb	r0, r2, #32
 800771c:	fa23 f000 	lsr.w	r0, r3, r0
 8007720:	1e55      	subs	r5, r2, #1
 8007722:	4093      	lsls	r3, r2
 8007724:	4304      	orrs	r4, r0
 8007726:	1b4a      	subs	r2, r1, r5
 8007728:	e78a      	b.n	8007640 <__ieee754_sqrt+0x5c>
 800772a:	4611      	mov	r1, r2
 800772c:	e7f0      	b.n	8007710 <__ieee754_sqrt+0x12c>
 800772e:	0064      	lsls	r4, r4, #1
 8007730:	3201      	adds	r2, #1
 8007732:	e7ef      	b.n	8007714 <__ieee754_sqrt+0x130>
 8007734:	4680      	mov	r8, r0
 8007736:	e7bf      	b.n	80076b8 <__ieee754_sqrt+0xd4>
 8007738:	7ff00000 	.word	0x7ff00000

0800773c <matherr>:
 800773c:	2000      	movs	r0, #0
 800773e:	4770      	bx	lr

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
